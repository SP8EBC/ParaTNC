   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"KissCommunication.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.updcrc_ccitt,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	updcrc_ccitt:
  25              	.LFB350:
  26              		.file 1 "../system/include/aprs/crc.h"
   1:../system/include/aprs/crc.h **** #ifndef CRC_H_
   2:../system/include/aprs/crc.h **** #define CRC_H_
   3:../system/include/aprs/crc.h **** 
   4:../system/include/aprs/crc.h **** #include <stdint.h>
   5:../system/include/aprs/crc.h **** 
   6:../system/include/aprs/crc.h **** #include <macros.h>
   7:../system/include/aprs/crc.h **** 
   8:../system/include/aprs/crc.h **** extern const uint16_t crc_ccitt_tab[256];
   9:../system/include/aprs/crc.h **** #ifdef __cplusplus
  10:../system/include/aprs/crc.h **** extern "C"
  11:../system/include/aprs/crc.h **** {
  12:../system/include/aprs/crc.h **** #endif
  13:../system/include/aprs/crc.h **** /**************************************************************************************************
  14:../system/include/aprs/crc.h **** static uint16_t updcrc_ccitt(uint8_t c, uint16_t oldcrc) {
  27              		.loc 1 14 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  15:../system/include/aprs/crc.h **** /**************************************************************************************************
  16:../system/include/aprs/crc.h **** 
  17:../system/include/aprs/crc.h **** 	return (oldcrc >> 8) ^ pgm_read16(&crc_ccitt_tab[(oldcrc ^ c) & 0xff]);
  33              		.loc 1 17 0
  34 0000 4840     		eors	r0, r0, r1
  35              	.LVL1:
  36 0002 C0B2     		uxtb	r0, r0
  37 0004 024B     		ldr	r3, .L2
  38 0006 33F81000 		ldrh	r0, [r3, r0, lsl #1]
  18:../system/include/aprs/crc.h **** }
  39              		.loc 1 18 0
  40 000a 80EA1120 		eor	r0, r0, r1, lsr #8
  41 000e 7047     		bx	lr
  42              	.L3:
  43              		.align	2
  44              	.L2:
  45 0010 00000000 		.word	crc_ccitt_tab
  46              		.cfi_endproc
  47              	.LFE350:
  49              		.section	.text.SendKISSToHost,"ax",%progbits
  50              		.align	1
  51              		.global	SendKISSToHost
  52              		.syntax unified
  53              		.thumb
  54              		.thumb_func
  55              		.fpu fpv4-sp-d16
  57              	SendKISSToHost:
  58              	.LFB351:
  59              		.file 2 "../src/KissCommunication.c"
   1:../src/KissCommunication.c **** /*
   2:../src/KissCommunication.c ****  * KissCommunication.c
   3:../src/KissCommunication.c ****  *
   4:../src/KissCommunication.c ****  *  Created on: 29.04.2017
   5:../src/KissCommunication.c ****  *      Author: mateusz
   6:../src/KissCommunication.c ****  */
   7:../src/KissCommunication.c **** 
   8:../src/KissCommunication.c **** #include "KissCommunication.h"
   9:../src/KissCommunication.c **** //#include "main.h"
  10:../src/KissCommunication.c **** 
  11:../src/KissCommunication.c **** #include "drivers/serial.h"
  12:../src/KissCommunication.c **** 
  13:../src/KissCommunication.c **** #include "diag/Trace.h"
  14:../src/KissCommunication.c **** #include "station_config.h"
  15:../src/KissCommunication.c **** #include "TimerConfig.h"
  16:../src/KissCommunication.c **** 
  17:../src/KissCommunication.c **** #include <crc.h>
  18:../src/KissCommunication.c **** 
  19:../src/KissCommunication.c **** #include <string.h>
  20:../src/KissCommunication.c **** 
  21:../src/KissCommunication.c **** extern unsigned short tx10m;
  22:../src/KissCommunication.c **** 
  23:../src/KissCommunication.c **** 
  24:../src/KissCommunication.c **** uint8_t kiss_buffer[KISS_BUFFER_LN];
  25:../src/KissCommunication.c **** 
  26:../src/KissCommunication.c **** int32_t SendKISSToHost(uint8_t* input_frame, uint16_t input_frame_len, uint8_t* output, uint16_t ou
  60              		.loc 2 26 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              		@ link register save eliminated.
  65              	.LVL2:
  27:../src/KissCommunication.c **** 	#define FEND	(uint8_t)0xC0
  28:../src/KissCommunication.c **** 	#define FESC	(uint8_t)0xDB
  29:../src/KissCommunication.c **** 	#define TFEND	(uint8_t)0xDC
  30:../src/KissCommunication.c **** 	#define TFESC	(uint8_t)0xDD
  31:../src/KissCommunication.c **** 	short int i /* Zmienna do poruszania siê po frame */, j /* zmienna do poruszani siê po data*/;
  32:../src/KissCommunication.c **** 
  33:../src/KissCommunication.c **** 	if (input_frame_len >= output_len)
  66              		.loc 2 33 0
  67 0000 9942     		cmp	r1, r3
  68 0002 2BD2     		bcs	.L11
  26:../src/KissCommunication.c **** 	#define FEND	(uint8_t)0xC0
  69              		.loc 2 26 0
  70 0004 F0B4     		push	{r4, r5, r6, r7}
  71              		.cfi_def_cfa_offset 16
  72              		.cfi_offset 4, -16
  73              		.cfi_offset 5, -12
  74              		.cfi_offset 6, -8
  75              		.cfi_offset 7, -4
  76              	.LVL3:
  34:../src/KissCommunication.c **** 		return KISS_TOO_LONG_FRM;
  35:../src/KissCommunication.c **** 
  36:../src/KissCommunication.c **** 	uint8_t* data;
  37:../src/KissCommunication.c **** 	data = output;
  38:../src/KissCommunication.c **** 
  39:../src/KissCommunication.c **** 	data[0] = FEND;
  77              		.loc 2 39 0
  78 0006 C024     		movs	r4, #192
  79 0008 1470     		strb	r4, [r2]
  40:../src/KissCommunication.c **** 	data[1] = 0x00;
  80              		.loc 2 40 0
  81 000a 0025     		movs	r5, #0
  82 000c 5570     		strb	r5, [r2, #1]
  83              	.LVL4:
  41:../src/KissCommunication.c **** //	KissFrm.data[2] = HDLC_FLAG;
  42:../src/KissCommunication.c **** 	for (j = 2, i = 0; i < input_frame_len; j++, i++) {
  84              		.loc 2 42 0
  85 000e 0224     		movs	r4, #2
  86 0010 07E0     		b	.L6
  87              	.LVL5:
  88              	.L7:
  43:../src/KissCommunication.c **** 
  44:../src/KissCommunication.c **** 		// if we reach the maximu size of an output buffer
  45:../src/KissCommunication.c **** 		if (j >= output_len)
  46:../src/KissCommunication.c **** 			return KISS_TOO_LONG_FRM;
  47:../src/KissCommunication.c **** 
  48:../src/KissCommunication.c **** 		if (*(input_frame+i) != FEND && *(input_frame+i) != FESC)
  49:../src/KissCommunication.c **** 			data[j] = input_frame[i];
  50:../src/KissCommunication.c **** 		else if (*(input_frame+i) == FEND) {
  89              		.loc 2 50 0
  90 0012 C02E     		cmp	r6, #192
  91 0014 10D0     		beq	.L17
  51:../src/KissCommunication.c **** 			data[j] = FESC;
  52:../src/KissCommunication.c **** 			*(data + (j++)) = TFEND;
  53:../src/KissCommunication.c **** 		}
  54:../src/KissCommunication.c **** 		else if(*(input_frame+i) == FESC) {
  92              		.loc 2 54 0
  93 0016 DB2E     		cmp	r6, #219
  94 0018 14D0     		beq	.L18
  95              	.L8:
  42:../src/KissCommunication.c **** 
  96              		.loc 2 42 0 discriminator 2
  97 001a 0134     		adds	r4, r4, #1
  98              	.LVL6:
  99 001c 24B2     		sxth	r4, r4
 100              	.LVL7:
 101 001e 0135     		adds	r5, r5, #1
 102              	.LVL8:
 103 0020 2DB2     		sxth	r5, r5
 104              	.LVL9:
 105              	.L6:
  42:../src/KissCommunication.c **** 
 106              		.loc 2 42 0 is_stmt 0 discriminator 1
 107 0022 8D42     		cmp	r5, r1
 108 0024 14DA     		bge	.L19
  45:../src/KissCommunication.c **** 			return KISS_TOO_LONG_FRM;
 109              		.loc 2 45 0 is_stmt 1
 110 0026 9C42     		cmp	r4, r3
 111 0028 1BDA     		bge	.L12
  48:../src/KissCommunication.c **** 			data[j] = input_frame[i];
 112              		.loc 2 48 0
 113 002a 465D     		ldrb	r6, [r0, r5]	@ zero_extendqisi2
 114 002c C02E     		cmp	r6, #192
 115 002e F0D0     		beq	.L7
  48:../src/KissCommunication.c **** 			data[j] = input_frame[i];
 116              		.loc 2 48 0 is_stmt 0 discriminator 1
 117 0030 DB2E     		cmp	r6, #219
 118 0032 EED0     		beq	.L7
  49:../src/KissCommunication.c **** 		else if (*(input_frame+i) == FEND) {
 119              		.loc 2 49 0 is_stmt 1
 120 0034 1655     		strb	r6, [r2, r4]
 121 0036 F0E7     		b	.L8
 122              	.L17:
  51:../src/KissCommunication.c **** 			*(data + (j++)) = TFEND;
 123              		.loc 2 51 0
 124 0038 1619     		adds	r6, r2, r4
  52:../src/KissCommunication.c **** 		}
 125              		.loc 2 52 0
 126 003a 0134     		adds	r4, r4, #1
 127              	.LVL10:
 128 003c 24B2     		sxth	r4, r4
 129              	.LVL11:
 130 003e DC27     		movs	r7, #220
 131 0040 3770     		strb	r7, [r6]
 132 0042 EAE7     		b	.L8
 133              	.L18:
  55:../src/KissCommunication.c **** 			data[j] = FESC;
 134              		.loc 2 55 0
 135 0044 1619     		adds	r6, r2, r4
  56:../src/KissCommunication.c **** 			*(data + (j++)) = TFESC;
 136              		.loc 2 56 0
 137 0046 0134     		adds	r4, r4, #1
 138              	.LVL12:
 139 0048 24B2     		sxth	r4, r4
 140              	.LVL13:
 141 004a DD27     		movs	r7, #221
 142 004c 3770     		strb	r7, [r6]
 143 004e E4E7     		b	.L8
 144              	.L19:
  57:../src/KissCommunication.c **** 		}
  58:../src/KissCommunication.c **** 		else {
  59:../src/KissCommunication.c **** 
  60:../src/KissCommunication.c **** 		}
  61:../src/KissCommunication.c **** 	}
  62:../src/KissCommunication.c **** //	*(KissFrm.data + (j++)) = HDLC_FLAG;
  63:../src/KissCommunication.c **** 	*(data + (j++)) = FEND;
 145              		.loc 2 63 0
 146 0050 601C     		adds	r0, r4, #1
 147              	.LVL14:
 148 0052 C023     		movs	r3, #192
 149              	.LVL15:
 150 0054 1355     		strb	r3, [r2, r4]
  64:../src/KissCommunication.c **** 	return j;
 151              		.loc 2 64 0
 152 0056 00B2     		sxth	r0, r0
 153              	.LVL16:
 154              	.L4:
  65:../src/KissCommunication.c **** }
 155              		.loc 2 65 0
 156 0058 F0BC     		pop	{r4, r5, r6, r7}
 157              		.cfi_restore 7
 158              		.cfi_restore 6
 159              		.cfi_restore 5
 160              		.cfi_restore 4
 161              		.cfi_def_cfa_offset 0
 162              	.LVL17:
 163 005a 7047     		bx	lr
 164              	.LVL18:
 165              	.L11:
  34:../src/KissCommunication.c **** 
 166              		.loc 2 34 0
 167 005c 4FF0FF30 		mov	r0, #-1
 168              	.LVL19:
 169              		.loc 2 65 0
 170 0060 7047     		bx	lr
 171              	.LVL20:
 172              	.L12:
 173              		.cfi_def_cfa_offset 16
 174              		.cfi_offset 4, -16
 175              		.cfi_offset 5, -12
 176              		.cfi_offset 6, -8
 177              		.cfi_offset 7, -4
  46:../src/KissCommunication.c **** 
 178              		.loc 2 46 0
 179 0062 4FF0FF30 		mov	r0, #-1
 180              	.LVL21:
 181 0066 F7E7     		b	.L4
 182              		.cfi_endproc
 183              	.LFE351:
 185              		.section	.text.ParseReceivedKISS,"ax",%progbits
 186              		.align	1
 187              		.global	ParseReceivedKISS
 188              		.syntax unified
 189              		.thumb
 190              		.thumb_func
 191              		.fpu fpv4-sp-d16
 193              	ParseReceivedKISS:
 194              	.LFB352:
  66:../src/KissCommunication.c **** 
  67:../src/KissCommunication.c **** short ParseReceivedKISS(uint8_t* input_frame_from_host, uint16_t input_len, AX25Ctx* ax25, Afsk* a)
 195              		.loc 2 67 0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199              	.LVL22:
  68:../src/KissCommunication.c **** 	int i/* zmienna do poruszania sie po buforze odbiorczym usart */;
  69:../src/KissCommunication.c **** 	int j/* zmienna do poruszania sie po lokalnej tablicy do przepisywania*/;
  70:../src/KissCommunication.c **** //	uint8_t FrameBuff[100];
  71:../src/KissCommunication.c **** 
  72:../src/KissCommunication.c **** 	uint8_t *FrameBuff = kiss_buffer;
  73:../src/KissCommunication.c **** 
  74:../src/KissCommunication.c **** 	// check if frame from host is not too long
  75:../src/KissCommunication.c **** 	if (input_len >= KISS_BUFFER_LN)
 200              		.loc 2 75 0
 201 0000 B1F5967F 		cmp	r1, #300
 202 0004 3AD2     		bcs	.L30
  67:../src/KissCommunication.c **** 	int i/* zmienna do poruszania sie po buforze odbiorczym usart */;
 203              		.loc 2 67 0
 204 0006 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 205              		.cfi_def_cfa_offset 24
 206              		.cfi_offset 3, -24
 207              		.cfi_offset 4, -20
 208              		.cfi_offset 5, -16
 209              		.cfi_offset 6, -12
 210              		.cfi_offset 7, -8
 211              		.cfi_offset 14, -4
  76:../src/KissCommunication.c **** 		return 1;
  77:../src/KissCommunication.c **** 
  78:../src/KissCommunication.c **** 	if (*(input_frame_from_host) != FEND)
 212              		.loc 2 78 0
 213 0008 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 214 000a C02C     		cmp	r4, #192
 215 000c 01D0     		beq	.L37
  79:../src/KissCommunication.c **** 		return 1;
 216              		.loc 2 79 0
 217 000e 0120     		movs	r0, #1
 218              	.LVL23:
 219              	.L21:
  80:../src/KissCommunication.c **** 	if (*(input_frame_from_host+1) != 0x00)
  81:../src/KissCommunication.c **** 		return 1;
  82:../src/KissCommunication.c **** 	for (i=2, j=0; (i<input_len && *(input_frame_from_host+i) != FEND); i++, j++) {
  83:../src/KissCommunication.c **** 		if (*(input_frame_from_host+i) == FESC) {
  84:../src/KissCommunication.c **** 			if(*(input_frame_from_host+i+1) == TFEND)
  85:../src/KissCommunication.c **** 				FrameBuff[j]=FEND;
  86:../src/KissCommunication.c **** 			else if(*(input_frame_from_host+i+1) == TFESC)
  87:../src/KissCommunication.c **** 				FrameBuff[j]=FESC;
  88:../src/KissCommunication.c **** 			else {
  89:../src/KissCommunication.c **** 				;
  90:../src/KissCommunication.c **** 			}
  91:../src/KissCommunication.c **** 			i++;
  92:../src/KissCommunication.c **** 		}
  93:../src/KissCommunication.c **** 		else
  94:../src/KissCommunication.c **** 			FrameBuff[j] = *(input_frame_from_host+i);
  95:../src/KissCommunication.c **** 	}
  96:../src/KissCommunication.c **** #ifdef _DBG_TRACE
  97:../src/KissCommunication.c **** 	trace_printf("KISS-FromHost:Ln=%d;Content=%s\r\n", j, FrameBuff);
  98:../src/KissCommunication.c **** #endif
  99:../src/KissCommunication.c **** 	tx10m++;
 100:../src/KissCommunication.c **** 
 101:../src/KissCommunication.c **** 	// keep this commented until reseting the DCD variable will be moved outside main for (;;) loop
 102:../src/KissCommunication.c **** 	//	while(ax25->dcd == true);
 103:../src/KissCommunication.c **** 	while(a->sending == true);
 104:../src/KissCommunication.c **** 
 105:../src/KissCommunication.c **** 
 106:../src/KissCommunication.c **** 	ax25_sendRaw(ax25,FrameBuff,j);
 107:../src/KissCommunication.c ****  	afsk_txStart(a);
 108:../src/KissCommunication.c **** 	return 0;
 109:../src/KissCommunication.c **** }
 220              		.loc 2 109 0
 221 0010 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 222              	.LVL24:
 223              	.L37:
  80:../src/KissCommunication.c **** 	if (*(input_frame_from_host+1) != 0x00)
 224              		.loc 2 80 0
 225 0012 4478     		ldrb	r4, [r0, #1]	@ zero_extendqisi2
 226 0014 002C     		cmp	r4, #0
 227 0016 33D1     		bne	.L32
  82:../src/KissCommunication.c **** 		if (*(input_frame_from_host+i) == FESC) {
 228              		.loc 2 82 0
 229 0018 0026     		movs	r6, #0
 230 001a 0224     		movs	r4, #2
 231 001c 08E0     		b	.L22
 232              	.LVL25:
 233              	.L40:
  84:../src/KissCommunication.c **** 				FrameBuff[j]=FEND;
 234              		.loc 2 84 0
 235 001e 0137     		adds	r7, r7, #1
 236 0020 C55D     		ldrb	r5, [r0, r7]	@ zero_extendqisi2
 237 0022 DC2D     		cmp	r5, #220
 238 0024 0FD0     		beq	.L38
  86:../src/KissCommunication.c **** 				FrameBuff[j]=FESC;
 239              		.loc 2 86 0
 240 0026 DD2D     		cmp	r5, #221
 241 0028 11D0     		beq	.L39
 242              	.L25:
  91:../src/KissCommunication.c **** 		}
 243              		.loc 2 91 0
 244 002a 0134     		adds	r4, r4, #1
 245              	.LVL26:
 246              	.L26:
  82:../src/KissCommunication.c **** 		if (*(input_frame_from_host+i) == FESC) {
 247              		.loc 2 82 0 discriminator 2
 248 002c 0134     		adds	r4, r4, #1
 249              	.LVL27:
 250 002e 0136     		adds	r6, r6, #1
 251              	.LVL28:
 252              	.L22:
  82:../src/KissCommunication.c **** 		if (*(input_frame_from_host+i) == FESC) {
 253              		.loc 2 82 0 is_stmt 0 discriminator 1
 254 0030 A142     		cmp	r1, r4
 255 0032 10DD     		ble	.L27
  82:../src/KissCommunication.c **** 		if (*(input_frame_from_host+i) == FESC) {
 256              		.loc 2 82 0 discriminator 3
 257 0034 2746     		mov	r7, r4
 258 0036 055D     		ldrb	r5, [r0, r4]	@ zero_extendqisi2
 259 0038 C02D     		cmp	r5, #192
 260 003a 0CD0     		beq	.L27
  83:../src/KissCommunication.c **** 			if(*(input_frame_from_host+i+1) == TFEND)
 261              		.loc 2 83 0 is_stmt 1
 262 003c DB2D     		cmp	r5, #219
 263 003e EED0     		beq	.L40
  94:../src/KissCommunication.c **** 	}
 264              		.loc 2 94 0
 265 0040 104F     		ldr	r7, .L41
 266 0042 F555     		strb	r5, [r6, r7]
 267 0044 F2E7     		b	.L26
 268              	.L38:
  85:../src/KissCommunication.c **** 			else if(*(input_frame_from_host+i+1) == TFESC)
 269              		.loc 2 85 0
 270 0046 0F4D     		ldr	r5, .L41
 271 0048 C027     		movs	r7, #192
 272 004a 7755     		strb	r7, [r6, r5]
 273 004c EDE7     		b	.L25
 274              	.L39:
  87:../src/KissCommunication.c **** 			else {
 275              		.loc 2 87 0
 276 004e 0D4D     		ldr	r5, .L41
 277 0050 DB27     		movs	r7, #219
 278 0052 7755     		strb	r7, [r6, r5]
 279 0054 E9E7     		b	.L25
 280              	.L27:
  99:../src/KissCommunication.c **** 
 281              		.loc 2 99 0
 282 0056 0C48     		ldr	r0, .L41+4
 283              	.LVL29:
 284 0058 0188     		ldrh	r1, [r0]
 285              	.LVL30:
 286 005a 0131     		adds	r1, r1, #1
 287 005c 0180     		strh	r1, [r0]	@ movhi
 288              	.L29:
 103:../src/KissCommunication.c **** 
 289              		.loc 2 103 0 discriminator 1
 290 005e 93F83014 		ldrb	r1, [r3, #1072]	@ zero_extendqisi2
 291 0062 0029     		cmp	r1, #0
 292 0064 FBD1     		bne	.L29
 293 0066 1C46     		mov	r4, r3
 294              	.LVL31:
 295 0068 1046     		mov	r0, r2
 106:../src/KissCommunication.c ****  	afsk_txStart(a);
 296              		.loc 2 106 0
 297 006a B2B2     		uxth	r2, r6
 298              	.LVL32:
 299 006c 0549     		ldr	r1, .L41
 300 006e FFF7FEFF 		bl	ax25_sendRaw
 301              	.LVL33:
 107:../src/KissCommunication.c **** 	return 0;
 302              		.loc 2 107 0
 303 0072 2046     		mov	r0, r4
 304 0074 FFF7FEFF 		bl	afsk_txStart
 305              	.LVL34:
 108:../src/KissCommunication.c **** }
 306              		.loc 2 108 0
 307 0078 0020     		movs	r0, #0
 308 007a C9E7     		b	.L21
 309              	.LVL35:
 310              	.L30:
 311              		.cfi_def_cfa_offset 0
 312              		.cfi_restore 3
 313              		.cfi_restore 4
 314              		.cfi_restore 5
 315              		.cfi_restore 6
 316              		.cfi_restore 7
 317              		.cfi_restore 14
  76:../src/KissCommunication.c **** 
 318              		.loc 2 76 0
 319 007c 0120     		movs	r0, #1
 320              	.LVL36:
 321              		.loc 2 109 0
 322 007e 7047     		bx	lr
 323              	.LVL37:
 324              	.L32:
 325              		.cfi_def_cfa_offset 24
 326              		.cfi_offset 3, -24
 327              		.cfi_offset 4, -20
 328              		.cfi_offset 5, -16
 329              		.cfi_offset 6, -12
 330              		.cfi_offset 7, -8
 331              		.cfi_offset 14, -4
  81:../src/KissCommunication.c **** 	for (i=2, j=0; (i<input_len && *(input_frame_from_host+i) != FEND); i++, j++) {
 332              		.loc 2 81 0
 333 0080 0120     		movs	r0, #1
 334              	.LVL38:
 335 0082 C5E7     		b	.L21
 336              	.L42:
 337              		.align	2
 338              	.L41:
 339 0084 00000000 		.word	kiss_buffer
 340 0088 00000000 		.word	tx10m
 341              		.cfi_endproc
 342              	.LFE352:
 344              		.section	.text.kiss_reset_buffer,"ax",%progbits
 345              		.align	1
 346              		.global	kiss_reset_buffer
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 350              		.fpu fpv4-sp-d16
 352              	kiss_reset_buffer:
 353              	.LFB353:
 110:../src/KissCommunication.c **** 
 111:../src/KissCommunication.c **** void kiss_reset_buffer(uint8_t* output, uint16_t output_len, uint16_t* current_len) {
 354              		.loc 2 111 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358              	.LVL39:
 359 0000 38B5     		push	{r3, r4, r5, lr}
 360              		.cfi_def_cfa_offset 16
 361              		.cfi_offset 3, -16
 362              		.cfi_offset 4, -12
 363              		.cfi_offset 5, -8
 364              		.cfi_offset 14, -4
 365 0002 0446     		mov	r4, r0
 366 0004 1546     		mov	r5, r2
 112:../src/KissCommunication.c **** 	memset(output, 0x00, sizeof(output_len));
 367              		.loc 2 112 0
 368 0006 0222     		movs	r2, #2
 369              	.LVL40:
 370 0008 0021     		movs	r1, #0
 371              	.LVL41:
 372 000a FFF7FEFF 		bl	memset
 373              	.LVL42:
 113:../src/KissCommunication.c **** 
 114:../src/KissCommunication.c **** 	output[0] = FEND;
 374              		.loc 2 114 0
 375 000e C023     		movs	r3, #192
 376 0010 2370     		strb	r3, [r4]
 115:../src/KissCommunication.c **** 	output[1] = 0x00;
 377              		.loc 2 115 0
 378 0012 0023     		movs	r3, #0
 379 0014 6370     		strb	r3, [r4, #1]
 116:../src/KissCommunication.c **** 
 117:../src/KissCommunication.c **** 	*current_len = 2;
 380              		.loc 2 117 0
 381 0016 0223     		movs	r3, #2
 382 0018 2B80     		strh	r3, [r5]	@ movhi
 118:../src/KissCommunication.c **** }
 383              		.loc 2 118 0
 384 001a 38BD     		pop	{r3, r4, r5, pc}
 385              		.cfi_endproc
 386              	.LFE353:
 388              		.section	.text.kiss_put_char_nocheck,"ax",%progbits
 389              		.align	1
 390              		.global	kiss_put_char_nocheck
 391              		.syntax unified
 392              		.thumb
 393              		.thumb_func
 394              		.fpu fpv4-sp-d16
 396              	kiss_put_char_nocheck:
 397              	.LFB355:
 119:../src/KissCommunication.c **** 
 120:../src/KissCommunication.c **** uint8_t kiss_put_char(uint8_t c, uint8_t* output, uint16_t output_len, uint16_t* current_len, uint1
 121:../src/KissCommunication.c **** 
 122:../src/KissCommunication.c **** 	uint16_t new_crc = 0;
 123:../src/KissCommunication.c **** 	uint16_t curr_ln = *current_len;
 124:../src/KissCommunication.c **** 
 125:../src/KissCommunication.c **** 	if (*current_len >= output_len) {
 126:../src/KissCommunication.c **** 		return 1;
 127:../src/KissCommunication.c **** 	}
 128:../src/KissCommunication.c **** 
 129:../src/KissCommunication.c **** 	if (c == HDLC_FLAG || c == HDLC_RESET || c == AX25_ESC)
 130:../src/KissCommunication.c **** 	{
 131:../src/KissCommunication.c **** 		kiss_put_char_nocheck(AX25_ESC, output, output_len, current_len, crc);
 132:../src/KissCommunication.c **** 	}
 133:../src/KissCommunication.c **** 
 134:../src/KissCommunication.c **** 	if (c == FEND)
 135:../src/KissCommunication.c **** 	{
 136:../src/KissCommunication.c **** 		kiss_put_char_nocheck(FESC, output, output_len, current_len, crc);
 137:../src/KissCommunication.c **** 		kiss_put_char_nocheck(TFEND, output, output_len, current_len, crc);
 138:../src/KissCommunication.c **** 	}
 139:../src/KissCommunication.c **** 
 140:../src/KissCommunication.c **** 	else if (c == FESC)
 141:../src/KissCommunication.c **** 	{
 142:../src/KissCommunication.c **** 		kiss_put_char_nocheck(FESC, output, output_len, current_len, crc);
 143:../src/KissCommunication.c **** 		kiss_put_char_nocheck(TFESC, output, output_len, current_len, crc);
 144:../src/KissCommunication.c **** 	}
 145:../src/KissCommunication.c **** 
 146:../src/KissCommunication.c **** 	else {
 147:../src/KissCommunication.c **** 		output[curr_ln++] = c;
 148:../src/KissCommunication.c **** 	}
 149:../src/KissCommunication.c **** 
 150:../src/KissCommunication.c **** 	if (crc == NULL) {
 151:../src/KissCommunication.c **** 		;
 152:../src/KissCommunication.c **** 	}
 153:../src/KissCommunication.c **** 	else {
 154:../src/KissCommunication.c **** 		new_crc = updcrc_ccitt(c, *crc);
 155:../src/KissCommunication.c **** 
 156:../src/KissCommunication.c **** 		*crc = new_crc;
 157:../src/KissCommunication.c **** 	}
 158:../src/KissCommunication.c **** 
 159:../src/KissCommunication.c **** 	*current_len = curr_ln;
 160:../src/KissCommunication.c **** 
 161:../src/KissCommunication.c **** 	return 0;
 162:../src/KissCommunication.c **** }
 163:../src/KissCommunication.c **** 
 164:../src/KissCommunication.c **** uint8_t kiss_put_char_nocheck(uint8_t c, uint8_t* output, uint16_t output_len, uint16_t* current_le
 398              		.loc 2 164 0
 399              		.cfi_startproc
 400              		@ args = 4, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              	.LVL43:
 403 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 404              		.cfi_def_cfa_offset 24
 405              		.cfi_offset 3, -24
 406              		.cfi_offset 4, -20
 407              		.cfi_offset 5, -16
 408              		.cfi_offset 6, -12
 409              		.cfi_offset 7, -8
 410              		.cfi_offset 14, -4
 411 0002 069D     		ldr	r5, [sp, #24]
 412              	.LVL44:
 165:../src/KissCommunication.c **** 	uint16_t new_crc = 0;
 166:../src/KissCommunication.c **** 	uint16_t curr_ln = *current_len;
 413              		.loc 2 166 0
 414 0004 1C88     		ldrh	r4, [r3]
 415              	.LVL45:
 167:../src/KissCommunication.c **** 
 168:../src/KissCommunication.c **** 	if (*current_len >= output_len) {
 416              		.loc 2 168 0
 417 0006 9442     		cmp	r4, r2
 418 0008 0BD2     		bcs	.L48
 419 000a 1E46     		mov	r6, r3
 169:../src/KissCommunication.c **** 		return 1;
 170:../src/KissCommunication.c **** 	}
 171:../src/KissCommunication.c **** 
 172:../src/KissCommunication.c **** 	output[curr_ln++] = c;
 420              		.loc 2 172 0
 421 000c 671C     		adds	r7, r4, #1
 422 000e BFB2     		uxth	r7, r7
 423              	.LVL46:
 424 0010 0855     		strb	r0, [r1, r4]
 173:../src/KissCommunication.c **** 
 174:../src/KissCommunication.c **** 	if (crc == NULL) {
 425              		.loc 2 174 0
 426 0012 1DB1     		cbz	r5, .L47
 175:../src/KissCommunication.c **** 		;
 176:../src/KissCommunication.c **** 	}
 177:../src/KissCommunication.c **** 	else {
 178:../src/KissCommunication.c **** 		new_crc = updcrc_ccitt(c, *crc);
 427              		.loc 2 178 0
 428 0014 2988     		ldrh	r1, [r5]
 429              	.LVL47:
 430 0016 FFF7FEFF 		bl	updcrc_ccitt
 431              	.LVL48:
 179:../src/KissCommunication.c **** 
 180:../src/KissCommunication.c **** 		*crc = new_crc;
 432              		.loc 2 180 0
 433 001a 2880     		strh	r0, [r5]	@ movhi
 434              	.LVL49:
 435              	.L47:
 181:../src/KissCommunication.c **** 	}
 182:../src/KissCommunication.c **** 
 183:../src/KissCommunication.c **** 	*current_len = curr_ln;
 436              		.loc 2 183 0
 437 001c 3780     		strh	r7, [r6]	@ movhi
 184:../src/KissCommunication.c **** 
 185:../src/KissCommunication.c **** 	return 0;
 438              		.loc 2 185 0
 439 001e 0020     		movs	r0, #0
 440              	.LVL50:
 441              	.L46:
 186:../src/KissCommunication.c **** }
 442              		.loc 2 186 0
 443 0020 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 444              	.LVL51:
 445              	.L48:
 169:../src/KissCommunication.c **** 	}
 446              		.loc 2 169 0
 447 0022 0120     		movs	r0, #1
 448              	.LVL52:
 449 0024 FCE7     		b	.L46
 450              		.cfi_endproc
 451              	.LFE355:
 453              		.section	.text.kiss_put_char,"ax",%progbits
 454              		.align	1
 455              		.global	kiss_put_char
 456              		.syntax unified
 457              		.thumb
 458              		.thumb_func
 459              		.fpu fpv4-sp-d16
 461              	kiss_put_char:
 462              	.LFB354:
 120:../src/KissCommunication.c **** 
 463              		.loc 2 120 0
 464              		.cfi_startproc
 465              		@ args = 4, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467              	.LVL53:
 468 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 469              		.cfi_def_cfa_offset 28
 470              		.cfi_offset 4, -28
 471              		.cfi_offset 5, -24
 472              		.cfi_offset 6, -20
 473              		.cfi_offset 7, -16
 474              		.cfi_offset 8, -12
 475              		.cfi_offset 9, -8
 476              		.cfi_offset 14, -4
 477 0004 83B0     		sub	sp, sp, #12
 478              		.cfi_def_cfa_offset 40
 479 0006 DDF82880 		ldr	r8, [sp, #40]
 480              	.LVL54:
 123:../src/KissCommunication.c **** 
 481              		.loc 2 123 0
 482 000a B3F80090 		ldrh	r9, [r3]
 483              	.LVL55:
 125:../src/KissCommunication.c **** 		return 1;
 484              		.loc 2 125 0
 485 000e 9145     		cmp	r9, r2
 486 0010 4FD2     		bcs	.L58
 487 0012 1F46     		mov	r7, r3
 488 0014 1546     		mov	r5, r2
 489 0016 0E46     		mov	r6, r1
 490 0018 0446     		mov	r4, r0
 129:../src/KissCommunication.c **** 	{
 491              		.loc 2 129 0
 492 001a A0F17E03 		sub	r3, r0, #126
 493              	.LVL56:
 494 001e DBB2     		uxtb	r3, r3
 495 0020 012B     		cmp	r3, #1
 496 0022 19D9     		bls	.L52
 129:../src/KissCommunication.c **** 	{
 497              		.loc 2 129 0 is_stmt 0 discriminator 1
 498 0024 1B28     		cmp	r0, #27
 499 0026 17D0     		beq	.L52
 500              	.LVL57:
 501              	.L53:
 134:../src/KissCommunication.c **** 	{
 502              		.loc 2 134 0 is_stmt 1
 503 0028 C02C     		cmp	r4, #192
 504 002a 1ED0     		beq	.L60
 140:../src/KissCommunication.c **** 	{
 505              		.loc 2 140 0
 506 002c DB2C     		cmp	r4, #219
 507 002e 2ED0     		beq	.L61
 147:../src/KissCommunication.c **** 	}
 508              		.loc 2 147 0
 509 0030 09F10105 		add	r5, r9, #1
 510 0034 ADB2     		uxth	r5, r5
 511              	.LVL58:
 512 0036 06F80940 		strb	r4, [r6, r9]
 513              	.LVL59:
 514              	.L55:
 150:../src/KissCommunication.c **** 		;
 515              		.loc 2 150 0
 516 003a B8F1000F 		cmp	r8, #0
 517 003e 06D0     		beq	.L57
 154:../src/KissCommunication.c **** 
 518              		.loc 2 154 0
 519 0040 B8F80010 		ldrh	r1, [r8]
 520 0044 2046     		mov	r0, r4
 521 0046 FFF7FEFF 		bl	updcrc_ccitt
 522              	.LVL60:
 156:../src/KissCommunication.c **** 	}
 523              		.loc 2 156 0
 524 004a A8F80000 		strh	r0, [r8]	@ movhi
 525              	.LVL61:
 526              	.L57:
 159:../src/KissCommunication.c **** 
 527              		.loc 2 159 0
 528 004e 3D80     		strh	r5, [r7]	@ movhi
 161:../src/KissCommunication.c **** }
 529              		.loc 2 161 0
 530 0050 0020     		movs	r0, #0
 531              	.LVL62:
 532              	.L51:
 162:../src/KissCommunication.c **** 
 533              		.loc 2 162 0
 534 0052 03B0     		add	sp, sp, #12
 535              		.cfi_remember_state
 536              		.cfi_def_cfa_offset 28
 537              		@ sp needed
 538 0054 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 539              	.LVL63:
 540              	.L52:
 541              		.cfi_restore_state
 131:../src/KissCommunication.c **** 	}
 542              		.loc 2 131 0
 543 0058 CDF80080 		str	r8, [sp]
 544 005c 3B46     		mov	r3, r7
 545 005e 2A46     		mov	r2, r5
 546              	.LVL64:
 547 0060 3146     		mov	r1, r6
 548              	.LVL65:
 549 0062 1B20     		movs	r0, #27
 550              	.LVL66:
 551 0064 FFF7FEFF 		bl	kiss_put_char_nocheck
 552              	.LVL67:
 553 0068 DEE7     		b	.L53
 554              	.L60:
 136:../src/KissCommunication.c **** 		kiss_put_char_nocheck(TFEND, output, output_len, current_len, crc);
 555              		.loc 2 136 0
 556 006a CDF80080 		str	r8, [sp]
 557 006e 3B46     		mov	r3, r7
 558 0070 2A46     		mov	r2, r5
 559 0072 3146     		mov	r1, r6
 560 0074 DB20     		movs	r0, #219
 561 0076 FFF7FEFF 		bl	kiss_put_char_nocheck
 562              	.LVL68:
 137:../src/KissCommunication.c **** 	}
 563              		.loc 2 137 0
 564 007a CDF80080 		str	r8, [sp]
 565 007e 3B46     		mov	r3, r7
 566 0080 2A46     		mov	r2, r5
 567 0082 3146     		mov	r1, r6
 568 0084 DC20     		movs	r0, #220
 569 0086 FFF7FEFF 		bl	kiss_put_char_nocheck
 570              	.LVL69:
 123:../src/KissCommunication.c **** 
 571              		.loc 2 123 0
 572 008a 4D46     		mov	r5, r9
 573 008c D5E7     		b	.L55
 574              	.L61:
 142:../src/KissCommunication.c **** 		kiss_put_char_nocheck(TFESC, output, output_len, current_len, crc);
 575              		.loc 2 142 0
 576 008e CDF80080 		str	r8, [sp]
 577 0092 3B46     		mov	r3, r7
 578 0094 2A46     		mov	r2, r5
 579 0096 3146     		mov	r1, r6
 580 0098 DB20     		movs	r0, #219
 581 009a FFF7FEFF 		bl	kiss_put_char_nocheck
 582              	.LVL70:
 143:../src/KissCommunication.c **** 	}
 583              		.loc 2 143 0
 584 009e CDF80080 		str	r8, [sp]
 585 00a2 3B46     		mov	r3, r7
 586 00a4 2A46     		mov	r2, r5
 587 00a6 3146     		mov	r1, r6
 588 00a8 DD20     		movs	r0, #221
 589 00aa FFF7FEFF 		bl	kiss_put_char_nocheck
 590              	.LVL71:
 123:../src/KissCommunication.c **** 
 591              		.loc 2 123 0
 592 00ae 4D46     		mov	r5, r9
 593 00b0 C3E7     		b	.L55
 594              	.LVL72:
 595              	.L58:
 126:../src/KissCommunication.c **** 	}
 596              		.loc 2 126 0
 597 00b2 0120     		movs	r0, #1
 598              	.LVL73:
 599 00b4 CDE7     		b	.L51
 600              		.cfi_endproc
 601              	.LFE354:
 603              		.section	.text.kiss_put_call,"ax",%progbits
 604              		.align	1
 605              		.global	kiss_put_call
 606              		.syntax unified
 607              		.thumb
 608              		.thumb_func
 609              		.fpu fpv4-sp-d16
 611              	kiss_put_call:
 612              	.LFB356:
 187:../src/KissCommunication.c **** 
 188:../src/KissCommunication.c **** void kiss_put_call(const AX25Call *addr, uint8_t is_last, uint8_t* output, uint16_t output_len, uin
 613              		.loc 2 188 0
 614              		.cfi_startproc
 615              		@ args = 8, pretend = 0, frame = 0
 616              		@ frame_needed = 0, uses_anonymous_args = 0
 617              	.LVL74:
 618 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 619              		.cfi_def_cfa_offset 32
 620              		.cfi_offset 4, -32
 621              		.cfi_offset 5, -28
 622              		.cfi_offset 6, -24
 623              		.cfi_offset 7, -20
 624              		.cfi_offset 8, -16
 625              		.cfi_offset 9, -12
 626              		.cfi_offset 10, -8
 627              		.cfi_offset 14, -4
 628 0004 82B0     		sub	sp, sp, #8
 629              		.cfi_def_cfa_offset 40
 630 0006 8146     		mov	r9, r0
 631 0008 8A46     		mov	r10, r1
 632 000a 9046     		mov	r8, r2
 633 000c 1F46     		mov	r7, r3
 634 000e 0B9E     		ldr	r6, [sp, #44]
 189:../src/KissCommunication.c **** 
 190:../src/KissCommunication.c **** 	uint16_t i;
 191:../src/KissCommunication.c **** 	uint8_t ssid;
 192:../src/KissCommunication.c **** 	uint16_t len = MIN(sizeof(addr->call), strlen(addr->call));
 635              		.loc 2 192 0
 636 0010 FFF7FEFF 		bl	strlen
 637              	.LVL75:
 638 0014 0628     		cmp	r0, #6
 639 0016 02D9     		bls	.L72
 640 0018 0625     		movs	r5, #6
 641              	.L63:
 642              	.LVL76:
 193:../src/KissCommunication.c **** 
 194:../src/KissCommunication.c **** 
 195:../src/KissCommunication.c **** 	for (i = 0; i < len; i++)
 643              		.loc 2 195 0 discriminator 4
 644 001a 0024     		movs	r4, #0
 645 001c 12E0     		b	.L64
 646              	.LVL77:
 647              	.L72:
 192:../src/KissCommunication.c **** 
 648              		.loc 2 192 0 discriminator 1
 649 001e 4846     		mov	r0, r9
 650 0020 FFF7FEFF 		bl	strlen
 651              	.LVL78:
 652 0024 85B2     		uxth	r5, r0
 653 0026 F8E7     		b	.L63
 654              	.LVL79:
 655              	.L65:
 656              	.LBB2:
 196:../src/KissCommunication.c **** 	{
 197:../src/KissCommunication.c **** 		uint8_t c = addr->call[i];
 657              		.loc 2 197 0 discriminator 3
 658 0028 19F90400 		ldrsb	r0, [r9, r4]
 659 002c C0B2     		uxtb	r0, r0
 660              	.LVL80:
 198:../src/KissCommunication.c **** 		kiss_put_char(c << 1, output, output_len, current_len, crc);
 661              		.loc 2 198 0 discriminator 3
 662 002e 4000     		lsls	r0, r0, #1
 663              	.LVL81:
 664 0030 0096     		str	r6, [sp]
 665              	.LVL82:
 666 0032 0A9B     		ldr	r3, [sp, #40]
 667 0034 3A46     		mov	r2, r7
 668 0036 4146     		mov	r1, r8
 669 0038 00F0FE00 		and	r0, r0, #254
 670 003c FFF7FEFF 		bl	kiss_put_char
 671              	.LVL83:
 672              	.LBE2:
 195:../src/KissCommunication.c **** 	{
 673              		.loc 2 195 0 discriminator 3
 674 0040 0134     		adds	r4, r4, #1
 675              	.LVL84:
 676 0042 A4B2     		uxth	r4, r4
 677              	.LVL85:
 678              	.L64:
 195:../src/KissCommunication.c **** 	{
 679              		.loc 2 195 0 is_stmt 0 discriminator 1
 680 0044 AC42     		cmp	r4, r5
 681 0046 EFD3     		bcc	.L65
 199:../src/KissCommunication.c **** 	}
 200:../src/KissCommunication.c **** 
 201:../src/KissCommunication.c **** 	if (len < sizeof(addr->call))
 682              		.loc 2 201 0 is_stmt 1
 683 0048 052D     		cmp	r5, #5
 684 004a 0ED8     		bhi	.L67
 202:../src/KissCommunication.c **** 	{
 203:../src/KissCommunication.c **** 		for (i = 0; i < sizeof(addr->call) - len; i++)
 685              		.loc 2 203 0
 686 004c 0024     		movs	r4, #0
 687              	.LVL86:
 688 004e 08E0     		b	.L66
 689              	.LVL87:
 690              	.L68:
 204:../src/KissCommunication.c **** 		{
 205:../src/KissCommunication.c **** 			kiss_put_char(' ' << 1, output, output_len, current_len, crc);
 691              		.loc 2 205 0 discriminator 3
 692 0050 0096     		str	r6, [sp]
 693 0052 0A9B     		ldr	r3, [sp, #40]
 694 0054 3A46     		mov	r2, r7
 695 0056 4146     		mov	r1, r8
 696 0058 4020     		movs	r0, #64
 697 005a FFF7FEFF 		bl	kiss_put_char
 698              	.LVL88:
 203:../src/KissCommunication.c **** 		{
 699              		.loc 2 203 0 discriminator 3
 700 005e 0134     		adds	r4, r4, #1
 701              	.LVL89:
 702 0060 A4B2     		uxth	r4, r4
 703              	.LVL90:
 704              	.L66:
 203:../src/KissCommunication.c **** 		{
 705              		.loc 2 203 0 is_stmt 0 discriminator 1
 706 0062 C5F10603 		rsb	r3, r5, #6
 707 0066 9C42     		cmp	r4, r3
 708 0068 F2D3     		bcc	.L68
 709              	.L67:
 206:../src/KissCommunication.c **** 		}
 207:../src/KissCommunication.c **** 	}
 208:../src/KissCommunication.c **** 
 209:../src/KissCommunication.c **** 	ssid = 0x60 | (addr->ssid << 1) | (is_last ? 0x01 : 0);
 710              		.loc 2 209 0 is_stmt 1
 711 006a 99F80600 		ldrb	r0, [r9, #6]	@ zero_extendqisi2
 712 006e 4000     		lsls	r0, r0, #1
 713 0070 40F06000 		orr	r0, r0, #96
 714 0074 40B2     		sxtb	r0, r0
 715 0076 BAF1000F 		cmp	r10, #0
 716 007a 18BF     		it	ne
 717 007c 40F00100 		orrne	r0, r0, #1
 718              	.LVL91:
 210:../src/KissCommunication.c **** 	kiss_put_char(ssid, output, output_len, current_len, crc);
 719              		.loc 2 210 0
 720 0080 0096     		str	r6, [sp]
 721 0082 0A9B     		ldr	r3, [sp, #40]
 722 0084 3A46     		mov	r2, r7
 723 0086 4146     		mov	r1, r8
 724 0088 C0B2     		uxtb	r0, r0
 725 008a FFF7FEFF 		bl	kiss_put_char
 726              	.LVL92:
 211:../src/KissCommunication.c **** 
 212:../src/KissCommunication.c **** }
 727              		.loc 2 212 0
 728 008e 02B0     		add	sp, sp, #8
 729              		.cfi_def_cfa_offset 32
 730              		@ sp needed
 731 0090 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 732              		.cfi_endproc
 733              	.LFE356:
 735              		.section	.text.kiss_finalize_buffer,"ax",%progbits
 736              		.align	1
 737              		.global	kiss_finalize_buffer
 738              		.syntax unified
 739              		.thumb
 740              		.thumb_func
 741              		.fpu fpv4-sp-d16
 743              	kiss_finalize_buffer:
 744              	.LFB357:
 213:../src/KissCommunication.c **** 
 214:../src/KissCommunication.c **** void kiss_finalize_buffer(uint8_t* output, uint16_t output_len, uint16_t* current_len) {
 745              		.loc 2 214 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749              		@ link register save eliminated.
 750              	.LVL93:
 215:../src/KissCommunication.c **** 
 216:../src/KissCommunication.c **** 	uint16_t ln = *current_len;
 751              		.loc 2 216 0
 752 0000 1388     		ldrh	r3, [r2]
 753              	.LVL94:
 217:../src/KissCommunication.c **** 
 218:../src/KissCommunication.c **** 	if (*current_len >= output_len) {
 754              		.loc 2 218 0
 755 0002 8B42     		cmp	r3, r1
 756 0004 07D2     		bcs	.L76
 214:../src/KissCommunication.c **** 
 757              		.loc 2 214 0
 758 0006 10B4     		push	{r4}
 759              		.cfi_def_cfa_offset 4
 760              		.cfi_offset 4, -4
 219:../src/KissCommunication.c **** 		return;
 220:../src/KissCommunication.c **** 	}
 221:../src/KissCommunication.c **** 
 222:../src/KissCommunication.c **** 	output[ln++] = FEND;
 761              		.loc 2 222 0
 762 0008 591C     		adds	r1, r3, #1
 763              	.LVL95:
 764 000a C024     		movs	r4, #192
 765 000c C454     		strb	r4, [r0, r3]
 223:../src/KissCommunication.c **** 
 224:../src/KissCommunication.c **** 	*current_len = ln;
 766              		.loc 2 224 0
 767 000e 1180     		strh	r1, [r2]	@ movhi
 225:../src/KissCommunication.c **** }
 768              		.loc 2 225 0
 769 0010 5DF8044B 		ldr	r4, [sp], #4
 770              		.cfi_restore 4
 771              		.cfi_def_cfa_offset 0
 772 0014 7047     		bx	lr
 773              	.LVL96:
 774              	.L76:
 775 0016 7047     		bx	lr
 776              		.cfi_endproc
 777              	.LFE357:
 779              		.section	.text.kiss_get_buff_ptr,"ax",%progbits
 780              		.align	1
 781              		.global	kiss_get_buff_ptr
 782              		.syntax unified
 783              		.thumb
 784              		.thumb_func
 785              		.fpu fpv4-sp-d16
 787              	kiss_get_buff_ptr:
 788              	.LFB358:
 226:../src/KissCommunication.c **** 
 227:../src/KissCommunication.c **** uint8_t* kiss_get_buff_ptr(void) {
 789              		.loc 2 227 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 0
 792              		@ frame_needed = 0, uses_anonymous_args = 0
 793              		@ link register save eliminated.
 228:../src/KissCommunication.c **** 	return kiss_buffer;
 229:../src/KissCommunication.c **** }
 794              		.loc 2 229 0
 795 0000 0048     		ldr	r0, .L80
 796 0002 7047     		bx	lr
 797              	.L81:
 798              		.align	2
 799              	.L80:
 800 0004 00000000 		.word	kiss_buffer
 801              		.cfi_endproc
 802              	.LFE358:
 804              		.comm	kiss_buffer,300,4
 805              		.text
 806              	.Letext0:
 807              		.file 3 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 808              		.file 4 "../system/include/aprs/cfifo.h"
 809              		.file 5 "../system/include/aprs/afsk.h"
 810              		.file 6 "../system/include/aprs/ax25.h"
 811              		.file 7 "../system/include/cmsis/stm32l4xx/core_cm4.h"
 812              		.file 8 "../system/include/cmsis/stm32l4xx/device/system_stm32l4xx.h"
 813              		.file 9 "../system/include/drivers/serial.h"
 814              		.file 10 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 815              		.file 11 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 816              		.file 12 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/st
 817              		.file 13 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/unistd.h"
 818              		.file 14 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 819              		.file 15 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 KissCommunication.c
     /tmp/ccwioUU6.s:18     .text.updcrc_ccitt:0000000000000000 $t
     /tmp/ccwioUU6.s:24     .text.updcrc_ccitt:0000000000000000 updcrc_ccitt
     /tmp/ccwioUU6.s:45     .text.updcrc_ccitt:0000000000000010 $d
     /tmp/ccwioUU6.s:50     .text.SendKISSToHost:0000000000000000 $t
     /tmp/ccwioUU6.s:57     .text.SendKISSToHost:0000000000000000 SendKISSToHost
     /tmp/ccwioUU6.s:186    .text.ParseReceivedKISS:0000000000000000 $t
     /tmp/ccwioUU6.s:193    .text.ParseReceivedKISS:0000000000000000 ParseReceivedKISS
     /tmp/ccwioUU6.s:339    .text.ParseReceivedKISS:0000000000000084 $d
                            *COM*:000000000000012c kiss_buffer
     /tmp/ccwioUU6.s:345    .text.kiss_reset_buffer:0000000000000000 $t
     /tmp/ccwioUU6.s:352    .text.kiss_reset_buffer:0000000000000000 kiss_reset_buffer
     /tmp/ccwioUU6.s:389    .text.kiss_put_char_nocheck:0000000000000000 $t
     /tmp/ccwioUU6.s:396    .text.kiss_put_char_nocheck:0000000000000000 kiss_put_char_nocheck
     /tmp/ccwioUU6.s:454    .text.kiss_put_char:0000000000000000 $t
     /tmp/ccwioUU6.s:461    .text.kiss_put_char:0000000000000000 kiss_put_char
     /tmp/ccwioUU6.s:604    .text.kiss_put_call:0000000000000000 $t
     /tmp/ccwioUU6.s:611    .text.kiss_put_call:0000000000000000 kiss_put_call
     /tmp/ccwioUU6.s:736    .text.kiss_finalize_buffer:0000000000000000 $t
     /tmp/ccwioUU6.s:743    .text.kiss_finalize_buffer:0000000000000000 kiss_finalize_buffer
     /tmp/ccwioUU6.s:780    .text.kiss_get_buff_ptr:0000000000000000 $t
     /tmp/ccwioUU6.s:787    .text.kiss_get_buff_ptr:0000000000000000 kiss_get_buff_ptr
     /tmp/ccwioUU6.s:800    .text.kiss_get_buff_ptr:0000000000000004 $d
                           .group:0000000000000000 wm4.0.95bc707da9dcffdc6c8c58936cbc8421
                           .group:0000000000000000 wm4.config.h.2.b965ce3e758b9658e1093b983de98cf3
                           .group:0000000000000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:0000000000000000 wm4.config.h.27.09664e95de8752841e0abdfac4357408
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.macros.h.2.7a7a5ac48d4160b7481c806e80b68442
                           .group:0000000000000000 wm4.afsk.h.17.cf8f922069680e152e1eddb76cd4cc82
                           .group:0000000000000000 wm4.ax25.h.18.077e42a4af9016476e34900472a8fe18
                           .group:0000000000000000 wm4.KissCommunication.h.17.f1e76db053f07badac1040f3bea74fb3
                           .group:0000000000000000 wm4.stm32l4xx.h.39.54a1fe1e096c7852edd649652f013a11
                           .group:0000000000000000 wm4.stm32l471xx.h.35.e78ad65c513105dda311dc495ac74d04
                           .group:0000000000000000 wm4.cmsis_version.h.32.46e8eccfa2cfeaae11d008bb2823a3ed
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.b6144e50d34fc998dd4c2cfb6387cf91
                           .group:0000000000000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:0000000000000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:0000000000000000 wm4.stm32l471xx.h.423.ceac761476affad641a3347d7727acfd
                           .group:0000000000000000 wm4.stm32l4xx.h.197.fb1c68184133668ca24c44c29ba4361f
                           .group:0000000000000000 wm4.stm32l4xx_ll_usart.h.22.ec2beebcd146668c5b35749264d7b58a
                           .group:0000000000000000 wm4.serial.h.14.eed7cf013c382ed4598746b40f0e2523
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.newlib.h.18.5e5ca3429233af402d406a202f1fc1ac
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.unistd.h.9.2709ac388e61c5728907bf928c890ff7
                           .group:0000000000000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:0000000000000000 wm4.stddef.h.137.87f4223e19f53e7620a07a017dcd2e0a
                           .group:0000000000000000 wm4.cdefs.h.47.7eec48e1bc15e3b0aff1089c232f5a9c
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4.stddef.h.39.79ae3d254e9e71fbd4877f77aa50f4ea
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:0000000000000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:0000000000000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:0000000000000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:0000000000000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:0000000000000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:0000000000000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:0000000000000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:0000000000000000 wm4.unistd.h.170.da6e816043042c61475c2b1f58468b37
                           .group:0000000000000000 wm4.station_config.h.9.d547169434a316afe56104ac612d2109
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e

UNDEFINED SYMBOLS
crc_ccitt_tab
ax25_sendRaw
afsk_txStart
tx10m
memset
strlen
