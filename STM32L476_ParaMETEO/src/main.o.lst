   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.message_callback,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	message_callback:
  25              	.LFB629:
  26              		.file 1 "../src/main.c"
   1:../src/main.c **** #include "station_config_target_hw.h"
   2:../src/main.c **** 
   3:../src/main.c **** #ifdef STM32F10X_MD_VL
   4:../src/main.c **** #include <stm32f10x_rcc.h>
   5:../src/main.c **** #include <stm32f10x_iwdg.h>
   6:../src/main.c **** #include <stm32f10x.h>
   7:../src/main.c **** #include <drivers/f1/gpio_conf_stm32f1x.h>
   8:../src/main.c **** #endif
   9:../src/main.c **** 
  10:../src/main.c **** #ifdef STM32L471xx
  11:../src/main.c **** #include <stm32l4xx_hal_cortex.h>
  12:../src/main.c **** #include <stm32l4xx.h>
  13:../src/main.c **** #include <stm32l4xx_ll_iwdg.h>
  14:../src/main.c **** #include <stm32l4xx_ll_rcc.h>
  15:../src/main.c **** #include <stm32l4xx_ll_gpio.h>
  16:../src/main.c **** #include "cmsis/stm32l4xx/system_stm32l4xx.h"
  17:../src/main.c **** #endif
  18:../src/main.c **** 
  19:../src/main.c **** #include <delay.h>
  20:../src/main.c **** #include <LedConfig.h>
  21:../src/main.c **** #include <stdio.h>
  22:../src/main.c **** #include <stdlib.h>
  23:../src/main.c **** #include <string.h>
  24:../src/main.c **** 
  25:../src/main.c **** #include "main.h"
  26:../src/main.c **** #include "packet_tx_handler.h"
  27:../src/main.c **** 
  28:../src/main.c **** #include "station_config.h"
  29:../src/main.c **** #include "config_data_externs.h"
  30:../src/main.c **** #include "configuration_handler.h"
  31:../src/main.c **** 
  32:../src/main.c **** #include "diag/Trace.h"
  33:../src/main.c **** #include "antilib_adc.h"
  34:../src/main.c **** #include "afsk_pr.h"
  35:../src/main.c **** #include "TimerConfig.h"
  36:../src/main.c **** #include "PathConfig.h"
  37:../src/main.c **** #include "LedConfig.h"
  38:../src/main.c **** #include "io.h"
  39:../src/main.c **** #include "float_to_string.h"
  40:../src/main.c **** #include "pwr_save.h"
  41:../src/main.c **** #include "pwr_switch.h"
  42:../src/main.c **** 
  43:../src/main.c **** #include "it_handlers.h"
  44:../src/main.c **** 
  45:../src/main.c **** #include "aprs/digi.h"
  46:../src/main.c **** #include "aprs/telemetry.h"
  47:../src/main.c **** #include "aprs/dac.h"
  48:../src/main.c **** #include "aprs/beacon.h"
  49:../src/main.c **** 
  50:../src/main.c **** #include "ve_direct_protocol/parser.h"
  51:../src/main.c **** 
  52:../src/main.c **** #include "rte_wx.h"
  53:../src/main.c **** #include "rte_pv.h"
  54:../src/main.c **** #include "rte_main.h"
  55:../src/main.c **** #include "rte_rtu.h"
  56:../src/main.c **** 
  57:../src/main.c **** #include <wx_handler.h>
  58:../src/main.c **** #include "drivers/dallas.h"
  59:../src/main.c **** #include "drivers/i2c.h"
  60:../src/main.c **** #include "drivers/analog_anemometer.h"
  61:../src/main.c **** #include "aprs/wx.h"
  62:../src/main.c **** 
  63:../src/main.c **** #include "../system/include/modbus_rtu/rtu_serial_io.h"
  64:../src/main.c **** 
  65:../src/main.c **** #include "../system/include/davis_vantage/davis.h"
  66:../src/main.c **** #include "../system/include/davis_vantage/davis_parsers.h"
  67:../src/main.c **** 
  68:../src/main.c **** #include "drivers/ms5611.h"
  69:../src/main.c **** #include <drivers/bme280.h>
  70:../src/main.c **** 
  71:../src/main.c **** #include "umb_master/umb_master.h"
  72:../src/main.c **** #include "umb_master/umb_channel_pool.h"
  73:../src/main.c **** #include "umb_master/umb_0x26_status.h"
  74:../src/main.c **** 
  75:../src/main.c **** #include "drivers/dallas.h"
  76:../src/main.c **** 
  77:../src/main.c **** #include "KissCommunication.h"
  78:../src/main.c **** 
  79:../src/main.c **** #define SOH 0x01
  80:../src/main.c **** 
  81:../src/main.c **** 
  82:../src/main.c **** //#define SERIAL_TX_TEST_MODE
  83:../src/main.c **** 
  84:../src/main.c **** // Niebieska dioda -> DCD
  85:../src/main.c **** // Zielona dioda -> anemometr albo TX
  86:../src/main.c **** 
  87:../src/main.c **** // backup registers (ParaTNC)
  88:../src/main.c **** // 0 ->
  89:../src/main.c **** // 2 -> boot and hard fault count
  90:../src/main.c **** // 3 -> controller configuration status
  91:../src/main.c **** // 4 ->
  92:../src/main.c **** // 5 ->
  93:../src/main.c **** // 6 ->
  94:../src/main.c **** 
  95:../src/main.c **** // backup registers (ParaMETEO)
  96:../src/main.c **** // 0 -> powersave status
  97:../src/main.c **** // 3 -> controller configuration status
  98:../src/main.c **** 
  99:../src/main.c **** 
 100:../src/main.c **** #define CONFIG_FIRST_RESTORED 			(1)
 101:../src/main.c **** #define CONFIG_FIRST_FAIL_RESTORING	  	(1 << 1)
 102:../src/main.c **** #define CONFIG_FIRST_CRC_OK				(1 << 2)
 103:../src/main.c **** 
 104:../src/main.c **** #define CONFIG_SECOND_RESTORED 				(1 << 3)
 105:../src/main.c **** #define CONFIG_SECOND_FAIL_RESTORING	  	(1 << 4)
 106:../src/main.c **** #define CONFIG_SECOND_CRC_OK				(1 << 5)
 107:../src/main.c **** 
 108:../src/main.c **** // ----- main() ---------------------------------------------------------------
 109:../src/main.c **** 
 110:../src/main.c **** // Sample pragmas to cope with warnings. Please note the related line at
 111:../src/main.c **** // the end of this function, used to pop the compiler diagnostics status.
 112:../src/main.c **** #pragma GCC diagnostic push
 113:../src/main.c **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 114:../src/main.c **** #pragma GCC diagnostic ignored "-Wmissing-declarations"
 115:../src/main.c **** #pragma GCC diagnostic ignored "-Wreturn-type"
 116:../src/main.c **** #pragma GCC diagnostic ignored "-Wempty-body"
 117:../src/main.c **** 
 118:../src/main.c **** // used configuration structures
 119:../src/main.c **** const config_data_mode_t * main_config_data_mode = 0;
 120:../src/main.c **** const config_data_basic_t * main_config_data_basic = 0;
 121:../src/main.c **** const config_data_wx_sources_t * main_config_data_wx_sources = 0;
 122:../src/main.c **** const config_data_umb_t * main_config_data_umb = 0;
 123:../src/main.c **** const config_data_rtu_t * main_config_data_rtu = 0;
 124:../src/main.c **** 
 125:../src/main.c **** // global variable incremented by the SysTick handler to measure time in miliseconds
 126:../src/main.c **** uint32_t master_time = 0;
 127:../src/main.c **** 
 128:../src/main.c **** // this global variable stores numbers of ticks of idling CPU
 129:../src/main.c **** uint32_t main_idle_cpu_ticks = 0;
 130:../src/main.c **** 
 131:../src/main.c **** // current cpu idle ticks
 132:../src/main.c **** uint32_t main_current_cpu_idle_ticks = 0;
 133:../src/main.c **** 
 134:../src/main.c **** // approx cpu load in percents
 135:../src/main.c **** int8_t main_cpu_load = 0;
 136:../src/main.c **** 
 137:../src/main.c **** // global variable used as a timer to trigger meteo sensors mesurements
 138:../src/main.c **** int32_t main_wx_sensors_pool_timer = 65500;
 139:../src/main.c **** 
 140:../src/main.c **** // global variable used as a timer to trigger packet sending
 141:../src/main.c **** int32_t main_one_minute_pool_timer = 45000;
 142:../src/main.c **** 
 143:../src/main.c **** // one second pool interval
 144:../src/main.c **** int32_t main_one_second_pool_timer = 1000;
 145:../src/main.c **** 
 146:../src/main.c **** // two second pool interval
 147:../src/main.c **** int32_t main_two_second_pool_timer = 2000;
 148:../src/main.c **** 
 149:../src/main.c **** // ten second pool interval
 150:../src/main.c **** int32_t main_ten_second_pool_timer = 10000;
 151:../src/main.c **** 
 152:../src/main.c **** // serial context for UART used to KISS
 153:../src/main.c **** srl_context_t main_kiss_srl_ctx;
 154:../src/main.c **** 
 155:../src/main.c **** // serial context for UART used for comm with wx sensors
 156:../src/main.c **** srl_context_t main_wx_srl_ctx;
 157:../src/main.c **** 
 158:../src/main.c **** // a pointer to KISS context
 159:../src/main.c **** srl_context_t* main_kiss_srl_ctx_ptr;
 160:../src/main.c **** 
 161:../src/main.c **** // a pointer to wx comms context
 162:../src/main.c **** srl_context_t* main_wx_srl_ctx_ptr;
 163:../src/main.c **** 
 164:../src/main.c **** // target USART1 (kiss) baudrate
 165:../src/main.c **** uint32_t main_target_kiss_baudrate;
 166:../src/main.c **** 
 167:../src/main.c **** // target USART2 (wx) baudrate
 168:../src/main.c **** uint32_t main_target_wx_baudrate;
 169:../src/main.c **** 
 170:../src/main.c **** // controls if the KISS modem is enabled
 171:../src/main.c **** uint8_t main_kiss_enabled = 1;
 172:../src/main.c **** 
 173:../src/main.c **** // controls if DAVIS serialprotocol client is enabled by the configuration
 174:../src/main.c **** uint8_t main_davis_serial_enabled = 0;
 175:../src/main.c **** 
 176:../src/main.c **** uint8_t main_modbus_rtu_master_enabled = 0;
 177:../src/main.c **** 
 178:../src/main.c **** // global variables represending the AX25/APRS stack
 179:../src/main.c **** AX25Ctx main_ax25;
 180:../src/main.c **** Afsk main_afsk;
 181:../src/main.c **** 
 182:../src/main.c **** 
 183:../src/main.c **** AX25Call main_own_path[3];
 184:../src/main.c **** uint8_t main_own_path_ln = 0;
 185:../src/main.c **** uint8_t main_own_aprs_msg_len;
 186:../src/main.c **** char main_own_aprs_msg[OWN_APRS_MSG_LN];
 187:../src/main.c **** 
 188:../src/main.c **** char main_string_latitude[9];
 189:../src/main.c **** char main_string_longitude[9];
 190:../src/main.c **** 
 191:../src/main.c **** char main_symbol_f = '/';
 192:../src/main.c **** char main_symbol_s = '#';
 193:../src/main.c **** 
 194:../src/main.c **** // global variable used to store return value from various functions
 195:../src/main.c **** volatile uint8_t retval = 100;
 196:../src/main.c **** 
 197:../src/main.c **** uint16_t buffer_len = 0;
 198:../src/main.c **** 
 199:../src/main.c **** // return value from UMB related functions
 200:../src/main.c **** umb_retval_t main_umb_retval = UMB_UNINITIALIZED;
 201:../src/main.c **** 
 202:../src/main.c **** // result of CRC calculation
 203:../src/main.c **** uint32_t main_crc_result = 0;
 204:../src/main.c **** 
 205:../src/main.c **** char after_tx_lock;
 206:../src/main.c **** 
 207:../src/main.c **** unsigned short rx10m = 0, tx10m = 0, digi10m = 0, digidrop10m = 0, kiss10m = 0;
 208:../src/main.c **** 
 209:../src/main.c **** #if defined(STM32L471xx)
 210:../src/main.c **** LL_GPIO_InitTypeDef GPIO_InitTypeDef;
 211:../src/main.c **** #endif
 212:../src/main.c **** 
 213:../src/main.c **** static void message_callback(struct AX25Msg *msg) {
  27              		.loc 1 213 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 214:../src/main.c **** 
 215:../src/main.c **** }
  33              		.loc 1 215 0
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE629:
  38              		.section	.text.main,"ax",%progbits
  39              		.align	1
  40              		.global	main
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
  44              		.fpu fpv4-sp-d16
  46              	main:
  47              	.LFB630:
 216:../src/main.c **** 
 217:../src/main.c **** int main(int argc, char* argv[]){
  48              		.loc 1 217 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              	.LVL1:
  53 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  54              		.cfi_def_cfa_offset 28
  55              		.cfi_offset 4, -28
  56              		.cfi_offset 5, -24
  57              		.cfi_offset 6, -20
  58              		.cfi_offset 7, -16
  59              		.cfi_offset 8, -12
  60              		.cfi_offset 9, -8
  61              		.cfi_offset 14, -4
  62 0004 87B0     		sub	sp, sp, #28
  63              		.cfi_def_cfa_offset 56
  64              	.LVL2:
 218:../src/main.c **** 
 219:../src/main.c ****   int32_t ln = 0;
 220:../src/main.c **** 
 221:../src/main.c ****   uint8_t button_inhibit = 0;
 222:../src/main.c **** 
 223:../src/main.c ****   memset(main_own_aprs_msg, 0x00, OWN_APRS_MSG_LN);
  65              		.loc 1 223 0
  66 0006 A022     		movs	r2, #160
  67 0008 0021     		movs	r1, #0
  68              	.LVL3:
  69 000a 7E48     		ldr	r0, .L117
  70              	.LVL4:
  71 000c FFF7FEFF 		bl	memset
  72              	.LVL5:
 224:../src/main.c **** 
 225:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B) || defined(PARATNC_HWREV_C)
 226:../src/main.c ****   RCC->APB1ENR |= (RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM3EN | RCC_APB1ENR_TIM7EN | RCC_APB1ENR_TIM4E
 227:../src/main.c ****   RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN | RCC_APB2ENR_IOPDE
 228:../src/main.c ****   RCC->AHBENR |= RCC_AHBENR_CRCEN;
 229:../src/main.c **** 
 230:../src/main.c ****   NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 231:../src/main.c **** 
 232:../src/main.c ****   // choosing the signal source for the SysTick timer.
 233:../src/main.c ****   SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 234:../src/main.c **** 
 235:../src/main.c ****   // Configuring the SysTick timer to generate interrupt 100x per second (one interrupt = 10ms)
 236:../src/main.c ****   SysTick_Config(SystemCoreClock / SYSTICK_TICKS_PER_SECONDS);
 237:../src/main.c **** 
 238:../src/main.c ****   // setting an Systick interrupt priority
 239:../src/main.c ****   NVIC_SetPriority(SysTick_IRQn, 5);
 240:../src/main.c **** 
 241:../src/main.c ****   // enable access to BKP registers
 242:../src/main.c ****   RCC->APB1ENR |= (RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN);
 243:../src/main.c ****   PWR->CR |= PWR_CR_DBP;
 244:../src/main.c **** 
 245:../src/main.c ****   // read current number of boot cycles
 246:../src/main.c ****   rte_main_boot_cycles = (uint8_t)(BKP->DR2 & 0xFF);
 247:../src/main.c **** 
 248:../src/main.c ****   // read current number of hard faults
 249:../src/main.c ****   rte_main_hard_faults = (uint8_t)((BKP->DR2 & 0xFF00) >> 8);
 250:../src/main.c **** 
 251:../src/main.c ****   // increase boot cycles count
 252:../src/main.c ****   rte_main_boot_cycles++;
 253:../src/main.c **** 
 254:../src/main.c ****   // erasing old value from backup registers
 255:../src/main.c ****   BKP->DR2 &= (0xFFFF ^ 0xFF);
 256:../src/main.c **** 
 257:../src/main.c ****   // storing increased value
 258:../src/main.c ****   BKP->DR2 |= rte_main_boot_cycles;
 259:../src/main.c **** 
 260:../src/main.c ****   BKP->DR3 = 0;
 261:../src/main.c ****   BKP->DR4 = 0;
 262:../src/main.c ****   BKP->DR5 = 0;
 263:../src/main.c ****   BKP->DR6 = 0;
 264:../src/main.c **** #endif
 265:../src/main.c **** 
 266:../src/main.c **** #if defined(STM32L471xx)
 267:../src/main.c ****   system_clock_update_l4();
  73              		.loc 1 267 0
  74 0010 FFF7FEFF 		bl	system_clock_update_l4
  75              	.LVL6:
 268:../src/main.c **** 
 269:../src/main.c ****   if (system_clock_configure_l4() != 0) {
  76              		.loc 1 269 0
  77 0014 FFF7FEFF 		bl	system_clock_configure_l4
  78              	.LVL7:
  79 0018 0028     		cmp	r0, #0
  80 001a 50D1     		bne	.L77
  81              	.L3:
 270:../src/main.c **** 	  HAL_NVIC_SystemReset();
 271:../src/main.c **** 
 272:../src/main.c ****   }
 273:../src/main.c **** 
 274:../src/main.c ****   // enable access to PWR control registers
 275:../src/main.c ****   RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;
  82              		.loc 1 275 0
  83 001c 7A4C     		ldr	r4, .L117+4
  84 001e A36D     		ldr	r3, [r4, #88]
  85 0020 43F08053 		orr	r3, r3, #268435456
  86 0024 A365     		str	r3, [r4, #88]
 276:../src/main.c **** 
 277:../src/main.c ****   system_clock_update_l4();
  87              		.loc 1 277 0
  88 0026 FFF7FEFF 		bl	system_clock_update_l4
  89              	.LVL8:
 278:../src/main.c **** 
 279:../src/main.c ****   system_clock_configure_rtc_l4();
  90              		.loc 1 279 0
  91 002a FFF7FEFF 		bl	system_clock_configure_rtc_l4
  92              	.LVL9:
 280:../src/main.c **** 
 281:../src/main.c ****   RCC->APB1ENR1 |= (RCC_APB1ENR1_TIM2EN | RCC_APB1ENR1_TIM3EN | RCC_APB1ENR1_TIM4EN | RCC_APB1ENR1_
  93              		.loc 1 281 0
  94 002e A26D     		ldr	r2, [r4, #88]
  95 0030 764B     		ldr	r3, .L117+8
  96 0032 1343     		orrs	r3, r3, r2
  97 0034 A365     		str	r3, [r4, #88]
 282:../src/main.c ****   RCC->APB2ENR |= (RCC_APB2ENR_TIM1EN | RCC_APB2ENR_USART1EN);
  98              		.loc 1 282 0
  99 0036 236E     		ldr	r3, [r4, #96]
 100 0038 43F49043 		orr	r3, r3, #18432
 101 003c 2366     		str	r3, [r4, #96]
 283:../src/main.c ****   RCC->AHB1ENR |= (RCC_AHB1ENR_CRCEN | RCC_AHB1ENR_DMA1EN);
 102              		.loc 1 283 0
 103 003e A36C     		ldr	r3, [r4, #72]
 104 0040 43F48053 		orr	r3, r3, #4096
 105 0044 43F00103 		orr	r3, r3, #1
 106 0048 A364     		str	r3, [r4, #72]
 284:../src/main.c ****   RCC->AHB2ENR |= (RCC_AHB2ENR_ADCEN | RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIO
 107              		.loc 1 284 0
 108 004a E36C     		ldr	r3, [r4, #76]
 109 004c 43F40053 		orr	r3, r3, #8192
 110 0050 43F00F03 		orr	r3, r3, #15
 111 0054 E364     		str	r3, [r4, #76]
 285:../src/main.c ****   RCC->BDCR |= RCC_BDCR_RTCEN;
 112              		.loc 1 285 0
 113 0056 D4F89030 		ldr	r3, [r4, #144]
 114 005a 43F40043 		orr	r3, r3, #32768
 115 005e C4F89030 		str	r3, [r4, #144]
 286:../src/main.c **** 
 287:../src/main.c ****   /* Set Interrupt Group Priority */
 288:../src/main.c ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 116              		.loc 1 288 0
 117 0062 0320     		movs	r0, #3
 118 0064 FFF7FEFF 		bl	HAL_NVIC_SetPriorityGrouping
 119              	.LVL10:
 289:../src/main.c **** 
 290:../src/main.c ****   // set systick frequency
 291:../src/main.c ****   HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)10));
 120              		.loc 1 291 0
 121 0068 694B     		ldr	r3, .L117+12
 122 006a 1868     		ldr	r0, [r3]
 123 006c 694B     		ldr	r3, .L117+16
 124 006e A3FB0030 		umull	r3, r0, r3, r0
 125 0072 4009     		lsrs	r0, r0, #5
 126 0074 FFF7FEFF 		bl	HAL_SYSTICK_Config
 127              	.LVL11:
 292:../src/main.c **** 
 293:../src/main.c ****   // set systick interrupt priority
 294:../src/main.c ****   HAL_NVIC_SetPriority(SysTick_IRQn, 5, 0U);
 128              		.loc 1 294 0
 129 0078 0022     		movs	r2, #0
 130 007a 0521     		movs	r1, #5
 131 007c 4FF0FF30 		mov	r0, #-1
 132 0080 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 133              	.LVL12:
 295:../src/main.c **** #endif
 296:../src/main.c **** 
 297:../src/main.c ****   rte_main_reboot_req = 0;
 134              		.loc 1 297 0
 135 0084 644B     		ldr	r3, .L117+20
 136 0086 0022     		movs	r2, #0
 137 0088 1A70     		strb	r2, [r3]
 298:../src/main.c **** 
 299:../src/main.c ****   // initializing variables & arrays in rte_wx
 300:../src/main.c ****   rte_wx_init();
 138              		.loc 1 300 0
 139 008a FFF7FEFF 		bl	rte_wx_init
 140              	.LVL13:
 301:../src/main.c ****   rte_rtu_init();
 141              		.loc 1 301 0
 142 008e FFF7FEFF 		bl	rte_rtu_init
 143              	.LVL14:
 302:../src/main.c **** 
 303:../src/main.c ****   // calculate CRC over configuration blocks
 304:../src/main.c ****   main_crc_result = configuration_handler_check_crc();
 144              		.loc 1 304 0
 145 0092 FFF7FEFF 		bl	configuration_handler_check_crc
 146              	.LVL15:
 147 0096 614B     		ldr	r3, .L117+24
 148 0098 1860     		str	r0, [r3]
 305:../src/main.c **** 
 306:../src/main.c ****   // if first section has wrong CRC and it hasn't been restored before
 307:../src/main.c ****   if ((main_crc_result & 0x01) == 0 && (configuration_get_register() & CONFIG_FIRST_FAIL_RESTORING)
 149              		.loc 1 307 0
 150 009a 10F0010F 		tst	r0, #1
 151 009e 15D1     		bne	.L4
 152              		.loc 1 307 0 is_stmt 0 discriminator 1
 153 00a0 FFF7FEFF 		bl	configuration_get_register
 154              	.LVL16:
 155 00a4 10F0020F 		tst	r0, #2
 156 00a8 10D1     		bne	.L4
 308:../src/main.c **** 	  // restore default configuration
 309:../src/main.c **** 	  if (configuration_handler_restore_default_first() == 0) {
 157              		.loc 1 309 0 is_stmt 1
 158 00aa FFF7FEFF 		bl	configuration_handler_restore_default_first
 159              	.LVL17:
 160 00ae 48B9     		cbnz	r0, .L5
 310:../src/main.c **** 
 311:../src/main.c **** 		  // if configuration has been restored successfully
 312:../src/main.c **** 		  configuration_set_bits_register(CONFIG_FIRST_RESTORED);
 161              		.loc 1 312 0
 162 00b0 0120     		movs	r0, #1
 163 00b2 FFF7FEFF 		bl	configuration_set_bits_register
 164              	.LVL18:
 313:../src/main.c **** 
 314:../src/main.c **** 		  // set also CRC flag because if restoring is successfull the region has good CRC
 315:../src/main.c **** 		  configuration_set_bits_register(CONFIG_FIRST_CRC_OK);
 165              		.loc 1 315 0
 166 00b6 0420     		movs	r0, #4
 167 00b8 FFF7FEFF 		bl	configuration_set_bits_register
 168              	.LVL19:
 169 00bc 0BE0     		b	.L6
 170              	.L77:
 270:../src/main.c **** 
 171              		.loc 1 270 0
 172 00be FFF7FEFF 		bl	HAL_NVIC_SystemReset
 173              	.LVL20:
 174 00c2 ABE7     		b	.L3
 175              	.L5:
 316:../src/main.c **** 
 317:../src/main.c **** 	  }
 318:../src/main.c **** 	  else {
 319:../src/main.c **** 		  // if not store the flag in the backup register to block
 320:../src/main.c **** 		  // reinitializing once again in the consecutive restart
 321:../src/main.c **** 		  configuration_set_bits_register(CONFIG_FIRST_FAIL_RESTORING);
 176              		.loc 1 321 0
 177 00c4 0220     		movs	r0, #2
 178 00c6 FFF7FEFF 		bl	configuration_set_bits_register
 179              	.LVL21:
 180 00ca 04E0     		b	.L6
 181              	.L4:
 322:../src/main.c **** 	  }
 323:../src/main.c **** 
 324:../src/main.c **** 
 325:../src/main.c ****   }
 326:../src/main.c ****   else {
 327:../src/main.c **** 	  // if the combined confition is not met check failed restoring flag
 328:../src/main.c **** 	  if ((configuration_get_register() & CONFIG_FIRST_FAIL_RESTORING) == 0) {
 182              		.loc 1 328 0
 183 00cc FFF7FEFF 		bl	configuration_get_register
 184              	.LVL22:
 185 00d0 10F0020F 		tst	r0, #2
 186 00d4 13D0     		beq	.L78
 187              	.L6:
 329:../src/main.c **** 		  // a CRC checksum is ok, so first configuration section can be used further
 330:../src/main.c **** 		  configuration_set_bits_register(CONFIG_FIRST_CRC_OK);
 331:../src/main.c **** 	  }
 332:../src/main.c **** 	  else {
 333:../src/main.c **** 		  ;
 334:../src/main.c **** 	  }
 335:../src/main.c ****   }
 336:../src/main.c **** 
 337:../src/main.c ****   // if second section has wrong CRC and it hasn't been restored before
 338:../src/main.c ****   if ((main_crc_result & 0x02) == 0 && (configuration_get_register() & CONFIG_SECOND_FAIL_RESTORING
 188              		.loc 1 338 0
 189 00d6 514B     		ldr	r3, .L117+24
 190 00d8 1B68     		ldr	r3, [r3]
 191 00da 13F0020F 		tst	r3, #2
 192 00de 19D1     		bne	.L7
 193              		.loc 1 338 0 is_stmt 0 discriminator 1
 194 00e0 FFF7FEFF 		bl	configuration_get_register
 195              	.LVL23:
 196 00e4 10F0100F 		tst	r0, #16
 197 00e8 14D1     		bne	.L7
 339:../src/main.c **** 	  // restore default configuration
 340:../src/main.c **** 	  if (configuration_handler_restore_default_second() == 0) {
 198              		.loc 1 340 0 is_stmt 1
 199 00ea FFF7FEFF 		bl	configuration_handler_restore_default_second
 200              	.LVL24:
 201 00ee 50B9     		cbnz	r0, .L8
 341:../src/main.c **** 
 342:../src/main.c **** 		  // if configuration has been restored successfully
 343:../src/main.c **** 		  configuration_set_bits_register(CONFIG_SECOND_RESTORED);
 202              		.loc 1 343 0
 203 00f0 0820     		movs	r0, #8
 204 00f2 FFF7FEFF 		bl	configuration_set_bits_register
 205              	.LVL25:
 344:../src/main.c **** 
 345:../src/main.c **** 		  // set also CRC flag as if restoring is successfull the region has good CRC
 346:../src/main.c **** 		  configuration_set_bits_register(CONFIG_SECOND_CRC_OK);
 206              		.loc 1 346 0
 207 00f6 2020     		movs	r0, #32
 208 00f8 FFF7FEFF 		bl	configuration_set_bits_register
 209              	.LVL26:
 210 00fc 0FE0     		b	.L9
 211              	.L78:
 330:../src/main.c **** 	  }
 212              		.loc 1 330 0
 213 00fe 0420     		movs	r0, #4
 214 0100 FFF7FEFF 		bl	configuration_set_bits_register
 215              	.LVL27:
 216 0104 E7E7     		b	.L6
 217              	.L8:
 347:../src/main.c **** 
 348:../src/main.c **** 	  }
 349:../src/main.c **** 	  else {
 350:../src/main.c **** 		  // if not store the flag in the backup register
 351:../src/main.c **** 		  configuration_set_bits_register(CONFIG_SECOND_FAIL_RESTORING);
 218              		.loc 1 351 0
 219 0106 1020     		movs	r0, #16
 220 0108 FFF7FEFF 		bl	configuration_set_bits_register
 221              	.LVL28:
 352:../src/main.c **** 
 353:../src/main.c **** 		  configuration_clear_bits_register(CONFIG_SECOND_CRC_OK);
 222              		.loc 1 353 0
 223 010c 2020     		movs	r0, #32
 224 010e FFF7FEFF 		bl	configuration_clear_bits_register
 225              	.LVL29:
 226 0112 04E0     		b	.L9
 227              	.L7:
 354:../src/main.c **** 	  }
 355:../src/main.c **** 
 356:../src/main.c **** 
 357:../src/main.c ****   }
 358:../src/main.c ****   else {
 359:../src/main.c **** 	  // check failed restoring flag
 360:../src/main.c **** 	  if ((configuration_get_register() & CONFIG_SECOND_FAIL_RESTORING) == 0) {
 228              		.loc 1 360 0
 229 0114 FFF7FEFF 		bl	configuration_get_register
 230              	.LVL30:
 231 0118 10F0100F 		tst	r0, #16
 232 011c 13D0     		beq	.L79
 233              	.L9:
 361:../src/main.c **** 		  // second configuration section has good CRC and can be used further
 362:../src/main.c **** 		  configuration_set_bits_register(CONFIG_SECOND_CRC_OK);
 363:../src/main.c **** 	  }
 364:../src/main.c **** 	  else {
 365:../src/main.c **** 		  ;
 366:../src/main.c **** 	  }
 367:../src/main.c ****   }
 368:../src/main.c **** 
 369:../src/main.c ****   // at this point both sections have either verified CRC or restored values to default
 370:../src/main.c ****   if ((configuration_get_register() & CONFIG_FIRST_CRC_OK) != 0 && (configuration_get_register() & 
 234              		.loc 1 370 0
 235 011e FFF7FEFF 		bl	configuration_get_register
 236              	.LVL31:
 237 0122 10F0040F 		tst	r0, #4
 238 0126 16D0     		beq	.L10
 239              		.loc 1 370 0 is_stmt 0 discriminator 1
 240 0128 FFF7FEFF 		bl	configuration_get_register
 241              	.LVL32:
 242 012c 10F0200F 		tst	r0, #32
 243 0130 11D0     		beq	.L10
 371:../src/main.c **** 	  // if both sections are OK check programming counters
 372:../src/main.c **** 	  if (config_data_pgm_cntr_first > config_data_pgm_cntr_second) {
 244              		.loc 1 372 0 is_stmt 1
 245 0132 3B4B     		ldr	r3, .L117+28
 246 0134 1A88     		ldrh	r2, [r3]
 247 0136 3B4B     		ldr	r3, .L117+32
 248 0138 1B88     		ldrh	r3, [r3]
 249 013a 9A42     		cmp	r2, r3
 250 013c 07D9     		bls	.L11
 373:../src/main.c **** 		  // if first section has bigger programing counter use it
 374:../src/main.c **** 		  configuration_handler_load_configuration(REGION_FIRST);
 251              		.loc 1 374 0
 252 013e 0120     		movs	r0, #1
 253 0140 FFF7FEFF 		bl	configuration_handler_load_configuration
 254              	.LVL33:
 255 0144 26E0     		b	.L12
 256              	.L79:
 362:../src/main.c **** 	  }
 257              		.loc 1 362 0
 258 0146 2020     		movs	r0, #32
 259 0148 FFF7FEFF 		bl	configuration_set_bits_register
 260              	.LVL34:
 261 014c E7E7     		b	.L9
 262              	.L11:
 375:../src/main.c **** 	  }
 376:../src/main.c **** 	  else {
 377:../src/main.c **** 		  configuration_handler_load_configuration(REGION_SECOND);
 263              		.loc 1 377 0
 264 014e 0220     		movs	r0, #2
 265 0150 FFF7FEFF 		bl	configuration_handler_load_configuration
 266              	.LVL35:
 267 0154 1EE0     		b	.L12
 268              	.L10:
 378:../src/main.c **** 
 379:../src/main.c **** 	  }
 380:../src/main.c ****   }
 381:../src/main.c ****   else if ((configuration_get_register() & CONFIG_FIRST_CRC_OK) != 0 && (configuration_get_register
 269              		.loc 1 381 0
 270 0156 FFF7FEFF 		bl	configuration_get_register
 271              	.LVL36:
 272 015a 10F0040F 		tst	r0, #4
 273 015e 08D0     		beq	.L13
 274              		.loc 1 381 0 is_stmt 0 discriminator 1
 275 0160 FFF7FEFF 		bl	configuration_get_register
 276              	.LVL37:
 277 0164 10F0200F 		tst	r0, #32
 278 0168 03D1     		bne	.L13
 382:../src/main.c **** 	  // if only first region is OK use it
 383:../src/main.c **** 	  configuration_handler_load_configuration(REGION_FIRST);
 279              		.loc 1 383 0 is_stmt 1
 280 016a 0120     		movs	r0, #1
 281 016c FFF7FEFF 		bl	configuration_handler_load_configuration
 282              	.LVL38:
 283 0170 10E0     		b	.L12
 284              	.L13:
 384:../src/main.c ****   }
 385:../src/main.c ****   else if ((configuration_get_register() & CONFIG_FIRST_CRC_OK) == 0 && (configuration_get_register
 285              		.loc 1 385 0
 286 0172 FFF7FEFF 		bl	configuration_get_register
 287              	.LVL39:
 288 0176 10F0040F 		tst	r0, #4
 289 017a 08D1     		bne	.L14
 290              		.loc 1 385 0 is_stmt 0 discriminator 1
 291 017c FFF7FEFF 		bl	configuration_get_register
 292              	.LVL40:
 293 0180 10F0200F 		tst	r0, #32
 294 0184 03D0     		beq	.L14
 386:../src/main.c **** 	  // if only first region is OK use it
 387:../src/main.c **** 	  configuration_handler_load_configuration(REGION_FIRST);
 295              		.loc 1 387 0 is_stmt 1
 296 0186 0120     		movs	r0, #1
 297 0188 FFF7FEFF 		bl	configuration_handler_load_configuration
 298              	.LVL41:
 299 018c 02E0     		b	.L12
 300              	.L14:
 388:../src/main.c ****   }
 389:../src/main.c ****   else {
 390:../src/main.c **** 	  configuration_handler_load_configuration(REGION_DEFAULT);
 301              		.loc 1 390 0
 302 018e 0020     		movs	r0, #0
 303 0190 FFF7FEFF 		bl	configuration_handler_load_configuration
 304              	.LVL42:
 305              	.L12:
 391:../src/main.c ****   }
 392:../src/main.c **** 
 393:../src/main.c ****   // set packets intervals
 394:../src/main.c ****   packet_tx_configure(main_config_data_basic->wx_transmit_period, main_config_data_basic->beacon_tr
 306              		.loc 1 394 0
 307 0194 244C     		ldr	r4, .L117+36
 308 0196 2368     		ldr	r3, [r4]
 309 0198 244A     		ldr	r2, .L117+40
 310 019a 1268     		ldr	r2, [r2]
 311 019c D27A     		ldrb	r2, [r2, #11]	@ zero_extendqisi2
 312 019e 93F89910 		ldrb	r1, [r3, #153]	@ zero_extendqisi2
 313 01a2 93F89800 		ldrb	r0, [r3, #152]	@ zero_extendqisi2
 314 01a6 FFF7FEFF 		bl	packet_tx_configure
 315              	.LVL43:
 395:../src/main.c **** 
 396:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B) || defined(PARATNC_HWREV_C)
 397:../src/main.c ****   // disabling access to BKP registers
 398:../src/main.c ****   RCC->APB1ENR &= (0xFFFFFFFF ^ (RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN));
 399:../src/main.c ****   PWR->CR &= (0xFFFFFFFF ^ PWR_CR_DBP);
 400:../src/main.c **** #endif
 401:../src/main.c **** 
 402:../src/main.c ****   // converting latitude into string
 403:../src/main.c ****   memset(main_string_latitude, 0x00, sizeof(main_string_latitude));
 316              		.loc 1 403 0
 317 01aa 214D     		ldr	r5, .L117+44
 318 01ac 0922     		movs	r2, #9
 319 01ae 0021     		movs	r1, #0
 320 01b0 2846     		mov	r0, r5
 321 01b2 FFF7FEFF 		bl	memset
 322              	.LVL44:
 404:../src/main.c ****   float_to_string(main_config_data_basic->latitude, main_string_latitude, sizeof(main_string_latitu
 323              		.loc 1 404 0
 324 01b6 2668     		ldr	r6, [r4]
 325 01b8 0223     		movs	r3, #2
 326 01ba 1A46     		mov	r2, r3
 327 01bc 0921     		movs	r1, #9
 328 01be 2846     		mov	r0, r5
 329 01c0 96ED020A 		vldr.32	s0, [r6, #8]
 330 01c4 FFF7FEFF 		bl	float_to_string
 331              	.LVL45:
 405:../src/main.c **** 
 406:../src/main.c ****   // converting longitude into string
 407:../src/main.c ****   memset(main_string_longitude, 0x00, sizeof(main_string_longitude));
 332              		.loc 1 407 0
 333 01c8 1A4D     		ldr	r5, .L117+48
 334 01ca 0922     		movs	r2, #9
 335 01cc 0021     		movs	r1, #0
 336 01ce 2846     		mov	r0, r5
 337 01d0 FFF7FEFF 		bl	memset
 338              	.LVL46:
 408:../src/main.c ****   float_to_string(main_config_data_basic->longitude, main_string_longitude, sizeof(main_string_long
 339              		.loc 1 408 0
 340 01d4 2668     		ldr	r6, [r4]
 341 01d6 0523     		movs	r3, #5
 342 01d8 0222     		movs	r2, #2
 343 01da 0921     		movs	r1, #9
 344 01dc 2846     		mov	r0, r5
 345 01de 96ED040A 		vldr.32	s0, [r6, #16]
 346 01e2 FFF7FEFF 		bl	float_to_string
 347              	.LVL47:
 409:../src/main.c **** 
 410:../src/main.c ****   switch(main_config_data_basic->symbol) {
 348              		.loc 1 410 0
 349 01e6 2368     		ldr	r3, [r4]
 350 01e8 93F89530 		ldrb	r3, [r3, #149]	@ zero_extendqisi2
 351 01ec 052B     		cmp	r3, #5
 352 01ee 00F2D081 		bhi	.L15
 353 01f2 DFE813F0 		tbh	[pc, r3, lsl #1]
 354              	.L17:
 355 01f6 2100     		.2byte	(.L16-.L17)/2
 356 01f8 7F01     		.2byte	(.L18-.L17)/2
 357 01fa 8601     		.2byte	(.L19-.L17)/2
 358 01fc 8D01     		.2byte	(.L20-.L17)/2
 359 01fe CE01     		.2byte	(.L15-.L17)/2
 360 0200 C701     		.2byte	(.L21-.L17)/2
 361              		.p2align 1
 362              	.L118:
 363 0202 00BF     		.align	2
 364              	.L117:
 365 0204 00000000 		.word	main_own_aprs_msg
 366 0208 00100240 		.word	1073876992
 367 020c 2F002620 		.word	539361327
 368 0210 00000000 		.word	SystemCoreClock
 369 0214 1F85EB51 		.word	1374389535
 370 0218 00000000 		.word	rte_main_reboot_req
 371 021c 00000000 		.word	.LANCHOR0
 372 0220 00000000 		.word	config_data_pgm_cntr_first
 373 0224 00000000 		.word	config_data_pgm_cntr_second
 374 0228 00000000 		.word	.LANCHOR1
 375 022c 00000000 		.word	.LANCHOR2
 376 0230 00000000 		.word	main_string_latitude
 377 0234 00000000 		.word	main_string_longitude
 378              	.L16:
 411:../src/main.c ****   case 0:		// _SYMBOL_DIGI
 412:../src/main.c **** 	  main_symbol_f = '/';
 379              		.loc 1 412 0
 380 0238 B94B     		ldr	r3, .L119
 381 023a 2F22     		movs	r2, #47
 382 023c 1A70     		strb	r2, [r3]
 413:../src/main.c **** 	  main_symbol_s = '#';
 383              		.loc 1 413 0
 384 023e B94B     		ldr	r3, .L119+4
 385 0240 2322     		movs	r2, #35
 386 0242 1A70     		strb	r2, [r3]
 387              	.L22:
 414:../src/main.c **** 	  break;
 415:../src/main.c ****   case 1:		// _SYMBOL_WIDE1_DIGI
 416:../src/main.c **** 	  main_symbol_f = '1';
 417:../src/main.c **** 	  main_symbol_s = '#';
 418:../src/main.c **** 	  break;
 419:../src/main.c ****   case 2:		// _SYMBOL_HOUSE
 420:../src/main.c **** 	  main_symbol_f = '/';
 421:../src/main.c **** 	  main_symbol_s = '-';
 422:../src/main.c **** 	  break;
 423:../src/main.c ****   case 3:		// _SYMBOL_RXIGATE
 424:../src/main.c **** 	  main_symbol_f = 'I';
 425:../src/main.c **** 	  main_symbol_s = '&';
 426:../src/main.c **** 	  break;
 427:../src/main.c ****   case 5:		// _SYMBOL_SAILBOAT
 428:../src/main.c **** 	  main_symbol_f = '/';
 429:../src/main.c **** 	  main_symbol_s = 'Y';
 430:../src/main.c **** 	  break;
 431:../src/main.c ****   default:		// _SYMBOL_IGATE
 432:../src/main.c **** 	  main_symbol_f = 'R';
 433:../src/main.c **** 	  main_symbol_s = '&';
 434:../src/main.c **** 	  break;
 435:../src/main.c **** 
 436:../src/main.c ****   }
 437:../src/main.c **** 
 438:../src/main.c **** #if defined _RANDOM_DELAY
 439:../src/main.c ****   // configuring a default delay value
 440:../src/main.c ****   delay_set(_DELAY_BASE, 1);
 441:../src/main.c **** #elif !defined _RANDOM_DELAY
 442:../src/main.c ****   delay_set(_DELAY_BASE, 0);
 388              		.loc 1 442 0
 389 0244 0021     		movs	r1, #0
 390 0246 1420     		movs	r0, #20
 391 0248 FFF7FEFF 		bl	delay_set
 392              	.LVL48:
 443:../src/main.c **** 
 444:../src/main.c **** #endif
 445:../src/main.c **** 
 446:../src/main.c **** #if defined(STM32L471xx)
 447:../src/main.c ****   // initialize all powersaving functions
 448:../src/main.c ****   pwr_save_init(main_config_data_mode->powersave);
 393              		.loc 1 448 0
 394 024c DFF82493 		ldr	r9, .L119+84
 395 0250 D9F80030 		ldr	r3, [r9]
 396 0254 D87A     		ldrb	r0, [r3, #11]	@ zero_extendqisi2
 397 0256 FFF7FEFF 		bl	pwr_save_init
 398              	.LVL49:
 449:../src/main.c **** #endif
 450:../src/main.c **** 
 451:../src/main.c ****   // initalizing separated Open Collector output
 452:../src/main.c ****   io_oc_init();
 399              		.loc 1 452 0
 400 025a FFF7FEFF 		bl	io_oc_init
 401              	.LVL50:
 453:../src/main.c **** 
 454:../src/main.c ****   // initialize sensor power control and switch off supply voltage
 455:../src/main.c ****   wx_pwr_switch_init();
 402              		.loc 1 455 0
 403 025e FFF7FEFF 		bl	wx_pwr_switch_init
 404              	.LVL51:
 456:../src/main.c **** 
 457:../src/main.c ****   // call periodic handle to wait for 1 second and then switch on voltage
 458:../src/main.c ****   wx_pwr_switch_periodic_handle();
 405              		.loc 1 458 0
 406 0262 FFF7FEFF 		bl	wx_pwr_switch_periodic_handle
 407              	.LVL52:
 459:../src/main.c **** 
 460:../src/main.c ****   // waiting for 1 second to count number of ticks when the CPU is idle
 461:../src/main.c ****   main_idle_cpu_ticks = delay_fixed_with_count(1000);
 408              		.loc 1 461 0
 409 0266 4FF47A70 		mov	r0, #1000
 410 026a FFF7FEFF 		bl	delay_fixed_with_count
 411              	.LVL53:
 412 026e AE4B     		ldr	r3, .L119+8
 413 0270 1860     		str	r0, [r3]
 462:../src/main.c **** 
 463:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B) || defined(PARATNC_HWREV_C)
 464:../src/main.c **** 
 465:../src/main.c ****   // Configure I/O pins for USART1 (Kiss modem)
 466:../src/main.c ****   Configure_GPIO(GPIOA,10,PUD_INPUT);		// RX
 467:../src/main.c ****   Configure_GPIO(GPIOA,9,AFPP_OUTPUT_2MHZ);	// TX
 468:../src/main.c **** 
 469:../src/main.c ****   // Configure I/O pins for USART2 (wx meteo comm)
 470:../src/main.c ****   Configure_GPIO(GPIOA,3,PUD_INPUT);		// RX
 471:../src/main.c ****   Configure_GPIO(GPIOA,2,AFPP_OUTPUT_2MHZ);	// TX
 472:../src/main.c **** 
 473:../src/main.c **** #endif
 474:../src/main.c **** 
 475:../src/main.c **** #if defined(PARAMETEO)
 476:../src/main.c ****   	// USART1 - KISS
 477:../src/main.c **** 	GPIO_InitTypeDef.Mode = LL_GPIO_MODE_ALTERNATE;
 414              		.loc 1 477 0
 415 0272 AE4C     		ldr	r4, .L119+12
 416 0274 4FF00208 		mov	r8, #2
 417 0278 C4F80480 		str	r8, [r4, #4]
 478:../src/main.c **** 	GPIO_InitTypeDef.Pin = LL_GPIO_PIN_10;
 418              		.loc 1 478 0
 419 027c 4FF48063 		mov	r3, #1024
 420 0280 2360     		str	r3, [r4]
 479:../src/main.c **** 	GPIO_InitTypeDef.Pull = LL_GPIO_PULL_NO;
 421              		.loc 1 479 0
 422 0282 0025     		movs	r5, #0
 423 0284 2561     		str	r5, [r4, #16]
 480:../src/main.c **** 	GPIO_InitTypeDef.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 424              		.loc 1 480 0
 425 0286 0327     		movs	r7, #3
 426 0288 A760     		str	r7, [r4, #8]
 481:../src/main.c **** 	GPIO_InitTypeDef.Alternate = LL_GPIO_AF_7;
 427              		.loc 1 481 0
 428 028a 0726     		movs	r6, #7
 429 028c 6661     		str	r6, [r4, #20]
 482:../src/main.c **** 	GPIO_InitTypeDef.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 430              		.loc 1 482 0
 431 028e E560     		str	r5, [r4, #12]
 483:../src/main.c **** 	LL_GPIO_Init(GPIOA, &GPIO_InitTypeDef);		// RX
 432              		.loc 1 483 0
 433 0290 2146     		mov	r1, r4
 434 0292 4FF09040 		mov	r0, #1207959552
 435 0296 FFF7FEFF 		bl	LL_GPIO_Init
 436              	.LVL54:
 484:../src/main.c **** 
 485:../src/main.c **** 	GPIO_InitTypeDef.Mode = LL_GPIO_MODE_ALTERNATE;
 437              		.loc 1 485 0
 438 029a C4F80480 		str	r8, [r4, #4]
 486:../src/main.c **** 	GPIO_InitTypeDef.Pin = LL_GPIO_PIN_9;
 439              		.loc 1 486 0
 440 029e 4FF40073 		mov	r3, #512
 441 02a2 2360     		str	r3, [r4]
 487:../src/main.c **** 	GPIO_InitTypeDef.Pull = LL_GPIO_PULL_NO;
 442              		.loc 1 487 0
 443 02a4 2561     		str	r5, [r4, #16]
 488:../src/main.c **** 	GPIO_InitTypeDef.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 444              		.loc 1 488 0
 445 02a6 A760     		str	r7, [r4, #8]
 489:../src/main.c **** 	GPIO_InitTypeDef.Alternate = LL_GPIO_AF_7;
 446              		.loc 1 489 0
 447 02a8 6661     		str	r6, [r4, #20]
 490:../src/main.c **** 	GPIO_InitTypeDef.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 448              		.loc 1 490 0
 449 02aa E560     		str	r5, [r4, #12]
 491:../src/main.c **** 	LL_GPIO_Init(GPIOA, &GPIO_InitTypeDef);		// TX
 450              		.loc 1 491 0
 451 02ac 2146     		mov	r1, r4
 452 02ae 4FF09040 		mov	r0, #1207959552
 453 02b2 FFF7FEFF 		bl	LL_GPIO_Init
 454              	.LVL55:
 492:../src/main.c **** 
 493:../src/main.c **** 	// USART2 - METEO
 494:../src/main.c **** 	GPIO_InitTypeDef.Mode = LL_GPIO_MODE_ALTERNATE;
 455              		.loc 1 494 0
 456 02b6 C4F80480 		str	r8, [r4, #4]
 495:../src/main.c **** 	GPIO_InitTypeDef.Pin = LL_GPIO_PIN_3;
 457              		.loc 1 495 0
 458 02ba 0823     		movs	r3, #8
 459 02bc 2360     		str	r3, [r4]
 496:../src/main.c **** 	GPIO_InitTypeDef.Pull = LL_GPIO_PULL_NO;
 460              		.loc 1 496 0
 461 02be 2561     		str	r5, [r4, #16]
 497:../src/main.c **** 	GPIO_InitTypeDef.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 462              		.loc 1 497 0
 463 02c0 A760     		str	r7, [r4, #8]
 498:../src/main.c **** 	GPIO_InitTypeDef.Alternate = LL_GPIO_AF_7;
 464              		.loc 1 498 0
 465 02c2 6661     		str	r6, [r4, #20]
 499:../src/main.c **** 	GPIO_InitTypeDef.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 466              		.loc 1 499 0
 467 02c4 E560     		str	r5, [r4, #12]
 500:../src/main.c **** 	LL_GPIO_Init(GPIOA, &GPIO_InitTypeDef);		// RX
 468              		.loc 1 500 0
 469 02c6 2146     		mov	r1, r4
 470 02c8 4FF09040 		mov	r0, #1207959552
 471 02cc FFF7FEFF 		bl	LL_GPIO_Init
 472              	.LVL56:
 501:../src/main.c **** 
 502:../src/main.c **** 	GPIO_InitTypeDef.Mode = LL_GPIO_MODE_ALTERNATE;
 473              		.loc 1 502 0
 474 02d0 C4F80480 		str	r8, [r4, #4]
 503:../src/main.c **** 	GPIO_InitTypeDef.Pin = LL_GPIO_PIN_2;
 475              		.loc 1 503 0
 476 02d4 4FF00408 		mov	r8, #4
 477 02d8 C4F80080 		str	r8, [r4]
 504:../src/main.c **** 	GPIO_InitTypeDef.Pull = LL_GPIO_PULL_NO;
 478              		.loc 1 504 0
 479 02dc 2561     		str	r5, [r4, #16]
 505:../src/main.c **** 	GPIO_InitTypeDef.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 480              		.loc 1 505 0
 481 02de A760     		str	r7, [r4, #8]
 506:../src/main.c **** 	GPIO_InitTypeDef.Alternate = LL_GPIO_AF_7;
 482              		.loc 1 506 0
 483 02e0 6661     		str	r6, [r4, #20]
 507:../src/main.c **** 	GPIO_InitTypeDef.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 484              		.loc 1 507 0
 485 02e2 E560     		str	r5, [r4, #12]
 508:../src/main.c **** 	LL_GPIO_Init(GPIOA, &GPIO_InitTypeDef);		// TX
 486              		.loc 1 508 0
 487 02e4 2146     		mov	r1, r4
 488 02e6 4FF09040 		mov	r0, #1207959552
 489 02ea FFF7FEFF 		bl	LL_GPIO_Init
 490              	.LVL57:
 509:../src/main.c **** 
 510:../src/main.c **** #endif
 511:../src/main.c **** 
 512:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B)
 513:../src/main.c ****   Configure_GPIO(GPIOA,7,GPPP_OUTPUT_2MHZ);	// re/te
 514:../src/main.c ****   GPIO_ResetBits(GPIOA, GPIO_Pin_7);
 515:../src/main.c **** #endif
 516:../src/main.c **** #if defined(PARATNC_HWREV_C)
 517:../src/main.c ****   Configure_GPIO(GPIOA,8,GPPP_OUTPUT_2MHZ);	// re/te
 518:../src/main.c ****   GPIO_ResetBits(GPIOA, GPIO_Pin_8);
 519:../src/main.c **** #endif
 520:../src/main.c **** 
 521:../src/main.c **** #if defined(PARAMETEO)
 522:../src/main.c **** 	GPIO_InitTypeDef.Mode = LL_GPIO_MODE_OUTPUT;
 491              		.loc 1 522 0
 492 02ee 0123     		movs	r3, #1
 493 02f0 6360     		str	r3, [r4, #4]
 523:../src/main.c **** 	GPIO_InitTypeDef.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 494              		.loc 1 523 0
 495 02f2 E560     		str	r5, [r4, #12]
 524:../src/main.c **** 	GPIO_InitTypeDef.Pin = LL_GPIO_PIN_2;
 496              		.loc 1 524 0
 497 02f4 C4F80080 		str	r8, [r4]
 525:../src/main.c **** 	GPIO_InitTypeDef.Pull = LL_GPIO_PULL_NO;
 498              		.loc 1 525 0
 499 02f8 2561     		str	r5, [r4, #16]
 526:../src/main.c **** 	GPIO_InitTypeDef.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 500              		.loc 1 526 0
 501 02fa A360     		str	r3, [r4, #8]
 527:../src/main.c **** 	GPIO_InitTypeDef.Alternate = LL_GPIO_AF_7;
 502              		.loc 1 527 0
 503 02fc 6661     		str	r6, [r4, #20]
 528:../src/main.c **** 	LL_GPIO_Init(GPIOA, &GPIO_InitTypeDef);		// RE-TE
 504              		.loc 1 528 0
 505 02fe 2146     		mov	r1, r4
 506 0300 4FF09040 		mov	r0, #1207959552
 507 0304 FFF7FEFF 		bl	LL_GPIO_Init
 508              	.LVL58:
 529:../src/main.c **** #endif
 530:../src/main.c **** 
 531:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B) || defined(PARATNC_HWREV_C)
 532:../src/main.c ****   // enabling the clock for both USARTs
 533:../src/main.c ****   RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 534:../src/main.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 535:../src/main.c **** #endif
 536:../src/main.c **** 
 537:../src/main.c ****   main_kiss_srl_ctx_ptr = &main_kiss_srl_ctx;
 509              		.loc 1 537 0
 510 0308 894B     		ldr	r3, .L119+16
 511 030a 8A4A     		ldr	r2, .L119+20
 512 030c 1A60     		str	r2, [r3]
 538:../src/main.c ****   main_wx_srl_ctx_ptr = &main_wx_srl_ctx;
 513              		.loc 1 538 0
 514 030e 8A4B     		ldr	r3, .L119+24
 515 0310 8A4A     		ldr	r2, .L119+28
 516 0312 1A60     		str	r2, [r3]
 539:../src/main.c **** 
 540:../src/main.c ****   main_target_kiss_baudrate = 9600u;
 517              		.loc 1 540 0
 518 0314 4FF41653 		mov	r3, #9600
 519 0318 894A     		ldr	r2, .L119+32
 520 031a 1360     		str	r3, [r2]
 541:../src/main.c ****   main_target_wx_baudrate = _SERIAL_BAUDRATE;
 521              		.loc 1 541 0
 522 031c 894A     		ldr	r2, .L119+36
 523 031e 1360     		str	r3, [r2]
 542:../src/main.c **** 
 543:../src/main.c **** #if defined(PARAMETEO)
 544:../src/main.c ****   // swtich power to M4. turn on sensors but keep GSM modem turned off
 545:../src/main.c ****   pwr_save_switch_mode_to_m4();
 524              		.loc 1 545 0
 525 0320 FFF7FEFF 		bl	pwr_save_switch_mode_to_m4
 526              	.LVL59:
 546:../src/main.c **** #endif
 547:../src/main.c **** 
 548:../src/main.c ****   // if Victron VE-direct protocol is enabled set the baudrate to the 19200u
 549:../src/main.c ****   if (main_config_data_mode->victron == 1) {
 527              		.loc 1 549 0
 528 0324 D9F80030 		ldr	r3, [r9]
 529 0328 DA79     		ldrb	r2, [r3, #7]	@ zero_extendqisi2
 530 032a 012A     		cmp	r2, #1
 531 032c 00F03881 		beq	.L80
 532              	.L23:
 550:../src/main.c ****     main_target_kiss_baudrate = 19200u;
 551:../src/main.c **** 
 552:../src/main.c ****     // and disable the kiss TNC option as it shares the same port
 553:../src/main.c ****     main_kiss_enabled = 0;
 554:../src/main.c ****   }
 555:../src/main.c **** 
 556:../src/main.c **** 
 557:../src/main.c ****   if (main_config_data_mode->wx_davis == 1) {
 533              		.loc 1 557 0
 534 0330 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 535 0332 012A     		cmp	r2, #1
 536 0334 00F03B81 		beq	.L81
 558:../src/main.c **** 	  // reinitialize the KISS serial port temporary to davis baudrate
 559:../src/main.c **** 	  main_target_kiss_baudrate = DAVIS_DEFAULT_BAUDRATE;
 560:../src/main.c **** 
 561:../src/main.c **** 	  // reset RX state to allow reinitialization with changed baudrate
 562:../src/main.c **** 	  main_kiss_srl_ctx_ptr->srl_rx_state = SRL_RX_NOT_CONFIG;
 563:../src/main.c **** 
 564:../src/main.c **** 	  // reinitializing serial hardware to wake up Davis wx station
 565:../src/main.c **** 	  srl_init(main_kiss_srl_ctx_ptr, USART1, srl_usart1_rx_buffer, RX_BUFFER_1_LN, srl_usart1_tx_buff
 566:../src/main.c **** 
 567:../src/main.c **** 	  srl_switch_timeout(main_kiss_srl_ctx_ptr, SRL_TIMEOUT_ENABLE, 3000);
 568:../src/main.c **** 
 569:../src/main.c **** 	  davis_init(main_kiss_srl_ctx_ptr);
 570:../src/main.c **** 
 571:../src/main.c **** 	  // try to wake up the davis base
 572:../src/main.c **** 	  rte_wx_davis_station_avaliable = (davis_wake_up(DAVIS_BLOCKING_IO) == 0 ? 1 : 0);
 573:../src/main.c **** 
 574:../src/main.c **** 	  // if davis weather stations is connected to SERIAL port
 575:../src/main.c **** 	  if (rte_wx_davis_station_avaliable == 1) {
 576:../src/main.c **** 		  // turn LCD backlight on..
 577:../src/main.c **** 		  davis_control_backlight(1);
 578:../src/main.c **** 
 579:../src/main.c **** 		  // wait for a while
 580:../src/main.c **** 		  delay_fixed(1000);
 581:../src/main.c **** 
 582:../src/main.c **** 		  // and then off to let the user know that communication is working
 583:../src/main.c **** 		  davis_control_backlight(0);
 584:../src/main.c **** 
 585:../src/main.c **** 		  // disable the KISS modem as the UART will be used for DAVIS wx station
 586:../src/main.c **** 		  main_kiss_enabled = 0;
 587:../src/main.c **** 
 588:../src/main.c **** 		  // enable the davis serial protocol client to allow pooling callbacks to be called in main loop
 589:../src/main.c **** 		  // This only controls the callback it doesn't mean that the station itself is responding to
 590:../src/main.c **** 		  // communication. It stays set to one event if Davis station
 591:../src/main.c **** 		  main_davis_serial_enabled = 1;
 592:../src/main.c **** 
 593:../src/main.c **** 		  // trigger the rxcheck to get all counter values
 594:../src/main.c **** 		  davis_trigger_rxcheck_packet();
 595:../src/main.c **** 
 596:../src/main.c **** 	  }
 597:../src/main.c **** 	  else {
 598:../src/main.c **** 		  // if not revert back to KISS configuration
 599:../src/main.c **** 		  main_target_kiss_baudrate = 9600u;
 600:../src/main.c **** 		  main_kiss_srl_ctx_ptr->srl_rx_state = SRL_RX_NOT_CONFIG;
 601:../src/main.c **** 
 602:../src/main.c **** 		  // initializing UART drvier
 603:../src/main.c **** 		  srl_init(main_kiss_srl_ctx_ptr, USART1, srl_usart1_rx_buffer, RX_BUFFER_1_LN, srl_usart1_tx_buf
 604:../src/main.c **** 		  srl_init(main_wx_srl_ctx_ptr, USART2, srl_usart2_rx_buffer, RX_BUFFER_2_LN, srl_usart2_tx_buffe
 605:../src/main.c **** 
 606:../src/main.c **** 	  }
 607:../src/main.c ****   }
 608:../src/main.c ****   else if (main_config_data_mode->wx_modbus == 1) {
 537              		.loc 1 608 0
 538 0338 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 539 033a 012B     		cmp	r3, #1
 540 033c 00F09481 		beq	.L82
 609:../src/main.c **** 
 610:../src/main.c **** 	  rtu_serial_init(&rte_rtu_pool_queue, 1, main_wx_srl_ctx_ptr, main_config_data_rtu);
 611:../src/main.c **** 
 612:../src/main.c **** 	  main_target_wx_baudrate = main_config_data_rtu->slave_speed;
 613:../src/main.c **** 
 614:../src/main.c **** 	  // initialize serial ports according to RS485 network configuration for Modbus-RTU
 615:../src/main.c **** 	  srl_init(main_kiss_srl_ctx_ptr, USART1, srl_usart1_rx_buffer, RX_BUFFER_1_LN, srl_usart1_tx_buff
 616:../src/main.c **** 	  srl_init(main_wx_srl_ctx_ptr, USART2, srl_usart2_rx_buffer, RX_BUFFER_2_LN, srl_usart2_tx_buffer
 617:../src/main.c **** 	  srl_switch_tx_delay(main_wx_srl_ctx_ptr, 1);
 618:../src/main.c **** 
 619:../src/main.c **** 	  // enabling rtu master code
 620:../src/main.c **** 	  main_modbus_rtu_master_enabled = 1;
 621:../src/main.c **** 
 622:../src/main.c **** 	  rtu_serial_start();
 623:../src/main.c ****   }
 624:../src/main.c ****   else {
 625:../src/main.c **** 	  // initializing UART drvier
 626:../src/main.c **** 	  srl_init(main_kiss_srl_ctx_ptr, USART1, srl_usart1_rx_buffer, RX_BUFFER_1_LN, srl_usart1_tx_buff
 541              		.loc 1 626 0
 542 0340 7B4B     		ldr	r3, .L119+16
 543 0342 1868     		ldr	r0, [r3]
 544 0344 0124     		movs	r4, #1
 545 0346 0394     		str	r4, [sp, #12]
 546 0348 7D4B     		ldr	r3, .L119+32
 547 034a 1B68     		ldr	r3, [r3]
 548 034c 0293     		str	r3, [sp, #8]
 549 034e 4FF40073 		mov	r3, #512
 550 0352 0193     		str	r3, [sp, #4]
 551 0354 7C4A     		ldr	r2, .L119+40
 552 0356 0092     		str	r2, [sp]
 553 0358 7C4A     		ldr	r2, .L119+44
 554 035a 7D49     		ldr	r1, .L119+48
 555 035c FFF7FEFF 		bl	srl_init
 556              	.LVL60:
 627:../src/main.c **** 	  srl_init(main_wx_srl_ctx_ptr, USART2, srl_usart2_rx_buffer, RX_BUFFER_2_LN, srl_usart2_tx_buffer
 557              		.loc 1 627 0
 558 0360 754B     		ldr	r3, .L119+24
 559 0362 1868     		ldr	r0, [r3]
 560 0364 0394     		str	r4, [sp, #12]
 561 0366 774B     		ldr	r3, .L119+36
 562 0368 1B68     		ldr	r3, [r3]
 563 036a 0293     		str	r3, [sp, #8]
 564 036c 6023     		movs	r3, #96
 565 036e 0193     		str	r3, [sp, #4]
 566 0370 784A     		ldr	r2, .L119+52
 567 0372 0092     		str	r2, [sp]
 568 0374 784A     		ldr	r2, .L119+56
 569 0376 7949     		ldr	r1, .L119+60
 570 0378 FFF7FEFF 		bl	srl_init
 571              	.LVL61:
 572              	.L26:
 628:../src/main.c ****   }
 629:../src/main.c **** 
 630:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B)
 631:../src/main.c ****   main_wx_srl_ctx_ptr->te_pin = GPIO_Pin_7;
 632:../src/main.c ****   main_wx_srl_ctx_ptr->te_port = GPIOA;
 633:../src/main.c **** #endif
 634:../src/main.c **** #if defined(PARATNC_HWREV_C)
 635:../src/main.c ****   main_wx_srl_ctx_ptr->te_pin = GPIO_Pin_8;
 636:../src/main.c ****   main_wx_srl_ctx_ptr->te_port = GPIOA;
 637:../src/main.c **** #endif
 638:../src/main.c **** #if defined(PARAMETEO)
 639:../src/main.c ****   main_wx_srl_ctx_ptr->te_pin = LL_GPIO_PIN_8;
 573              		.loc 1 639 0
 574 037c 6E4B     		ldr	r3, .L119+24
 575 037e 1B68     		ldr	r3, [r3]
 576 0380 4FF48072 		mov	r2, #256
 577 0384 1A82     		strh	r2, [r3, #16]	@ movhi
 640:../src/main.c ****   main_wx_srl_ctx_ptr->te_port = GPIOA;
 578              		.loc 1 640 0
 579 0386 4FF09042 		mov	r2, #1207959552
 580 038a DA60     		str	r2, [r3, #12]
 641:../src/main.c **** #endif
 642:../src/main.c **** 
 643:../src/main.c ****   // initialize APRS path with zeros
 644:../src/main.c ****   memset (main_own_path, 0x00, sizeof(main_own_path));
 581              		.loc 1 644 0
 582 038c 744C     		ldr	r4, .L119+64
 583 038e 1522     		movs	r2, #21
 584 0390 0021     		movs	r1, #0
 585 0392 2046     		mov	r0, r4
 586 0394 FFF7FEFF 		bl	memset
 587              	.LVL62:
 645:../src/main.c **** 
 646:../src/main.c ****   // configuring an APRS path used to transmit own packets (telemetry, wx, beacons)
 647:../src/main.c ****   main_own_path_ln = ConfigPath(main_own_path, main_config_data_basic);
 588              		.loc 1 647 0
 589 0398 724B     		ldr	r3, .L119+68
 590 039a 1968     		ldr	r1, [r3]
 591 039c 2046     		mov	r0, r4
 592 039e FFF7FEFF 		bl	ConfigPath
 593              	.LVL63:
 594 03a2 714B     		ldr	r3, .L119+72
 595 03a4 1870     		strb	r0, [r3]
 648:../src/main.c **** 
 649:../src/main.c **** #ifdef INTERNAL_WATCHDOG
 650:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B) || defined(PARATNC_HWREV_C)
 651:../src/main.c ****   // enable write access to watchdog registers
 652:../src/main.c ****   IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
 653:../src/main.c **** 
 654:../src/main.c ****   // Set watchdog prescaler
 655:../src/main.c ****   IWDG_SetPrescaler(IWDG_Prescaler_128);
 656:../src/main.c **** 
 657:../src/main.c ****   // Set the counter value to program watchdog for about 13 seconds
 658:../src/main.c ****   IWDG_SetReload(0xFFF);
 659:../src/main.c **** 
 660:../src/main.c ****   // enable the watchdog
 661:../src/main.c ****   IWDG_Enable();
 662:../src/main.c **** 
 663:../src/main.c ****   // do not disable the watchdog when the core is halted on a breakpoint
 664:../src/main.c ****   DBGMCU_Config(DBGMCU_IWDG_STOP, ENABLE);
 665:../src/main.c **** 
 666:../src/main.c ****   // reload watchdog counter
 667:../src/main.c ****   IWDG_ReloadCounter();
 668:../src/main.c **** #endif
 669:../src/main.c **** #endif
 670:../src/main.c **** 
 671:../src/main.c **** #ifdef _METEO
 672:../src/main.c ****   // initialize i2c controller
 673:../src/main.c ****   i2cConfigure();
 596              		.loc 1 673 0
 597 03a6 FFF7FEFF 		bl	i2cConfigure
 598              	.LVL64:
 674:../src/main.c **** #endif
 675:../src/main.c **** 
 676:../src/main.c ****   // initialize GPIO pins leds are connecting to
 677:../src/main.c ****   led_init();
 599              		.loc 1 677 0
 600 03aa FFF7FEFF 		bl	led_init
 601              	.LVL65:
 678:../src/main.c **** 
 679:../src/main.c ****   // initialize AX25 & APRS stuff
 680:../src/main.c ****   AFSK_Init(&main_afsk);
 602              		.loc 1 680 0
 603 03ae 6F4C     		ldr	r4, .L119+76
 604 03b0 2046     		mov	r0, r4
 605 03b2 FFF7FEFF 		bl	AFSK_Init
 606              	.LVL66:
 681:../src/main.c ****   ax25_init(&main_ax25, &main_afsk, 0, 0x00);
 607              		.loc 1 681 0
 608 03b6 0023     		movs	r3, #0
 609 03b8 1A46     		mov	r2, r3
 610 03ba 2146     		mov	r1, r4
 611 03bc 6C48     		ldr	r0, .L119+80
 612 03be FFF7FEFF 		bl	ax25_init
 613              	.LVL67:
 682:../src/main.c ****   DA_Init();
 614              		.loc 1 682 0
 615 03c2 FFF7FEFF 		bl	DA_Init
 616              	.LVL68:
 683:../src/main.c **** 
 684:../src/main.c ****   // configure external watchdog
 685:../src/main.c ****   io_ext_watchdog_config();
 617              		.loc 1 685 0
 618 03c6 FFF7FEFF 		bl	io_ext_watchdog_config
 619              	.LVL69:
 686:../src/main.c **** 
 687:../src/main.c ****   // initializing the digipeater configuration
 688:../src/main.c ****   digi_init(main_config_data_mode);
 620              		.loc 1 688 0
 621 03ca 6A4C     		ldr	r4, .L119+84
 622 03cc 2068     		ldr	r0, [r4]
 623 03ce FFF7FEFF 		bl	digi_init
 624              	.LVL70:
 689:../src/main.c **** 
 690:../src/main.c ****   if ((main_config_data_mode->wx & WX_ENABLED) == 1) {
 625              		.loc 1 690 0
 626 03d2 2368     		ldr	r3, [r4]
 627 03d4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 628 03d6 13F0010F 		tst	r3, #1
 629 03da 40F07881 		bne	.L83
 630              	.L28:
 691:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B) || defined(PARATNC_HWREV_C)
 692:../src/main.c **** 	  dallas_init(GPIOC, GPIO_Pin_11, GPIO_PinSource11, &rte_wx_dallas_average);
 693:../src/main.c **** #endif
 694:../src/main.c **** 
 695:../src/main.c **** #if defined(PARAMETEO)
 696:../src/main.c **** 
 697:../src/main.c **** 	  // switch on voltages exclusively for ParaMETEO
 698:../src/main.c **** 
 699:../src/main.c **** 	  // initialize dallas one-wire driver for termometer
 700:../src/main.c **** 	  dallas_init(GPIOC, LL_GPIO_PIN_11, 0x0, &rte_wx_dallas_average);
 701:../src/main.c **** #endif
 702:../src/main.c **** 
 703:../src/main.c **** 	  if (main_config_data_mode->wx_umb == 1) {
 704:../src/main.c **** 		  // client initialization
 705:../src/main.c **** 		  umb_master_init(&rte_wx_umb_context, main_wx_srl_ctx_ptr, main_config_data_umb);
 706:../src/main.c **** 	  }
 707:../src/main.c **** 
 708:../src/main.c **** 	  if ((main_config_data_mode->wx & WX_INTERNAL_SPARKFUN_WIND) == 0) {
 709:../src/main.c **** 		  analog_anemometer_init(main_config_data_mode->wx_anemometer_pulses_constant, 38, 100, 1);
 710:../src/main.c **** 	  }
 711:../src/main.c **** 	  else {
 712:../src/main.c **** 		  analog_anemometer_init(main_config_data_mode->wx_anemometer_pulses_constant, 38, 100, 1);
 713:../src/main.c **** 	  }
 714:../src/main.c ****   }
 715:../src/main.c **** 
 716:../src/main.c ****   // configuring interrupt priorities
 717:../src/main.c ****   it_handlers_set_priorities();
 631              		.loc 1 717 0
 632 03de FFF7FEFF 		bl	it_handlers_set_priorities
 633              	.LVL71:
 718:../src/main.c **** 
 719:../src/main.c **** 	if (main_config_data_mode->wx_ms5611_or_bme == 0) {
 634              		.loc 1 719 0
 635 03e2 644B     		ldr	r3, .L119+84
 636 03e4 1B68     		ldr	r3, [r3]
 637 03e6 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 638 03e8 002B     		cmp	r3, #0
 639 03ea 00F09681 		beq	.L84
 720:../src/main.c **** 	 ms5611_reset(&rte_wx_ms5611_qf);
 721:../src/main.c **** 	 ms5611_read_calibration(SensorCalData, &rte_wx_ms5611_qf);
 722:../src/main.c **** 	 ms5611_trigger_measure(0, 0);
 723:../src/main.c **** 	}
 724:../src/main.c **** 	else if (main_config_data_mode->wx_ms5611_or_bme == 1) {
 640              		.loc 1 724 0
 641 03ee 012B     		cmp	r3, #1
 642 03f0 00F0A081 		beq	.L85
 643              	.L32:
 725:../src/main.c **** 	 bme280_reset(&rte_wx_bme280_qf);
 726:../src/main.c **** 	 bme280_setup();
 727:../src/main.c **** 	 bme280_read_calibration(bme280_calibration_data);
 728:../src/main.c **** 	}
 729:../src/main.c **** 
 730:../src/main.c ****  if (main_kiss_enabled == 1) {
 644              		.loc 1 730 0
 645 03f4 604B     		ldr	r3, .L119+88
 646 03f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 647 03f8 012B     		cmp	r3, #1
 648 03fa 00F0A481 		beq	.L86
 649              	.LVL72:
 650              	.L33:
 731:../src/main.c **** 	  // preparing initial beacon which will be sent to host PC using KISS protocol via UART
 732:../src/main.c **** 	  main_own_aprs_msg_len = sprintf(main_own_aprs_msg, "=%s%c%c%s%c%c %s", main_string_latitude, mai
 733:../src/main.c **** 
 734:../src/main.c **** 	  // terminating the aprs message
 735:../src/main.c **** 	  main_own_aprs_msg[main_own_aprs_msg_len] = 0;
 736:../src/main.c **** 
 737:../src/main.c **** 	  // 'sending' the message which will only encapsulate it inside AX25 protocol (ax25_starttx is no
 738:../src/main.c **** 	  //ax25_sendVia(&main_ax25, main_own_path, (sizeof(main_own_path) / sizeof(*(main_own_path))), ma
 739:../src/main.c **** 	  ln = ax25_sendVia_toBuffer(main_own_path, (sizeof(main_own_path) / sizeof(*(main_own_path))), ma
 740:../src/main.c **** 
 741:../src/main.c **** 	  // SendKISSToHost function cleares the output buffer hence routine need to wait till the UART wi
 742:../src/main.c **** 	  // Here this could be omitted because UART isn't used before but general idea
 743:../src/main.c **** 	  while(main_kiss_srl_ctx.srl_tx_state != SRL_TX_IDLE && main_kiss_srl_ctx.srl_tx_state != SRL_TX_
 744:../src/main.c **** 
 745:../src/main.c **** 	  // converting AX25 with beacon to KISS format
 746:../src/main.c **** 	  //ln = SendKISSToHost(main_afsk.tx_buf + 1, main_afsk.tx_fifo.tail - main_afsk.tx_fifo.head - 4,
 747:../src/main.c **** 
 748:../src/main.c **** 
 749:../src/main.c **** 	  // checking if KISS-framing was done correctly
 750:../src/main.c **** 	  if (ln != KISS_TOO_LONG_FRM) {
 751:../src/main.c **** 	#ifdef SERIAL_TX_TEST_MODE
 752:../src/main.c **** 		  // infinite loop for testing UART transmission
 753:../src/main.c **** 		  for (;;) {
 754:../src/main.c **** 
 755:../src/main.c **** 			  retval = srl_receive_data(main_kiss_srl_ctx_ptr, 100, FEND, FEND, 0, 0, 0);
 756:../src/main.c **** 	#endif
 757:../src/main.c **** 			  retval = srl_start_tx(main_kiss_srl_ctx_ptr, ln);
 758:../src/main.c **** 
 759:../src/main.c **** 	#ifdef SERIAL_TX_TEST_MODE
 760:../src/main.c **** 			  	  	while(main_kiss_srl_ctx_ptr->srl_tx_state != SRL_TX_IDLE);
 761:../src/main.c **** 
 762:../src/main.c **** 				#if defined(PARAMETEO)
 763:../src/main.c **** 			  	 	LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_9);
 764:../src/main.c **** 				#else
 765:../src/main.c **** 		  	  		GPIOC->ODR = (GPIOC->ODR ^ GPIO_Pin_9);
 766:../src/main.c **** 				#endif
 767:../src/main.c **** 
 768:../src/main.c **** 			  if (main_kiss_srl_ctx_ptr->srl_rx_state == SRL_RX_DONE) {
 769:../src/main.c **** 				#if defined(PARAMETEO)
 770:../src/main.c **** 			  	 		LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_9);
 771:../src/main.c **** 				#else
 772:../src/main.c **** 						GPIOC->ODR = (GPIOC->ODR ^ GPIO_Pin_9);
 773:../src/main.c **** 				#endif
 774:../src/main.c **** 				  retval = 200;
 775:../src/main.c **** 			  }
 776:../src/main.c **** 		  }
 777:../src/main.c **** 	#endif
 778:../src/main.c **** 	  }
 779:../src/main.c **** 
 780:../src/main.c ****  }
 781:../src/main.c **** 
 782:../src/main.c ****   // reinitializing AFSK and AX25 driver
 783:../src/main.c ****   AFSK_Init(&main_afsk);
 651              		.loc 1 783 0
 652 03fe 5B4C     		ldr	r4, .L119+76
 653 0400 2046     		mov	r0, r4
 654 0402 FFF7FEFF 		bl	AFSK_Init
 655              	.LVL73:
 784:../src/main.c **** 
 785:../src/main.c ****   ADCStartConfig();
 656              		.loc 1 785 0
 657 0406 FFF7FEFF 		bl	ADCStartConfig
 658              	.LVL74:
 786:../src/main.c ****   DACStartConfig();
 659              		.loc 1 786 0
 660 040a FFF7FEFF 		bl	DACStartConfig
 661              	.LVL75:
 787:../src/main.c ****   AFSK_Init(&main_afsk);
 662              		.loc 1 787 0
 663 040e 2046     		mov	r0, r4
 664 0410 FFF7FEFF 		bl	AFSK_Init
 665              	.LVL76:
 788:../src/main.c ****   ax25_init(&main_ax25, &main_afsk, 0, message_callback);
 666              		.loc 1 788 0
 667 0414 594B     		ldr	r3, .L119+92
 668 0416 0022     		movs	r2, #0
 669 0418 2146     		mov	r1, r4
 670 041a 5548     		ldr	r0, .L119+80
 671 041c FFF7FEFF 		bl	ax25_init
 672              	.LVL77:
 789:../src/main.c **** 
 790:../src/main.c **** 	if ((main_config_data_mode->wx & WX_ENABLED) == 1) {
 673              		.loc 1 790 0
 674 0420 544B     		ldr	r3, .L119+84
 675 0422 1968     		ldr	r1, [r3]
 676 0424 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 677 0426 13F0010F 		tst	r3, #1
 678 042a 40F0C481 		bne	.L87
 679              	.L36:
 791:../src/main.c **** 	  // getting all meteo measuremenets to be sure that WX frames want be sent with zeros
 792:../src/main.c **** 	  wx_get_all_measurements(main_config_data_wx_sources, main_config_data_mode, main_config_data_umb
 793:../src/main.c **** 	}
 794:../src/main.c **** 
 795:../src/main.c ****   // start serial port i/o transaction depending on station configuration
 796:../src/main.c ****   if (main_config_data_mode->victron == 1) {
 680              		.loc 1 796 0
 681 042e 514B     		ldr	r3, .L119+84
 682 0430 1B68     		ldr	r3, [r3]
 683 0432 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 684 0434 012B     		cmp	r3, #1
 685 0436 00F0C781 		beq	.L88
 797:../src/main.c **** 	  // initializing protocol parser
 798:../src/main.c **** 	  ve_direct_parser_init(&rte_pv_struct, &rte_pv_average);
 799:../src/main.c **** 
 800:../src/main.c **** 	  // enabling timeout handling for serial port. This is required because VE protocol frame may var
 801:../src/main.c **** 	  // and serial port driver could finish reception only either on stop character or when declared 
 802:../src/main.c **** 	  // has been received.
 803:../src/main.c **** 	  srl_switch_timeout(main_kiss_srl_ctx_ptr, 1, 50);
 804:../src/main.c **** 
 805:../src/main.c **** 	  // switching UART to receive mode to be ready for data from charging controller
 806:../src/main.c **** 	  srl_receive_data(main_kiss_srl_ctx_ptr, VE_DIRECT_MAX_FRAME_LN, 0, 0, 0, 0, 0);
 807:../src/main.c ****   }
 808:../src/main.c ****   else {
 809:../src/main.c **** 	  // switching UART to receive mode to be ready for KISS frames from host
 810:../src/main.c **** 	  srl_receive_data(main_kiss_srl_ctx_ptr, 100, FEND, FEND, 0, 0, 0);
 686              		.loc 1 810 0
 687 043a 3D4B     		ldr	r3, .L119+16
 688 043c 1868     		ldr	r0, [r3]
 689 043e 0023     		movs	r3, #0
 690 0440 0293     		str	r3, [sp, #8]
 691 0442 0193     		str	r3, [sp, #4]
 692 0444 0093     		str	r3, [sp]
 693 0446 6FF03F03 		mvn	r3, #63
 694 044a 1A46     		mov	r2, r3
 695 044c 6421     		movs	r1, #100
 696 044e FFF7FEFF 		bl	srl_receive_data
 697              	.LVL78:
 698              	.L38:
 811:../src/main.c ****   }
 812:../src/main.c **** 
 813:../src/main.c ****   io_oc_output_low();
 699              		.loc 1 813 0
 700 0452 FFF7FEFF 		bl	io_oc_output_low
 701              	.LVL79:
 702              	.LBB54:
 703              	.LBB55:
 704              		.file 2 "../include/LedConfig.h"
   1:../include/LedConfig.h **** /*
   2:../include/LedConfig.h ****  * LedConfig.h
   3:../include/LedConfig.h ****  *
   4:../include/LedConfig.h ****  *  Created on: 05.07.2017
   5:../include/LedConfig.h ****  *      Author: mateusz
   6:../include/LedConfig.h ****  */
   7:../include/LedConfig.h **** 
   8:../include/LedConfig.h **** #ifndef LEDCONFIG_H_
   9:../include/LedConfig.h **** #define LEDCONFIG_H_
  10:../include/LedConfig.h **** 
  11:../include/LedConfig.h **** // PC8 - LED1 - upper
  12:../include/LedConfig.h **** // PC9 - LED2 - lower
  13:../include/LedConfig.h **** 
  14:../include/LedConfig.h **** #ifdef STM32F10X_MD_VL
  15:../include/LedConfig.h **** #include <stm32f10x.h>
  16:../include/LedConfig.h **** #endif
  17:../include/LedConfig.h **** #ifdef STM32L471xx
  18:../include/LedConfig.h **** #include <stm32l4xx.h>
  19:../include/LedConfig.h **** #include <stm32l4xx_ll_gpio.h>
  20:../include/LedConfig.h **** #endif
  21:../include/LedConfig.h **** 
  22:../include/LedConfig.h **** #include <stdint.h>
  23:../include/LedConfig.h **** #include <stdbool.h>
  24:../include/LedConfig.h **** 
  25:../include/LedConfig.h **** #define BLINK_DURATION_MSEC 		20 * BLINK_MSEC_PER_SVC_CALL
  26:../include/LedConfig.h **** #define BLINK_MSEC_PER_SVC_CALL 	10
  27:../include/LedConfig.h **** 
  28:../include/LedConfig.h **** /* C++ detection */
  29:../include/LedConfig.h **** #ifdef __cplusplus
  30:../include/LedConfig.h **** extern "C" {
  31:../include/LedConfig.h **** #endif
  32:../include/LedConfig.h **** 
  33:../include/LedConfig.h **** extern uint8_t led_blinking_led2;
  34:../include/LedConfig.h **** extern uint8_t led_blinking_led1;
  35:../include/LedConfig.h **** 
  36:../include/LedConfig.h **** void led_config(void);
  37:../include/LedConfig.h **** void led_init(void);
  38:../include/LedConfig.h **** void led_service_blink(void);
  39:../include/LedConfig.h **** 
  40:../include/LedConfig.h **** #ifdef STM32F10X_MD_VL
  41:../include/LedConfig.h **** inline void led_control_led1_upper(bool _in) {
  42:../include/LedConfig.h **** 	if (_in == true) {
  43:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BS8;
  44:../include/LedConfig.h **** 	}
  45:../include/LedConfig.h **** 	else {
  46:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BR8;
  47:../include/LedConfig.h **** 	}
  48:../include/LedConfig.h **** }
  49:../include/LedConfig.h **** 
  50:../include/LedConfig.h **** inline void led_control_led2_bottom(bool _in) {
  51:../include/LedConfig.h **** 	if (_in == true) {
  52:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BS9;
  53:../include/LedConfig.h **** 	}
  54:../include/LedConfig.h **** 	else {
  55:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BR9;
  56:../include/LedConfig.h **** 	}
  57:../include/LedConfig.h **** }
  58:../include/LedConfig.h **** 
  59:../include/LedConfig.h **** inline void led_flip_led1_upper(void) {
  60:../include/LedConfig.h **** 	if ((GPIOC->ODR & GPIO_ODR_ODR8)  == GPIO_ODR_ODR8) {
  61:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BR8;
  62:../include/LedConfig.h **** 	}
  63:../include/LedConfig.h **** 	else {
  64:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BS8;
  65:../include/LedConfig.h **** 	}
  66:../include/LedConfig.h **** }
  67:../include/LedConfig.h **** 
  68:../include/LedConfig.h **** inline void led_flip_led2_bottom(void) {
  69:../include/LedConfig.h **** 	if ((GPIOC->ODR & GPIO_ODR_ODR9)  == GPIO_ODR_ODR9) {
  70:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BR9;
  71:../include/LedConfig.h **** 	}
  72:../include/LedConfig.h **** 	else {
  73:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BS9;
  74:../include/LedConfig.h **** 	}
  75:../include/LedConfig.h **** }
  76:../include/LedConfig.h **** 
  77:../include/LedConfig.h **** inline void led_blink_led1_upper(void) {
  78:../include/LedConfig.h **** 	led_blinking_led1 = BLINK_DURATION_MSEC;
  79:../include/LedConfig.h **** 
  80:../include/LedConfig.h **** 	led_flip_led1_upper();
  81:../include/LedConfig.h **** }
  82:../include/LedConfig.h **** 
  83:../include/LedConfig.h **** inline void led_blink_led2_botoom(void) {
  84:../include/LedConfig.h **** 	led_blinking_led2 = BLINK_DURATION_MSEC;
  85:../include/LedConfig.h **** 
  86:../include/LedConfig.h **** 	led_flip_led2_bottom();
  87:../include/LedConfig.h **** 
  88:../include/LedConfig.h **** }
  89:../include/LedConfig.h **** #endif
  90:../include/LedConfig.h **** 
  91:../include/LedConfig.h **** #ifdef STM32L471xx
  92:../include/LedConfig.h **** inline void led_control_led1_upper(bool _in) {
  93:../include/LedConfig.h **** 	if (_in == true) {
  94:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BS8;
  95:../include/LedConfig.h **** 	}
  96:../include/LedConfig.h **** 	else {
  97:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BR8;
 705              		.loc 2 97 0
 706 0456 4A4C     		ldr	r4, .L119+96
 707 0458 A369     		ldr	r3, [r4, #24]
 708 045a 43F08073 		orr	r3, r3, #16777216
 709 045e A361     		str	r3, [r4, #24]
 710              	.LVL80:
 711              	.LBE55:
 712              	.LBE54:
 713              	.LBB56:
 714              	.LBB57:
  98:../include/LedConfig.h **** 	}
  99:../include/LedConfig.h **** }
 100:../include/LedConfig.h **** 
 101:../include/LedConfig.h **** inline void led_control_led2_bottom(bool _in) {
 102:../include/LedConfig.h **** 	if (_in == true) {
 103:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BS9;
 104:../include/LedConfig.h **** 	}
 105:../include/LedConfig.h **** 	else {
 106:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BR9;
 715              		.loc 2 106 0
 716 0460 A369     		ldr	r3, [r4, #24]
 717 0462 43F00073 		orr	r3, r3, #33554432
 718 0466 A361     		str	r3, [r4, #24]
 719              	.LVL81:
 720              	.LBE57:
 721              	.LBE56:
 814:../src/main.c **** 
 815:../src/main.c ****   led_control_led1_upper(false);
 816:../src/main.c ****   led_control_led2_bottom(false);
 817:../src/main.c **** 
 818:../src/main.c **** #if defined(PARAMETEO)
 819:../src/main.c ****    pwr_save_switch_mode_to_c0();
 722              		.loc 1 819 0
 723 0468 FFF7FEFF 		bl	pwr_save_switch_mode_to_c0
 724              	.LVL82:
 820:../src/main.c **** 
 821:../src/main.c ****    // sleep a little bit and wait for everything to power up completely
 822:../src/main.c ****    delay_fixed(1000);
 725              		.loc 1 822 0
 726 046c 4FF47A70 		mov	r0, #1000
 727 0470 FFF7FEFF 		bl	delay_fixed
 728              	.LVL83:
 729              	.LBB58:
 730              	.LBB59:
  94:../include/LedConfig.h **** 	}
 731              		.loc 2 94 0
 732 0474 A369     		ldr	r3, [r4, #24]
 733 0476 43F48073 		orr	r3, r3, #256
 734 047a A361     		str	r3, [r4, #24]
 735              	.LVL84:
 736              	.LBE59:
 737              	.LBE58:
 738              	.LBB60:
 739              	.LBB61:
 740              		.loc 2 106 0
 741 047c A369     		ldr	r3, [r4, #24]
 742 047e 43F00073 		orr	r3, r3, #33554432
 743 0482 A361     		str	r3, [r4, #24]
 744              	.LVL85:
 745              	.LBE61:
 746              	.LBE60:
 823:../src/main.c **** 
 824:../src/main.c ****    led_control_led1_upper(true);
 825:../src/main.c ****    led_control_led2_bottom(false);
 826:../src/main.c **** 
 827:../src/main.c ****    delay_fixed(1000);
 747              		.loc 1 827 0
 748 0484 4FF47A70 		mov	r0, #1000
 749 0488 FFF7FEFF 		bl	delay_fixed
 750              	.LVL86:
 751              	.LBB62:
 752              	.LBB63:
  97:../include/LedConfig.h **** 	}
 753              		.loc 2 97 0
 754 048c A369     		ldr	r3, [r4, #24]
 755 048e 43F08073 		orr	r3, r3, #16777216
 756 0492 A361     		str	r3, [r4, #24]
 757              	.LVL87:
 758              	.LBE63:
 759              	.LBE62:
 760              	.LBB64:
 761              	.LBB65:
 103:../include/LedConfig.h **** 	}
 762              		.loc 2 103 0
 763 0494 A369     		ldr	r3, [r4, #24]
 764 0496 43F40073 		orr	r3, r3, #512
 765 049a A361     		str	r3, [r4, #24]
 766              	.LVL88:
 767              	.LBE65:
 768              	.LBE64:
 828:../src/main.c **** 
 829:../src/main.c ****    led_control_led1_upper(false);
 830:../src/main.c ****    led_control_led2_bottom(true);
 831:../src/main.c **** 
 832:../src/main.c ****    delay_fixed(1000);
 769              		.loc 1 832 0
 770 049c 4FF47A70 		mov	r0, #1000
 771 04a0 FFF7FEFF 		bl	delay_fixed
 772              	.LVL89:
 773              	.LBB66:
 774              	.LBB67:
  94:../include/LedConfig.h **** 	}
 775              		.loc 2 94 0
 776 04a4 A369     		ldr	r3, [r4, #24]
 777 04a6 43F48073 		orr	r3, r3, #256
 778 04aa A361     		str	r3, [r4, #24]
 779              	.LVL90:
 780              	.LBE67:
 781              	.LBE66:
 782              	.LBB68:
 783              	.LBB69:
 103:../include/LedConfig.h **** 	}
 784              		.loc 2 103 0
 785 04ac A369     		ldr	r3, [r4, #24]
 786 04ae 43F40073 		orr	r3, r3, #512
 787 04b2 A361     		str	r3, [r4, #24]
 788              	.LVL91:
 789              	.LBE69:
 790              	.LBE68:
 833:../src/main.c **** 
 834:../src/main.c ****    led_control_led1_upper(true);
 835:../src/main.c ****    led_control_led2_bottom(true);
 836:../src/main.c **** 
 837:../src/main.c ****    delay_fixed(1000);
 791              		.loc 1 837 0
 792 04b4 4FF47A70 		mov	r0, #1000
 793 04b8 FFF7FEFF 		bl	delay_fixed
 794              	.LVL92:
 795              	.LBB70:
 796              	.LBB71:
  97:../include/LedConfig.h **** 	}
 797              		.loc 2 97 0
 798 04bc A369     		ldr	r3, [r4, #24]
 799 04be 43F08073 		orr	r3, r3, #16777216
 800 04c2 A361     		str	r3, [r4, #24]
 801              	.LVL93:
 802              	.LBE71:
 803              	.LBE70:
 804              	.LBB72:
 805              	.LBB73:
 806              		.loc 2 106 0
 807 04c4 A369     		ldr	r3, [r4, #24]
 808 04c6 43F00073 		orr	r3, r3, #33554432
 809 04ca A361     		str	r3, [r4, #24]
 810              	.LVL94:
 811              	.LBE73:
 812              	.LBE72:
 838:../src/main.c **** 
 839:../src/main.c ****    led_control_led1_upper(false);
 840:../src/main.c ****    led_control_led2_bottom(false);
 841:../src/main.c **** 
 842:../src/main.c **** #endif
 843:../src/main.c **** 
 844:../src/main.c ****   // configuting system timers
 845:../src/main.c ****   TimerConfig();
 813              		.loc 1 845 0
 814 04cc FFF7FEFF 		bl	TimerConfig
 815              	.LVL95:
 846:../src/main.c **** 
 847:../src/main.c ****   // initialize UMB transaction
 848:../src/main.c ****   if (main_config_data_mode->wx_umb == 1) {
 816              		.loc 1 848 0
 817 04d0 284B     		ldr	r3, .L119+84
 818 04d2 1B68     		ldr	r3, [r3]
 819 04d4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 820 04d6 012B     		cmp	r3, #1
 821 04d8 00F08A81 		beq	.L89
 822              	.L39:
 849:../src/main.c **** 	umb_0x26_status_request(&rte_wx_umb, &rte_wx_umb_context, main_config_data_umb);
 850:../src/main.c ****   }
 851:../src/main.c **** 
 852:../src/main.c **** #ifdef INTERNAL_WATCHDOG
 853:../src/main.c ****    // reload watchdog counter
 854:../src/main.c ****    IWDG_ReloadCounter();
 855:../src/main.c **** #endif
 856:../src/main.c **** 
 857:../src/main.c ****    io_ext_watchdog_service();
 823              		.loc 1 857 0
 824 04dc FFF7FEFF 		bl	io_ext_watchdog_service
 825              	.LVL96:
 858:../src/main.c **** 
 859:../src/main.c ****    if (main_config_data_basic-> beacon_at_bootup == 1) {
 826              		.loc 1 859 0
 827 04e0 204B     		ldr	r3, .L119+68
 828 04e2 1B68     		ldr	r3, [r3]
 829 04e4 93F89730 		ldrb	r3, [r3, #151]	@ zero_extendqisi2
 830 04e8 012B     		cmp	r3, #1
 831 04ea 40F06582 		bne	.L68
 860:../src/main.c **** 	   beacon_send_own();
 832              		.loc 1 860 0
 833 04ee FFF7FEFF 		bl	beacon_send_own
 834              	.LVL97:
 835 04f2 61E2     		b	.L68
 836              	.LVL98:
 837              	.L18:
 416:../src/main.c **** 	  main_symbol_s = '#';
 838              		.loc 1 416 0
 839 04f4 0A4B     		ldr	r3, .L119
 840 04f6 3122     		movs	r2, #49
 841 04f8 1A70     		strb	r2, [r3]
 417:../src/main.c **** 	  break;
 842              		.loc 1 417 0
 843 04fa 0A4B     		ldr	r3, .L119+4
 844 04fc 2322     		movs	r2, #35
 845 04fe 1A70     		strb	r2, [r3]
 418:../src/main.c ****   case 2:		// _SYMBOL_HOUSE
 846              		.loc 1 418 0
 847 0500 A0E6     		b	.L22
 848              	.L19:
 420:../src/main.c **** 	  main_symbol_s = '-';
 849              		.loc 1 420 0
 850 0502 074B     		ldr	r3, .L119
 851 0504 2F22     		movs	r2, #47
 852 0506 1A70     		strb	r2, [r3]
 421:../src/main.c **** 	  break;
 853              		.loc 1 421 0
 854 0508 064B     		ldr	r3, .L119+4
 855 050a 2D22     		movs	r2, #45
 856 050c 1A70     		strb	r2, [r3]
 422:../src/main.c ****   case 3:		// _SYMBOL_RXIGATE
 857              		.loc 1 422 0
 858 050e 99E6     		b	.L22
 859              	.L20:
 424:../src/main.c **** 	  main_symbol_s = '&';
 860              		.loc 1 424 0
 861 0510 034B     		ldr	r3, .L119
 862 0512 4922     		movs	r2, #73
 863 0514 1A70     		strb	r2, [r3]
 425:../src/main.c **** 	  break;
 864              		.loc 1 425 0
 865 0516 034B     		ldr	r3, .L119+4
 866 0518 2622     		movs	r2, #38
 867 051a 1A70     		strb	r2, [r3]
 426:../src/main.c ****   case 5:		// _SYMBOL_SAILBOAT
 868              		.loc 1 426 0
 869 051c 92E6     		b	.L22
 870              	.L120:
 871 051e 00BF     		.align	2
 872              	.L119:
 873 0520 00000000 		.word	.LANCHOR3
 874 0524 00000000 		.word	.LANCHOR4
 875 0528 00000000 		.word	.LANCHOR5
 876 052c 00000000 		.word	GPIO_InitTypeDef
 877 0530 00000000 		.word	main_kiss_srl_ctx_ptr
 878 0534 00000000 		.word	main_kiss_srl_ctx
 879 0538 00000000 		.word	main_wx_srl_ctx_ptr
 880 053c 00000000 		.word	main_wx_srl_ctx
 881 0540 00000000 		.word	main_target_kiss_baudrate
 882 0544 00000000 		.word	main_target_wx_baudrate
 883 0548 00000000 		.word	srl_usart1_tx_buffer
 884 054c 00000000 		.word	srl_usart1_rx_buffer
 885 0550 00380140 		.word	1073821696
 886 0554 00000000 		.word	srl_usart2_tx_buffer
 887 0558 00000000 		.word	srl_usart2_rx_buffer
 888 055c 00440040 		.word	1073759232
 889 0560 00000000 		.word	main_own_path
 890 0564 00000000 		.word	.LANCHOR1
 891 0568 00000000 		.word	.LANCHOR10
 892 056c 00000000 		.word	main_afsk
 893 0570 00000000 		.word	main_ax25
 894 0574 00000000 		.word	.LANCHOR2
 895 0578 00000000 		.word	.LANCHOR6
 896 057c 00000000 		.word	message_callback
 897 0580 00080048 		.word	1207961600
 898              	.L21:
 428:../src/main.c **** 	  main_symbol_s = 'Y';
 899              		.loc 1 428 0
 900 0584 A44B     		ldr	r3, .L121
 901 0586 2F22     		movs	r2, #47
 902 0588 1A70     		strb	r2, [r3]
 429:../src/main.c **** 	  break;
 903              		.loc 1 429 0
 904 058a A44B     		ldr	r3, .L121+4
 905 058c 5922     		movs	r2, #89
 906 058e 1A70     		strb	r2, [r3]
 430:../src/main.c ****   default:		// _SYMBOL_IGATE
 907              		.loc 1 430 0
 908 0590 58E6     		b	.L22
 909              	.L15:
 432:../src/main.c **** 	  main_symbol_s = '&';
 910              		.loc 1 432 0
 911 0592 A14B     		ldr	r3, .L121
 912 0594 5222     		movs	r2, #82
 913 0596 1A70     		strb	r2, [r3]
 433:../src/main.c **** 	  break;
 914              		.loc 1 433 0
 915 0598 A04B     		ldr	r3, .L121+4
 916 059a 2622     		movs	r2, #38
 917 059c 1A70     		strb	r2, [r3]
 434:../src/main.c **** 
 918              		.loc 1 434 0
 919 059e 51E6     		b	.L22
 920              	.L80:
 550:../src/main.c **** 
 921              		.loc 1 550 0
 922 05a0 9F4A     		ldr	r2, .L121+8
 923 05a2 4FF49641 		mov	r1, #19200
 924 05a6 1160     		str	r1, [r2]
 553:../src/main.c ****   }
 925              		.loc 1 553 0
 926 05a8 9E4A     		ldr	r2, .L121+12
 927 05aa 1570     		strb	r5, [r2]
 928 05ac C0E6     		b	.L23
 929              	.L81:
 559:../src/main.c **** 
 930              		.loc 1 559 0
 931 05ae 4FF49643 		mov	r3, #19200
 932 05b2 9B4A     		ldr	r2, .L121+8
 933 05b4 1360     		str	r3, [r2]
 562:../src/main.c **** 
 934              		.loc 1 562 0
 935 05b6 9C4D     		ldr	r5, .L121+16
 936 05b8 2868     		ldr	r0, [r5]
 937 05ba 0022     		movs	r2, #0
 938 05bc 80F84420 		strb	r2, [r0, #68]
 565:../src/main.c **** 
 939              		.loc 1 565 0
 940 05c0 0124     		movs	r4, #1
 941 05c2 0394     		str	r4, [sp, #12]
 942 05c4 0293     		str	r3, [sp, #8]
 943 05c6 4FF40073 		mov	r3, #512
 944 05ca 0193     		str	r3, [sp, #4]
 945 05cc 974A     		ldr	r2, .L121+20
 946 05ce 0092     		str	r2, [sp]
 947 05d0 974A     		ldr	r2, .L121+24
 948 05d2 9849     		ldr	r1, .L121+28
 949 05d4 FFF7FEFF 		bl	srl_init
 950              	.LVL99:
 567:../src/main.c **** 
 951              		.loc 1 567 0
 952 05d8 40F6B832 		movw	r2, #3000
 953 05dc 2146     		mov	r1, r4
 954 05de 2868     		ldr	r0, [r5]
 955 05e0 FFF7FEFF 		bl	srl_switch_timeout
 956              	.LVL100:
 569:../src/main.c **** 
 957              		.loc 1 569 0
 958 05e4 2868     		ldr	r0, [r5]
 959 05e6 FFF7FEFF 		bl	davis_init
 960              	.LVL101:
 572:../src/main.c **** 
 961              		.loc 1 572 0
 962 05ea 2046     		mov	r0, r4
 963 05ec FFF7FEFF 		bl	davis_wake_up
 964              	.LVL102:
 965 05f0 B0FA80F0 		clz	r0, r0
 966 05f4 4009     		lsrs	r0, r0, #5
 967 05f6 904B     		ldr	r3, .L121+32
 968 05f8 1870     		strb	r0, [r3]
 575:../src/main.c **** 		  // turn LCD backlight on..
 969              		.loc 1 575 0
 970 05fa 88B1     		cbz	r0, .L25
 577:../src/main.c **** 
 971              		.loc 1 577 0
 972 05fc 2046     		mov	r0, r4
 973 05fe FFF7FEFF 		bl	davis_control_backlight
 974              	.LVL103:
 580:../src/main.c **** 
 975              		.loc 1 580 0
 976 0602 4FF47A70 		mov	r0, #1000
 977 0606 FFF7FEFF 		bl	delay_fixed
 978              	.LVL104:
 583:../src/main.c **** 
 979              		.loc 1 583 0
 980 060a 0020     		movs	r0, #0
 981 060c FFF7FEFF 		bl	davis_control_backlight
 982              	.LVL105:
 586:../src/main.c **** 
 983              		.loc 1 586 0
 984 0610 844B     		ldr	r3, .L121+12
 985 0612 0022     		movs	r2, #0
 986 0614 1A70     		strb	r2, [r3]
 591:../src/main.c **** 
 987              		.loc 1 591 0
 988 0616 894B     		ldr	r3, .L121+36
 989 0618 1C70     		strb	r4, [r3]
 594:../src/main.c **** 
 990              		.loc 1 594 0
 991 061a FFF7FEFF 		bl	davis_trigger_rxcheck_packet
 992              	.LVL106:
 993 061e ADE6     		b	.L26
 994              	.L25:
 599:../src/main.c **** 		  main_kiss_srl_ctx_ptr->srl_rx_state = SRL_RX_NOT_CONFIG;
 995              		.loc 1 599 0
 996 0620 4FF41653 		mov	r3, #9600
 997 0624 7E4A     		ldr	r2, .L121+8
 998 0626 1360     		str	r3, [r2]
 600:../src/main.c **** 
 999              		.loc 1 600 0
 1000 0628 7F4A     		ldr	r2, .L121+16
 1001 062a 1068     		ldr	r0, [r2]
 1002 062c 0022     		movs	r2, #0
 1003 062e 80F84420 		strb	r2, [r0, #68]
 603:../src/main.c **** 		  srl_init(main_wx_srl_ctx_ptr, USART2, srl_usart2_rx_buffer, RX_BUFFER_2_LN, srl_usart2_tx_buffe
 1004              		.loc 1 603 0
 1005 0632 0124     		movs	r4, #1
 1006 0634 0394     		str	r4, [sp, #12]
 1007 0636 0293     		str	r3, [sp, #8]
 1008 0638 4FF40073 		mov	r3, #512
 1009 063c 0193     		str	r3, [sp, #4]
 1010 063e 7B4A     		ldr	r2, .L121+20
 1011 0640 0092     		str	r2, [sp]
 1012 0642 7B4A     		ldr	r2, .L121+24
 1013 0644 7B49     		ldr	r1, .L121+28
 1014 0646 FFF7FEFF 		bl	srl_init
 1015              	.LVL107:
 604:../src/main.c **** 
 1016              		.loc 1 604 0
 1017 064a 0394     		str	r4, [sp, #12]
 1018 064c 7C4B     		ldr	r3, .L121+40
 1019 064e 1B68     		ldr	r3, [r3]
 1020 0650 0293     		str	r3, [sp, #8]
 1021 0652 6023     		movs	r3, #96
 1022 0654 0193     		str	r3, [sp, #4]
 1023 0656 7B4A     		ldr	r2, .L121+44
 1024 0658 0092     		str	r2, [sp]
 1025 065a 7B4A     		ldr	r2, .L121+48
 1026 065c 7B49     		ldr	r1, .L121+52
 1027 065e 7C48     		ldr	r0, .L121+56
 1028 0660 0068     		ldr	r0, [r0]
 1029 0662 FFF7FEFF 		bl	srl_init
 1030              	.LVL108:
 1031 0666 89E6     		b	.L26
 1032              	.L82:
 610:../src/main.c **** 
 1033              		.loc 1 610 0
 1034 0668 7A4E     		ldr	r6, .L121+60
 1035 066a 794D     		ldr	r5, .L121+56
 1036 066c 3368     		ldr	r3, [r6]
 1037 066e 2A68     		ldr	r2, [r5]
 1038 0670 0121     		movs	r1, #1
 1039 0672 7948     		ldr	r0, .L121+64
 1040 0674 FFF7FEFF 		bl	rtu_serial_init
 1041              	.LVL109:
 612:../src/main.c **** 
 1042              		.loc 1 612 0
 1043 0678 3368     		ldr	r3, [r6]
 1044 067a 1B88     		ldrh	r3, [r3]
 1045 067c 704F     		ldr	r7, .L121+40
 1046 067e 3B60     		str	r3, [r7]
 615:../src/main.c **** 	  srl_init(main_wx_srl_ctx_ptr, USART2, srl_usart2_rx_buffer, RX_BUFFER_2_LN, srl_usart2_tx_buffer
 1047              		.loc 1 615 0
 1048 0680 0124     		movs	r4, #1
 1049 0682 0394     		str	r4, [sp, #12]
 1050 0684 664B     		ldr	r3, .L121+8
 1051 0686 1B68     		ldr	r3, [r3]
 1052 0688 0293     		str	r3, [sp, #8]
 1053 068a 4FF40073 		mov	r3, #512
 1054 068e 0193     		str	r3, [sp, #4]
 1055 0690 664A     		ldr	r2, .L121+20
 1056 0692 0092     		str	r2, [sp]
 1057 0694 664A     		ldr	r2, .L121+24
 1058 0696 6749     		ldr	r1, .L121+28
 1059 0698 6348     		ldr	r0, .L121+16
 1060 069a 0068     		ldr	r0, [r0]
 1061 069c FFF7FEFF 		bl	srl_init
 1062              	.LVL110:
 616:../src/main.c **** 	  srl_switch_tx_delay(main_wx_srl_ctx_ptr, 1);
 1063              		.loc 1 616 0
 1064 06a0 3368     		ldr	r3, [r6]
 1065 06a2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1066 06a4 0393     		str	r3, [sp, #12]
 1067 06a6 3B68     		ldr	r3, [r7]
 1068 06a8 0293     		str	r3, [sp, #8]
 1069 06aa 6023     		movs	r3, #96
 1070 06ac 0193     		str	r3, [sp, #4]
 1071 06ae 654A     		ldr	r2, .L121+44
 1072 06b0 0092     		str	r2, [sp]
 1073 06b2 654A     		ldr	r2, .L121+48
 1074 06b4 6549     		ldr	r1, .L121+52
 1075 06b6 2868     		ldr	r0, [r5]
 1076 06b8 FFF7FEFF 		bl	srl_init
 1077              	.LVL111:
 617:../src/main.c **** 
 1078              		.loc 1 617 0
 1079 06bc 2146     		mov	r1, r4
 1080 06be 2868     		ldr	r0, [r5]
 1081 06c0 FFF7FEFF 		bl	srl_switch_tx_delay
 1082              	.LVL112:
 620:../src/main.c **** 
 1083              		.loc 1 620 0
 1084 06c4 654B     		ldr	r3, .L121+68
 1085 06c6 1C70     		strb	r4, [r3]
 622:../src/main.c ****   }
 1086              		.loc 1 622 0
 1087 06c8 FFF7FEFF 		bl	rtu_serial_start
 1088              	.LVL113:
 1089 06cc 56E6     		b	.L26
 1090              	.L83:
 700:../src/main.c **** #endif
 1091              		.loc 1 700 0
 1092 06ce 644B     		ldr	r3, .L121+72
 1093 06d0 0022     		movs	r2, #0
 1094 06d2 4FF40061 		mov	r1, #2048
 1095 06d6 6348     		ldr	r0, .L121+76
 1096 06d8 FFF7FEFF 		bl	dallas_init
 1097              	.LVL114:
 703:../src/main.c **** 		  // client initialization
 1098              		.loc 1 703 0
 1099 06dc 2368     		ldr	r3, [r4]
 1100 06de 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1101 06e0 012B     		cmp	r3, #1
 1102 06e2 06D1     		bne	.L29
 705:../src/main.c **** 	  }
 1103              		.loc 1 705 0
 1104 06e4 604B     		ldr	r3, .L121+80
 1105 06e6 1A68     		ldr	r2, [r3]
 1106 06e8 594B     		ldr	r3, .L121+56
 1107 06ea 1968     		ldr	r1, [r3]
 1108 06ec 5F48     		ldr	r0, .L121+84
 1109 06ee FFF7FEFF 		bl	umb_master_init
 1110              	.LVL115:
 1111              	.L29:
 708:../src/main.c **** 		  analog_anemometer_init(main_config_data_mode->wx_anemometer_pulses_constant, 38, 100, 1);
 1112              		.loc 1 708 0
 1113 06f2 5F4B     		ldr	r3, .L121+88
 1114 06f4 1868     		ldr	r0, [r3]
 1115 06f6 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 1116 06f8 13F0040F 		tst	r3, #4
 1117 06fc 06D1     		bne	.L30
 709:../src/main.c **** 	  }
 1118              		.loc 1 709 0
 1119 06fe 0123     		movs	r3, #1
 1120 0700 6422     		movs	r2, #100
 1121 0702 2621     		movs	r1, #38
 1122 0704 8079     		ldrb	r0, [r0, #6]	@ zero_extendqisi2
 1123 0706 FFF7FEFF 		bl	analog_anemometer_init
 1124              	.LVL116:
 1125 070a 68E6     		b	.L28
 1126              	.L30:
 712:../src/main.c **** 	  }
 1127              		.loc 1 712 0
 1128 070c 0123     		movs	r3, #1
 1129 070e 6422     		movs	r2, #100
 1130 0710 2621     		movs	r1, #38
 1131 0712 8079     		ldrb	r0, [r0, #6]	@ zero_extendqisi2
 1132 0714 FFF7FEFF 		bl	analog_anemometer_init
 1133              	.LVL117:
 1134 0718 61E6     		b	.L28
 1135              	.L84:
 720:../src/main.c **** 	 ms5611_read_calibration(SensorCalData, &rte_wx_ms5611_qf);
 1136              		.loc 1 720 0
 1137 071a 564C     		ldr	r4, .L121+92
 1138 071c 2046     		mov	r0, r4
 1139 071e FFF7FEFF 		bl	ms5611_reset
 1140              	.LVL118:
 721:../src/main.c **** 	 ms5611_trigger_measure(0, 0);
 1141              		.loc 1 721 0
 1142 0722 2146     		mov	r1, r4
 1143 0724 5448     		ldr	r0, .L121+96
 1144 0726 FFF7FEFF 		bl	ms5611_read_calibration
 1145              	.LVL119:
 722:../src/main.c **** 	}
 1146              		.loc 1 722 0
 1147 072a 0021     		movs	r1, #0
 1148 072c 0846     		mov	r0, r1
 1149 072e FFF7FEFF 		bl	ms5611_trigger_measure
 1150              	.LVL120:
 1151 0732 5FE6     		b	.L32
 1152              	.L85:
 725:../src/main.c **** 	 bme280_setup();
 1153              		.loc 1 725 0
 1154 0734 5148     		ldr	r0, .L121+100
 1155 0736 FFF7FEFF 		bl	bme280_reset
 1156              	.LVL121:
 726:../src/main.c **** 	 bme280_read_calibration(bme280_calibration_data);
 1157              		.loc 1 726 0
 1158 073a FFF7FEFF 		bl	bme280_setup
 1159              	.LVL122:
 727:../src/main.c **** 	}
 1160              		.loc 1 727 0
 1161 073e 5048     		ldr	r0, .L121+104
 1162 0740 FFF7FEFF 		bl	bme280_read_calibration
 1163              	.LVL123:
 1164 0744 56E6     		b	.L32
 1165              	.L86:
 732:../src/main.c **** 
 1166              		.loc 1 732 0
 1167 0746 4F4B     		ldr	r3, .L121+108
 1168 0748 1A68     		ldr	r2, [r3]
 1169 074a 92F90C30 		ldrsb	r3, [r2, #12]
 1170 074e 92F91410 		ldrsb	r1, [r2, #20]
 1171 0752 1532     		adds	r2, r2, #21
 1172 0754 4C4C     		ldr	r4, .L121+112
 1173 0756 0492     		str	r2, [sp, #16]
 1174 0758 304A     		ldr	r2, .L121+4
 1175 075a 92F90020 		ldrsb	r2, [r2]
 1176 075e 0392     		str	r2, [sp, #12]
 1177 0760 0291     		str	r1, [sp, #8]
 1178 0762 4A4A     		ldr	r2, .L121+116
 1179 0764 0192     		str	r2, [sp, #4]
 1180 0766 2C4A     		ldr	r2, .L121
 1181 0768 92F90020 		ldrsb	r2, [r2]
 1182 076c 0092     		str	r2, [sp]
 1183 076e 484A     		ldr	r2, .L121+120
 1184 0770 4849     		ldr	r1, .L121+124
 1185 0772 2046     		mov	r0, r4
 1186 0774 FFF7FEFF 		bl	sprintf
 1187              	.LVL124:
 1188 0778 C3B2     		uxtb	r3, r0
 1189 077a 474A     		ldr	r2, .L121+128
 1190 077c 1370     		strb	r3, [r2]
 735:../src/main.c **** 
 1191              		.loc 1 735 0
 1192 077e 0022     		movs	r2, #0
 1193 0780 E254     		strb	r2, [r4, r3]
 739:../src/main.c **** 
 1194              		.loc 1 739 0
 1195 0782 4FF40072 		mov	r2, #512
 1196 0786 0192     		str	r2, [sp, #4]
 1197 0788 444A     		ldr	r2, .L121+132
 1198 078a 5269     		ldr	r2, [r2, #20]
 1199 078c 0092     		str	r2, [sp]
 1200 078e 2246     		mov	r2, r4
 1201 0790 0321     		movs	r1, #3
 1202 0792 4348     		ldr	r0, .L121+136
 1203 0794 FFF7FEFF 		bl	ax25_sendVia_toBuffer
 1204              	.LVL125:
 1205              	.L35:
 743:../src/main.c **** 
 1206              		.loc 1 743 0 discriminator 2
 1207 0798 404B     		ldr	r3, .L121+132
 1208 079a 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 1209 079e 012B     		cmp	r3, #1
 1210 07a0 01D0     		beq	.L34
 743:../src/main.c **** 
 1211              		.loc 1 743 0 is_stmt 0 discriminator 1
 1212 07a2 042B     		cmp	r3, #4
 1213 07a4 F8D1     		bne	.L35
 1214              	.L34:
 757:../src/main.c **** 
 1215              		.loc 1 757 0 is_stmt 1
 1216 07a6 01B2     		sxth	r1, r0
 1217 07a8 1F4B     		ldr	r3, .L121+16
 1218 07aa 1868     		ldr	r0, [r3]
 1219              	.LVL126:
 1220 07ac FFF7FEFF 		bl	srl_start_tx
 1221              	.LVL127:
 1222 07b0 3C4B     		ldr	r3, .L121+140
 1223 07b2 1870     		strb	r0, [r3]
 1224 07b4 23E6     		b	.L33
 1225              	.L87:
 792:../src/main.c **** 	}
 1226              		.loc 1 792 0
 1227 07b6 274B     		ldr	r3, .L121+60
 1228 07b8 1B68     		ldr	r3, [r3]
 1229 07ba 2B4A     		ldr	r2, .L121+80
 1230 07bc 1268     		ldr	r2, [r2]
 1231 07be 3A48     		ldr	r0, .L121+144
 1232 07c0 0068     		ldr	r0, [r0]
 1233 07c2 FFF7FEFF 		bl	wx_get_all_measurements
 1234              	.LVL128:
 1235 07c6 32E6     		b	.L36
 1236              	.L88:
 798:../src/main.c **** 
 1237              		.loc 1 798 0
 1238 07c8 3849     		ldr	r1, .L121+148
 1239 07ca 3948     		ldr	r0, .L121+152
 1240 07cc FFF7FEFF 		bl	ve_direct_parser_init
 1241              	.LVL129:
 803:../src/main.c **** 
 1242              		.loc 1 803 0
 1243 07d0 154C     		ldr	r4, .L121+16
 1244 07d2 3222     		movs	r2, #50
 1245 07d4 0121     		movs	r1, #1
 1246 07d6 2068     		ldr	r0, [r4]
 1247 07d8 FFF7FEFF 		bl	srl_switch_timeout
 1248              	.LVL130:
 806:../src/main.c ****   }
 1249              		.loc 1 806 0
 1250 07dc 0022     		movs	r2, #0
 1251 07de 0292     		str	r2, [sp, #8]
 1252 07e0 0192     		str	r2, [sp, #4]
 1253 07e2 0092     		str	r2, [sp]
 1254 07e4 1346     		mov	r3, r2
 1255 07e6 BA21     		movs	r1, #186
 1256 07e8 2068     		ldr	r0, [r4]
 1257 07ea FFF7FEFF 		bl	srl_receive_data
 1258              	.LVL131:
 1259 07ee 30E6     		b	.L38
 1260              	.L89:
 849:../src/main.c ****   }
 1261              		.loc 1 849 0
 1262 07f0 1D4B     		ldr	r3, .L121+80
 1263 07f2 1A68     		ldr	r2, [r3]
 1264 07f4 1D49     		ldr	r1, .L121+84
 1265 07f6 2F48     		ldr	r0, .L121+156
 1266 07f8 FFF7FEFF 		bl	umb_0x26_status_request
 1267              	.LVL132:
 1268 07fc 6EE6     		b	.L39
 1269              	.L103:
 1270              	.LBB74:
 1271              	.LBB75:
 1272              	.LBB76:
 1273              	.LBB77:
 1274              		.file 3 "../system/include/cmsis/stm32l4xx/cmsis_gcc.h"
   1:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**************************************************************************//**
   2:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * @version  V5.2.0
   5:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * @date     08. May 2019
   6:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  ******************************************************************************/
   7:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /*
   8:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  *
  10:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  *
  12:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  *
  16:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  *
  18:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * limitations under the License.
  23:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
  24:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
  25:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
  28:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
  34:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef __has_builtin
  36:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  38:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
  39:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __ASM
  41:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  43:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __INLINE
  44:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  46:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  49:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif                                           
  52:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  55:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __USED
  56:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  58:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __WEAK
  59:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  61:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __PACKED
  62:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  64:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  67:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  70:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  78:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  86:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  94:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 102:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 110:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 113:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 116:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 119:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 120:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 122:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 124:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 125:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            in the used linker script.
 129:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   
 130:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 131:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 133:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   
 135:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   typedef struct {
 136:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     uint32_t const* src;
 137:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     uint32_t* dest;
 138:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     uint32_t  wlen;
 139:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   } __copy_table_t;
 140:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   
 141:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   typedef struct {
 142:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     uint32_t* dest;
 143:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     uint32_t  wlen;
 144:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   } __zero_table_t;
 145:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   
 146:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 151:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     }
 155:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   }
 156:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  
 157:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     }
 161:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   }
 162:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  
 163:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   _start();
 164:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 165:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   
 166:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 168:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 169:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 172:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 173:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 176:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 177:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 180:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 181:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 184:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 185:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   @{
 189:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 190:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 191:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 192:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 196:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 198:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 200:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 201:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 202:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 203:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 207:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 209:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 211:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 212:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 213:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 214:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Control Register
 215:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Control Register value
 217:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 218:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 220:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 221:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 222:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 224:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 225:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 226:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 227:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 229:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 233:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 235:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 236:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 237:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 239:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 240:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 241:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 242:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 243:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 244:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Control Register
 245:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 248:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 250:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 252:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 253:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 254:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 256:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 260:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 262:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 264:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 265:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 266:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 267:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 268:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               IPSR Register value
 271:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 272:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 274:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 275:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 276:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 278:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 279:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 280:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 281:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 282:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get APSR Register
 283:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               APSR Register value
 285:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 286:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 288:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 289:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 290:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 292:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 293:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 294:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 295:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 296:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               xPSR Register value
 299:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 300:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 302:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 303:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 304:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 306:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 307:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 308:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 309:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 310:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               PSP Register value
 313:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 314:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 316:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 317:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 318:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 320:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 321:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 322:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 323:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 325:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               PSP Register value
 328:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 329:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 331:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 332:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 333:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 335:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 336:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 337:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 338:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 339:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 340:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 344:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 346:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 348:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 349:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 350:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 352:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 356:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 358:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 360:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 361:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 362:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 363:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 364:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               MSP Register value
 367:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 368:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 370:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 371:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 372:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 374:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 375:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 376:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 377:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 379:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               MSP Register value
 382:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 383:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 385:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 386:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 387:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 389:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 390:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 391:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 392:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 393:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 394:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 398:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 400:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 402:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 403:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 404:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 406:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 410:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 412:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 414:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 415:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 416:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 417:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 419:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               SP Register value
 422:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 423:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 425:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 426:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 427:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 429:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 430:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 431:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 432:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 433:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 437:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 439:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 441:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 442:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 443:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 444:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 445:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Priority Mask value
 448:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 449:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 451:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 452:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 453:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 455:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 456:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 457:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 458:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 460:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Priority Mask value
 463:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 464:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 466:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 467:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 468:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 470:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 471:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 472:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 473:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 474:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 475:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 479:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 481:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 483:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 484:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 485:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 487:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 491:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 493:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 495:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 496:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 497:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 498:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 502:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Enable FIQ
 503:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 506:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 508:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 510:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 511:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 512:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 513:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Disable FIQ
 514:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 517:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 519:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 521:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 522:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 523:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 524:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Base Priority
 525:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Base Priority register value
 527:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 528:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 530:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 531:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 532:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 534:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 535:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 536:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 537:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 539:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Base Priority register value
 542:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 543:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 545:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 546:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 547:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 549:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 550:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 551:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 552:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 553:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 554:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Base Priority
 555:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 558:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 560:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 562:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 563:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 564:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 566:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 570:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 572:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 574:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 575:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 576:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 577:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 578:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 583:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 585:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 587:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 588:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 589:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 590:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Fault Mask register value
 593:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 594:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 596:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 597:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 598:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 600:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 601:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 602:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 603:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 605:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Fault Mask register value
 608:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 609:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 611:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 612:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 613:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 615:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 616:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 617:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 618:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 619:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 620:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 624:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 626:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 628:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 629:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 630:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 632:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 636:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 638:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 640:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 641:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 642:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 646:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 647:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 650:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 651:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   mode.
 655:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   
 656:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 659:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 661:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return 0U;
 665:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 666:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 667:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return result;
 669:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 670:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 671:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 672:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 674:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 678:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 681:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 683:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return 0U;
 686:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 687:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 688:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return result;
 690:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 691:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 692:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 693:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 694:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 695:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 696:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   mode.
 700:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   
 701:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 704:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 706:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 711:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 713:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 714:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 715:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 716:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 718:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 722:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 725:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 727:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 731:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 733:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 734:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 735:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 736:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 737:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 738:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   mode.
 742:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 743:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 746:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 748:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return 0U;
 752:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 753:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 754:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return result;
 756:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 757:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 758:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 759:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 760:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 762:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 766:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 769:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 771:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return 0U;
 774:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 775:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 776:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return result;
 778:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 779:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 780:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 781:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 782:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 783:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 784:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   mode.
 788:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 789:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 792:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 794:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 799:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 801:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 802:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 803:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 804:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 806:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 810:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 813:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 815:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 819:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 821:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 822:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 823:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 824:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 827:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 828:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 829:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get FPSCR
 830:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 833:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 835:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 843:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 844:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 845:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 847:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 848:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 849:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(0U);
 850:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 851:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 852:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 853:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 854:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 855:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set FPSCR
 856:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 859:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 861:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 869:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 871:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 872:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   (void)fpscr;
 873:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 874:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 875:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 876:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 877:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 879:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 880:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Access to dedicated instructions
 883:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   @{
 884:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** */
 885:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 886:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 894:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 898:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 899:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 900:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   No Operation
 901:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 903:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 905:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 906:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 909:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 911:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 912:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 913:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Wait For Event
 914:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 917:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 919:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 920:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 921:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Send Event
 922:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 924:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 926:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 927:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 928:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            after the instruction has been completed.
 932:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 933:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 935:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 937:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 938:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 939:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 940:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 944:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 946:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 1275              		.loc 3 946 0
 1276              		.syntax unified
 1277              	@ 946 "../system/include/cmsis/stm32l4xx/cmsis_gcc.h" 1
 1278 07fe BFF34F8F 		dsb 0xF
 1279              	@ 0 "" 2
 1280              		.thumb
 1281              		.syntax unified
 1282              	.LBE77:
 1283              	.LBE76:
 1284              		.file 4 "../system/include/cmsis/stm32l4xx/core_cm4.h"
   1:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**************************************************************************//**
   2:../system/include/cmsis/stm32l4xx/core_cm4.h ****  * @file     core_cm4.h
   3:../system/include/cmsis/stm32l4xx/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:../system/include/cmsis/stm32l4xx/core_cm4.h ****  * @version  V5.1.0
   5:../system/include/cmsis/stm32l4xx/core_cm4.h ****  * @date     13. March 2019
   6:../system/include/cmsis/stm32l4xx/core_cm4.h ****  ******************************************************************************/
   7:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*
   8:../system/include/cmsis/stm32l4xx/core_cm4.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:../system/include/cmsis/stm32l4xx/core_cm4.h ****  *
  10:../system/include/cmsis/stm32l4xx/core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../system/include/cmsis/stm32l4xx/core_cm4.h ****  *
  12:../system/include/cmsis/stm32l4xx/core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../system/include/cmsis/stm32l4xx/core_cm4.h ****  * not use this file except in compliance with the License.
  14:../system/include/cmsis/stm32l4xx/core_cm4.h ****  * You may obtain a copy of the License at
  15:../system/include/cmsis/stm32l4xx/core_cm4.h ****  *
  16:../system/include/cmsis/stm32l4xx/core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../system/include/cmsis/stm32l4xx/core_cm4.h ****  *
  18:../system/include/cmsis/stm32l4xx/core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../system/include/cmsis/stm32l4xx/core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../system/include/cmsis/stm32l4xx/core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../system/include/cmsis/stm32l4xx/core_cm4.h ****  * See the License for the specific language governing permissions and
  22:../system/include/cmsis/stm32l4xx/core_cm4.h ****  * limitations under the License.
  23:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
  24:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
  25:../system/include/cmsis/stm32l4xx/core_cm4.h **** #if   defined ( __ICCARM__ )
  26:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:../system/include/cmsis/stm32l4xx/core_cm4.h **** #elif defined (__clang__)
  28:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../system/include/cmsis/stm32l4xx/core_cm4.h **** #endif
  30:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
  31:../system/include/cmsis/stm32l4xx/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
  34:../system/include/cmsis/stm32l4xx/core_cm4.h **** #include <stdint.h>
  35:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
  36:../system/include/cmsis/stm32l4xx/core_cm4.h **** #ifdef __cplusplus
  37:../system/include/cmsis/stm32l4xx/core_cm4.h ****  extern "C" {
  38:../system/include/cmsis/stm32l4xx/core_cm4.h **** #endif
  39:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
  40:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
  41:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../system/include/cmsis/stm32l4xx/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
  44:../system/include/cmsis/stm32l4xx/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../system/include/cmsis/stm32l4xx/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
  47:../system/include/cmsis/stm32l4xx/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../system/include/cmsis/stm32l4xx/core_cm4.h ****      Unions are used for effective representation of core registers.
  49:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
  50:../system/include/cmsis/stm32l4xx/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../system/include/cmsis/stm32l4xx/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
  53:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
  54:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
  55:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*******************************************************************************
  56:../system/include/cmsis/stm32l4xx/core_cm4.h ****  *                 CMSIS definitions
  57:../system/include/cmsis/stm32l4xx/core_cm4.h ****  ******************************************************************************/
  58:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
  59:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \ingroup Cortex_M4
  60:../system/include/cmsis/stm32l4xx/core_cm4.h ****   @{
  61:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
  62:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
  63:../system/include/cmsis/stm32l4xx/core_cm4.h **** #include "cmsis_version.h"
  64:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
  65:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* CMSIS CM4 definitions */
  66:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:../system/include/cmsis/stm32l4xx/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
  71:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
  73:../system/include/cmsis/stm32l4xx/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../system/include/cmsis/stm32l4xx/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:../system/include/cmsis/stm32l4xx/core_cm4.h **** */
  76:../system/include/cmsis/stm32l4xx/core_cm4.h **** #if defined ( __CC_ARM )
  77:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #define __FPU_USED       1U
  80:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #else
  81:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #define __FPU_USED       0U
  83:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #endif
  84:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #else
  85:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #define __FPU_USED         0U
  86:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #endif
  87:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
  88:../system/include/cmsis/stm32l4xx/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #if defined __ARM_FP
  90:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #define __FPU_USED       1U
  92:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #else
  93:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #define __FPU_USED       0U
  95:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #endif
  96:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #else
  97:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #define __FPU_USED         0U
  98:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #endif
  99:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 100:../system/include/cmsis/stm32l4xx/core_cm4.h **** #elif defined ( __GNUC__ )
 101:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #define __FPU_USED       1U
 104:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #else
 105:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #define __FPU_USED       0U
 107:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #endif
 108:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #else
 109:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #define __FPU_USED         0U
 110:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #endif
 111:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 112:../system/include/cmsis/stm32l4xx/core_cm4.h **** #elif defined ( __ICCARM__ )
 113:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #if defined __ARMVFP__
 114:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #define __FPU_USED       1U
 116:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #else
 117:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #define __FPU_USED       0U
 119:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #endif
 120:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #else
 121:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #define __FPU_USED         0U
 122:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #endif
 123:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 124:../system/include/cmsis/stm32l4xx/core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #define __FPU_USED       1U
 128:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #else
 129:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #define __FPU_USED       0U
 131:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #endif
 132:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #else
 133:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #define __FPU_USED         0U
 134:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #endif
 135:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 136:../system/include/cmsis/stm32l4xx/core_cm4.h **** #elif defined ( __TASKING__ )
 137:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #if defined __FPU_VFP__
 138:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #define __FPU_USED       1U
 140:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #else
 141:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #define __FPU_USED       0U
 143:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #endif
 144:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #else
 145:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #define __FPU_USED         0U
 146:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #endif
 147:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 148:../system/include/cmsis/stm32l4xx/core_cm4.h **** #elif defined ( __CSMC__ )
 149:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #define __FPU_USED       1U
 152:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #else
 153:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:../system/include/cmsis/stm32l4xx/core_cm4.h ****       #define __FPU_USED       0U
 155:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #endif
 156:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #else
 157:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #define __FPU_USED         0U
 158:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #endif
 159:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 160:../system/include/cmsis/stm32l4xx/core_cm4.h **** #endif
 161:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 162:../system/include/cmsis/stm32l4xx/core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 164:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 165:../system/include/cmsis/stm32l4xx/core_cm4.h **** #ifdef __cplusplus
 166:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
 167:../system/include/cmsis/stm32l4xx/core_cm4.h **** #endif
 168:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 169:../system/include/cmsis/stm32l4xx/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 171:../system/include/cmsis/stm32l4xx/core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 173:../system/include/cmsis/stm32l4xx/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 176:../system/include/cmsis/stm32l4xx/core_cm4.h **** #ifdef __cplusplus
 177:../system/include/cmsis/stm32l4xx/core_cm4.h ****  extern "C" {
 178:../system/include/cmsis/stm32l4xx/core_cm4.h **** #endif
 179:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 180:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* check device defines and use defaults */
 181:../system/include/cmsis/stm32l4xx/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #ifndef __CM4_REV
 183:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #define __CM4_REV               0x0000U
 184:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #endif
 186:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 187:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #define __FPU_PRESENT             0U
 189:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #endif
 191:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 192:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #define __MPU_PRESENT             0U
 194:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #endif
 196:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 197:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #endif
 201:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 202:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #endif
 206:../system/include/cmsis/stm32l4xx/core_cm4.h **** #endif
 207:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 208:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 210:../system/include/cmsis/stm32l4xx/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 212:../system/include/cmsis/stm32l4xx/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:../system/include/cmsis/stm32l4xx/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:../system/include/cmsis/stm32l4xx/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:../system/include/cmsis/stm32l4xx/core_cm4.h **** */
 216:../system/include/cmsis/stm32l4xx/core_cm4.h **** #ifdef __cplusplus
 217:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:../system/include/cmsis/stm32l4xx/core_cm4.h **** #else
 219:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:../system/include/cmsis/stm32l4xx/core_cm4.h **** #endif
 221:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 224:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* following defines should be used for structure members */
 225:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 228:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 229:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*@} end of group Cortex_M4 */
 230:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 231:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 232:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 233:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*******************************************************************************
 234:../system/include/cmsis/stm32l4xx/core_cm4.h ****  *                 Register Abstraction
 235:../system/include/cmsis/stm32l4xx/core_cm4.h ****   Core Register contain:
 236:../system/include/cmsis/stm32l4xx/core_cm4.h ****   - Core Register
 237:../system/include/cmsis/stm32l4xx/core_cm4.h ****   - Core NVIC Register
 238:../system/include/cmsis/stm32l4xx/core_cm4.h ****   - Core SCB Register
 239:../system/include/cmsis/stm32l4xx/core_cm4.h ****   - Core SysTick Register
 240:../system/include/cmsis/stm32l4xx/core_cm4.h ****   - Core Debug Register
 241:../system/include/cmsis/stm32l4xx/core_cm4.h ****   - Core MPU Register
 242:../system/include/cmsis/stm32l4xx/core_cm4.h ****   - Core FPU Register
 243:../system/include/cmsis/stm32l4xx/core_cm4.h ****  ******************************************************************************/
 244:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 245:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:../system/include/cmsis/stm32l4xx/core_cm4.h **** */
 248:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 249:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 250:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \ingroup    CMSIS_core_register
 251:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief      Core Register type definitions.
 253:../system/include/cmsis/stm32l4xx/core_cm4.h ****   @{
 254:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 255:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 256:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 257:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 259:../system/include/cmsis/stm32l4xx/core_cm4.h **** typedef union
 260:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
 261:../system/include/cmsis/stm32l4xx/core_cm4.h ****   struct
 262:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
 263:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 271:../system/include/cmsis/stm32l4xx/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:../system/include/cmsis/stm32l4xx/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:../system/include/cmsis/stm32l4xx/core_cm4.h **** } APSR_Type;
 274:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 275:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* APSR Register Definitions */
 276:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 279:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 282:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 285:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 288:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 291:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 294:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 295:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 296:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 298:../system/include/cmsis/stm32l4xx/core_cm4.h **** typedef union
 299:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
 300:../system/include/cmsis/stm32l4xx/core_cm4.h ****   struct
 301:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
 302:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:../system/include/cmsis/stm32l4xx/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:../system/include/cmsis/stm32l4xx/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:../system/include/cmsis/stm32l4xx/core_cm4.h **** } IPSR_Type;
 307:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 308:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* IPSR Register Definitions */
 309:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 312:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 313:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 314:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 316:../system/include/cmsis/stm32l4xx/core_cm4.h **** typedef union
 317:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
 318:../system/include/cmsis/stm32l4xx/core_cm4.h ****   struct
 319:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
 320:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 328:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:../system/include/cmsis/stm32l4xx/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:../system/include/cmsis/stm32l4xx/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:../system/include/cmsis/stm32l4xx/core_cm4.h **** } xPSR_Type;
 335:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 336:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* xPSR Register Definitions */
 337:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 339:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 340:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 342:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 343:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 346:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 349:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 352:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 355:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 358:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 361:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 364:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 367:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 368:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 369:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 371:../system/include/cmsis/stm32l4xx/core_cm4.h **** typedef union
 372:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
 373:../system/include/cmsis/stm32l4xx/core_cm4.h ****   struct
 374:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
 375:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:../system/include/cmsis/stm32l4xx/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:../system/include/cmsis/stm32l4xx/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:../system/include/cmsis/stm32l4xx/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:../system/include/cmsis/stm32l4xx/core_cm4.h **** } CONTROL_Type;
 382:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 383:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* CONTROL Register Definitions */
 384:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 385:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 387:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 390:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 393:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 395:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 396:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 397:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \ingroup    CMSIS_core_register
 398:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 399:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:../system/include/cmsis/stm32l4xx/core_cm4.h ****   @{
 401:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 402:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 403:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 404:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 406:../system/include/cmsis/stm32l4xx/core_cm4.h **** typedef struct
 407:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
 408:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED0[24U];
 410:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED1[24U];
 412:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED2[24U];
 414:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED3[24U];
 416:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED4[56U];
 418:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED5[644U];
 420:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:../system/include/cmsis/stm32l4xx/core_cm4.h **** }  NVIC_Type;
 422:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 423:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 427:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 429:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 430:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 431:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \ingroup  CMSIS_core_register
 432:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:../system/include/cmsis/stm32l4xx/core_cm4.h ****   @{
 435:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 436:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 437:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 438:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 440:../system/include/cmsis/stm32l4xx/core_cm4.h **** typedef struct
 441:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
 442:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 453:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 456:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED0[5U];
 462:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:../system/include/cmsis/stm32l4xx/core_cm4.h **** } SCB_Type;
 464:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 465:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* SCB CPUID Register Definitions */
 466:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 469:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 472:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 475:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 478:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 481:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 485:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 487:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 488:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 491:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 494:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 497:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 499:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 500:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 503:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 506:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 509:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 510:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 512:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 513:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 516:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 520:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 523:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 526:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 529:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 532:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 535:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 538:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* SCB System Control Register Definitions */
 539:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 542:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 544:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 545:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 548:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 552:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 555:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 556:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 558:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 561:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 564:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 567:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 570:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 571:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 574:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 577:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 580:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 583:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 586:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 589:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 592:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 595:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 598:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 601:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 604:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 607:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 610:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 613:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 614:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 617:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 620:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 624:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 627:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 630:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 633:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 636:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 639:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 643:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 646:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 649:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 652:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 655:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 658:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 661:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 665:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 668:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 670:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 671:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 674:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 677:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 680:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 681:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 684:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 687:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 690:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 694:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 697:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 700:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 703:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 706:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 708:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 709:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 710:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \ingroup  CMSIS_core_register
 711:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:../system/include/cmsis/stm32l4xx/core_cm4.h ****   @{
 714:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 715:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 716:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 717:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 719:../system/include/cmsis/stm32l4xx/core_cm4.h **** typedef struct
 720:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
 721:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED0[1U];
 722:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:../system/include/cmsis/stm32l4xx/core_cm4.h **** } SCnSCB_Type;
 725:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 726:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 727:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 730:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 734:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 737:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 738:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 740:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 741:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 743:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 746:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 748:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 749:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 750:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \ingroup  CMSIS_core_register
 751:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:../system/include/cmsis/stm32l4xx/core_cm4.h ****   @{
 754:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 755:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 756:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 757:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 759:../system/include/cmsis/stm32l4xx/core_cm4.h **** typedef struct
 760:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
 761:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:../system/include/cmsis/stm32l4xx/core_cm4.h **** } SysTick_Type;
 766:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 767:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 771:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 772:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 774:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 777:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 780:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* SysTick Reload Register Definitions */
 781:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 784:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* SysTick Current Register Definitions */
 785:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 788:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 792:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 795:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 798:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 800:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 801:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 802:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \ingroup  CMSIS_core_register
 803:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:../system/include/cmsis/stm32l4xx/core_cm4.h ****   @{
 806:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 807:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 808:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 809:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 811:../system/include/cmsis/stm32l4xx/core_cm4.h **** typedef struct
 812:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
 813:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __OM  union
 814:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
 815:../system/include/cmsis/stm32l4xx/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:../system/include/cmsis/stm32l4xx/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:../system/include/cmsis/stm32l4xx/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:../system/include/cmsis/stm32l4xx/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED0[864U];
 820:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED1[15U];
 822:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED2[15U];
 824:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED3[32U];
 826:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED4[43U];
 827:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 828:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 829:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED5[6U];
 830:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 831:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 832:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 833:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 834:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 835:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 836:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 837:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 838:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 839:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 840:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 841:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 842:../system/include/cmsis/stm32l4xx/core_cm4.h **** } ITM_Type;
 843:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 844:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 845:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 846:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFFFFFFFFUL /*<< ITM_TPR_PRIVMASK_Pos*/)     /*!< ITM 
 847:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 848:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* ITM Trace Control Register Definitions */
 849:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 850:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 851:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 852:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 853:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 854:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 855:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 856:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 857:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 858:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 859:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 860:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 861:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 862:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 863:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 864:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 865:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 866:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 867:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 868:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 869:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 870:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 871:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 872:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 873:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 874:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 875:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 876:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* ITM Lock Status Register Definitions */
 877:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 878:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 879:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 880:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 881:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 882:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 883:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 884:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 885:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 886:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 887:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 888:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 889:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 890:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \ingroup  CMSIS_core_register
 891:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 892:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 893:../system/include/cmsis/stm32l4xx/core_cm4.h ****   @{
 894:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 895:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 896:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
 897:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 898:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
 899:../system/include/cmsis/stm32l4xx/core_cm4.h **** typedef struct
 900:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
 901:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 902:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 903:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 904:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 905:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 906:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 907:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 908:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 909:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 910:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 911:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 912:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED0[1U];
 913:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 914:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 915:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 916:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED1[1U];
 917:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 918:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 919:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 920:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED2[1U];
 921:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 922:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 923:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 924:../system/include/cmsis/stm32l4xx/core_cm4.h **** } DWT_Type;
 925:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 926:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* DWT Control Register Definitions */
 927:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 928:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 929:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 930:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 931:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 932:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 933:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 934:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 935:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 936:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 937:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 938:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 939:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 940:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 941:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 942:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 943:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 944:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 945:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 946:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 947:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 948:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 949:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 950:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 951:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 952:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 953:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 954:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 955:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 956:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 957:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 958:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 959:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 960:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 961:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 962:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 963:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 964:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 965:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 966:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 967:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 968:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 969:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 970:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 971:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 972:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 973:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 974:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 975:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 976:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 977:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 978:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 979:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 980:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 981:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* DWT CPI Count Register Definitions */
 982:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 983:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 984:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 985:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 986:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 987:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 988:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 989:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 990:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 991:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 992:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 993:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* DWT LSU Count Register Definitions */
 994:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 995:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 996:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
 997:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 998:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 999:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1000:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1001:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1002:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1003:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1004:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1005:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1006:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1007:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1008:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1009:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1010:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1011:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1012:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1013:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1014:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1015:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1016:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1017:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1018:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1019:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1020:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1021:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1022:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1023:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1024:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1025:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1026:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1027:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1028:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1029:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1030:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1031:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1032:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1033:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1034:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1035:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1036:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1037:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \ingroup  CMSIS_core_register
1038:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1039:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1040:../system/include/cmsis/stm32l4xx/core_cm4.h ****   @{
1041:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1042:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1043:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1044:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1045:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1046:../system/include/cmsis/stm32l4xx/core_cm4.h **** typedef struct
1047:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1048:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1049:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1050:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED0[2U];
1051:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1052:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED1[55U];
1053:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1054:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED2[131U];
1055:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1056:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1057:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1058:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED3[759U];
1059:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
1060:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1061:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1062:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED4[1U];
1063:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1064:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1065:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1066:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED5[39U];
1067:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1068:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1069:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED7[8U];
1070:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1071:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1072:../system/include/cmsis/stm32l4xx/core_cm4.h **** } TPI_Type;
1073:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1074:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1075:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1076:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1077:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1078:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1079:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1080:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1081:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1082:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1083:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1084:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1085:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1086:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1087:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1088:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1089:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1090:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1091:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1092:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1093:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1094:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1095:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1096:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1097:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1098:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1099:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1100:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1101:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1102:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1103:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1104:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1105:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1106:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1107:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1108:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x1UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1109:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1110:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1111:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1112:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1113:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1114:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x1UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1115:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1116:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1117:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1118:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1119:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1120:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1121:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1122:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1123:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1124:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1125:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1126:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1127:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1128:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1129:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY2_Pos          0U                                         /*!< TPI ITA
1130:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY2_Pos*/)   /*!< TPI ITA
1131:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1132:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY1_Pos          0U                                         /*!< TPI ITA
1133:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY1_Pos*/)   /*!< TPI ITA
1134:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1135:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1136:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1137:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x1UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1138:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1139:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1140:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1141:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1142:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1143:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x1UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1144:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1145:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1146:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1147:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1148:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1149:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1150:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1151:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1152:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1153:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1154:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1155:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1156:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1157:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1158:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY2_Pos          0U                                         /*!< TPI ITA
1159:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY2_Pos*/)   /*!< TPI ITA
1160:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1161:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY1_Pos          0U                                         /*!< TPI ITA
1162:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY1_Pos*/)   /*!< TPI ITA
1163:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1164:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1165:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1166:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x3UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1167:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1168:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* TPI DEVID Register Definitions */
1169:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1170:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1171:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1172:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1173:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1174:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1175:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1176:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1177:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1178:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1179:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1180:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1181:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1182:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1183:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1184:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1185:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1186:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1187:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1188:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             4U                                         /*!< TPI DEV
1189:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1190:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1191:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           0U                                         /*!< TPI DEV
1192:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1193:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1194:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1195:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1196:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1197:../system/include/cmsis/stm32l4xx/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1198:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1199:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \ingroup  CMSIS_core_register
1200:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1201:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1202:../system/include/cmsis/stm32l4xx/core_cm4.h ****   @{
1203:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1204:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1205:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1206:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1207:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1208:../system/include/cmsis/stm32l4xx/core_cm4.h **** typedef struct
1209:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1210:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1211:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1212:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1213:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1214:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1215:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1216:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1217:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1218:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1219:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1220:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1221:../system/include/cmsis/stm32l4xx/core_cm4.h **** } MPU_Type;
1222:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1223:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_TYPE_RALIASES                  4U
1224:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1225:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* MPU Type Register Definitions */
1226:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1227:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1228:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1229:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1230:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1231:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1232:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1233:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1234:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1235:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* MPU Control Register Definitions */
1236:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1237:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1238:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1239:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1240:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1241:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1242:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1243:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1244:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1245:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* MPU Region Number Register Definitions */
1246:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1247:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1248:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1249:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1250:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1251:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1252:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1253:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1254:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1255:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1256:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1257:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1258:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1259:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1260:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1261:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1262:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1263:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1264:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1265:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1266:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1267:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1268:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1269:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1270:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1271:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1272:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1273:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1274:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1275:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1276:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1277:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1278:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1279:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1280:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1281:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1282:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1283:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1284:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1285:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1286:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1287:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1288:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1289:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1290:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*@} end of group CMSIS_MPU */
1291:../system/include/cmsis/stm32l4xx/core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1292:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1293:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1294:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1295:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \ingroup  CMSIS_core_register
1296:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1297:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1298:../system/include/cmsis/stm32l4xx/core_cm4.h ****   @{
1299:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1300:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1301:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1302:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1303:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1304:../system/include/cmsis/stm32l4xx/core_cm4.h **** typedef struct
1305:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1306:../system/include/cmsis/stm32l4xx/core_cm4.h ****         uint32_t RESERVED0[1U];
1307:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1308:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1309:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1310:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1311:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1312:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IM  uint32_t MVFR2;                  /*!< Offset: 0x018 (R/ )  Media and FP Feature Register 2 
1313:../system/include/cmsis/stm32l4xx/core_cm4.h **** } FPU_Type;
1314:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1315:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1316:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1317:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1318:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1319:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1320:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1321:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1322:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1323:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1324:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1325:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1326:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1327:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1328:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1329:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1330:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1331:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1332:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1333:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1334:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1335:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1336:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1337:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1338:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1339:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1340:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1341:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1342:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1343:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1344:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1345:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1346:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1347:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1348:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1349:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1350:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1351:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1352:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1353:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1354:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1355:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1356:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1357:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1358:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1359:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1360:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1361:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1362:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1363:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1364:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1365:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1366:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1367:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1368:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1369:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1370:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1371:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1372:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1373:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1374:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1375:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1376:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1377:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1378:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1379:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1380:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1381:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1382:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1383:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1384:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1385:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1386:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1387:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1388:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1389:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1390:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1391:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1392:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1393:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1394:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1395:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1396:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1397:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1398:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* Media and FP Feature Register 2 Definitions */
1399:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1400:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR2_VFP_Misc_Pos              4U                                            /*!< MVFR
1401:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_MVFR2_VFP_Misc_Msk             (0xFUL << FPU_MVFR2_VFP_Misc_Pos)              /*!< MVFR
1402:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1403:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*@} end of group CMSIS_FPU */
1404:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1405:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1406:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1407:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \ingroup  CMSIS_core_register
1408:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1409:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1410:../system/include/cmsis/stm32l4xx/core_cm4.h ****   @{
1411:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1412:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1413:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1414:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1415:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1416:../system/include/cmsis/stm32l4xx/core_cm4.h **** typedef struct
1417:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1418:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1419:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1420:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1421:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1422:../system/include/cmsis/stm32l4xx/core_cm4.h **** } CoreDebug_Type;
1423:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1424:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1425:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1426:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1427:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1428:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1429:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1430:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1431:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1432:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1433:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1434:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1435:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1436:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1437:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1438:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1439:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1440:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1441:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1442:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1443:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1444:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1445:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1446:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1447:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1448:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1449:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1450:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1451:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1452:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1453:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1454:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1455:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1456:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1457:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1458:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1459:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1460:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1461:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1462:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1463:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1464:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1465:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1466:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1467:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1468:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1469:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1470:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1471:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1472:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1473:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1474:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1475:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1476:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1477:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1478:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1479:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1480:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1481:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1482:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1483:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1484:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1485:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1486:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1487:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1488:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1489:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1490:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1491:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1492:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1493:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1494:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1495:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1496:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1497:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1498:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1499:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1500:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1501:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1502:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1503:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1504:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1505:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1506:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1507:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1508:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1509:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1510:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1511:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1512:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \ingroup    CMSIS_core_register
1513:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1514:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1515:../system/include/cmsis/stm32l4xx/core_cm4.h ****   @{
1516:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1517:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1518:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1519:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1520:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param[in] field  Name of the register bit field.
1521:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1522:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \return           Masked and shifted value.
1523:../system/include/cmsis/stm32l4xx/core_cm4.h **** */
1524:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1525:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1526:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1527:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1528:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param[in] field  Name of the register bit field.
1529:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1530:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \return           Masked and shifted bit field value.
1531:../system/include/cmsis/stm32l4xx/core_cm4.h **** */
1532:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1533:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1534:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1535:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1536:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1537:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1538:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \ingroup    CMSIS_core_register
1539:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1540:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1541:../system/include/cmsis/stm32l4xx/core_cm4.h ****   @{
1542:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1543:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1544:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* Memory mapping of Core Hardware */
1545:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1546:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1547:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1548:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1549:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1550:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1551:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1552:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1553:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1554:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1555:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1556:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1557:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1558:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1559:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1560:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1561:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1562:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1563:../system/include/cmsis/stm32l4xx/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1564:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1565:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1566:../system/include/cmsis/stm32l4xx/core_cm4.h **** #endif
1567:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1568:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1569:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1570:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1571:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*@} */
1572:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1573:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1574:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1575:../system/include/cmsis/stm32l4xx/core_cm4.h **** /*******************************************************************************
1576:../system/include/cmsis/stm32l4xx/core_cm4.h ****  *                Hardware Abstraction Layer
1577:../system/include/cmsis/stm32l4xx/core_cm4.h ****   Core Function Interface contains:
1578:../system/include/cmsis/stm32l4xx/core_cm4.h ****   - Core NVIC Functions
1579:../system/include/cmsis/stm32l4xx/core_cm4.h ****   - Core SysTick Functions
1580:../system/include/cmsis/stm32l4xx/core_cm4.h ****   - Core Debug Functions
1581:../system/include/cmsis/stm32l4xx/core_cm4.h ****   - Core Register Access Functions
1582:../system/include/cmsis/stm32l4xx/core_cm4.h ****  ******************************************************************************/
1583:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1584:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1585:../system/include/cmsis/stm32l4xx/core_cm4.h **** */
1586:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1587:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1588:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1589:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1590:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1591:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1592:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1593:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1594:../system/include/cmsis/stm32l4xx/core_cm4.h ****   @{
1595:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1596:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1597:../system/include/cmsis/stm32l4xx/core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1598:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1599:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1600:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #endif
1601:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1602:../system/include/cmsis/stm32l4xx/core_cm4.h **** #else
1603:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1604:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1605:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1606:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1607:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1608:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1609:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1610:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1611:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1612:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1613:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1614:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1615:../system/include/cmsis/stm32l4xx/core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1616:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1617:../system/include/cmsis/stm32l4xx/core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1618:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1619:../system/include/cmsis/stm32l4xx/core_cm4.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1620:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #endif
1621:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1622:../system/include/cmsis/stm32l4xx/core_cm4.h **** #else
1623:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1624:../system/include/cmsis/stm32l4xx/core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1625:../system/include/cmsis/stm32l4xx/core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1626:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1627:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1628:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1629:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1630:../system/include/cmsis/stm32l4xx/core_cm4.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
1631:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
1632:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
1633:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
1634:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define EXC_RETURN_HANDLER_FPU     (0xFFFFFFE1UL)     /* return to Handler mode, uses MSP after ret
1635:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define EXC_RETURN_THREAD_MSP_FPU  (0xFFFFFFE9UL)     /* return to Thread mode, uses MSP after retu
1636:../system/include/cmsis/stm32l4xx/core_cm4.h **** #define EXC_RETURN_THREAD_PSP_FPU  (0xFFFFFFEDUL)     /* return to Thread mode, uses PSP after retu
1637:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1638:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1639:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1640:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Set Priority Grouping
1641:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1642:../system/include/cmsis/stm32l4xx/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1643:../system/include/cmsis/stm32l4xx/core_cm4.h ****            Only values from 0..7 are used.
1644:../system/include/cmsis/stm32l4xx/core_cm4.h ****            In case of a conflict between priority grouping and available
1645:../system/include/cmsis/stm32l4xx/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1646:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1647:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1648:../system/include/cmsis/stm32l4xx/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1649:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1650:../system/include/cmsis/stm32l4xx/core_cm4.h ****   uint32_t reg_value;
1651:../system/include/cmsis/stm32l4xx/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1652:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1653:../system/include/cmsis/stm32l4xx/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1654:../system/include/cmsis/stm32l4xx/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1655:../system/include/cmsis/stm32l4xx/core_cm4.h ****   reg_value  =  (reg_value                                   |
1656:../system/include/cmsis/stm32l4xx/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1657:../system/include/cmsis/stm32l4xx/core_cm4.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key a
1658:../system/include/cmsis/stm32l4xx/core_cm4.h ****   SCB->AIRCR =  reg_value;
1659:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
1660:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1661:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1662:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1663:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Get Priority Grouping
1664:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1665:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1666:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1667:../system/include/cmsis/stm32l4xx/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1668:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1669:../system/include/cmsis/stm32l4xx/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1670:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
1671:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1672:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1673:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1674:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Enable Interrupt
1675:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1676:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1677:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \note    IRQn must not be negative.
1678:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1679:../system/include/cmsis/stm32l4xx/core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1680:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1681:../system/include/cmsis/stm32l4xx/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1682:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
1683:../system/include/cmsis/stm32l4xx/core_cm4.h ****     __COMPILER_BARRIER();
1684:../system/include/cmsis/stm32l4xx/core_cm4.h ****     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1685:../system/include/cmsis/stm32l4xx/core_cm4.h ****     __COMPILER_BARRIER();
1686:../system/include/cmsis/stm32l4xx/core_cm4.h ****   }
1687:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
1688:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1689:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1690:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1691:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Get Interrupt Enable status
1692:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1693:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1694:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \return             0  Interrupt is not enabled.
1695:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \return             1  Interrupt is enabled.
1696:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \note    IRQn must not be negative.
1697:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1698:../system/include/cmsis/stm32l4xx/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1699:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1700:../system/include/cmsis/stm32l4xx/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1701:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
1702:../system/include/cmsis/stm32l4xx/core_cm4.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1703:../system/include/cmsis/stm32l4xx/core_cm4.h ****   }
1704:../system/include/cmsis/stm32l4xx/core_cm4.h ****   else
1705:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
1706:../system/include/cmsis/stm32l4xx/core_cm4.h ****     return(0U);
1707:../system/include/cmsis/stm32l4xx/core_cm4.h ****   }
1708:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
1709:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1710:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1711:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1712:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Disable Interrupt
1713:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1714:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1715:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \note    IRQn must not be negative.
1716:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1717:../system/include/cmsis/stm32l4xx/core_cm4.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1718:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1719:../system/include/cmsis/stm32l4xx/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1720:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
1721:../system/include/cmsis/stm32l4xx/core_cm4.h ****     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1722:../system/include/cmsis/stm32l4xx/core_cm4.h ****     __DSB();
1723:../system/include/cmsis/stm32l4xx/core_cm4.h ****     __ISB();
1724:../system/include/cmsis/stm32l4xx/core_cm4.h ****   }
1725:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
1726:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1727:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1728:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1729:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Get Pending Interrupt
1730:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
1731:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1732:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \return             0  Interrupt status is not pending.
1733:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \return             1  Interrupt status is pending.
1734:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \note    IRQn must not be negative.
1735:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1736:../system/include/cmsis/stm32l4xx/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
1737:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1738:../system/include/cmsis/stm32l4xx/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1739:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
1740:../system/include/cmsis/stm32l4xx/core_cm4.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1741:../system/include/cmsis/stm32l4xx/core_cm4.h ****   }
1742:../system/include/cmsis/stm32l4xx/core_cm4.h ****   else
1743:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
1744:../system/include/cmsis/stm32l4xx/core_cm4.h ****     return(0U);
1745:../system/include/cmsis/stm32l4xx/core_cm4.h ****   }
1746:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
1747:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1748:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1749:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1750:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Set Pending Interrupt
1751:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
1752:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1753:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \note    IRQn must not be negative.
1754:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1755:../system/include/cmsis/stm32l4xx/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
1756:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1757:../system/include/cmsis/stm32l4xx/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1758:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
1759:../system/include/cmsis/stm32l4xx/core_cm4.h ****     NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1760:../system/include/cmsis/stm32l4xx/core_cm4.h ****   }
1761:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
1762:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1763:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1764:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1765:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Clear Pending Interrupt
1766:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
1767:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1768:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \note    IRQn must not be negative.
1769:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1770:../system/include/cmsis/stm32l4xx/core_cm4.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1771:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1772:../system/include/cmsis/stm32l4xx/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1773:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
1774:../system/include/cmsis/stm32l4xx/core_cm4.h ****     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1775:../system/include/cmsis/stm32l4xx/core_cm4.h ****   }
1776:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
1777:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1778:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1779:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1780:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Get Active Interrupt
1781:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Reads the active register in the NVIC and returns the active bit for the device specific
1782:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1783:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \return             0  Interrupt status is not active.
1784:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \return             1  Interrupt status is active.
1785:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \note    IRQn must not be negative.
1786:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1787:../system/include/cmsis/stm32l4xx/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
1788:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1789:../system/include/cmsis/stm32l4xx/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1790:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
1791:../system/include/cmsis/stm32l4xx/core_cm4.h ****     return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1792:../system/include/cmsis/stm32l4xx/core_cm4.h ****   }
1793:../system/include/cmsis/stm32l4xx/core_cm4.h ****   else
1794:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
1795:../system/include/cmsis/stm32l4xx/core_cm4.h ****     return(0U);
1796:../system/include/cmsis/stm32l4xx/core_cm4.h ****   }
1797:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
1798:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1799:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1800:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1801:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Set Interrupt Priority
1802:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
1803:../system/include/cmsis/stm32l4xx/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1804:../system/include/cmsis/stm32l4xx/core_cm4.h ****            or negative to specify a processor exception.
1805:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1806:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]  priority  Priority to set.
1807:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \note    The priority cannot be set for every processor exception.
1808:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1809:../system/include/cmsis/stm32l4xx/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1810:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1811:../system/include/cmsis/stm32l4xx/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1812:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
1813:../system/include/cmsis/stm32l4xx/core_cm4.h ****     NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1814:../system/include/cmsis/stm32l4xx/core_cm4.h ****   }
1815:../system/include/cmsis/stm32l4xx/core_cm4.h ****   else
1816:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
1817:../system/include/cmsis/stm32l4xx/core_cm4.h ****     SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1818:../system/include/cmsis/stm32l4xx/core_cm4.h ****   }
1819:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
1820:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1821:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1822:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1823:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Get Interrupt Priority
1824:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
1825:../system/include/cmsis/stm32l4xx/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1826:../system/include/cmsis/stm32l4xx/core_cm4.h ****            or negative to specify a processor exception.
1827:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]   IRQn  Interrupt number.
1828:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \return             Interrupt Priority.
1829:../system/include/cmsis/stm32l4xx/core_cm4.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1830:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1831:../system/include/cmsis/stm32l4xx/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
1832:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1833:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1834:../system/include/cmsis/stm32l4xx/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1835:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
1836:../system/include/cmsis/stm32l4xx/core_cm4.h ****     return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
1837:../system/include/cmsis/stm32l4xx/core_cm4.h ****   }
1838:../system/include/cmsis/stm32l4xx/core_cm4.h ****   else
1839:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
1840:../system/include/cmsis/stm32l4xx/core_cm4.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
1841:../system/include/cmsis/stm32l4xx/core_cm4.h ****   }
1842:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
1843:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1844:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1845:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1846:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Encode Priority
1847:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Encodes the priority for an interrupt with the given priority group,
1848:../system/include/cmsis/stm32l4xx/core_cm4.h ****            preemptive priority value, and subpriority value.
1849:../system/include/cmsis/stm32l4xx/core_cm4.h ****            In case of a conflict between priority grouping and available
1850:../system/include/cmsis/stm32l4xx/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1851:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1852:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1853:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1854:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1855:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1856:../system/include/cmsis/stm32l4xx/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1857:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1858:../system/include/cmsis/stm32l4xx/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1859:../system/include/cmsis/stm32l4xx/core_cm4.h ****   uint32_t PreemptPriorityBits;
1860:../system/include/cmsis/stm32l4xx/core_cm4.h ****   uint32_t SubPriorityBits;
1861:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1862:../system/include/cmsis/stm32l4xx/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1863:../system/include/cmsis/stm32l4xx/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1864:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1865:../system/include/cmsis/stm32l4xx/core_cm4.h ****   return (
1866:../system/include/cmsis/stm32l4xx/core_cm4.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
1867:../system/include/cmsis/stm32l4xx/core_cm4.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1868:../system/include/cmsis/stm32l4xx/core_cm4.h ****          );
1869:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
1870:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1871:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1872:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1873:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Decode Priority
1874:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Decodes an interrupt priority value with a given priority group to
1875:../system/include/cmsis/stm32l4xx/core_cm4.h ****            preemptive priority value and subpriority value.
1876:../system/include/cmsis/stm32l4xx/core_cm4.h ****            In case of a conflict between priority grouping and available
1877:../system/include/cmsis/stm32l4xx/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1878:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1879:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1880:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1881:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1882:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1883:../system/include/cmsis/stm32l4xx/core_cm4.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1884:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1885:../system/include/cmsis/stm32l4xx/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1886:../system/include/cmsis/stm32l4xx/core_cm4.h ****   uint32_t PreemptPriorityBits;
1887:../system/include/cmsis/stm32l4xx/core_cm4.h ****   uint32_t SubPriorityBits;
1888:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1889:../system/include/cmsis/stm32l4xx/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1890:../system/include/cmsis/stm32l4xx/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1891:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1892:../system/include/cmsis/stm32l4xx/core_cm4.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1893:../system/include/cmsis/stm32l4xx/core_cm4.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1894:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
1895:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1896:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1897:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1898:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Set Interrupt Vector
1899:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
1900:../system/include/cmsis/stm32l4xx/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1901:../system/include/cmsis/stm32l4xx/core_cm4.h ****            or negative to specify a processor exception.
1902:../system/include/cmsis/stm32l4xx/core_cm4.h ****            VTOR must been relocated to SRAM before.
1903:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]   IRQn      Interrupt number
1904:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]   vector    Address of interrupt handler function
1905:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1906:../system/include/cmsis/stm32l4xx/core_cm4.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
1907:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1908:../system/include/cmsis/stm32l4xx/core_cm4.h ****   uint32_t vectors = (uint32_t )SCB->VTOR;
1909:../system/include/cmsis/stm32l4xx/core_cm4.h ****   (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
1910:../system/include/cmsis/stm32l4xx/core_cm4.h ****   /* ARM Application Note 321 states that the M4 does not require the architectural barrier */
1911:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
1912:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1913:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1914:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1915:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   Get Interrupt Vector
1916:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Reads an interrupt vector from interrupt vector table.
1917:../system/include/cmsis/stm32l4xx/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1918:../system/include/cmsis/stm32l4xx/core_cm4.h ****            or negative to specify a processor exception.
1919:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \param [in]   IRQn      Interrupt number.
1920:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \return                 Address of interrupt handler function
1921:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1922:../system/include/cmsis/stm32l4xx/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
1923:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1924:../system/include/cmsis/stm32l4xx/core_cm4.h ****   uint32_t vectors = (uint32_t )SCB->VTOR;
1925:../system/include/cmsis/stm32l4xx/core_cm4.h ****   return (uint32_t)(* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4));
1926:../system/include/cmsis/stm32l4xx/core_cm4.h **** }
1927:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1928:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1929:../system/include/cmsis/stm32l4xx/core_cm4.h **** /**
1930:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \brief   System Reset
1931:../system/include/cmsis/stm32l4xx/core_cm4.h ****   \details Initiates a system reset request to reset the MCU.
1932:../system/include/cmsis/stm32l4xx/core_cm4.h ****  */
1933:../system/include/cmsis/stm32l4xx/core_cm4.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
1934:../system/include/cmsis/stm32l4xx/core_cm4.h **** {
1935:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __DSB();                                                          /* Ensure all outstanding memor
1936:../system/include/cmsis/stm32l4xx/core_cm4.h ****                                                                        buffered write are completed
1937:../system/include/cmsis/stm32l4xx/core_cm4.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
1938:../system/include/cmsis/stm32l4xx/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 1285              		.loc 4 1938 0
 1286 0802 2D49     		ldr	r1, .L121+160
 1287 0804 CA68     		ldr	r2, [r1, #12]
 1288 0806 02F4E062 		and	r2, r2, #1792
1937:../system/include/cmsis/stm32l4xx/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 1289              		.loc 4 1937 0
 1290 080a 2C4B     		ldr	r3, .L121+164
 1291 080c 1343     		orrs	r3, r3, r2
 1292 080e CB60     		str	r3, [r1, #12]
 1293              	.LBB78:
 1294              	.LBB79:
 1295              		.loc 3 946 0
 1296              		.syntax unified
 1297              	@ 946 "../system/include/cmsis/stm32l4xx/cmsis_gcc.h" 1
 1298 0810 BFF34F8F 		dsb 0xF
 1299              	@ 0 "" 2
 1300              		.thumb
 1301              		.syntax unified
 1302              	.L42:
 1303              	.LBE79:
 1304              	.LBE78:
1939:../system/include/cmsis/stm32l4xx/core_cm4.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1940:../system/include/cmsis/stm32l4xx/core_cm4.h ****   __DSB();                                                          /* Ensure completion of memory 
1941:../system/include/cmsis/stm32l4xx/core_cm4.h **** 
1942:../system/include/cmsis/stm32l4xx/core_cm4.h ****   for(;;)                                                           /* wait until reset */
1943:../system/include/cmsis/stm32l4xx/core_cm4.h ****   {
1944:../system/include/cmsis/stm32l4xx/core_cm4.h ****     __NOP();
 1305              		.loc 4 1944 0
 1306              		.syntax unified
 1307              	@ 1944 "../system/include/cmsis/stm32l4xx/core_cm4.h" 1
 1308 0814 00BF     		nop
 1309              	@ 0 "" 2
 1310              		.thumb
 1311              		.syntax unified
 1312 0816 FDE7     		b	.L42
 1313              	.L122:
 1314              		.align	2
 1315              	.L121:
 1316 0818 00000000 		.word	.LANCHOR3
 1317 081c 00000000 		.word	.LANCHOR4
 1318 0820 00000000 		.word	main_target_kiss_baudrate
 1319 0824 00000000 		.word	.LANCHOR6
 1320 0828 00000000 		.word	main_kiss_srl_ctx_ptr
 1321 082c 00000000 		.word	srl_usart1_tx_buffer
 1322 0830 00000000 		.word	srl_usart1_rx_buffer
 1323 0834 00380140 		.word	1073821696
 1324 0838 00000000 		.word	rte_wx_davis_station_avaliable
 1325 083c 00000000 		.word	.LANCHOR7
 1326 0840 00000000 		.word	main_target_wx_baudrate
 1327 0844 00000000 		.word	srl_usart2_tx_buffer
 1328 0848 00000000 		.word	srl_usart2_rx_buffer
 1329 084c 00440040 		.word	1073759232
 1330 0850 00000000 		.word	main_wx_srl_ctx_ptr
 1331 0854 00000000 		.word	.LANCHOR8
 1332 0858 00000000 		.word	rte_rtu_pool_queue
 1333 085c 00000000 		.word	.LANCHOR9
 1334 0860 00000000 		.word	rte_wx_dallas_average
 1335 0864 00080048 		.word	1207961600
 1336 0868 00000000 		.word	.LANCHOR11
 1337 086c 00000000 		.word	rte_wx_umb_context
 1338 0870 00000000 		.word	.LANCHOR2
 1339 0874 00000000 		.word	rte_wx_ms5611_qf
 1340 0878 00000000 		.word	SensorCalData
 1341 087c 00000000 		.word	rte_wx_bme280_qf
 1342 0880 00000000 		.word	bme280_calibration_data
 1343 0884 00000000 		.word	.LANCHOR1
 1344 0888 00000000 		.word	main_own_aprs_msg
 1345 088c 00000000 		.word	main_string_longitude
 1346 0890 00000000 		.word	main_string_latitude
 1347 0894 00000000 		.word	.LC0
 1348 0898 00000000 		.word	main_own_aprs_msg_len
 1349 089c 00000000 		.word	main_kiss_srl_ctx
 1350 08a0 00000000 		.word	main_own_path
 1351 08a4 00000000 		.word	.LANCHOR12
 1352 08a8 00000000 		.word	.LANCHOR13
 1353 08ac 00000000 		.word	rte_pv_average
 1354 08b0 00000000 		.word	rte_pv_struct
 1355 08b4 00000000 		.word	rte_wx_umb
 1356 08b8 00ED00E0 		.word	-536810240
 1357 08bc 0400FA05 		.word	100270084
 1358              	.L104:
 1359              	.LBE75:
 1360              	.LBE74:
 861:../src/main.c ****    }
 862:../src/main.c **** 
 863:../src/main.c ****   // Infinite loop
 864:../src/main.c ****   while (1)
 865:../src/main.c ****     {
 866:../src/main.c **** 	  // incrementing current cpu ticks
 867:../src/main.c **** 	  main_current_cpu_idle_ticks++;
 868:../src/main.c **** 
 869:../src/main.c **** 	    if (rte_main_reboot_req == 1) {
 870:../src/main.c **** 	    	NVIC_SystemReset();
 871:../src/main.c **** 	    }
 872:../src/main.c **** 	    else {
 873:../src/main.c **** 	    	;
 874:../src/main.c **** 	    }
 875:../src/main.c **** 
 876:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B) || defined(PARATNC_HWREV_C)
 877:../src/main.c **** 	    // read the state of a button input
 878:../src/main.c **** 	  	if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
 879:../src/main.c **** 
 880:../src/main.c **** 	  		// if modem is not busy on transmitting something and the button is not
 881:../src/main.c **** 	  		// inhibited
 882:../src/main.c **** 	  		if (main_afsk.sending == false && button_inhibit == 0) {
 883:../src/main.c **** 
 884:../src/main.c **** 	  			// wait for radio channel to be released
 885:../src/main.c **** 	  			while(main_ax25.dcd == true);
 886:../src/main.c **** 
 887:../src/main.c **** 	  			if ((main_config_data_mode->wx & WX_ENABLED) == 0) {
 888:../src/main.c **** 
 889:../src/main.c **** 	  				beacon_send_own();
 890:../src/main.c **** 	  			}
 891:../src/main.c **** 	  			else {
 892:../src/main.c **** 
 893:../src/main.c **** 					srl_wait_for_tx_completion(main_kiss_srl_ctx_ptr);
 894:../src/main.c **** 
 895:../src/main.c **** 					SendWXFrameToBuffer(rte_wx_average_windspeed, rte_wx_max_windspeed, rte_wx_average_winddirecti
 896:../src/main.c **** 
 897:../src/main.c **** 					if (main_kiss_enabled == 1) {
 898:../src/main.c **** 						srl_start_tx(main_kiss_srl_ctx_ptr, ln);
 899:../src/main.c **** 					}
 900:../src/main.c **** 	  			}
 901:../src/main.c **** 	  		}
 902:../src/main.c **** 
 903:../src/main.c **** 	  		button_inhibit = 1;
 904:../src/main.c **** 	  	}
 905:../src/main.c **** 	  	else {
 906:../src/main.c **** 	  		button_inhibit = 0;
 907:../src/main.c **** 	  	}
 908:../src/main.c **** #endif
 909:../src/main.c **** 
 910:../src/main.c **** 
 911:../src/main.c **** 	  	// if new packet has been received from radio channel
 912:../src/main.c **** 		if(ax25_new_msg_rx_flag == 1) {
 913:../src/main.c **** 			memset(main_kiss_srl_ctx.srl_tx_buf_pointer, 0x00, main_kiss_srl_ctx.srl_tx_buf_ln);
 1361              		.loc 1 913 0
 1362 08c0 A94B     		ldr	r3, .L123
 1363 08c2 DA8B     		ldrh	r2, [r3, #30]
 1364 08c4 0021     		movs	r1, #0
 1365 08c6 5869     		ldr	r0, [r3, #20]
 1366 08c8 FFF7FEFF 		bl	memset
 1367              	.LVL133:
 914:../src/main.c **** 
 915:../src/main.c **** 			if (main_kiss_enabled == 1) {
 1368              		.loc 1 915 0
 1369 08cc A74B     		ldr	r3, .L123+4
 1370 08ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1371 08d0 012B     		cmp	r3, #1
 1372 08d2 0AD0     		beq	.L90
 1373              	.L44:
 916:../src/main.c **** 				// convert message to kiss format and send it to host
 917:../src/main.c **** 				srl_start_tx(main_kiss_srl_ctx_ptr, SendKISSToHost(ax25_rxed_frame.raw_data, (ax25_rxed_frame.r
 918:../src/main.c **** 			}
 919:../src/main.c **** 
 920:../src/main.c **** 			main_ax25.dcd = false;
 1374              		.loc 1 920 0
 1375 08d4 0023     		movs	r3, #0
 1376 08d6 A64A     		ldr	r2, .L123+8
 1377 08d8 82F81432 		strb	r3, [r2, #532]
 921:../src/main.c **** 
 922:../src/main.c **** #ifndef _MUTE_OWN
 923:../src/main.c **** 	#ifdef _DIGI
 924:../src/main.c **** 			//digi_check_with_viscous(&ax25_rxed_frame);
 925:../src/main.c **** 
 926:../src/main.c **** 			// check if this packet needs to be repeated (digipeated) and do it if it is necessary
 927:../src/main.c **** 			digi_process(&ax25_rxed_frame, main_config_data_basic, main_config_data_mode);
 928:../src/main.c **** 	#endif
 929:../src/main.c **** #endif
 930:../src/main.c **** 			ax25_new_msg_rx_flag = 0;
 1378              		.loc 1 930 0
 1379 08dc A54A     		ldr	r2, .L123+12
 1380 08de 1370     		strb	r3, [r2]
 931:../src/main.c **** 			rx10m++;
 1381              		.loc 1 931 0
 1382 08e0 A54A     		ldr	r2, .L123+16
 1383 08e2 1388     		ldrh	r3, [r2]
 1384 08e4 0133     		adds	r3, r3, #1
 1385 08e6 1380     		strh	r3, [r2]	@ movhi
 1386 08e8 75E0     		b	.L43
 1387              	.L90:
 917:../src/main.c **** 			}
 1388              		.loc 1 917 0
 1389 08ea A44B     		ldr	r3, .L123+20
 1390 08ec 1C68     		ldr	r4, [r3]
 1391 08ee A448     		ldr	r0, .L123+24
 1392 08f0 B0F85212 		ldrh	r1, [r0, #594]
 1393 08f4 9C4A     		ldr	r2, .L123
 1394 08f6 0239     		subs	r1, r1, #2
 1395 08f8 D38B     		ldrh	r3, [r2, #30]
 1396 08fa 5269     		ldr	r2, [r2, #20]
 1397 08fc 89B2     		uxth	r1, r1
 1398 08fe 5230     		adds	r0, r0, #82
 1399 0900 FFF7FEFF 		bl	SendKISSToHost
 1400              	.LVL134:
 1401 0904 01B2     		sxth	r1, r0
 1402 0906 2046     		mov	r0, r4
 1403 0908 FFF7FEFF 		bl	srl_start_tx
 1404              	.LVL135:
 1405 090c E2E7     		b	.L44
 1406              	.L105:
 932:../src/main.c **** 		}
 933:../src/main.c **** 
 934:../src/main.c **** 		// if Victron VE.direct client is enabled
 935:../src/main.c **** 		if (main_config_data_mode->victron == 1) {
 936:../src/main.c **** 
 937:../src/main.c **** 			// if new KISS message has been received from the host
 938:../src/main.c **** 			if (main_kiss_srl_ctx_ptr->srl_rx_state == SRL_RX_DONE || main_kiss_srl_ctx_ptr->srl_rx_state ==
 1407              		.loc 1 938 0
 1408 090e 9B4B     		ldr	r3, .L123+20
 1409 0910 1868     		ldr	r0, [r3]
 1410 0912 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1411 0916 043B     		subs	r3, r3, #4
 1412 0918 DBB2     		uxtb	r3, r3
 1413 091a 012B     		cmp	r3, #1
 1414 091c 7FD9     		bls	.L91
 1415              	.L46:
 939:../src/main.c **** 
 940:../src/main.c **** 				// cutting received string to Checksum, everything after will be skipped
 941:../src/main.c **** 				ve_direct_cut_to_checksum(srl_get_rx_buffer(main_kiss_srl_ctx_ptr), TX_BUFFER_1_LN, &buffer_len
 942:../src/main.c **** 
 943:../src/main.c **** 				// checking if this frame is ok
 944:../src/main.c **** 				ve_direct_validate_checksum(srl_get_rx_buffer(main_kiss_srl_ctx_ptr), buffer_len, &retval);
 945:../src/main.c **** 
 946:../src/main.c **** 				if (retval == 1) {
 947:../src/main.c **** 					// parsing data from input serial buffer to
 948:../src/main.c **** 					retval = ve_direct_parse_to_raw_struct(srl_get_rx_buffer(main_kiss_srl_ctx_ptr), buffer_len, &
 949:../src/main.c **** 
 950:../src/main.c **** 					if (retval == 0) {
 951:../src/main.c **** 						ve_direct_add_to_average(&rte_pv_struct, &rte_pv_average);
 952:../src/main.c **** 
 953:../src/main.c **** 						ve_direct_get_averages(&rte_pv_average, &rte_pv_battery_current, &rte_pv_battery_voltage, &rt
 954:../src/main.c **** 
 955:../src/main.c **** 						ve_direct_set_sys_voltage(&rte_pv_struct, &rte_pv_sys_voltage);
 956:../src/main.c **** 
 957:../src/main.c **** 						ve_direct_store_errors(&rte_pv_struct, &rte_pv_last_error);
 958:../src/main.c **** 
 959:../src/main.c **** 						rte_pv_messages_count++;
 960:../src/main.c **** 					}
 961:../src/main.c **** 				}
 962:../src/main.c **** 				else {
 963:../src/main.c **** 					rte_pv_corrupted_messages_count++;
 964:../src/main.c **** 				}
 965:../src/main.c **** 
 966:../src/main.c **** 				//memset(srl_get_rx_buffer(main_kiss_srl_ctx_ptr), 0x00, TX_BUFFER_1_LN);
 967:../src/main.c **** 
 968:../src/main.c **** 				srl_receive_data(main_kiss_srl_ctx_ptr, VE_DIRECT_MAX_FRAME_LN, 0, 0, 0, 0, 0);
 969:../src/main.c **** 			}
 970:../src/main.c **** 		}
 971:../src/main.c **** 		else if (main_config_data_mode->wx_umb == 1) {
 972:../src/main.c **** 			// if some UMB data have been received
 973:../src/main.c **** 			if (main_wx_srl_ctx_ptr->srl_rx_state == SRL_RX_DONE) {
 974:../src/main.c **** 				umb_pooling_handler(&rte_wx_umb_context, REASON_RECEIVE_IDLE, master_time, main_config_data_umb
 975:../src/main.c **** 			}
 976:../src/main.c **** 
 977:../src/main.c **** 			// if there were an error during receiving frame from host, restart rxing once again
 978:../src/main.c **** 			if (main_wx_srl_ctx_ptr->srl_rx_state == SRL_RX_ERROR) {
 979:../src/main.c **** 				umb_pooling_handler(&rte_wx_umb_context, REASON_RECEIVE_ERROR, master_time, main_config_data_um
 980:../src/main.c **** 			}
 981:../src/main.c **** 
 982:../src/main.c **** 			if (main_wx_srl_ctx_ptr->srl_tx_state == SRL_TX_IDLE) {
 983:../src/main.c **** 				umb_pooling_handler(&rte_wx_umb_context, REASON_TRANSMIT_IDLE, master_time, main_config_data_um
 984:../src/main.c **** 			}
 985:../src/main.c **** 		}
 986:../src/main.c **** 		else {
 987:../src/main.c **** 			// if new KISS message has been received from the host
 988:../src/main.c **** 			if (main_kiss_srl_ctx_ptr->srl_rx_state == SRL_RX_DONE && main_kiss_enabled == 1) {
 989:../src/main.c **** 				// parse i ncoming data and then transmit on radio freq
 990:../src/main.c **** 				short res = ParseReceivedKISS(srl_get_rx_buffer(main_kiss_srl_ctx_ptr), srl_get_num_bytes_rxed(
 991:../src/main.c **** 				if (res == 0)
 992:../src/main.c **** 					kiss10m++;	// increase kiss messages counter
 993:../src/main.c **** 
 994:../src/main.c **** 				// restart KISS receiving to be ready for next frame
 995:../src/main.c **** 				srl_receive_data(main_kiss_srl_ctx_ptr, 120, FEND, FEND, 0, 0, 0);
 996:../src/main.c **** 			}
 997:../src/main.c **** 
 998:../src/main.c **** 			// if there were an error during receiving frame from host, restart rxing once again
 999:../src/main.c **** 			if (main_kiss_srl_ctx_ptr->srl_rx_state == SRL_RX_ERROR && main_kiss_enabled == 1) {
1000:../src/main.c **** 				srl_receive_data(main_kiss_srl_ctx_ptr, 120, FEND, FEND, 0, 0, 0);
1001:../src/main.c **** 			}
1002:../src/main.c **** 		}
1003:../src/main.c **** 
1004:../src/main.c **** 		// if Davis wx station is enabled and it is alive
1005:../src/main.c **** 		if (main_davis_serial_enabled == 1) {
 1416              		.loc 1 1005 0
 1417 091e 994B     		ldr	r3, .L123+28
 1418 0920 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1419 0922 012B     		cmp	r3, #1
 1420 0924 00F01981 		beq	.L92
 1421              	.L54:
1006:../src/main.c **** 
1007:../src/main.c **** 			// pool the Davis wx station driver for LOOP packet
1008:../src/main.c **** 			davis_loop_packet_pooler(&rte_wx_davis_loop_packet_avaliable);
1009:../src/main.c **** 
1010:../src/main.c **** 			davis_rxcheck_packet_pooler();
1011:../src/main.c **** 		}
1012:../src/main.c **** 
1013:../src/main.c **** 		// if modbus rtu master is enabled
1014:../src/main.c **** 		if (main_modbus_rtu_master_enabled == 1) {
 1422              		.loc 1 1014 0
 1423 0928 974B     		ldr	r3, .L123+32
 1424 092a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1425 092c 012B     		cmp	r3, #1
 1426 092e 00F06581 		beq	.L93
 1427              	.L55:
1015:../src/main.c **** 			rtu_serial_pool();
1016:../src/main.c **** 		}
1017:../src/main.c **** 
1018:../src/main.c **** 		// get all meteo measuremenets each 65 seconds. some values may not be
1019:../src/main.c **** 		// downloaded from sensors if _METEO and/or _DALLAS_AS_TELEM aren't defined
1020:../src/main.c **** 		if (main_wx_sensors_pool_timer < 10) {
 1428              		.loc 1 1020 0
 1429 0932 964B     		ldr	r3, .L123+36
 1430 0934 1B68     		ldr	r3, [r3]
 1431 0936 092B     		cmp	r3, #9
 1432 0938 1FDC     		bgt	.L56
1021:../src/main.c **** 
1022:../src/main.c **** 			if (main_modbus_rtu_master_enabled == 1) {
 1433              		.loc 1 1022 0
 1434 093a 934B     		ldr	r3, .L123+32
 1435 093c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1436 093e 012B     		cmp	r3, #1
 1437 0940 00F05F81 		beq	.L94
 1438              	.L57:
1023:../src/main.c **** 				rtu_serial_start();
1024:../src/main.c **** 			}
1025:../src/main.c **** 
1026:../src/main.c **** 			if ((main_config_data_mode->wx & WX_ENABLED) == 1) {
 1439              		.loc 1 1026 0
 1440 0944 924B     		ldr	r3, .L123+40
 1441 0946 1968     		ldr	r1, [r3]
 1442 0948 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 1443 094a 13F0010F 		tst	r3, #1
 1444 094e 40F05B81 		bne	.L95
 1445              	.L58:
1027:../src/main.c **** 				wx_get_all_measurements(main_config_data_wx_sources, main_config_data_mode, main_config_data_um
1028:../src/main.c **** 			}
1029:../src/main.c **** 
1030:../src/main.c **** 
1031:../src/main.c **** 			if (main_config_data_mode->wx_umb == 1) {
 1446              		.loc 1 1031 0
 1447 0952 8F4B     		ldr	r3, .L123+40
 1448 0954 1B68     		ldr	r3, [r3]
 1449 0956 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1450 0958 012B     		cmp	r3, #1
 1451 095a 00F05E81 		beq	.L96
 1452              	.L59:
1032:../src/main.c **** 				//
1033:../src/main.c **** 				umb_0x26_status_request(&rte_wx_umb, &rte_wx_umb_context, main_config_data_umb);
1034:../src/main.c **** 			}
1035:../src/main.c **** 
1036:../src/main.c **** 			if (main_davis_serial_enabled == 1) {
 1453              		.loc 1 1036 0
 1454 095e 894B     		ldr	r3, .L123+28
 1455 0960 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1456 0962 012B     		cmp	r3, #1
 1457 0964 00F06081 		beq	.L97
 1458              	.L60:
1037:../src/main.c **** 				davis_trigger_rxcheck_packet();
1038:../src/main.c **** 			}
1039:../src/main.c **** 
1040:../src/main.c **** 			if (rte_main_trigger_modbus_status == 1 && main_modbus_rtu_master_enabled == 1) {
 1459              		.loc 1 1040 0
 1460 0968 8A4B     		ldr	r3, .L123+44
 1461 096a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1462 096c 012B     		cmp	r3, #1
 1463 096e 00F05E81 		beq	.L98
 1464              	.L61:
1041:../src/main.c **** 				rtu_serial_get_status_string(&rte_rtu_pool_queue, main_wx_srl_ctx_ptr, main_own_aprs_msg, OWN_A
1042:../src/main.c **** 
1043:../src/main.c **** 			 	ax25_sendVia(&main_ax25, main_own_path, main_own_path_ln, main_own_aprs_msg, main_own_aprs_msg
1044:../src/main.c **** 
1045:../src/main.c **** 			 	afsk_txStart(&main_afsk);
1046:../src/main.c **** 
1047:../src/main.c **** 			 	rte_main_trigger_modbus_status = 0;
1048:../src/main.c **** 
1049:../src/main.c **** 
1050:../src/main.c **** 			}
1051:../src/main.c **** 
1052:../src/main.c **** 			main_wx_sensors_pool_timer = 65500;
 1465              		.loc 1 1052 0
 1466 0972 864B     		ldr	r3, .L123+36
 1467 0974 4FF6DC72 		movw	r2, #65500
 1468 0978 1A60     		str	r2, [r3]
 1469              	.L56:
1053:../src/main.c **** 		}
1054:../src/main.c **** 
1055:../src/main.c **** 		if (main_one_minute_pool_timer < 10) {
 1470              		.loc 1 1055 0
 1471 097a 874B     		ldr	r3, .L123+48
 1472 097c 1B68     		ldr	r3, [r3]
 1473 097e 092B     		cmp	r3, #9
 1474 0980 40F37481 		ble	.L99
 1475              	.L62:
1056:../src/main.c **** 
1057:../src/main.c **** 			#ifndef _MUTE_OWN
1058:../src/main.c **** 			packet_tx_handler(main_config_data_basic, main_config_data_mode);
1059:../src/main.c **** 			#endif
1060:../src/main.c **** 
1061:../src/main.c **** 			main_one_minute_pool_timer = 60000;
1062:../src/main.c **** 		}
1063:../src/main.c **** 
1064:../src/main.c **** 		if (main_one_second_pool_timer < 10) {
 1476              		.loc 1 1064 0
 1477 0984 854B     		ldr	r3, .L123+52
 1478 0986 1B68     		ldr	r3, [r3]
 1479 0988 092B     		cmp	r3, #9
 1480 098a 00F37D81 		bgt	.L63
1065:../src/main.c **** 
1066:../src/main.c **** 			//digi_pool_viscous();
1067:../src/main.c **** 
1068:../src/main.c **** 			if ((main_config_data_mode->wx & WX_ENABLED) == 1) {
 1481              		.loc 1 1068 0
 1482 098e 804B     		ldr	r3, .L123+40
 1483 0990 1B68     		ldr	r3, [r3]
 1484 0992 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1485 0994 13F0010F 		tst	r3, #1
 1486 0998 40F07381 		bne	.L100
 1487              	.L64:
1069:../src/main.c **** 				analog_anemometer_direction_handler();
1070:../src/main.c **** 			}
1071:../src/main.c **** 
1072:../src/main.c **** 			main_one_second_pool_timer = 1000;
 1488              		.loc 1 1072 0
 1489 099c 7F4B     		ldr	r3, .L123+52
 1490 099e 4FF47A72 		mov	r2, #1000
 1491 09a2 1A60     		str	r2, [r3]
 1492              	.L65:
1073:../src/main.c **** 		}
1074:../src/main.c **** 		else if (main_one_second_pool_timer < -10) {
1075:../src/main.c **** 
1076:../src/main.c **** 			if ((main_config_data_mode->wx & WX_ENABLED) == 1) {
1077:../src/main.c **** 				analog_anemometer_direction_reset();
1078:../src/main.c **** 			}
1079:../src/main.c **** 
1080:../src/main.c **** 			main_one_second_pool_timer = 1000;
1081:../src/main.c **** 		}
1082:../src/main.c **** 
1083:../src/main.c **** 		if (main_two_second_pool_timer < 10) {
 1493              		.loc 1 1083 0
 1494 09a4 7E4B     		ldr	r3, .L123+56
 1495 09a6 1B68     		ldr	r3, [r3]
 1496 09a8 092B     		cmp	r3, #9
 1497 09aa 40F37F81 		ble	.L101
 1498              	.L67:
1084:../src/main.c **** 
1085:../src/main.c **** 			wx_check_force_i2c_reset();
1086:../src/main.c **** 
1087:../src/main.c **** 			wx_pwr_switch_periodic_handle();
1088:../src/main.c **** 
1089:../src/main.c **** 			#ifdef INTERNAL_WATCHDOG
1090:../src/main.c **** 			IWDG_ReloadCounter();
1091:../src/main.c **** 			#endif
1092:../src/main.c **** 
1093:../src/main.c **** 			main_two_second_pool_timer = 2000;
1094:../src/main.c **** 		}
1095:../src/main.c **** 
1096:../src/main.c **** 		if (main_ten_second_pool_timer < 10) {
 1499              		.loc 1 1096 0
 1500 09ae 7D4B     		ldr	r3, .L123+60
 1501 09b0 1B68     		ldr	r3, [r3]
 1502 09b2 092B     		cmp	r3, #9
 1503 09b4 40F38381 		ble	.L102
 1504              	.L68:
 867:../src/main.c **** 
 1505              		.loc 1 867 0
 1506 09b8 7B4A     		ldr	r2, .L123+64
 1507 09ba 1368     		ldr	r3, [r2]
 1508 09bc 0133     		adds	r3, r3, #1
 1509 09be 1360     		str	r3, [r2]
 869:../src/main.c **** 	    	NVIC_SystemReset();
 1510              		.loc 1 869 0
 1511 09c0 7A4B     		ldr	r3, .L123+68
 1512 09c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1513 09c4 012B     		cmp	r3, #1
 1514 09c6 3FF41AAF 		beq	.L103
 912:../src/main.c **** 			memset(main_kiss_srl_ctx.srl_tx_buf_pointer, 0x00, main_kiss_srl_ctx.srl_tx_buf_ln);
 1515              		.loc 1 912 0
 1516 09ca 6A4B     		ldr	r3, .L123+12
 1517 09cc 93F90030 		ldrsb	r3, [r3]
 1518 09d0 012B     		cmp	r3, #1
 1519 09d2 3FF475AF 		beq	.L104
 1520              	.L43:
 935:../src/main.c **** 
 1521              		.loc 1 935 0
 1522 09d6 6E4B     		ldr	r3, .L123+40
 1523 09d8 1B68     		ldr	r3, [r3]
 1524 09da DA79     		ldrb	r2, [r3, #7]	@ zero_extendqisi2
 1525 09dc 012A     		cmp	r2, #1
 1526 09de 96D0     		beq	.L105
 971:../src/main.c **** 			// if some UMB data have been received
 1527              		.loc 1 971 0
 1528 09e0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1529 09e2 012B     		cmp	r3, #1
 1530 09e4 67D0     		beq	.L106
 988:../src/main.c **** 				// parse i ncoming data and then transmit on radio freq
 1531              		.loc 1 988 0
 1532 09e6 654B     		ldr	r3, .L123+20
 1533 09e8 1868     		ldr	r0, [r3]
 1534 09ea 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1535 09ee 042B     		cmp	r3, #4
 1536 09f0 00F08F80 		beq	.L107
 1537              	.L52:
 999:../src/main.c **** 				srl_receive_data(main_kiss_srl_ctx_ptr, 120, FEND, FEND, 0, 0, 0);
 1538              		.loc 1 999 0
 1539 09f4 614B     		ldr	r3, .L123+20
 1540 09f6 1868     		ldr	r0, [r3]
 1541 09f8 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1542 09fc 052B     		cmp	r3, #5
 1543 09fe 8ED1     		bne	.L46
 999:../src/main.c **** 				srl_receive_data(main_kiss_srl_ctx_ptr, 120, FEND, FEND, 0, 0, 0);
 1544              		.loc 1 999 0 is_stmt 0 discriminator 1
 1545 0a00 5A4B     		ldr	r3, .L123+4
 1546 0a02 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1547 0a04 012B     		cmp	r3, #1
 1548 0a06 8AD1     		bne	.L46
1000:../src/main.c **** 			}
 1549              		.loc 1 1000 0 is_stmt 1
 1550 0a08 0023     		movs	r3, #0
 1551 0a0a 0293     		str	r3, [sp, #8]
 1552 0a0c 0193     		str	r3, [sp, #4]
 1553 0a0e 0093     		str	r3, [sp]
 1554 0a10 6FF03F03 		mvn	r3, #63
 1555 0a14 1A46     		mov	r2, r3
 1556 0a16 7821     		movs	r1, #120
 1557 0a18 FFF7FEFF 		bl	srl_receive_data
 1558              	.LVL136:
 1559 0a1c 7FE7     		b	.L46
 1560              	.L91:
 941:../src/main.c **** 
 1561              		.loc 1 941 0
 1562 0a1e FFF7FEFF 		bl	srl_get_rx_buffer
 1563              	.LVL137:
 1564 0a22 634D     		ldr	r5, .L123+72
 1565 0a24 2A46     		mov	r2, r5
 1566 0a26 4FF40071 		mov	r1, #512
 1567 0a2a FFF7FEFF 		bl	ve_direct_cut_to_checksum
 1568              	.LVL138:
 944:../src/main.c **** 
 1569              		.loc 1 944 0
 1570 0a2e 534B     		ldr	r3, .L123+20
 1571 0a30 1868     		ldr	r0, [r3]
 1572 0a32 FFF7FEFF 		bl	srl_get_rx_buffer
 1573              	.LVL139:
 1574 0a36 5F4C     		ldr	r4, .L123+76
 1575 0a38 2246     		mov	r2, r4
 1576 0a3a 2988     		ldrh	r1, [r5]
 1577 0a3c FFF7FEFF 		bl	ve_direct_validate_checksum
 1578              	.LVL140:
 946:../src/main.c **** 					// parsing data from input serial buffer to
 1579              		.loc 1 946 0
 1580 0a40 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1581 0a42 DBB2     		uxtb	r3, r3
 1582 0a44 012B     		cmp	r3, #1
 1583 0a46 0ED0     		beq	.L108
 963:../src/main.c **** 				}
 1584              		.loc 1 963 0
 1585 0a48 5B4A     		ldr	r2, .L123+80
 1586 0a4a 1388     		ldrh	r3, [r2]
 1587 0a4c 0133     		adds	r3, r3, #1
 1588 0a4e 1380     		strh	r3, [r2]	@ movhi
 1589              	.L48:
 968:../src/main.c **** 			}
 1590              		.loc 1 968 0
 1591 0a50 4A4B     		ldr	r3, .L123+20
 1592 0a52 1868     		ldr	r0, [r3]
 1593 0a54 0022     		movs	r2, #0
 1594 0a56 0292     		str	r2, [sp, #8]
 1595 0a58 0192     		str	r2, [sp, #4]
 1596 0a5a 0092     		str	r2, [sp]
 1597 0a5c 1346     		mov	r3, r2
 1598 0a5e BA21     		movs	r1, #186
 1599 0a60 FFF7FEFF 		bl	srl_receive_data
 1600              	.LVL141:
 1601 0a64 5BE7     		b	.L46
 1602              	.L108:
 948:../src/main.c **** 
 1603              		.loc 1 948 0
 1604 0a66 454B     		ldr	r3, .L123+20
 1605 0a68 1868     		ldr	r0, [r3]
 1606 0a6a FFF7FEFF 		bl	srl_get_rx_buffer
 1607              	.LVL142:
 1608 0a6e 534A     		ldr	r2, .L123+84
 1609 0a70 2988     		ldrh	r1, [r5]
 1610 0a72 FFF7FEFF 		bl	ve_direct_parse_to_raw_struct
 1611              	.LVL143:
 1612 0a76 C0B2     		uxtb	r0, r0
 1613 0a78 2070     		strb	r0, [r4]
 950:../src/main.c **** 						ve_direct_add_to_average(&rte_pv_struct, &rte_pv_average);
 1614              		.loc 1 950 0
 1615 0a7a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1616 0a7c 002B     		cmp	r3, #0
 1617 0a7e E7D1     		bne	.L48
 951:../src/main.c **** 
 1618              		.loc 1 951 0
 1619 0a80 4F4D     		ldr	r5, .L123+88
 1620 0a82 4E4C     		ldr	r4, .L123+84
 1621 0a84 2946     		mov	r1, r5
 1622 0a86 2046     		mov	r0, r4
 1623 0a88 FFF7FEFF 		bl	ve_direct_add_to_average
 1624              	.LVL144:
 953:../src/main.c **** 
 1625              		.loc 1 953 0
 1626 0a8c 4D4B     		ldr	r3, .L123+92
 1627 0a8e 0093     		str	r3, [sp]
 1628 0a90 4D4B     		ldr	r3, .L123+96
 1629 0a92 4E4A     		ldr	r2, .L123+100
 1630 0a94 4E49     		ldr	r1, .L123+104
 1631 0a96 2846     		mov	r0, r5
 1632 0a98 FFF7FEFF 		bl	ve_direct_get_averages
 1633              	.LVL145:
 955:../src/main.c **** 
 1634              		.loc 1 955 0
 1635 0a9c 4D49     		ldr	r1, .L123+108
 1636 0a9e 2046     		mov	r0, r4
 1637 0aa0 FFF7FEFF 		bl	ve_direct_set_sys_voltage
 1638              	.LVL146:
 957:../src/main.c **** 
 1639              		.loc 1 957 0
 1640 0aa4 4C49     		ldr	r1, .L123+112
 1641 0aa6 2046     		mov	r0, r4
 1642 0aa8 FFF7FEFF 		bl	ve_direct_store_errors
 1643              	.LVL147:
 959:../src/main.c **** 					}
 1644              		.loc 1 959 0
 1645 0aac 4B4A     		ldr	r2, .L123+116
 1646 0aae 1388     		ldrh	r3, [r2]
 1647 0ab0 0133     		adds	r3, r3, #1
 1648 0ab2 1380     		strh	r3, [r2]	@ movhi
 1649 0ab4 CCE7     		b	.L48
 1650              	.L106:
 973:../src/main.c **** 				umb_pooling_handler(&rte_wx_umb_context, REASON_RECEIVE_IDLE, master_time, main_config_data_umb
 1651              		.loc 1 973 0
 1652 0ab6 4A4B     		ldr	r3, .L123+120
 1653 0ab8 1B68     		ldr	r3, [r3]
 1654 0aba 93F84430 		ldrb	r3, [r3, #68]	@ zero_extendqisi2
 1655 0abe 042B     		cmp	r3, #4
 1656 0ac0 15D0     		beq	.L109
 1657              	.L50:
 978:../src/main.c **** 				umb_pooling_handler(&rte_wx_umb_context, REASON_RECEIVE_ERROR, master_time, main_config_data_um
 1658              		.loc 1 978 0
 1659 0ac2 474B     		ldr	r3, .L123+120
 1660 0ac4 1B68     		ldr	r3, [r3]
 1661 0ac6 93F84430 		ldrb	r3, [r3, #68]	@ zero_extendqisi2
 1662 0aca 052B     		cmp	r3, #5
 1663 0acc 18D0     		beq	.L110
 1664              	.L51:
 982:../src/main.c **** 				umb_pooling_handler(&rte_wx_umb_context, REASON_TRANSMIT_IDLE, master_time, main_config_data_um
 1665              		.loc 1 982 0
 1666 0ace 444B     		ldr	r3, .L123+120
 1667 0ad0 1B68     		ldr	r3, [r3]
 1668 0ad2 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 1669 0ad6 012B     		cmp	r3, #1
 1670 0ad8 7FF421AF 		bne	.L46
 983:../src/main.c **** 			}
 1671              		.loc 1 983 0
 1672 0adc 414B     		ldr	r3, .L123+124
 1673 0ade 1B68     		ldr	r3, [r3]
 1674 0ae0 414A     		ldr	r2, .L123+128
 1675 0ae2 1268     		ldr	r2, [r2]
 1676 0ae4 0021     		movs	r1, #0
 1677 0ae6 4148     		ldr	r0, .L123+132
 1678 0ae8 FFF7FEFF 		bl	umb_pooling_handler
 1679              	.LVL148:
 1680 0aec 17E7     		b	.L46
 1681              	.L109:
 974:../src/main.c **** 			}
 1682              		.loc 1 974 0
 1683 0aee 3D4B     		ldr	r3, .L123+124
 1684 0af0 1B68     		ldr	r3, [r3]
 1685 0af2 3D4A     		ldr	r2, .L123+128
 1686 0af4 1268     		ldr	r2, [r2]
 1687 0af6 0121     		movs	r1, #1
 1688 0af8 3C48     		ldr	r0, .L123+132
 1689 0afa FFF7FEFF 		bl	umb_pooling_handler
 1690              	.LVL149:
 1691 0afe E0E7     		b	.L50
 1692              	.L110:
 979:../src/main.c **** 			}
 1693              		.loc 1 979 0
 1694 0b00 384B     		ldr	r3, .L123+124
 1695 0b02 1B68     		ldr	r3, [r3]
 1696 0b04 384A     		ldr	r2, .L123+128
 1697 0b06 1268     		ldr	r2, [r2]
 1698 0b08 0221     		movs	r1, #2
 1699 0b0a 3848     		ldr	r0, .L123+132
 1700 0b0c FFF7FEFF 		bl	umb_pooling_handler
 1701              	.LVL150:
 1702 0b10 DDE7     		b	.L51
 1703              	.L107:
 988:../src/main.c **** 				// parse i ncoming data and then transmit on radio freq
 1704              		.loc 1 988 0 discriminator 1
 1705 0b12 164B     		ldr	r3, .L123+4
 1706 0b14 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1707 0b16 012B     		cmp	r3, #1
 1708 0b18 7FF46CAF 		bne	.L52
 1709              	.LBB80:
 990:../src/main.c **** 				if (res == 0)
 1710              		.loc 1 990 0
 1711 0b1c FFF7FEFF 		bl	srl_get_rx_buffer
 1712              	.LVL151:
 1713 0b20 0446     		mov	r4, r0
 1714 0b22 164B     		ldr	r3, .L123+20
 1715 0b24 1868     		ldr	r0, [r3]
 1716 0b26 FFF7FEFF 		bl	srl_get_num_bytes_rxed
 1717              	.LVL152:
 1718 0b2a 314B     		ldr	r3, .L123+136
 1719 0b2c 104A     		ldr	r2, .L123+8
 1720 0b2e 0146     		mov	r1, r0
 1721 0b30 2046     		mov	r0, r4
 1722 0b32 FFF7FEFF 		bl	ParseReceivedKISS
 1723              	.LVL153:
 991:../src/main.c **** 					kiss10m++;	// increase kiss messages counter
 1724              		.loc 1 991 0
 1725 0b36 18B9     		cbnz	r0, .L53
 992:../src/main.c **** 
 1726              		.loc 1 992 0
 1727 0b38 2E4A     		ldr	r2, .L123+140
 1728 0b3a 1388     		ldrh	r3, [r2]
 1729 0b3c 0133     		adds	r3, r3, #1
 1730 0b3e 1380     		strh	r3, [r2]	@ movhi
 1731              	.L53:
 995:../src/main.c **** 			}
 1732              		.loc 1 995 0
 1733 0b40 0023     		movs	r3, #0
 1734 0b42 0293     		str	r3, [sp, #8]
 1735 0b44 0193     		str	r3, [sp, #4]
 1736 0b46 0093     		str	r3, [sp]
 1737 0b48 6FF03F03 		mvn	r3, #63
 1738 0b4c 1A46     		mov	r2, r3
 1739 0b4e 7821     		movs	r1, #120
 1740 0b50 0A48     		ldr	r0, .L123+20
 1741              	.LVL154:
 1742 0b52 0068     		ldr	r0, [r0]
 1743 0b54 FFF7FEFF 		bl	srl_receive_data
 1744              	.LVL155:
 1745 0b58 4CE7     		b	.L52
 1746              	.L92:
 1747              	.LBE80:
1008:../src/main.c **** 
 1748              		.loc 1 1008 0
 1749 0b5a 2748     		ldr	r0, .L123+144
 1750 0b5c FFF7FEFF 		bl	davis_loop_packet_pooler
 1751              	.LVL156:
1010:../src/main.c **** 		}
 1752              		.loc 1 1010 0
 1753 0b60 FFF7FEFF 		bl	davis_rxcheck_packet_pooler
 1754              	.LVL157:
 1755 0b64 E0E6     		b	.L54
 1756              	.L124:
 1757 0b66 00BF     		.align	2
 1758              	.L123:
 1759 0b68 00000000 		.word	main_kiss_srl_ctx
 1760 0b6c 00000000 		.word	.LANCHOR6
 1761 0b70 00000000 		.word	main_ax25
 1762 0b74 00000000 		.word	ax25_new_msg_rx_flag
 1763 0b78 00000000 		.word	.LANCHOR15
 1764 0b7c 00000000 		.word	main_kiss_srl_ctx_ptr
 1765 0b80 00000000 		.word	ax25_rxed_frame
 1766 0b84 00000000 		.word	.LANCHOR7
 1767 0b88 00000000 		.word	.LANCHOR9
 1768 0b8c 00000000 		.word	.LANCHOR19
 1769 0b90 00000000 		.word	.LANCHOR2
 1770 0b94 00000000 		.word	rte_main_trigger_modbus_status
 1771 0b98 00000000 		.word	.LANCHOR20
 1772 0b9c 00000000 		.word	.LANCHOR21
 1773 0ba0 00000000 		.word	.LANCHOR22
 1774 0ba4 00000000 		.word	.LANCHOR23
 1775 0ba8 00000000 		.word	.LANCHOR14
 1776 0bac 00000000 		.word	rte_main_reboot_req
 1777 0bb0 00000000 		.word	.LANCHOR16
 1778 0bb4 00000000 		.word	.LANCHOR12
 1779 0bb8 00000000 		.word	rte_pv_corrupted_messages_count
 1780 0bbc 00000000 		.word	rte_pv_struct
 1781 0bc0 00000000 		.word	rte_pv_average
 1782 0bc4 00000000 		.word	rte_pv_load_current
 1783 0bc8 00000000 		.word	rte_pv_cell_voltage
 1784 0bcc 00000000 		.word	rte_pv_battery_voltage
 1785 0bd0 00000000 		.word	rte_pv_battery_current
 1786 0bd4 00000000 		.word	rte_pv_sys_voltage
 1787 0bd8 00000000 		.word	rte_pv_last_error
 1788 0bdc 00000000 		.word	rte_pv_messages_count
 1789 0be0 00000000 		.word	main_wx_srl_ctx_ptr
 1790 0be4 00000000 		.word	.LANCHOR11
 1791 0be8 00000000 		.word	.LANCHOR17
 1792 0bec 00000000 		.word	rte_wx_umb_context
 1793 0bf0 00000000 		.word	main_afsk
 1794 0bf4 00000000 		.word	.LANCHOR18
 1795 0bf8 00000000 		.word	rte_wx_davis_loop_packet_avaliable
 1796              	.L93:
1015:../src/main.c **** 		}
 1797              		.loc 1 1015 0
 1798 0bfc FFF7FEFF 		bl	rtu_serial_pool
 1799              	.LVL158:
 1800 0c00 97E6     		b	.L55
 1801              	.L94:
1023:../src/main.c **** 			}
 1802              		.loc 1 1023 0
 1803 0c02 FFF7FEFF 		bl	rtu_serial_start
 1804              	.LVL159:
 1805 0c06 9DE6     		b	.L57
 1806              	.L95:
1027:../src/main.c **** 			}
 1807              		.loc 1 1027 0
 1808 0c08 574B     		ldr	r3, .L125
 1809 0c0a 1B68     		ldr	r3, [r3]
 1810 0c0c 574A     		ldr	r2, .L125+4
 1811 0c0e 1268     		ldr	r2, [r2]
 1812 0c10 5748     		ldr	r0, .L125+8
 1813 0c12 0068     		ldr	r0, [r0]
 1814 0c14 FFF7FEFF 		bl	wx_get_all_measurements
 1815              	.LVL160:
 1816 0c18 9BE6     		b	.L58
 1817              	.L96:
1033:../src/main.c **** 			}
 1818              		.loc 1 1033 0
 1819 0c1a 544B     		ldr	r3, .L125+4
 1820 0c1c 1A68     		ldr	r2, [r3]
 1821 0c1e 5549     		ldr	r1, .L125+12
 1822 0c20 5548     		ldr	r0, .L125+16
 1823 0c22 FFF7FEFF 		bl	umb_0x26_status_request
 1824              	.LVL161:
 1825 0c26 9AE6     		b	.L59
 1826              	.L97:
1037:../src/main.c **** 			}
 1827              		.loc 1 1037 0
 1828 0c28 FFF7FEFF 		bl	davis_trigger_rxcheck_packet
 1829              	.LVL162:
 1830 0c2c 9CE6     		b	.L60
 1831              	.L98:
1040:../src/main.c **** 				rtu_serial_get_status_string(&rte_rtu_pool_queue, main_wx_srl_ctx_ptr, main_own_aprs_msg, OWN_A
 1832              		.loc 1 1040 0 discriminator 1
 1833 0c2e 534B     		ldr	r3, .L125+20
 1834 0c30 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1835 0c32 012B     		cmp	r3, #1
 1836 0c34 7FF49DAE 		bne	.L61
1041:../src/main.c **** 
 1837              		.loc 1 1041 0
 1838 0c38 514C     		ldr	r4, .L125+24
 1839 0c3a 524D     		ldr	r5, .L125+28
 1840 0c3c 0095     		str	r5, [sp]
 1841 0c3e A023     		movs	r3, #160
 1842 0c40 2246     		mov	r2, r4
 1843 0c42 5149     		ldr	r1, .L125+32
 1844 0c44 0968     		ldr	r1, [r1]
 1845 0c46 5148     		ldr	r0, .L125+36
 1846 0c48 FFF7FEFF 		bl	rtu_serial_get_status_string
 1847              	.LVL163:
1043:../src/main.c **** 
 1848              		.loc 1 1043 0
 1849 0c4c 504B     		ldr	r3, .L125+40
 1850 0c4e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1851 0c50 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 1852 0c52 0093     		str	r3, [sp]
 1853 0c54 2346     		mov	r3, r4
 1854 0c56 4F49     		ldr	r1, .L125+44
 1855 0c58 4F48     		ldr	r0, .L125+48
 1856 0c5a FFF7FEFF 		bl	ax25_sendVia
 1857              	.LVL164:
1045:../src/main.c **** 
 1858              		.loc 1 1045 0
 1859 0c5e 4F48     		ldr	r0, .L125+52
 1860 0c60 FFF7FEFF 		bl	afsk_txStart
 1861              	.LVL165:
1047:../src/main.c **** 
 1862              		.loc 1 1047 0
 1863 0c64 4E4B     		ldr	r3, .L125+56
 1864 0c66 0022     		movs	r2, #0
 1865 0c68 1A70     		strb	r2, [r3]
 1866 0c6a 82E6     		b	.L61
 1867              	.L99:
1058:../src/main.c **** 			#endif
 1868              		.loc 1 1058 0
 1869 0c6c 4D4B     		ldr	r3, .L125+60
 1870 0c6e 1968     		ldr	r1, [r3]
 1871 0c70 4D4B     		ldr	r3, .L125+64
 1872 0c72 1868     		ldr	r0, [r3]
 1873 0c74 FFF7FEFF 		bl	packet_tx_handler
 1874              	.LVL166:
1061:../src/main.c **** 		}
 1875              		.loc 1 1061 0
 1876 0c78 4C4B     		ldr	r3, .L125+68
 1877 0c7a 4EF66022 		movw	r2, #60000
 1878 0c7e 1A60     		str	r2, [r3]
 1879 0c80 80E6     		b	.L62
 1880              	.L100:
1069:../src/main.c **** 			}
 1881              		.loc 1 1069 0
 1882 0c82 FFF7FEFF 		bl	analog_anemometer_direction_handler
 1883              	.LVL167:
 1884 0c86 89E6     		b	.L64
 1885              	.L63:
1074:../src/main.c **** 
 1886              		.loc 1 1074 0
 1887 0c88 13F10A0F 		cmn	r3, #10
 1888 0c8c BFF68AAE 		bge	.L65
1076:../src/main.c **** 				analog_anemometer_direction_reset();
 1889              		.loc 1 1076 0
 1890 0c90 444B     		ldr	r3, .L125+60
 1891 0c92 1B68     		ldr	r3, [r3]
 1892 0c94 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1893 0c96 13F0010F 		tst	r3, #1
 1894 0c9a 04D1     		bne	.L111
 1895              	.L66:
1080:../src/main.c **** 		}
 1896              		.loc 1 1080 0
 1897 0c9c 444B     		ldr	r3, .L125+72
 1898 0c9e 4FF47A72 		mov	r2, #1000
 1899 0ca2 1A60     		str	r2, [r3]
 1900 0ca4 7EE6     		b	.L65
 1901              	.L111:
1077:../src/main.c **** 			}
 1902              		.loc 1 1077 0
 1903 0ca6 FFF7FEFF 		bl	analog_anemometer_direction_reset
 1904              	.LVL168:
 1905 0caa F7E7     		b	.L66
 1906              	.L101:
1085:../src/main.c **** 
 1907              		.loc 1 1085 0
 1908 0cac FFF7FEFF 		bl	wx_check_force_i2c_reset
 1909              	.LVL169:
1087:../src/main.c **** 
 1910              		.loc 1 1087 0
 1911 0cb0 FFF7FEFF 		bl	wx_pwr_switch_periodic_handle
 1912              	.LVL170:
1093:../src/main.c **** 		}
 1913              		.loc 1 1093 0
 1914 0cb4 3F4B     		ldr	r3, .L125+76
 1915 0cb6 4FF4FA62 		mov	r2, #2000
 1916 0cba 1A60     		str	r2, [r3]
 1917 0cbc 77E6     		b	.L67
 1918              	.L102:
1097:../src/main.c **** 
1098:../src/main.c **** 			if (rte_main_trigger_wx_packet == 1) {
 1919              		.loc 1 1098 0
 1920 0cbe 3E4B     		ldr	r3, .L125+80
 1921 0cc0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1922 0cc2 012B     		cmp	r3, #1
 1923 0cc4 20D0     		beq	.L112
 1924              	.L69:
1099:../src/main.c **** 
1100:../src/main.c **** 				packet_tx_send_wx_frame();
1101:../src/main.c **** 
1102:../src/main.c **** 				rte_main_trigger_wx_packet = 0;
1103:../src/main.c **** 			}
1104:../src/main.c **** 
1105:../src/main.c **** 			#ifdef STM32L471xx
1106:../src/main.c **** 			// inhibit any power save switching when modem transmits data
1107:../src/main.c **** 			if (!main_afsk.sending) {
 1925              		.loc 1 1107 0
 1926 0cc6 354B     		ldr	r3, .L125+52
 1927 0cc8 93F83034 		ldrb	r3, [r3, #1072]	@ zero_extendqisi2
 1928 0ccc 13B3     		cbz	r3, .L113
 1929              	.L70:
1108:../src/main.c **** 				pwr_save_pooling_handler(main_config_data_mode, main_config_data_basic, packet_tx_get_minutes_t
1109:../src/main.c **** 			}
1110:../src/main.c **** 			#endif
1111:../src/main.c **** 
1112:../src/main.c **** 			if (main_config_data_mode->wx_umb == 1) {
 1930              		.loc 1 1112 0
 1931 0cce 354B     		ldr	r3, .L125+60
 1932 0cd0 1B68     		ldr	r3, [r3]
 1933 0cd2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1934 0cd4 012B     		cmp	r3, #1
 1935 0cd6 29D0     		beq	.L114
 1936              	.L71:
1113:../src/main.c **** 				umb_channel_pool(&rte_wx_umb, &rte_wx_umb_context, main_config_data_umb);
1114:../src/main.c **** 			}
1115:../src/main.c **** 
1116:../src/main.c **** 			if (main_config_data_mode->wx_umb == 1) {
 1937              		.loc 1 1116 0
 1938 0cd8 324B     		ldr	r3, .L125+60
 1939 0cda 1B68     		ldr	r3, [r3]
 1940 0cdc 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1941 0cde 012B     		cmp	r3, #1
 1942 0ce0 2BD0     		beq	.L115
 1943              	.L72:
1117:../src/main.c **** 				rte_wx_umb_qf = umb_get_current_qf(&rte_wx_umb_context, master_time);
1118:../src/main.c **** 			}
1119:../src/main.c **** 
1120:../src/main.c **** 			wx_pool_anemometer(main_config_data_wx_sources, main_config_data_mode, main_config_data_umb, mai
 1944              		.loc 1 1120 0
 1945 0ce2 214B     		ldr	r3, .L125
 1946 0ce4 1B68     		ldr	r3, [r3]
 1947 0ce6 214A     		ldr	r2, .L125+4
 1948 0ce8 1268     		ldr	r2, [r2]
 1949 0cea 2E49     		ldr	r1, .L125+60
 1950 0cec 0968     		ldr	r1, [r1]
 1951 0cee 2048     		ldr	r0, .L125+8
 1952 0cf0 0068     		ldr	r0, [r0]
 1953 0cf2 FFF7FEFF 		bl	wx_pool_anemometer
 1954              	.LVL171:
1121:../src/main.c **** 
1122:../src/main.c **** 			if (main_davis_serial_enabled == 1) {
 1955              		.loc 1 1122 0
 1956 0cf6 314B     		ldr	r3, .L125+84
 1957 0cf8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1958 0cfa 012B     		cmp	r3, #1
 1959 0cfc 25D0     		beq	.L116
 1960              	.L73:
1123:../src/main.c **** 
1124:../src/main.c **** 				// if previous LOOP packet is ready for processing
1125:../src/main.c **** 				if (rte_wx_davis_loop_packet_avaliable == 1) {
1126:../src/main.c **** 					davis_parsers_loop(main_kiss_srl_ctx_ptr->srl_rx_buf_pointer, main_kiss_srl_ctx_ptr->srl_rx_bu
1127:../src/main.c **** 				}
1128:../src/main.c **** 
1129:../src/main.c **** 				// trigger consecutive LOOP packet
1130:../src/main.c **** 				davis_trigger_loop_packet();
1131:../src/main.c **** 			}
1132:../src/main.c **** 
1133:../src/main.c **** 			main_ten_second_pool_timer = 10000;
 1961              		.loc 1 1133 0
 1962 0cfe 304B     		ldr	r3, .L125+88
 1963 0d00 42F21072 		movw	r2, #10000
 1964 0d04 1A60     		str	r2, [r3]
 1965 0d06 57E6     		b	.L68
 1966              	.L112:
1100:../src/main.c **** 
 1967              		.loc 1 1100 0
 1968 0d08 FFF7FEFF 		bl	packet_tx_send_wx_frame
 1969              	.LVL172:
1102:../src/main.c **** 			}
 1970              		.loc 1 1102 0
 1971 0d0c 2A4B     		ldr	r3, .L125+80
 1972 0d0e 0022     		movs	r2, #0
 1973 0d10 1A70     		strb	r2, [r3]
 1974 0d12 D8E7     		b	.L69
 1975              	.L113:
1108:../src/main.c **** 			}
 1976              		.loc 1 1108 0
 1977 0d14 234B     		ldr	r3, .L125+60
 1978 0d16 1C68     		ldr	r4, [r3]
 1979 0d18 234B     		ldr	r3, .L125+64
 1980 0d1a 1D68     		ldr	r5, [r3]
 1981 0d1c FFF7FEFF 		bl	packet_tx_get_minutes_to_next_wx
 1982              	.LVL173:
 1983 0d20 0246     		mov	r2, r0
 1984 0d22 2946     		mov	r1, r5
 1985 0d24 2046     		mov	r0, r4
 1986 0d26 FFF7FEFF 		bl	pwr_save_pooling_handler
 1987              	.LVL174:
 1988 0d2a D0E7     		b	.L70
 1989              	.L114:
1113:../src/main.c **** 			}
 1990              		.loc 1 1113 0
 1991 0d2c 0F4B     		ldr	r3, .L125+4
 1992 0d2e 1A68     		ldr	r2, [r3]
 1993 0d30 1049     		ldr	r1, .L125+12
 1994 0d32 1148     		ldr	r0, .L125+16
 1995 0d34 FFF7FEFF 		bl	umb_channel_pool
 1996              	.LVL175:
 1997 0d38 CEE7     		b	.L71
 1998              	.L115:
1117:../src/main.c **** 			}
 1999              		.loc 1 1117 0
 2000 0d3a 224B     		ldr	r3, .L125+92
 2001 0d3c 1968     		ldr	r1, [r3]
 2002 0d3e 0D48     		ldr	r0, .L125+12
 2003 0d40 FFF7FEFF 		bl	umb_get_current_qf
 2004              	.LVL176:
 2005 0d44 204B     		ldr	r3, .L125+96
 2006 0d46 1870     		strb	r0, [r3]
 2007 0d48 CBE7     		b	.L72
 2008              	.L116:
1125:../src/main.c **** 					davis_parsers_loop(main_kiss_srl_ctx_ptr->srl_rx_buf_pointer, main_kiss_srl_ctx_ptr->srl_rx_bu
 2009              		.loc 1 1125 0
 2010 0d4a 204B     		ldr	r3, .L125+100
 2011 0d4c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2012 0d4e 012B     		cmp	r3, #1
 2013 0d50 06D1     		bne	.L74
1126:../src/main.c **** 				}
 2014              		.loc 1 1126 0
 2015 0d52 1F4B     		ldr	r3, .L125+104
 2016 0d54 1B68     		ldr	r3, [r3]
 2017 0d56 1F4A     		ldr	r2, .L125+108
 2018 0d58 998B     		ldrh	r1, [r3, #28]
 2019 0d5a 9869     		ldr	r0, [r3, #24]
 2020 0d5c FFF7FEFF 		bl	davis_parsers_loop
 2021              	.LVL177:
 2022              	.L74:
1130:../src/main.c **** 			}
 2023              		.loc 1 1130 0
 2024 0d60 FFF7FEFF 		bl	davis_trigger_loop_packet
 2025              	.LVL178:
 2026 0d64 CBE7     		b	.L73
 2027              	.L126:
 2028 0d66 00BF     		.align	2
 2029              	.L125:
 2030 0d68 00000000 		.word	.LANCHOR8
 2031 0d6c 00000000 		.word	.LANCHOR11
 2032 0d70 00000000 		.word	.LANCHOR13
 2033 0d74 00000000 		.word	rte_wx_umb_context
 2034 0d78 00000000 		.word	rte_wx_umb
 2035 0d7c 00000000 		.word	.LANCHOR9
 2036 0d80 00000000 		.word	main_own_aprs_msg
 2037 0d84 00000000 		.word	main_own_aprs_msg_len
 2038 0d88 00000000 		.word	main_wx_srl_ctx_ptr
 2039 0d8c 00000000 		.word	rte_rtu_pool_queue
 2040 0d90 00000000 		.word	.LANCHOR10
 2041 0d94 00000000 		.word	main_own_path
 2042 0d98 00000000 		.word	main_ax25
 2043 0d9c 00000000 		.word	main_afsk
 2044 0da0 00000000 		.word	rte_main_trigger_modbus_status
 2045 0da4 00000000 		.word	.LANCHOR2
 2046 0da8 00000000 		.word	.LANCHOR1
 2047 0dac 00000000 		.word	.LANCHOR20
 2048 0db0 00000000 		.word	.LANCHOR21
 2049 0db4 00000000 		.word	.LANCHOR22
 2050 0db8 00000000 		.word	rte_main_trigger_wx_packet
 2051 0dbc 00000000 		.word	.LANCHOR7
 2052 0dc0 00000000 		.word	.LANCHOR23
 2053 0dc4 00000000 		.word	.LANCHOR17
 2054 0dc8 00000000 		.word	rte_wx_umb_qf
 2055 0dcc 00000000 		.word	rte_wx_davis_loop_packet_avaliable
 2056 0dd0 00000000 		.word	main_kiss_srl_ctx_ptr
 2057 0dd4 00000000 		.word	rte_wx_davis_loop_content
 2058              		.cfi_endproc
 2059              	.LFE630:
 2061              		.section	.text.main_get_adc_sample,"ax",%progbits
 2062              		.align	1
 2063              		.global	main_get_adc_sample
 2064              		.syntax unified
 2065              		.thumb
 2066              		.thumb_func
 2067              		.fpu fpv4-sp-d16
 2069              	main_get_adc_sample:
 2070              	.LFB631:
1134:../src/main.c **** 		}
1135:../src/main.c **** 
1136:../src/main.c **** 
1137:../src/main.c ****     }
1138:../src/main.c ****   // Infinite loop, never return.
1139:../src/main.c **** }
1140:../src/main.c **** 
1141:../src/main.c **** uint16_t main_get_adc_sample(void) {
 2071              		.loc 1 1141 0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075              		@ link register save eliminated.
1142:../src/main.c **** 	return (uint16_t) ADC1->DR;
 2076              		.loc 1 1142 0
 2077 0000 014B     		ldr	r3, .L128
 2078 0002 186C     		ldr	r0, [r3, #64]
1143:../src/main.c **** }
 2079              		.loc 1 1143 0
 2080 0004 80B2     		uxth	r0, r0
 2081 0006 7047     		bx	lr
 2082              	.L129:
 2083              		.align	2
 2084              	.L128:
 2085 0008 00000450 		.word	1342439424
 2086              		.cfi_endproc
 2087              	.LFE631:
 2089              		.section	.text.main_service_cpu_load_ticks,"ax",%progbits
 2090              		.align	1
 2091              		.global	main_service_cpu_load_ticks
 2092              		.syntax unified
 2093              		.thumb
 2094              		.thumb_func
 2095              		.fpu fpv4-sp-d16
 2097              	main_service_cpu_load_ticks:
 2098              	.LFB632:
1144:../src/main.c **** 
1145:../src/main.c **** void main_service_cpu_load_ticks(void) {
 2099              		.loc 1 1145 0
 2100              		.cfi_startproc
 2101              		@ args = 0, pretend = 0, frame = 0
 2102              		@ frame_needed = 0, uses_anonymous_args = 0
 2103              		@ link register save eliminated.
 2104              	.LVL179:
1146:../src/main.c **** 
1147:../src/main.c **** 	uint32_t cpu_ticks_load = 0;
1148:../src/main.c **** 
1149:../src/main.c **** 	// the biggest this result will be the biggest load the CPU is handling
1150:../src/main.c **** 	cpu_ticks_load = main_idle_cpu_ticks - main_current_cpu_idle_ticks;
 2105              		.loc 1 1150 0
 2106 0000 074B     		ldr	r3, .L131
 2107 0002 1868     		ldr	r0, [r3]
 2108 0004 0749     		ldr	r1, .L131+4
 2109 0006 0B68     		ldr	r3, [r1]
 2110 0008 C21A     		subs	r2, r0, r3
 2111              	.LVL180:
1151:../src/main.c **** 
1152:../src/main.c **** 	// calculate the cpu load
1153:../src/main.c **** 	main_cpu_load = (int8_t) ((cpu_ticks_load * 100) / main_idle_cpu_ticks);
 2112              		.loc 1 1153 0
 2113 000a 6423     		movs	r3, #100
 2114 000c 03FB02F3 		mul	r3, r3, r2
 2115 0010 B3FBF0F3 		udiv	r3, r3, r0
 2116 0014 044A     		ldr	r2, .L131+8
 2117              	.LVL181:
 2118 0016 1370     		strb	r3, [r2]
1154:../src/main.c **** 
1155:../src/main.c **** 	// reset the tick counter back to zero;
1156:../src/main.c **** 	main_current_cpu_idle_ticks = 0;
 2119              		.loc 1 1156 0
 2120 0018 0023     		movs	r3, #0
 2121 001a 0B60     		str	r3, [r1]
 2122              	.LVL182:
1157:../src/main.c **** }
 2123              		.loc 1 1157 0
 2124 001c 7047     		bx	lr
 2125              	.L132:
 2126 001e 00BF     		.align	2
 2127              	.L131:
 2128 0020 00000000 		.word	.LANCHOR5
 2129 0024 00000000 		.word	.LANCHOR14
 2130 0028 00000000 		.word	.LANCHOR24
 2131              		.cfi_endproc
 2132              	.LFE632:
 2134              		.comm	GPIO_InitTypeDef,24,4
 2135              		.global	kiss10m
 2136              		.global	digidrop10m
 2137              		.global	digi10m
 2138              		.global	tx10m
 2139              		.global	rx10m
 2140              		.comm	after_tx_lock,1,1
 2141              		.global	main_crc_result
 2142              		.global	main_umb_retval
 2143              		.global	buffer_len
 2144              		.global	retval
 2145              		.global	main_symbol_s
 2146              		.global	main_symbol_f
 2147              		.comm	main_string_longitude,9,4
 2148              		.comm	main_string_latitude,9,4
 2149              		.comm	main_own_aprs_msg,160,4
 2150              		.comm	main_own_aprs_msg_len,1,1
 2151              		.global	main_own_path_ln
 2152              		.comm	main_own_path,21,4
 2153              		.comm	main_afsk,1092,4
 2154              		.comm	main_ax25,536,4
 2155              		.global	main_modbus_rtu_master_enabled
 2156              		.global	main_davis_serial_enabled
 2157              		.global	main_kiss_enabled
 2158              		.comm	main_target_wx_baudrate,4,4
 2159              		.comm	main_target_kiss_baudrate,4,4
 2160              		.comm	main_wx_srl_ctx_ptr,4,4
 2161              		.comm	main_kiss_srl_ctx_ptr,4,4
 2162              		.comm	main_wx_srl_ctx,88,4
 2163              		.comm	main_kiss_srl_ctx,88,4
 2164              		.global	main_ten_second_pool_timer
 2165              		.global	main_two_second_pool_timer
 2166              		.global	main_one_second_pool_timer
 2167              		.global	main_one_minute_pool_timer
 2168              		.global	main_wx_sensors_pool_timer
 2169              		.global	main_cpu_load
 2170              		.global	main_current_cpu_idle_ticks
 2171              		.global	main_idle_cpu_ticks
 2172              		.global	master_time
 2173              		.global	main_config_data_rtu
 2174              		.global	main_config_data_umb
 2175              		.global	main_config_data_wx_sources
 2176              		.global	main_config_data_basic
 2177              		.global	main_config_data_mode
 2178              		.section	.bss.buffer_len,"aw",%nobits
 2179              		.align	1
 2180              		.set	.LANCHOR16,. + 0
 2183              	buffer_len:
 2184 0000 0000     		.space	2
 2185              		.section	.bss.digi10m,"aw",%nobits
 2186              		.align	1
 2189              	digi10m:
 2190 0000 0000     		.space	2
 2191              		.section	.bss.digidrop10m,"aw",%nobits
 2192              		.align	1
 2195              	digidrop10m:
 2196 0000 0000     		.space	2
 2197              		.section	.bss.kiss10m,"aw",%nobits
 2198              		.align	1
 2199              		.set	.LANCHOR18,. + 0
 2202              	kiss10m:
 2203 0000 0000     		.space	2
 2204              		.section	.bss.main_config_data_basic,"aw",%nobits
 2205              		.align	2
 2206              		.set	.LANCHOR1,. + 0
 2209              	main_config_data_basic:
 2210 0000 00000000 		.space	4
 2211              		.section	.bss.main_config_data_mode,"aw",%nobits
 2212              		.align	2
 2213              		.set	.LANCHOR2,. + 0
 2216              	main_config_data_mode:
 2217 0000 00000000 		.space	4
 2218              		.section	.bss.main_config_data_rtu,"aw",%nobits
 2219              		.align	2
 2220              		.set	.LANCHOR8,. + 0
 2223              	main_config_data_rtu:
 2224 0000 00000000 		.space	4
 2225              		.section	.bss.main_config_data_umb,"aw",%nobits
 2226              		.align	2
 2227              		.set	.LANCHOR11,. + 0
 2230              	main_config_data_umb:
 2231 0000 00000000 		.space	4
 2232              		.section	.bss.main_config_data_wx_sources,"aw",%nobits
 2233              		.align	2
 2234              		.set	.LANCHOR13,. + 0
 2237              	main_config_data_wx_sources:
 2238 0000 00000000 		.space	4
 2239              		.section	.bss.main_cpu_load,"aw",%nobits
 2240              		.set	.LANCHOR24,. + 0
 2243              	main_cpu_load:
 2244 0000 00       		.space	1
 2245              		.section	.bss.main_crc_result,"aw",%nobits
 2246              		.align	2
 2247              		.set	.LANCHOR0,. + 0
 2250              	main_crc_result:
 2251 0000 00000000 		.space	4
 2252              		.section	.bss.main_current_cpu_idle_ticks,"aw",%nobits
 2253              		.align	2
 2254              		.set	.LANCHOR14,. + 0
 2257              	main_current_cpu_idle_ticks:
 2258 0000 00000000 		.space	4
 2259              		.section	.bss.main_davis_serial_enabled,"aw",%nobits
 2260              		.set	.LANCHOR7,. + 0
 2263              	main_davis_serial_enabled:
 2264 0000 00       		.space	1
 2265              		.section	.bss.main_idle_cpu_ticks,"aw",%nobits
 2266              		.align	2
 2267              		.set	.LANCHOR5,. + 0
 2270              	main_idle_cpu_ticks:
 2271 0000 00000000 		.space	4
 2272              		.section	.bss.main_modbus_rtu_master_enabled,"aw",%nobits
 2273              		.set	.LANCHOR9,. + 0
 2276              	main_modbus_rtu_master_enabled:
 2277 0000 00       		.space	1
 2278              		.section	.bss.main_own_path_ln,"aw",%nobits
 2279              		.set	.LANCHOR10,. + 0
 2282              	main_own_path_ln:
 2283 0000 00       		.space	1
 2284              		.section	.bss.master_time,"aw",%nobits
 2285              		.align	2
 2286              		.set	.LANCHOR17,. + 0
 2289              	master_time:
 2290 0000 00000000 		.space	4
 2291              		.section	.bss.rx10m,"aw",%nobits
 2292              		.align	1
 2293              		.set	.LANCHOR15,. + 0
 2296              	rx10m:
 2297 0000 0000     		.space	2
 2298              		.section	.bss.tx10m,"aw",%nobits
 2299              		.align	1
 2302              	tx10m:
 2303 0000 0000     		.space	2
 2304              		.section	.data.main_kiss_enabled,"aw",%progbits
 2305              		.set	.LANCHOR6,. + 0
 2308              	main_kiss_enabled:
 2309 0000 01       		.byte	1
 2310              		.section	.data.main_one_minute_pool_timer,"aw",%progbits
 2311              		.align	2
 2312              		.set	.LANCHOR20,. + 0
 2315              	main_one_minute_pool_timer:
 2316 0000 C8AF0000 		.word	45000
 2317              		.section	.data.main_one_second_pool_timer,"aw",%progbits
 2318              		.align	2
 2319              		.set	.LANCHOR21,. + 0
 2322              	main_one_second_pool_timer:
 2323 0000 E8030000 		.word	1000
 2324              		.section	.data.main_symbol_f,"aw",%progbits
 2325              		.set	.LANCHOR3,. + 0
 2328              	main_symbol_f:
 2329 0000 2F       		.byte	47
 2330              		.section	.data.main_symbol_s,"aw",%progbits
 2331              		.set	.LANCHOR4,. + 0
 2334              	main_symbol_s:
 2335 0000 23       		.byte	35
 2336              		.section	.data.main_ten_second_pool_timer,"aw",%progbits
 2337              		.align	2
 2338              		.set	.LANCHOR23,. + 0
 2341              	main_ten_second_pool_timer:
 2342 0000 10270000 		.word	10000
 2343              		.section	.data.main_two_second_pool_timer,"aw",%progbits
 2344              		.align	2
 2345              		.set	.LANCHOR22,. + 0
 2348              	main_two_second_pool_timer:
 2349 0000 D0070000 		.word	2000
 2350              		.section	.data.main_umb_retval,"aw",%progbits
 2353              	main_umb_retval:
 2354 0000 7F       		.byte	127
 2355              		.section	.data.main_wx_sensors_pool_timer,"aw",%progbits
 2356              		.align	2
 2357              		.set	.LANCHOR19,. + 0
 2360              	main_wx_sensors_pool_timer:
 2361 0000 DCFF0000 		.word	65500
 2362              		.section	.data.retval,"aw",%progbits
 2363              		.set	.LANCHOR12,. + 0
 2366              	retval:
 2367 0000 64       		.byte	100
 2368              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 2369              		.align	2
 2370              	.LC0:
 2371 0000 3D257325 		.ascii	"=%s%c%c%s%c%c %s\000"
 2371      63256325 
 2371      73256325 
 2371      63202573 
 2371      00
 2372              		.text
 2373              	.Letext0:
 2374              		.file 5 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 2375              		.file 6 "../system/include/cmsis/stm32l4xx/device/system_stm32l4xx.h"
 2376              		.file 7 "../system/include/cmsis/stm32l4xx/device/stm32l471xx.h"
 2377              		.file 8 "../system/include/stm32l4-hal-driver/stm32l4xx_ll_gpio.h"
 2378              		.file 9 "../system/include/aprs/cfifo.h"
 2379              		.file 10 "../system/include/aprs/afsk.h"
 2380              		.file 11 "../system/include/aprs/ax25.h"
 2381              		.file 12 "../system/include/drivers/serial.h"
 2382              		.file 13 "../include/config_data.h"
 2383              		.file 14 "../include/main.h"
 2384              		.file 15 "../include/delay.h"
 2385              		.file 16 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 2386              		.file 17 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 2387              		.file 18 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/st
 2388              		.file 19 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 2389              		.file 20 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h"
 2390              		.file 21 "../include/config_data_externs.h"
 2391              		.file 22 "../include/configuration_handler.h"
 2392              		.file 23 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/unistd.h"
 2393              		.file 24 "../system/include/./drivers/dallas.h"
 2394              		.file 25 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/math.h"
 2395              		.file 26 "../system/include/./drivers/ms5611.h"
 2396              		.file 27 "../system/include/./umb_master/umb_qf_t.h"
 2397              		.file 28 "../system/include/./ve_direct_protocol/raw_struct.h"
 2398              		.file 29 "../system/include/./ve_direct_protocol/average_struct.h"
 2399              		.file 30 "../system/include/drivers/analog_anemometer.h"
 2400              		.file 31 "../system/include/davis_vantage/davis_qf_t.h"
 2401              		.file 32 "../system/include/davis_vantage/davis_loop_t.h"
 2402              		.file 33 "../system/include/umb_master/umb_frame_t.h"
 2403              		.file 34 "../system/include/umb_master/umb_retval_t.h"
 2404              		.file 35 "../system/include/umb_master/umb_state_t.h"
 2405              		.file 36 "../system/include/umb_master/umb_context_t.h"
 2406              		.file 37 "../system/include/umb_master/umb_call_reason.h"
 2407              		.file 38 "../system/include/drivers/bme280.h"
 2408              		.file 39 "../include/rte_wx.h"
 2409              		.file 40 "../include/rte_pv.h"
 2410              		.file 41 "../include/rte_main.h"
 2411              		.file 42 "../system/include/modbus_rtu/rtu_register_data_t.h"
 2412              		.file 43 "../system/include/modbus_rtu/rtu_exception_t.h"
 2413              		.file 44 "../system/include/modbus_rtu/rtu_pool_queue_t.h"
 2414              		.file 45 "../include/rte_rtu.h"
 2415              		.file 46 "../include/wx_handler.h"
 2416              		.file 47 "../system/include/drivers/i2c.h"
 2417              		.file 48 "../src/../system/include/modbus_rtu/rtu_serial_io.h"
 2418              		.file 49 "../src/../system/include/davis_vantage/davis.h"
 2419              		.file 50 "../include/KissCommunication.h"
 2420              		.file 51 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/string.h"
 2421              		.file 52 "../system/include/cmsis/stm32l4xx/system_stm32l4xx.h"
 2422              		.file 53 "../system/include/stm32l4-hal-driver/stm32l4xx_hal_cortex.h"
 2423              		.file 54 "../include/packet_tx_handler.h"
 2424              		.file 55 "../include/float_to_string.h"
 2425              		.file 56 "../include/pwr_save.h"
 2426              		.file 57 "../include/io.h"
 2427              		.file 58 "../include/pwr_switch.h"
 2428              		.file 59 "../include/PathConfig.h"
 2429              		.file 60 "../system/include/aprs/dac.h"
 2430              		.file 61 "../system/include/aprs/digi.h"
 2431              		.file 62 "../include/it_handlers.h"
 2432              		.file 63 "../system/include/aprs/afsk_pr.h"
 2433              		.file 64 "../include/TimerConfig.h"
 2434              		.file 65 "../system/include/aprs/beacon.h"
 2435              		.file 66 "../system/include/umb_master/umb_master.h"
 2436              		.file 67 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdio.h"
 2437              		.file 68 "../system/include/ve_direct_protocol/parser.h"
 2438              		.file 69 "../system/include/umb_master/umb_0x26_status.h"
 2439              		.file 70 "../system/include/umb_master/umb_channel_pool.h"
 2440              		.file 71 "../src/../system/include/davis_vantage/davis_parsers.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cccFC9wm.s:18     .text.message_callback:0000000000000000 $t
     /tmp/cccFC9wm.s:24     .text.message_callback:0000000000000000 message_callback
     /tmp/cccFC9wm.s:39     .text.main:0000000000000000 $t
     /tmp/cccFC9wm.s:46     .text.main:0000000000000000 main
     /tmp/cccFC9wm.s:355    .text.main:00000000000001f6 $d
     /tmp/cccFC9wm.s:361    .text.main:0000000000000202 $t
     /tmp/cccFC9wm.s:365    .text.main:0000000000000204 $d
                            *COM*:00000000000000a0 main_own_aprs_msg
                            *COM*:0000000000000009 main_string_latitude
                            *COM*:0000000000000009 main_string_longitude
     /tmp/cccFC9wm.s:380    .text.main:0000000000000238 $t
     /tmp/cccFC9wm.s:873    .text.main:0000000000000520 $d
                            *COM*:0000000000000018 GPIO_InitTypeDef
                            *COM*:0000000000000004 main_kiss_srl_ctx_ptr
                            *COM*:0000000000000058 main_kiss_srl_ctx
                            *COM*:0000000000000004 main_wx_srl_ctx_ptr
                            *COM*:0000000000000058 main_wx_srl_ctx
                            *COM*:0000000000000004 main_target_kiss_baudrate
                            *COM*:0000000000000004 main_target_wx_baudrate
                            *COM*:0000000000000015 main_own_path
                            *COM*:0000000000000444 main_afsk
                            *COM*:0000000000000218 main_ax25
     /tmp/cccFC9wm.s:900    .text.main:0000000000000584 $t
     /tmp/cccFC9wm.s:1316   .text.main:0000000000000818 $d
                            *COM*:0000000000000001 main_own_aprs_msg_len
     /tmp/cccFC9wm.s:1362   .text.main:00000000000008c0 $t
     /tmp/cccFC9wm.s:1759   .text.main:0000000000000b68 $d
     /tmp/cccFC9wm.s:1798   .text.main:0000000000000bfc $t
     /tmp/cccFC9wm.s:2030   .text.main:0000000000000d68 $d
     /tmp/cccFC9wm.s:2062   .text.main_get_adc_sample:0000000000000000 $t
     /tmp/cccFC9wm.s:2069   .text.main_get_adc_sample:0000000000000000 main_get_adc_sample
     /tmp/cccFC9wm.s:2085   .text.main_get_adc_sample:0000000000000008 $d
     /tmp/cccFC9wm.s:2090   .text.main_service_cpu_load_ticks:0000000000000000 $t
     /tmp/cccFC9wm.s:2097   .text.main_service_cpu_load_ticks:0000000000000000 main_service_cpu_load_ticks
     /tmp/cccFC9wm.s:2128   .text.main_service_cpu_load_ticks:0000000000000020 $d
     /tmp/cccFC9wm.s:2202   .bss.kiss10m:0000000000000000 kiss10m
     /tmp/cccFC9wm.s:2195   .bss.digidrop10m:0000000000000000 digidrop10m
     /tmp/cccFC9wm.s:2189   .bss.digi10m:0000000000000000 digi10m
     /tmp/cccFC9wm.s:2302   .bss.tx10m:0000000000000000 tx10m
     /tmp/cccFC9wm.s:2296   .bss.rx10m:0000000000000000 rx10m
                            *COM*:0000000000000001 after_tx_lock
     /tmp/cccFC9wm.s:2250   .bss.main_crc_result:0000000000000000 main_crc_result
     /tmp/cccFC9wm.s:2353   .data.main_umb_retval:0000000000000000 main_umb_retval
     /tmp/cccFC9wm.s:2183   .bss.buffer_len:0000000000000000 buffer_len
     /tmp/cccFC9wm.s:2366   .data.retval:0000000000000000 retval
     /tmp/cccFC9wm.s:2334   .data.main_symbol_s:0000000000000000 main_symbol_s
     /tmp/cccFC9wm.s:2328   .data.main_symbol_f:0000000000000000 main_symbol_f
     /tmp/cccFC9wm.s:2282   .bss.main_own_path_ln:0000000000000000 main_own_path_ln
     /tmp/cccFC9wm.s:2276   .bss.main_modbus_rtu_master_enabled:0000000000000000 main_modbus_rtu_master_enabled
     /tmp/cccFC9wm.s:2263   .bss.main_davis_serial_enabled:0000000000000000 main_davis_serial_enabled
     /tmp/cccFC9wm.s:2308   .data.main_kiss_enabled:0000000000000000 main_kiss_enabled
     /tmp/cccFC9wm.s:2341   .data.main_ten_second_pool_timer:0000000000000000 main_ten_second_pool_timer
     /tmp/cccFC9wm.s:2348   .data.main_two_second_pool_timer:0000000000000000 main_two_second_pool_timer
     /tmp/cccFC9wm.s:2322   .data.main_one_second_pool_timer:0000000000000000 main_one_second_pool_timer
     /tmp/cccFC9wm.s:2315   .data.main_one_minute_pool_timer:0000000000000000 main_one_minute_pool_timer
     /tmp/cccFC9wm.s:2360   .data.main_wx_sensors_pool_timer:0000000000000000 main_wx_sensors_pool_timer
     /tmp/cccFC9wm.s:2243   .bss.main_cpu_load:0000000000000000 main_cpu_load
     /tmp/cccFC9wm.s:2257   .bss.main_current_cpu_idle_ticks:0000000000000000 main_current_cpu_idle_ticks
     /tmp/cccFC9wm.s:2270   .bss.main_idle_cpu_ticks:0000000000000000 main_idle_cpu_ticks
     /tmp/cccFC9wm.s:2289   .bss.master_time:0000000000000000 master_time
     /tmp/cccFC9wm.s:2223   .bss.main_config_data_rtu:0000000000000000 main_config_data_rtu
     /tmp/cccFC9wm.s:2230   .bss.main_config_data_umb:0000000000000000 main_config_data_umb
     /tmp/cccFC9wm.s:2237   .bss.main_config_data_wx_sources:0000000000000000 main_config_data_wx_sources
     /tmp/cccFC9wm.s:2209   .bss.main_config_data_basic:0000000000000000 main_config_data_basic
     /tmp/cccFC9wm.s:2216   .bss.main_config_data_mode:0000000000000000 main_config_data_mode
     /tmp/cccFC9wm.s:2179   .bss.buffer_len:0000000000000000 $d
     /tmp/cccFC9wm.s:2186   .bss.digi10m:0000000000000000 $d
     /tmp/cccFC9wm.s:2192   .bss.digidrop10m:0000000000000000 $d
     /tmp/cccFC9wm.s:2198   .bss.kiss10m:0000000000000000 $d
     /tmp/cccFC9wm.s:2205   .bss.main_config_data_basic:0000000000000000 $d
     /tmp/cccFC9wm.s:2212   .bss.main_config_data_mode:0000000000000000 $d
     /tmp/cccFC9wm.s:2219   .bss.main_config_data_rtu:0000000000000000 $d
     /tmp/cccFC9wm.s:2226   .bss.main_config_data_umb:0000000000000000 $d
     /tmp/cccFC9wm.s:2233   .bss.main_config_data_wx_sources:0000000000000000 $d
     /tmp/cccFC9wm.s:2244   .bss.main_cpu_load:0000000000000000 $d
     /tmp/cccFC9wm.s:2246   .bss.main_crc_result:0000000000000000 $d
     /tmp/cccFC9wm.s:2253   .bss.main_current_cpu_idle_ticks:0000000000000000 $d
     /tmp/cccFC9wm.s:2264   .bss.main_davis_serial_enabled:0000000000000000 $d
     /tmp/cccFC9wm.s:2266   .bss.main_idle_cpu_ticks:0000000000000000 $d
     /tmp/cccFC9wm.s:2277   .bss.main_modbus_rtu_master_enabled:0000000000000000 $d
     /tmp/cccFC9wm.s:2283   .bss.main_own_path_ln:0000000000000000 $d
     /tmp/cccFC9wm.s:2285   .bss.master_time:0000000000000000 $d
     /tmp/cccFC9wm.s:2292   .bss.rx10m:0000000000000000 $d
     /tmp/cccFC9wm.s:2299   .bss.tx10m:0000000000000000 $d
     /tmp/cccFC9wm.s:2311   .data.main_one_minute_pool_timer:0000000000000000 $d
     /tmp/cccFC9wm.s:2318   .data.main_one_second_pool_timer:0000000000000000 $d
     /tmp/cccFC9wm.s:2337   .data.main_ten_second_pool_timer:0000000000000000 $d
     /tmp/cccFC9wm.s:2344   .data.main_two_second_pool_timer:0000000000000000 $d
     /tmp/cccFC9wm.s:2356   .data.main_wx_sensors_pool_timer:0000000000000000 $d
     /tmp/cccFC9wm.s:2369   .rodata.main.str1.4:0000000000000000 $d
                           .group:0000000000000000 wm4.0.95bc707da9dcffdc6c8c58936cbc8421
                           .group:0000000000000000 wm4.station_config_target_hw.h.9.a20e080416e80d1cff9c1b51cc464832
                           .group:0000000000000000 wm4.stm32l4xx.h.39.54a1fe1e096c7852edd649652f013a11
                           .group:0000000000000000 wm4.stm32l471xx.h.35.e78ad65c513105dda311dc495ac74d04
                           .group:0000000000000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:0000000000000000 wm4.cmsis_version.h.32.46e8eccfa2cfeaae11d008bb2823a3ed
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.b6144e50d34fc998dd4c2cfb6387cf91
                           .group:0000000000000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:0000000000000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:0000000000000000 wm4.stm32l471xx.h.423.ceac761476affad641a3347d7727acfd
                           .group:0000000000000000 wm4.stm32l4xx.h.197.fb1c68184133668ca24c44c29ba4361f
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.23.c14bec61d389910444dd6f90923a87b3
                           .group:0000000000000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:0000000000000000 wm4.stm32l4xx_hal_def.h.58.ba9880fce6c06e05c42ff3652190ba19
                           .group:0000000000000000 wm4.stm32l4xx_hal_cortex.h.92.09331db2eadd7e54217ce5767ac22693
                           .group:0000000000000000 wm4.stm32l4xx_ll_iwdg.h.22.ce71c09b15c76497ab9cb3a8a8734a5a
                           .group:0000000000000000 wm4.stm32l4xx_ll_rcc.h.22.3702bcd372271b9dd515b458d35bb2ae
                           .group:0000000000000000 wm4.stm32l4xx_ll_gpio.h.22.6ea69d1eee1200f6e0d48e871aaa811d
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.macros.h.2.7a7a5ac48d4160b7481c806e80b68442
                           .group:0000000000000000 wm4.config.h.2.f5e96167cb26b0ce97c5e7513a95bc8b
                           .group:0000000000000000 wm4.afsk.h.17.cf8f922069680e152e1eddb76cd4cc82
                           .group:0000000000000000 wm4.ax25.h.18.077e42a4af9016476e34900472a8fe18
                           .group:0000000000000000 wm4.stm32l4xx_ll_usart.h.22.ec2beebcd146668c5b35749264d7b58a
                           .group:0000000000000000 wm4.serial.h.14.12640f911db3fed3671ed7e729a57e3f
                           .group:0000000000000000 wm4.config_data.h.9.cbb5077079a900a357fa92ca07074f04
                           .group:0000000000000000 wm4.main.h.8.bc9cddc046c84d80bc9382d177e590b0
                           .group:0000000000000000 wm4.LedConfig.h.9.4d8a7e6bb86dda658c789f8aaf01aaee
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.newlib.h.18.5e5ca3429233af402d406a202f1fc1ac
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:0000000000000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.cdefs.h.47.7eec48e1bc15e3b0aff1089c232f5a9c
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:0000000000000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:0000000000000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:0000000000000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:0000000000000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:0000000000000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:0000000000000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:0000000000000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:0000000000000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:0000000000000000 wm4.station_config.h.9.dccf6b17ee2bf87c63fe0b152d34825f
                           .group:0000000000000000 wm4.unistd.h.2.39165d5b7784d1815ef4b0c4be6df560
                           .group:0000000000000000 wm4.unistd.h.170.da6e816043042c61475c2b1f58468b37
                           .group:0000000000000000 wm4.antilib_adc.h.10.beb33c5f49564637478b9d419893c0dd
                           .group:0000000000000000 wm4.digi.h.14.769ea2ae98162dd36806ccf4982c3c8a
                           .group:0000000000000000 wm4.dallas.h.9.67a8cfc0b128d7b4f1ab07251516b59e
                           .group:0000000000000000 wm4.math.h.13.adb102f7bd7860b1f241e149d6914a1e
                           .group:0000000000000000 wm4.ms5611.h.13.84fbf6afa85557f675e3d85f1be6067c
                           .group:0000000000000000 wm4.average_struct.h.9.41820d0d7dc25dca8a9005c6d1a8bb5f
                           .group:0000000000000000 wm4.telemetry.h.21.a87436b8ee86f5e60170454e063be1e3
                           .group:0000000000000000 wm4.parser.h.9.2d68c8669e0bffa77926bbb9bf5a2aba
                           .group:0000000000000000 wm4.analog_anemometer.h.9.8c21570f6fc3dcd7763ba4d0d5168e3c
                           .group:0000000000000000 wm4.umb_frame_t.h.9.05796095a57acd1575f07118cb6ab058
                           .group:0000000000000000 wm4.umb_defines.h.9.77e79b84cd2dd9a74204aaeb1ca9d6be
                           .group:0000000000000000 wm4.bme280.h.9.aefe05f9329372f30337537cea488dce
                           .group:0000000000000000 wm4.rte_wx.h.30.cb80bd87f9fae81b43459954f1781e96
                           .group:0000000000000000 wm4.rtu_configuration.h.9.225559723a46d58da796e0ac6cb0b2ac
                           .group:0000000000000000 wm4.wx_handler.h.9.c93580273a56e0f9036dfe7a28400494
                           .group:0000000000000000 wm4.davis_retval_def.h.9.025968613fbef7aa10339676702cdb4e
                           .group:0000000000000000 wm4.davis.h.18.aa92228551d9a3484fe55d6024d1b87b
                           .group:0000000000000000 wm4.davis_parsers.h.15.1cf20b7725fbc6387ea18eb1ec35046c
                           .group:0000000000000000 wm4.KissCommunication.h.17.f1e76db053f07badac1040f3bea74fb3

UNDEFINED SYMBOLS
memset
system_clock_update_l4
system_clock_configure_l4
system_clock_configure_rtc_l4
HAL_NVIC_SetPriorityGrouping
HAL_SYSTICK_Config
HAL_NVIC_SetPriority
rte_wx_init
rte_rtu_init
configuration_handler_check_crc
configuration_get_register
configuration_handler_restore_default_first
configuration_set_bits_register
HAL_NVIC_SystemReset
configuration_handler_restore_default_second
configuration_clear_bits_register
configuration_handler_load_configuration
packet_tx_configure
float_to_string
SystemCoreClock
rte_main_reboot_req
config_data_pgm_cntr_first
config_data_pgm_cntr_second
delay_set
pwr_save_init
io_oc_init
wx_pwr_switch_init
wx_pwr_switch_periodic_handle
delay_fixed_with_count
LL_GPIO_Init
pwr_save_switch_mode_to_m4
srl_init
ConfigPath
i2cConfigure
led_init
AFSK_Init
ax25_init
DA_Init
io_ext_watchdog_config
digi_init
it_handlers_set_priorities
ADCStartConfig
DACStartConfig
srl_receive_data
io_oc_output_low
pwr_save_switch_mode_to_c0
delay_fixed
TimerConfig
io_ext_watchdog_service
beacon_send_own
srl_usart1_tx_buffer
srl_usart1_rx_buffer
srl_usart2_tx_buffer
srl_usart2_rx_buffer
srl_switch_timeout
davis_init
davis_wake_up
davis_control_backlight
davis_trigger_rxcheck_packet
rtu_serial_init
srl_switch_tx_delay
rtu_serial_start
dallas_init
umb_master_init
analog_anemometer_init
ms5611_reset
ms5611_read_calibration
ms5611_trigger_measure
bme280_reset
bme280_setup
bme280_read_calibration
sprintf
ax25_sendVia_toBuffer
srl_start_tx
wx_get_all_measurements
ve_direct_parser_init
umb_0x26_status_request
rte_wx_davis_station_avaliable
rte_rtu_pool_queue
rte_wx_dallas_average
rte_wx_umb_context
rte_wx_ms5611_qf
SensorCalData
rte_wx_bme280_qf
bme280_calibration_data
rte_pv_average
rte_pv_struct
rte_wx_umb
SendKISSToHost
srl_get_rx_buffer
ve_direct_cut_to_checksum
ve_direct_validate_checksum
ve_direct_parse_to_raw_struct
ve_direct_add_to_average
ve_direct_get_averages
ve_direct_set_sys_voltage
ve_direct_store_errors
umb_pooling_handler
srl_get_num_bytes_rxed
ParseReceivedKISS
davis_loop_packet_pooler
davis_rxcheck_packet_pooler
ax25_new_msg_rx_flag
ax25_rxed_frame
rte_main_trigger_modbus_status
rte_pv_corrupted_messages_count
rte_pv_load_current
rte_pv_cell_voltage
rte_pv_battery_voltage
rte_pv_battery_current
rte_pv_sys_voltage
rte_pv_last_error
rte_pv_messages_count
rte_wx_davis_loop_packet_avaliable
rtu_serial_pool
rtu_serial_get_status_string
ax25_sendVia
afsk_txStart
packet_tx_handler
analog_anemometer_direction_handler
analog_anemometer_direction_reset
wx_check_force_i2c_reset
wx_pool_anemometer
packet_tx_send_wx_frame
packet_tx_get_minutes_to_next_wx
pwr_save_pooling_handler
umb_channel_pool
umb_get_current_qf
davis_parsers_loop
davis_trigger_loop_packet
rte_main_trigger_wx_packet
rte_wx_umb_qf
rte_wx_davis_loop_content
