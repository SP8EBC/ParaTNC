   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32l4xx_hal_flash.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FLASH_Program_DoubleWord,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	FLASH_Program_DoubleWord:
  25              	.LFB329:
  26              		.file 1 "../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c"
   1:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
   2:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   ******************************************************************************
   3:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @file    stm32l4xx_hal_flash.c
   4:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @author  MCD Application Team
   5:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief   FLASH HAL module driver.
   6:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *          This file provides firmware functions to manage the following
   7:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *          functionalities of the internal FLASH memory:
   8:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *           + Program operations functions
   9:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *           + Memory Control functions
  10:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *           + Peripheral Errors functions
  11:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *
  12:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  @verbatim
  13:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   ==============================================================================
  14:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                         ##### FLASH peripheral features #####
  15:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   ==============================================================================
  16:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
  17:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   [..] The Flash memory interface manages CPU AHB I-Code and D-Code accesses
  18:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****        to the Flash memory. It implements the erase and program Flash memory operations
  19:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****        and the read and write protection mechanisms.
  20:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
  21:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   [..] The Flash memory interface accelerates code execution with a system of instruction
  22:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****        prefetch and cache lines.
  23:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
  24:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   [..] The FLASH main features are:
  25:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       (+) Flash memory read operations
  26:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       (+) Flash memory program/erase operations
  27:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       (+) Read / write protections
  28:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       (+) Option bytes programming
  29:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       (+) Prefetch on I-Code
  30:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       (+) 32 cache lines of 4*64 bits on I-Code
  31:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       (+) 8 cache lines of 4*64 bits on D-Code
  32:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       (+) Error code correction (ECC) : Data in flash are 72-bits word
  33:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****           (8 bits added per double word)
  34:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
  35:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
  36:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                         ##### How to use this driver #####
  37:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  ==============================================================================
  38:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     [..]
  39:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       This driver provides functions and macros to configure and program the FLASH
  40:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       memory of all STM32L4xx devices.
  41:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
  42:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       (#) Flash Memory IO Programming functions:
  43:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****            (++) Lock and Unlock the FLASH interface using HAL_FLASH_Unlock() and
  44:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                 HAL_FLASH_Lock() functions
  45:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****            (++) Program functions: double word and fast program (full row programming)
  46:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****            (++) There Two modes of programming :
  47:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****             (+++) Polling mode using HAL_FLASH_Program() function
  48:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****             (+++) Interrupt mode using HAL_FLASH_Program_IT() function
  49:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
  50:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       (#) Interrupts and flags management functions :
  51:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****            (++) Handle FLASH interrupts by calling HAL_FLASH_IRQHandler()
  52:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****            (++) Callback functions are called when the flash operations are finished :
  53:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                 HAL_FLASH_EndOfOperationCallback() when everything is ok, otherwise
  54:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                 HAL_FLASH_OperationErrorCallback()
  55:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****            (++) Get error flag status by calling HAL_GetError()
  56:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
  57:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       (#) Option bytes management functions :
  58:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****            (++) Lock and Unlock the option bytes using HAL_FLASH_OB_Unlock() and
  59:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                 HAL_FLASH_OB_Lock() functions
  60:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****            (++) Launch the reload of the option bytes using HAL_FLASH_Launch() function.
  61:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                 In this case, a reset is generated
  62:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
  63:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     [..]
  64:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       In addition to these functions, this driver includes a set of macros allowing
  65:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       to handle the following operations:
  66:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****        (+) Set the latency
  67:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****        (+) Enable/Disable the prefetch buffer
  68:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****        (+) Enable/Disable the Instruction cache and the Data cache
  69:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****        (+) Reset the Instruction cache and the Data cache
  70:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****        (+) Enable/Disable the Flash power-down during low-power run and sleep modes
  71:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****        (+) Enable/Disable the Flash interrupts
  72:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****        (+) Monitor the Flash flags status
  73:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
  74:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  @endverbatim
  75:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   ******************************************************************************
  76:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @attention
  77:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *
  78:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  79:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * All rights reserved.</center></h2>
  80:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *
  81:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  82:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * the "License"; You may not use this file except in compliance with the
  83:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * License. You may obtain a copy of the License at:
  84:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *                       opensource.org/licenses/BSD-3-Clause
  85:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *
  86:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   ******************************************************************************
  87:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
  88:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
  89:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /* Includes ------------------------------------------------------------------*/
  90:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** #include "stm32l4xx_hal.h"
  91:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
  92:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /** @addtogroup STM32L4xx_HAL_Driver
  93:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @{
  94:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
  95:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
  96:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /** @defgroup FLASH FLASH
  97:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief FLASH HAL module driver
  98:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @{
  99:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 100:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 101:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** #ifdef HAL_FLASH_MODULE_ENABLED
 102:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 103:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /* Private typedef -----------------------------------------------------------*/
 104:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /* Private defines -----------------------------------------------------------*/
 105:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** #if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx
 106:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** #define FLASH_NB_DOUBLE_WORDS_IN_ROW  64
 107:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** #else
 108:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** #define FLASH_NB_DOUBLE_WORDS_IN_ROW  32
 109:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** #endif
 110:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /* Private macros ------------------------------------------------------------*/
 111:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /* Private variables ---------------------------------------------------------*/
 112:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /** @defgroup FLASH_Private_Variables FLASH Private Variables
 113:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  * @{
 114:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  */
 115:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 116:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief  Variable used for Program/Erase sectors under interruption
 117:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 118:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** FLASH_ProcessTypeDef pFlash = {.Lock = HAL_UNLOCKED, \
 119:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                                .ErrorCode = HAL_FLASH_ERROR_NONE, \
 120:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                                .ProcedureOnGoing = FLASH_PROC_NONE, \
 121:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                                .Address = 0U, \
 122:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                                .Bank = FLASH_BANK_1, \
 123:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                                .Page = 0U, \
 124:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                                .NbPagesToErase = 0U, \
 125:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                                .CacheToReactivate = FLASH_CACHE_DISABLED};
 126:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 127:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @}
 128:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 129:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 130:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /* Private function prototypes -----------------------------------------------*/
 131:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /** @defgroup FLASH_Private_Functions FLASH Private Functions
 132:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  * @{
 133:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  */
 134:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** static void          FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data);
 135:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** static void          FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress);
 136:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 137:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @}
 138:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 139:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 140:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /* Exported functions --------------------------------------------------------*/
 141:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions FLASH Exported Functions
 142:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @{
 143:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 144:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 145:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group1 Programming operation functions
 146:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  *  @brief   Programming operation functions
 147:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  *
 148:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** @verbatim
 149:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  ===============================================================================
 150:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                   ##### Programming operation functions #####
 151:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  ===============================================================================
 152:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     [..]
 153:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     This subsection provides a set of functions allowing to manage the FLASH
 154:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     program operations.
 155:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 156:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** @endverbatim
 157:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @{
 158:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 159:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 160:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 161:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief  Program double word or fast program of a row at a specified address.
 162:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @param  TypeProgram  Indicate the way to program at a specified address.
 163:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *                           This parameter can be a value of @ref FLASH_Type_Program
 164:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @param  Address  specifies the address to be programmed.
 165:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @param  Data specifies the data to be programmed
 166:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *                This parameter is the data for the double word program and the address where
 167:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *                are stored the data for the row fast program
 168:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *
 169:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 170:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 171:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 172:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** {
 173:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   HAL_StatusTypeDef status;
 174:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   uint32_t prog_bit = 0;
 175:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 176:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Process Locked */
 177:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 178:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 179:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Check the parameters */
 180:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 181:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 182:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Wait for last operation to be completed */
 183:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 184:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 185:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   if(status == HAL_OK)
 186:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 187:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 188:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 189:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Deactivate the data cache if they are activated to avoid data misbehavior */
 190:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 191:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 192:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       /* Disable data cache  */
 193:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       __HAL_FLASH_DATA_CACHE_DISABLE();
 194:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 195:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 196:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     else
 197:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 198:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 199:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 200:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 201:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 202:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 203:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       /* Program double-word (64-bit) at a specified address */
 204:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       FLASH_Program_DoubleWord(Address, Data);
 205:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       prog_bit = FLASH_CR_PG;
 206:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 207:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_L
 208:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 209:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       /* Fast program a 32 row double-word (64-bit) at a specified address */
 210:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       FLASH_Program_Fast(Address, (uint32_t)Data);
 211:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 212:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       /* If it is the last row, the bit will be cleared at the end of the operation */
 213:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 214:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       {
 215:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         prog_bit = FLASH_CR_FSTPG;
 216:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       }
 217:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 218:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     else
 219:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 220:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       /* Nothing to do */
 221:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 222:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 223:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Wait for last operation to be completed */
 224:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 225:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 226:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* If the program operation is completed, disable the PG or FSTPG Bit */
 227:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     if (prog_bit != 0U)
 228:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 229:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       CLEAR_BIT(FLASH->CR, prog_bit);
 230:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 231:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 232:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Flush the caches to be sure of the data consistency */
 233:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     FLASH_FlushCaches();
 234:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 235:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 236:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Process Unlocked */
 237:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   __HAL_UNLOCK(&pFlash);
 238:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 239:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   return status;
 240:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 241:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 242:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 243:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief  Program double word or fast program of a row at a specified address with interrupt enab
 244:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @param  TypeProgram  Indicate the way to program at a specified address.
 245:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *                           This parameter can be a value of @ref FLASH_Type_Program
 246:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @param  Address  specifies the address to be programmed.
 247:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @param  Data specifies the data to be programmed
 248:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *                This parameter is the data for the double word program and the address where
 249:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *                are stored the data for the row fast program
 250:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *
 251:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @retval HAL Status
 252:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 253:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 254:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** {
 255:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 256:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 257:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Check the parameters */
 258:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 259:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 260:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Process Locked */
 261:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 262:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 263:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 264:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 265:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Deactivate the data cache if they are activated to avoid data misbehavior */
 266:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 267:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 268:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Disable data cache  */
 269:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     __HAL_FLASH_DATA_CACHE_DISABLE();
 270:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 271:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 272:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   else
 273:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 274:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 275:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 276:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 277:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Set internal variables used by the IRQ handler */
 278:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 279:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 280:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_LAST;
 281:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 282:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   else
 283:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 284:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 285:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 286:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   pFlash.Address = Address;
 287:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 288:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Enable End of Operation and Error interrupts */
 289:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 290:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 291:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 292:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 293:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Program double-word (64-bit) at a specified address */
 294:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     FLASH_Program_DoubleWord(Address, Data);
 295:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 296:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAS
 297:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 298:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Fast program a 32 row double-word (64-bit) at a specified address */
 299:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     FLASH_Program_Fast(Address, (uint32_t)Data);
 300:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 301:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   else
 302:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 303:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Nothing to do */
 304:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 305:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 306:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   return status;
 307:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 308:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 309:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 310:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief Handle FLASH interrupt request.
 311:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @retval None
 312:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 313:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** void HAL_FLASH_IRQHandler(void)
 314:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** {
 315:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   uint32_t tmp_page;
 316:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   uint32_t error;
 317:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   FLASH_ProcedureTypeDef procedure;
 318:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 319:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
 320:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 321:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx
 322:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     defined (STM32L496xx) || defined (STM32L4A6xx) || \
 323:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
 324:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx
 325:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 326:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** #endif
 327:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 328:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Disable the FSTPG Bit only if it is the last row programmed */
 329:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 330:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 331:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 332:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 333:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 334:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Check FLASH operation error flags */
 335:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 336:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 337:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   if (error !=0U)
 338:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 339:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /*Save the error code*/
 340:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     pFlash.ErrorCode |= error;
 341:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 342:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Clear error programming flags */
 343:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(error);
 344:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 345:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Flush the caches to be sure of the data consistency */
 346:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     FLASH_FlushCaches() ;
 347:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 348:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* FLASH error interrupt user callback */
 349:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     procedure = pFlash.ProcedureOnGoing;
 350:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     if(procedure == FLASH_PROC_PAGE_ERASE)
 351:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 352:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****        HAL_FLASH_OperationErrorCallback(pFlash.Page);
 353:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 354:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     else if(procedure == FLASH_PROC_MASS_ERASE)
 355:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 356:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 357:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 358:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     else if((procedure == FLASH_PROC_PROGRAM) ||
 359:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****             (procedure == FLASH_PROC_PROGRAM_LAST))
 360:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 361:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****        HAL_FLASH_OperationErrorCallback(pFlash.Address);
 362:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 363:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     else
 364:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 365:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****        HAL_FLASH_OperationErrorCallback(0U);
 366:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 367:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 368:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /*Stop the procedure ongoing*/
 369:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 370:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 371:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 372:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Check FLASH End of Operation flag  */
 373:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 374:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 375:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 376:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 377:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 378:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 379:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 380:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       /* Nb of pages to erased can be decreased */
 381:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       pFlash.NbPagesToErase--;
 382:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 383:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       /* Check if there are still pages to erase*/
 384:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       if(pFlash.NbPagesToErase != 0U)
 385:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       {
 386:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         /* Indicate user which page has been erased*/
 387:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 388:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 389:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         /* Increment page number */
 390:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         pFlash.Page++;
 391:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         tmp_page = pFlash.Page;
 392:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         FLASH_PageErase(tmp_page, pFlash.Bank);
 393:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       }
 394:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       else
 395:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       {
 396:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         /* No more pages to Erase */
 397:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         /* Reset Address and stop Erase pages procedure */
 398:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         pFlash.Page = 0xFFFFFFFFU;
 399:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 400:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 401:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         /* Flush the caches to be sure of the data consistency */
 402:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         FLASH_FlushCaches() ;
 403:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 404:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 405:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 406:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       }
 407:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 408:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     else
 409:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 410:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       /* Flush the caches to be sure of the data consistency */
 411:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       FLASH_FlushCaches() ;
 412:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 413:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       procedure = pFlash.ProcedureOnGoing;
 414:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       if(procedure == FLASH_PROC_MASS_ERASE)
 415:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       {
 416:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         /* MassErase ended. Return the selected bank */
 417:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 418:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 419:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       }
 420:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       else if((procedure == FLASH_PROC_PROGRAM) ||
 421:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****               (procedure == FLASH_PROC_PROGRAM_LAST))
 422:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       {
 423:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         /* Program ended. Return the selected address */
 424:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 425:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 426:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       }
 427:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       else
 428:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       {
 429:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         /* Nothing to do */
 430:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       }
 431:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 432:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       /*Clear the procedure ongoing*/
 433:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 434:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 435:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 436:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 437:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 438:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 439:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Disable End of Operation and Error interrupts */
 440:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 441:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 442:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Process Unlocked */
 443:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     __HAL_UNLOCK(&pFlash);
 444:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 445:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 446:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 447:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 448:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief  FLASH end of operation interrupt callback.
 449:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 450:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *                  Mass Erase: Bank number which has been requested to erase
 451:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *                  Page Erase: Page which has been erased
 452:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
 453:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *                  Program: Address which was selected for data program
 454:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @retval None
 455:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 456:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
 457:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** {
 458:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 459:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   UNUSED(ReturnValue);
 460:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 461:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 462:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****             the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
 463:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****    */
 464:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 465:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 466:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 467:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief  FLASH operation error interrupt callback.
 468:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 469:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *                 Mass Erase: Bank number which has been requested to erase
 470:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *                 Page Erase: Page number which returned an error
 471:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *                 Program: Address which was selected for data program
 472:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @retval None
 473:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 474:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
 475:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** {
 476:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 477:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   UNUSED(ReturnValue);
 478:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 479:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 480:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****             the HAL_FLASH_OperationErrorCallback could be implemented in the user file
 481:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****    */
 482:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 483:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 484:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 485:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @}
 486:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 487:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 488:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group2 Peripheral Control functions
 489:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  *  @brief   Management functions
 490:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  *
 491:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** @verbatim
 492:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  ===============================================================================
 493:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                       ##### Peripheral Control functions #####
 494:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  ===============================================================================
 495:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     [..]
 496:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     This subsection provides a set of functions allowing to control the FLASH
 497:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     memory operations.
 498:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 499:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** @endverbatim
 500:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @{
 501:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 502:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 503:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 504:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief  Unlock the FLASH control register access.
 505:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @retval HAL Status
 506:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 507:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Unlock(void)
 508:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** {
 509:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 510:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 511:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 512:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 513:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Authorize the FLASH Registers access */
 514:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 515:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 516:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 517:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Verify Flash is unlocked */
 518:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 519:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 520:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       status = HAL_ERROR;
 521:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 522:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 523:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 524:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   return status;
 525:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 526:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 527:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 528:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief  Lock the FLASH control register access.
 529:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @retval HAL Status
 530:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 531:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Lock(void)
 532:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** {
 533:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 534:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 535:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 536:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   return HAL_OK;
 537:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 538:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 539:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 540:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief  Unlock the FLASH Option Bytes Registers access.
 541:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @retval HAL Status
 542:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 543:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
 544:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** {
 545:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 546:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 547:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Authorizes the Option Byte register programming */
 548:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 549:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 550:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 551:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   else
 552:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 553:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     return HAL_ERROR;
 554:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 555:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 556:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   return HAL_OK;
 557:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 558:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 559:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 560:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief  Lock the FLASH Option Bytes Registers access.
 561:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @retval HAL Status
 562:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 563:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
 564:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** {
 565:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 566:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 567:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 568:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   return HAL_OK;
 569:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 570:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 571:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 572:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief  Launch the option byte loading.
 573:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @retval HAL Status
 574:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 575:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
 576:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** {
 577:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Set the bit to force the option byte reloading */
 578:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 579:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 580:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Wait for last operation to be completed */
 581:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 582:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 583:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 584:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 585:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @}
 586:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 587:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 588:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group3 Peripheral State and Errors functions
 589:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  *  @brief   Peripheral Errors functions
 590:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  *
 591:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** @verbatim
 592:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  ===============================================================================
 593:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****                 ##### Peripheral Errors functions #####
 594:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****  ===============================================================================
 595:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     [..]
 596:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     This subsection permits to get in run-time Errors of the FLASH peripheral.
 597:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 598:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** @endverbatim
 599:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @{
 600:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 601:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 602:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 603:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief  Get the specific FLASH error flag.
 604:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @retval FLASH_ErrorCode: The returned value can be:
 605:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_RD: FLASH Read Protection error flag (PCROP)
 606:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_PGS: FLASH Programming Sequence error flag
 607:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_PGP: FLASH Programming Parallelism error flag
 608:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
 609:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
 610:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag
 611:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_NONE: No error set
 612:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_OP: FLASH Operation error
 613:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_PROG: FLASH Programming error
 614:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protection error
 615:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming alignment error
 616:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_SIZ: FLASH Size error
 617:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_PGS: FLASH Programming sequence error
 618:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_MIS: FLASH Fast programming data miss error
 619:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
 620:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
 621:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
 622:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L
 623:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 624:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** uint32_t HAL_FLASH_GetError(void)
 625:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** {
 626:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****    return pFlash.ErrorCode;
 627:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 628:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 629:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 630:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @}
 631:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 632:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 633:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 634:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @}
 635:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 636:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 637:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /* Private functions ---------------------------------------------------------*/
 638:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 639:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /** @addtogroup FLASH_Private_Functions
 640:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @{
 641:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 642:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 643:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 644:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief  Wait for a FLASH operation to complete.
 645:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @param  Timeout maximum flash operation timeout
 646:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 647:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 648:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
 649:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** {
 650:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
 651:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
 652:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****      flag will be set */
 653:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 654:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   uint32_t tickstart = HAL_GetTick();
 655:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   uint32_t error;
 656:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 657:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 658:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 659:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     if(Timeout != HAL_MAX_DELAY)
 660:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 661:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       if((HAL_GetTick() - tickstart) >= Timeout)
 662:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       {
 663:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         return HAL_TIMEOUT;
 664:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       }
 665:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 666:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 667:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 668:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 669:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 670:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   if(error != 0u)
 671:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 672:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /*Save the error code*/
 673:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     pFlash.ErrorCode |= error;
 674:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 675:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Clear error programming flags */
 676:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(error);
 677:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 678:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     return HAL_ERROR;
 679:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 680:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 681:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Check FLASH End of Operation flag  */
 682:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 683:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 684:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 685:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 686:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 687:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 688:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* If there is an error flag set */
 689:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   return HAL_OK;
 690:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 691:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 692:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 693:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief  Program double-word (64-bit) at a specified address.
 694:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @param  Address specifies the address to be programmed.
 695:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @param  Data specifies the data to be programmed.
 696:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @retval None
 697:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 698:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
 699:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** {
  27              		.loc 1 699 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 10B4     		push	{r4}
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 4, -4
 700:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Check the parameters */
 701:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 702:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 703:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Set PG bit */
 704:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_PG);
  36              		.loc 1 704 0
  37 0002 064C     		ldr	r4, .L3
  38 0004 6169     		ldr	r1, [r4, #20]
  39 0006 41F00101 		orr	r1, r1, #1
  40 000a 6161     		str	r1, [r4, #20]
 705:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 706:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Program first word */
 707:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *(__IO uint32_t*)Address = (uint32_t)Data;
  41              		.loc 1 707 0
  42 000c 0260     		str	r2, [r0]
  43              	.LBB10:
  44              	.LBB11:
  45              		.file 2 "../system/include/cmsis/stm32l4xx/cmsis_gcc.h"
   1:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**************************************************************************//**
   2:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * @version  V5.2.0
   5:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * @date     08. May 2019
   6:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  ******************************************************************************/
   7:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /*
   8:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  *
  10:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  *
  12:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  *
  16:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  *
  18:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * limitations under the License.
  23:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
  24:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
  25:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
  28:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
  34:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef __has_builtin
  36:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  38:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
  39:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __ASM
  41:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  43:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __INLINE
  44:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  46:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  49:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif                                           
  52:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  55:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __USED
  56:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  58:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __WEAK
  59:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  61:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __PACKED
  62:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  64:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  67:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  70:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  78:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  86:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
  94:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 102:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 110:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 113:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 116:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 119:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 120:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 122:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 124:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 125:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            in the used linker script.
 129:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   
 130:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 131:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 133:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   
 135:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   typedef struct {
 136:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     uint32_t const* src;
 137:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     uint32_t* dest;
 138:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     uint32_t  wlen;
 139:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   } __copy_table_t;
 140:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   
 141:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   typedef struct {
 142:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     uint32_t* dest;
 143:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     uint32_t  wlen;
 144:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   } __zero_table_t;
 145:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   
 146:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 151:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     }
 155:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   }
 156:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  
 157:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     }
 161:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   }
 162:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  
 163:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   _start();
 164:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 165:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   
 166:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 168:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 169:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 172:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 173:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 176:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 177:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 180:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 181:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 184:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 185:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   @{
 189:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 190:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 191:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 192:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 196:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 198:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 200:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 201:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 202:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 203:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 207:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 209:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 211:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 212:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 213:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 214:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Control Register
 215:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Control Register value
 217:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 218:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 220:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 221:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 222:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 224:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 225:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 226:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 227:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 229:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 233:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 235:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 236:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 237:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 239:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 240:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 241:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 242:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 243:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 244:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Control Register
 245:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 248:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 250:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 252:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 253:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 254:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 256:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 260:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 262:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 264:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 265:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 266:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 267:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 268:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               IPSR Register value
 271:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 272:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 274:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 275:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 276:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 278:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 279:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 280:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 281:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 282:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get APSR Register
 283:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               APSR Register value
 285:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 286:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 288:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 289:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 290:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 292:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 293:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 294:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 295:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 296:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               xPSR Register value
 299:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 300:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 302:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 303:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 304:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 306:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 307:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 308:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 309:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 310:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               PSP Register value
 313:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 314:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 316:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 317:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 318:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 320:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 321:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 322:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 323:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 325:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               PSP Register value
 328:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 329:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 331:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 332:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 333:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 335:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 336:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 337:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 338:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 339:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 340:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 344:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 346:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 348:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 349:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 350:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 352:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 356:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 358:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 360:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 361:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 362:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 363:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 364:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               MSP Register value
 367:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 368:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 370:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 371:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 372:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 374:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 375:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 376:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 377:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 379:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               MSP Register value
 382:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 383:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 385:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 386:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 387:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 389:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 390:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 391:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 392:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 393:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 394:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 398:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 400:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 402:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 403:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 404:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 406:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 410:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 412:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 414:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 415:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 416:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 417:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 419:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               SP Register value
 422:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 423:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 425:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 426:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 427:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 429:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 430:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 431:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 432:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 433:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 437:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 439:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 441:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 442:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 443:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 444:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 445:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Priority Mask value
 448:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 449:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 451:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 452:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 453:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 455:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 456:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 457:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 458:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 460:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Priority Mask value
 463:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 464:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 466:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 467:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 468:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 470:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 471:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 472:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 473:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 474:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 475:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 479:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 481:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 483:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 484:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 485:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 487:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 491:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 493:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 495:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 496:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 497:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 498:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 502:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Enable FIQ
 503:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 506:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 508:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 510:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 511:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 512:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 513:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Disable FIQ
 514:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 517:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 519:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 521:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 522:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 523:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 524:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Base Priority
 525:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Base Priority register value
 527:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 528:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 530:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 531:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 532:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 534:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 535:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 536:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 537:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 539:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Base Priority register value
 542:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 543:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 545:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 546:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 547:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 549:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 550:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 551:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 552:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 553:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 554:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Base Priority
 555:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 558:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 560:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 562:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 563:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 564:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 566:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 570:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 572:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 574:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 575:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 576:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 577:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 578:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 583:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 585:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 587:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 588:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 589:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 590:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Fault Mask register value
 593:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 594:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 596:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 597:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 598:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 600:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 601:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 602:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 603:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 605:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Fault Mask register value
 608:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 609:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 611:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 612:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 613:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 615:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 616:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 617:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 618:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 619:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 620:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 624:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 626:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 628:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 629:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 630:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 632:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 636:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 638:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 640:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 641:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 642:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 646:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 647:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 650:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 651:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   mode.
 655:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   
 656:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 659:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 661:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return 0U;
 665:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 666:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 667:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return result;
 669:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 670:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 671:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 672:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 674:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 678:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 681:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 683:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return 0U;
 686:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 687:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 688:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return result;
 690:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 691:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 692:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 693:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 694:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 695:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 696:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   mode.
 700:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   
 701:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 704:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 706:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 711:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 713:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 714:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 715:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 716:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 718:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 722:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 725:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 727:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 731:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 733:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 734:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 735:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 736:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 737:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 738:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   mode.
 742:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 743:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 746:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 748:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return 0U;
 752:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 753:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 754:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return result;
 756:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 757:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 758:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 759:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 760:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 762:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 766:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 769:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 771:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return 0U;
 774:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 775:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 776:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return result;
 778:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 779:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 780:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 781:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 782:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 783:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 784:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   mode.
 788:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 789:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 792:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 794:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 799:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 801:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 802:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 803:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 804:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 806:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 810:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 813:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 815:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 819:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 821:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 822:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 823:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 824:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 827:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 828:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 829:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Get FPSCR
 830:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 833:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 835:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 843:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   uint32_t result;
 844:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 845:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
 847:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 848:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 849:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(0U);
 850:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 851:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 852:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 853:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 854:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 855:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Set FPSCR
 856:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 859:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 861:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 869:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 871:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 872:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   (void)fpscr;
 873:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 874:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 875:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 876:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 877:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 879:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 880:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   Access to dedicated instructions
 883:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   @{
 884:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** */
 885:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 886:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #else
 894:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #endif
 898:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 899:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 900:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   No Operation
 901:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 903:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 905:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 906:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 909:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 911:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 912:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 913:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Wait For Event
 914:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 917:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 919:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 920:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 921:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Send Event
 922:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 924:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 926:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** 
 927:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** /**
 928:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****            after the instruction has been completed.
 932:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****  */
 933:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** {
 935:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
  46              		.loc 2 935 0
  47              		.syntax unified
  48              	@ 935 "../system/include/cmsis/stm32l4xx/cmsis_gcc.h" 1
  49 000e BFF36F8F 		isb 0xF
  50              	@ 0 "" 2
  51              		.thumb
  52              		.syntax unified
  53              	.LBE11:
  54              	.LBE10:
 708:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 709:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Barrier to ensure programming is performed in 2 steps, in right order
 710:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     (independently of compiler optimization behavior) */
 711:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   __ISB();
 712:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 713:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Program second word */
 714:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
  55              		.loc 1 714 0
  56 0012 4360     		str	r3, [r0, #4]
 715:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
  57              		.loc 1 715 0
  58 0014 5DF8044B 		ldr	r4, [sp], #4
  59              		.cfi_restore 4
  60              		.cfi_def_cfa_offset 0
  61 0018 7047     		bx	lr
  62              	.L4:
  63 001a 00BF     		.align	2
  64              	.L3:
  65 001c 00200240 		.word	1073881088
  66              		.cfi_endproc
  67              	.LFE329:
  69              		.section	.text.FLASH_Program_Fast,"ax",%progbits
  70              		.align	1
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu fpv4-sp-d16
  76              	FLASH_Program_Fast:
  77              	.LFB330:
 716:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 717:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** /**
 718:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @brief  Fast program a row double-word (64-bit) at a specified address.
 719:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @param  Address specifies the address to be programmed.
 720:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @param  DataAddress specifies the address where the data are stored.
 721:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   * @retval None
 722:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   */
 723:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
 724:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** {
  78              		.loc 1 724 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.LVL1:
  84 0000 10B4     		push	{r4}
  85              		.cfi_def_cfa_offset 4
  86              		.cfi_offset 4, -4
  87              	.LVL2:
 725:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   uint32_t primask_bit;
 726:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 727:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 728:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 729:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 730:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Check the parameters */
 731:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));
 732:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 733:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Set FSTPG bit */
 734:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
  88              		.loc 1 734 0
  89 0002 0B4A     		ldr	r2, .L8
  90 0004 5369     		ldr	r3, [r2, #20]
  91 0006 43F48023 		orr	r3, r3, #262144
  92 000a 5361     		str	r3, [r2, #20]
  93              	.LBB12:
  94              	.LBB13:
 453:../system/include/cmsis/stm32l4xx/cmsis_gcc.h ****   return(result);
  95              		.loc 2 453 0
  96              		.syntax unified
  97              	@ 453 "../system/include/cmsis/stm32l4xx/cmsis_gcc.h" 1
  98 000c EFF31084 		MRS r4, primask
  99              	@ 0 "" 2
 100              		.thumb
 101              		.syntax unified
 102              	.LBE13:
 103              	.LBE12:
 104              	.LBB14:
 105              	.LBB15:
 209:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 106              		.loc 2 209 0
 107              		.syntax unified
 108              	@ 209 "../system/include/cmsis/stm32l4xx/cmsis_gcc.h" 1
 109 0010 72B6     		cpsid i
 110              	@ 0 "" 2
 111              		.thumb
 112              		.syntax unified
 113              	.LBE15:
 114              	.LBE14:
 726:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 115              		.loc 1 726 0
 116 0012 4023     		movs	r3, #64
 117              	.LVL3:
 118              	.L6:
 735:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 736:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Disable interrupts to avoid any interruption during the loop */
 737:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   primask_bit = __get_PRIMASK();
 738:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   __disable_irq();
 739:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 740:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Program the double word of the row */
 741:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   do
 742:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 743:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     *dest_addr = *src_addr;
 119              		.loc 1 743 0 discriminator 1
 120 0014 51F8042B 		ldr	r2, [r1], #4
 121              	.LVL4:
 122 0018 40F8042B 		str	r2, [r0], #4
 123              	.LVL5:
 744:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     dest_addr++;
 745:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     src_addr++;
 746:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     row_index--;
 124              		.loc 1 746 0 discriminator 1
 125 001c 013B     		subs	r3, r3, #1
 126              	.LVL6:
 747:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   } while (row_index != 0U);
 127              		.loc 1 747 0 discriminator 1
 128 001e 13F0FF03 		ands	r3, r3, #255
 129              	.LVL7:
 130 0022 F7D1     		bne	.L6
 131              	.LVL8:
 132              	.LBB16:
 133              	.LBB17:
 481:../system/include/cmsis/stm32l4xx/cmsis_gcc.h **** }
 134              		.loc 2 481 0
 135              		.syntax unified
 136              	@ 481 "../system/include/cmsis/stm32l4xx/cmsis_gcc.h" 1
 137 0024 84F31088 		MSR primask, r4
 138              	@ 0 "" 2
 139              	.LVL9:
 140              		.thumb
 141              		.syntax unified
 142              	.LBE17:
 143              	.LBE16:
 748:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 749:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Re-enable the interrupts */
 750:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   __set_PRIMASK(primask_bit);
 751:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 144              		.loc 1 751 0
 145 0028 5DF8044B 		ldr	r4, [sp], #4
 146              		.cfi_restore 4
 147              		.cfi_def_cfa_offset 0
 148 002c 7047     		bx	lr
 149              	.L9:
 150 002e 00BF     		.align	2
 151              	.L8:
 152 0030 00200240 		.word	1073881088
 153              		.cfi_endproc
 154              	.LFE330:
 156              		.section	.text.HAL_FLASH_Program_IT,"ax",%progbits
 157              		.align	1
 158              		.global	HAL_FLASH_Program_IT
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 162              		.fpu fpv4-sp-d16
 164              	HAL_FLASH_Program_IT:
 165              	.LFB318:
 254:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 166              		.loc 1 254 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              	.LVL10:
 171 0000 38B5     		push	{r3, r4, r5, lr}
 172              		.cfi_def_cfa_offset 16
 173              		.cfi_offset 3, -16
 174              		.cfi_offset 4, -12
 175              		.cfi_offset 5, -8
 176              		.cfi_offset 14, -4
 177              	.LVL11:
 261:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 178              		.loc 1 261 0
 179 0002 1F4C     		ldr	r4, .L23
 180 0004 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 181 0006 012C     		cmp	r4, #1
 182 0008 37D0     		beq	.L17
 261:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 183              		.loc 1 261 0 is_stmt 0 discriminator 2
 184 000a 1D4C     		ldr	r4, .L23
 185 000c 0125     		movs	r5, #1
 186 000e 2570     		strb	r5, [r4]
 263:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 187              		.loc 1 263 0 is_stmt 1 discriminator 2
 188 0010 0025     		movs	r5, #0
 189 0012 6560     		str	r5, [r4, #4]
 266:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 190              		.loc 1 266 0 discriminator 2
 191 0014 1B4C     		ldr	r4, .L23+4
 192 0016 2468     		ldr	r4, [r4]
 193 0018 14F4806F 		tst	r4, #1024
 194 001c 1AD0     		beq	.L12
 269:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 195              		.loc 1 269 0
 196 001e 194D     		ldr	r5, .L23+4
 197 0020 2C68     		ldr	r4, [r5]
 198 0022 24F48064 		bic	r4, r4, #1024
 199 0026 2C60     		str	r4, [r5]
 270:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 200              		.loc 1 270 0
 201 0028 154C     		ldr	r4, .L23
 202 002a 0225     		movs	r5, #2
 203 002c 2577     		strb	r5, [r4, #28]
 204              	.L13:
 278:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 205              		.loc 1 278 0
 206 002e 0228     		cmp	r0, #2
 207 0030 14D0     		beq	.L20
 284:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 208              		.loc 1 284 0
 209 0032 134C     		ldr	r4, .L23
 210 0034 0325     		movs	r5, #3
 211 0036 2572     		strb	r5, [r4, #8]
 212              	.L15:
 213 0038 0C46     		mov	r4, r1
 286:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 214              		.loc 1 286 0
 215 003a 1149     		ldr	r1, .L23
 216              	.LVL12:
 217 003c CC60     		str	r4, [r1, #12]
 289:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 218              		.loc 1 289 0
 219 003e 1149     		ldr	r1, .L23+4
 220 0040 4D69     		ldr	r5, [r1, #20]
 221 0042 45F04075 		orr	r5, r5, #50331648
 222 0046 4D61     		str	r5, [r1, #20]
 291:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 223              		.loc 1 291 0
 224 0048 60B1     		cbz	r0, .L21
 296:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 225              		.loc 1 296 0
 226 004a 431E     		subs	r3, r0, #1
 227 004c 012B     		cmp	r3, #1
 228 004e 0ED9     		bls	.L22
 306:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 229              		.loc 1 306 0
 230 0050 0020     		movs	r0, #0
 231              	.LVL13:
 232              	.L11:
 307:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 233              		.loc 1 307 0
 234 0052 38BD     		pop	{r3, r4, r5, pc}
 235              	.LVL14:
 236              	.L12:
 274:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 237              		.loc 1 274 0
 238 0054 0A4C     		ldr	r4, .L23
 239 0056 0025     		movs	r5, #0
 240 0058 2577     		strb	r5, [r4, #28]
 241 005a E8E7     		b	.L13
 242              	.L20:
 280:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 243              		.loc 1 280 0
 244 005c 084C     		ldr	r4, .L23
 245 005e 0425     		movs	r5, #4
 246 0060 2572     		strb	r5, [r4, #8]
 247 0062 E9E7     		b	.L15
 248              	.LVL15:
 249              	.L21:
 294:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 250              		.loc 1 294 0
 251 0064 2046     		mov	r0, r4
 252              	.LVL16:
 253 0066 FFF7FEFF 		bl	FLASH_Program_DoubleWord
 254              	.LVL17:
 306:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 255              		.loc 1 306 0
 256 006a 0020     		movs	r0, #0
 257 006c F1E7     		b	.L11
 258              	.LVL18:
 259              	.L22:
 299:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 260              		.loc 1 299 0
 261 006e 1146     		mov	r1, r2
 262 0070 2046     		mov	r0, r4
 263              	.LVL19:
 264 0072 FFF7FEFF 		bl	FLASH_Program_Fast
 265              	.LVL20:
 306:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 266              		.loc 1 306 0
 267 0076 0020     		movs	r0, #0
 268 0078 EBE7     		b	.L11
 269              	.LVL21:
 270              	.L17:
 261:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 271              		.loc 1 261 0
 272 007a 0220     		movs	r0, #2
 273              	.LVL22:
 274 007c E9E7     		b	.L11
 275              	.L24:
 276 007e 00BF     		.align	2
 277              	.L23:
 278 0080 00000000 		.word	.LANCHOR0
 279 0084 00200240 		.word	1073881088
 280              		.cfi_endproc
 281              	.LFE318:
 283              		.section	.text.HAL_FLASH_EndOfOperationCallback,"ax",%progbits
 284              		.align	1
 285              		.weak	HAL_FLASH_EndOfOperationCallback
 286              		.syntax unified
 287              		.thumb
 288              		.thumb_func
 289              		.fpu fpv4-sp-d16
 291              	HAL_FLASH_EndOfOperationCallback:
 292              	.LFB320:
 457:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 293              		.loc 1 457 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297              		@ link register save eliminated.
 298              	.LVL23:
 464:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 299              		.loc 1 464 0
 300 0000 7047     		bx	lr
 301              		.cfi_endproc
 302              	.LFE320:
 304              		.section	.text.HAL_FLASH_OperationErrorCallback,"ax",%progbits
 305              		.align	1
 306              		.weak	HAL_FLASH_OperationErrorCallback
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 310              		.fpu fpv4-sp-d16
 312              	HAL_FLASH_OperationErrorCallback:
 313              	.LFB321:
 475:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 314              		.loc 1 475 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318              		@ link register save eliminated.
 319              	.LVL24:
 482:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 320              		.loc 1 482 0
 321 0000 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE321:
 325              		.section	.text.HAL_FLASH_IRQHandler,"ax",%progbits
 326              		.align	1
 327              		.global	HAL_FLASH_IRQHandler
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu fpv4-sp-d16
 333              	HAL_FLASH_IRQHandler:
 334              	.LFB319:
 314:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   uint32_t tmp_page;
 335              		.loc 1 314 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339 0000 10B5     		push	{r4, lr}
 340              		.cfi_def_cfa_offset 8
 341              		.cfi_offset 4, -8
 342              		.cfi_offset 14, -4
 320:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx
 343              		.loc 1 320 0
 344 0002 494A     		ldr	r2, .L48
 345 0004 5369     		ldr	r3, [r2, #20]
 346 0006 23F4FF63 		bic	r3, r3, #2040
 347 000a 23F00703 		bic	r3, r3, #7
 348 000e 5361     		str	r3, [r2, #20]
 325:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** #endif
 349              		.loc 1 325 0
 350 0010 5369     		ldr	r3, [r2, #20]
 351 0012 23F40043 		bic	r3, r3, #32768
 352 0016 5361     		str	r3, [r2, #20]
 329:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 353              		.loc 1 329 0
 354 0018 444B     		ldr	r3, .L48+4
 355 001a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 356 001c DBB2     		uxtb	r3, r3
 357 001e 042B     		cmp	r3, #4
 358 0020 25D0     		beq	.L41
 359              	.L28:
 335:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 360              		.loc 1 335 0
 361 0022 414B     		ldr	r3, .L48
 362 0024 1B69     		ldr	r3, [r3, #16]
 363 0026 4CF2FA32 		movw	r2, #50170
 364              	.LVL25:
 337:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 365              		.loc 1 337 0
 366 002a 1340     		ands	r3, r3, r2
 367              	.LVL26:
 368 002c 24D1     		bne	.L42
 369              	.LVL27:
 370              	.L29:
 373:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 371              		.loc 1 373 0
 372 002e 3E4B     		ldr	r3, .L48
 373 0030 1B69     		ldr	r3, [r3, #16]
 374 0032 13F0010F 		tst	r3, #1
 375 0036 60D0     		beq	.L34
 376:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 376              		.loc 1 376 0 discriminator 4
 377 0038 3B4B     		ldr	r3, .L48
 378 003a 0122     		movs	r2, #1
 379 003c 1A61     		str	r2, [r3, #16]
 378:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 380              		.loc 1 378 0 discriminator 4
 381 003e 3B4B     		ldr	r3, .L48+4
 382 0040 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 383 0042 DBB2     		uxtb	r3, r3
 384 0044 9342     		cmp	r3, r2
 385 0046 4AD1     		bne	.L35
 381:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 386              		.loc 1 381 0
 387 0048 384B     		ldr	r3, .L48+4
 388 004a 9A69     		ldr	r2, [r3, #24]
 389 004c 013A     		subs	r2, r2, #1
 390 004e 9A61     		str	r2, [r3, #24]
 384:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       {
 391              		.loc 1 384 0
 392 0050 9B69     		ldr	r3, [r3, #24]
 393 0052 002B     		cmp	r3, #0
 394 0054 37D0     		beq	.L36
 387:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 395              		.loc 1 387 0
 396 0056 354C     		ldr	r4, .L48+4
 397 0058 6069     		ldr	r0, [r4, #20]
 398 005a FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 399              	.LVL28:
 390:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         tmp_page = pFlash.Page;
 400              		.loc 1 390 0
 401 005e 6369     		ldr	r3, [r4, #20]
 402 0060 0133     		adds	r3, r3, #1
 403 0062 6361     		str	r3, [r4, #20]
 391:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         FLASH_PageErase(tmp_page, pFlash.Bank);
 404              		.loc 1 391 0
 405 0064 6069     		ldr	r0, [r4, #20]
 406              	.LVL29:
 392:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       }
 407              		.loc 1 392 0
 408 0066 2169     		ldr	r1, [r4, #16]
 409 0068 FFF7FEFF 		bl	FLASH_PageErase
 410              	.LVL30:
 411 006c 45E0     		b	.L34
 412              	.L41:
 331:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 413              		.loc 1 331 0
 414 006e 5369     		ldr	r3, [r2, #20]
 415 0070 23F48023 		bic	r3, r3, #262144
 416 0074 5361     		str	r3, [r2, #20]
 417 0076 D4E7     		b	.L28
 418              	.LVL31:
 419              	.L42:
 340:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 420              		.loc 1 340 0
 421 0078 2C4C     		ldr	r4, .L48+4
 422 007a 6268     		ldr	r2, [r4, #4]
 423 007c 1A43     		orrs	r2, r2, r3
 424 007e 6260     		str	r2, [r4, #4]
 343:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 425              		.loc 1 343 0
 426 0080 294A     		ldr	r2, .L48
 427 0082 1361     		str	r3, [r2, #16]
 346:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 428              		.loc 1 346 0
 429 0084 FFF7FEFF 		bl	FLASH_FlushCaches
 430              	.LVL32:
 349:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     if(procedure == FLASH_PROC_PAGE_ERASE)
 431              		.loc 1 349 0
 432 0088 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 433 008a DBB2     		uxtb	r3, r3
 434              	.LVL33:
 350:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 435              		.loc 1 350 0
 436 008c 012B     		cmp	r3, #1
 437 008e 0CD0     		beq	.L43
 354:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 438              		.loc 1 354 0
 439 0090 022B     		cmp	r3, #2
 440 0092 0ED0     		beq	.L44
 358:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****             (procedure == FLASH_PROC_PROGRAM_LAST))
 441              		.loc 1 358 0
 442 0094 033B     		subs	r3, r3, #3
 443              	.LVL34:
 444 0096 DBB2     		uxtb	r3, r3
 445              	.LVL35:
 446 0098 012B     		cmp	r3, #1
 447 009a 0FD9     		bls	.L45
 365:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 448              		.loc 1 365 0
 449 009c 0020     		movs	r0, #0
 450 009e FFF7FEFF 		bl	HAL_FLASH_OperationErrorCallback
 451              	.LVL36:
 452              	.L31:
 369:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 453              		.loc 1 369 0
 454 00a2 224B     		ldr	r3, .L48+4
 455 00a4 0022     		movs	r2, #0
 456 00a6 1A72     		strb	r2, [r3, #8]
 457 00a8 C1E7     		b	.L29
 458              	.LVL37:
 459              	.L43:
 352:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 460              		.loc 1 352 0
 461 00aa 6069     		ldr	r0, [r4, #20]
 462 00ac FFF7FEFF 		bl	HAL_FLASH_OperationErrorCallback
 463              	.LVL38:
 464 00b0 F7E7     		b	.L31
 465              	.LVL39:
 466              	.L44:
 356:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 467              		.loc 1 356 0
 468 00b2 1E4B     		ldr	r3, .L48+4
 469              	.LVL40:
 470 00b4 1869     		ldr	r0, [r3, #16]
 471 00b6 FFF7FEFF 		bl	HAL_FLASH_OperationErrorCallback
 472              	.LVL41:
 473 00ba F2E7     		b	.L31
 474              	.LVL42:
 475              	.L45:
 361:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 476              		.loc 1 361 0
 477 00bc 1B4B     		ldr	r3, .L48+4
 478 00be D868     		ldr	r0, [r3, #12]
 479 00c0 FFF7FEFF 		bl	HAL_FLASH_OperationErrorCallback
 480              	.LVL43:
 481 00c4 EDE7     		b	.L31
 482              	.L36:
 398:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 483              		.loc 1 398 0
 484 00c6 194C     		ldr	r4, .L48+4
 485 00c8 4FF0FF33 		mov	r3, #-1
 486 00cc 6361     		str	r3, [r4, #20]
 399:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 487              		.loc 1 399 0
 488 00ce 0023     		movs	r3, #0
 489 00d0 2372     		strb	r3, [r4, #8]
 402:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 490              		.loc 1 402 0
 491 00d2 FFF7FEFF 		bl	FLASH_FlushCaches
 492              	.LVL44:
 405:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       }
 493              		.loc 1 405 0
 494 00d6 6069     		ldr	r0, [r4, #20]
 495 00d8 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 496              	.LVL45:
 497 00dc 0DE0     		b	.L34
 498              	.L35:
 411:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 499              		.loc 1 411 0
 500 00de FFF7FEFF 		bl	FLASH_FlushCaches
 501              	.LVL46:
 413:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       if(procedure == FLASH_PROC_MASS_ERASE)
 502              		.loc 1 413 0
 503 00e2 124B     		ldr	r3, .L48+4
 504 00e4 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 505 00e6 DBB2     		uxtb	r3, r3
 506              	.LVL47:
 414:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       {
 507              		.loc 1 414 0
 508 00e8 022B     		cmp	r3, #2
 509 00ea 12D0     		beq	.L46
 420:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****               (procedure == FLASH_PROC_PROGRAM_LAST))
 510              		.loc 1 420 0
 511 00ec 033B     		subs	r3, r3, #3
 512              	.LVL48:
 513 00ee DBB2     		uxtb	r3, r3
 514              	.LVL49:
 515 00f0 012B     		cmp	r3, #1
 516 00f2 13D9     		bls	.L47
 517              	.LVL50:
 518              	.L38:
 433:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 519              		.loc 1 433 0
 520 00f4 0D4B     		ldr	r3, .L48+4
 521 00f6 0022     		movs	r2, #0
 522 00f8 1A72     		strb	r2, [r3, #8]
 523              	.L34:
 437:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 524              		.loc 1 437 0
 525 00fa 0C4B     		ldr	r3, .L48+4
 526 00fc 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 527 00fe 3BB9     		cbnz	r3, .L27
 440:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 528              		.loc 1 440 0 discriminator 4
 529 0100 094A     		ldr	r2, .L48
 530 0102 5369     		ldr	r3, [r2, #20]
 531 0104 23F04073 		bic	r3, r3, #50331648
 532 0108 5361     		str	r3, [r2, #20]
 443:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 533              		.loc 1 443 0 discriminator 4
 534 010a 084B     		ldr	r3, .L48+4
 535 010c 0022     		movs	r2, #0
 536 010e 1A70     		strb	r2, [r3]
 537              	.L27:
 445:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 538              		.loc 1 445 0
 539 0110 10BD     		pop	{r4, pc}
 540              	.LVL51:
 541              	.L46:
 418:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       }
 542              		.loc 1 418 0
 543 0112 064B     		ldr	r3, .L48+4
 544              	.LVL52:
 545 0114 1869     		ldr	r0, [r3, #16]
 546 0116 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 547              	.LVL53:
 548 011a EBE7     		b	.L38
 549              	.LVL54:
 550              	.L47:
 425:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       }
 551              		.loc 1 425 0
 552 011c 034B     		ldr	r3, .L48+4
 553 011e D868     		ldr	r0, [r3, #12]
 554 0120 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 555              	.LVL55:
 556 0124 E6E7     		b	.L38
 557              	.L49:
 558 0126 00BF     		.align	2
 559              	.L48:
 560 0128 00200240 		.word	1073881088
 561 012c 00000000 		.word	.LANCHOR0
 562              		.cfi_endproc
 563              	.LFE319:
 565              		.section	.text.HAL_FLASH_Unlock,"ax",%progbits
 566              		.align	1
 567              		.global	HAL_FLASH_Unlock
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 571              		.fpu fpv4-sp-d16
 573              	HAL_FLASH_Unlock:
 574              	.LFB322:
 508:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 575              		.loc 1 508 0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 0
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              		@ link register save eliminated.
 580              	.LVL56:
 511:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 581              		.loc 1 511 0
 582 0000 094B     		ldr	r3, .L55
 583 0002 5B69     		ldr	r3, [r3, #20]
 584 0004 002B     		cmp	r3, #0
 585 0006 01DB     		blt	.L54
 509:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 586              		.loc 1 509 0
 587 0008 0020     		movs	r0, #0
 588 000a 7047     		bx	lr
 589              	.L54:
 514:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 590              		.loc 1 514 0
 591 000c 064B     		ldr	r3, .L55
 592 000e 074A     		ldr	r2, .L55+4
 593 0010 9A60     		str	r2, [r3, #8]
 515:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 594              		.loc 1 515 0
 595 0012 02F18832 		add	r2, r2, #-2004318072
 596 0016 9A60     		str	r2, [r3, #8]
 518:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 597              		.loc 1 518 0
 598 0018 5B69     		ldr	r3, [r3, #20]
 599 001a 002B     		cmp	r3, #0
 600 001c 01DB     		blt	.L53
 509:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 601              		.loc 1 509 0
 602 001e 0020     		movs	r0, #0
 603 0020 7047     		bx	lr
 604              	.L53:
 520:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 605              		.loc 1 520 0
 606 0022 0120     		movs	r0, #1
 607              	.LVL57:
 525:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 608              		.loc 1 525 0
 609 0024 7047     		bx	lr
 610              	.L56:
 611 0026 00BF     		.align	2
 612              	.L55:
 613 0028 00200240 		.word	1073881088
 614 002c 23016745 		.word	1164378403
 615              		.cfi_endproc
 616              	.LFE322:
 618              		.section	.text.HAL_FLASH_Lock,"ax",%progbits
 619              		.align	1
 620              		.global	HAL_FLASH_Lock
 621              		.syntax unified
 622              		.thumb
 623              		.thumb_func
 624              		.fpu fpv4-sp-d16
 626              	HAL_FLASH_Lock:
 627              	.LFB323:
 532:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 628              		.loc 1 532 0
 629              		.cfi_startproc
 630              		@ args = 0, pretend = 0, frame = 0
 631              		@ frame_needed = 0, uses_anonymous_args = 0
 632              		@ link register save eliminated.
 534:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 633              		.loc 1 534 0
 634 0000 034A     		ldr	r2, .L58
 635 0002 5369     		ldr	r3, [r2, #20]
 636 0004 43F00043 		orr	r3, r3, #-2147483648
 637 0008 5361     		str	r3, [r2, #20]
 537:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 638              		.loc 1 537 0
 639 000a 0020     		movs	r0, #0
 640 000c 7047     		bx	lr
 641              	.L59:
 642 000e 00BF     		.align	2
 643              	.L58:
 644 0010 00200240 		.word	1073881088
 645              		.cfi_endproc
 646              	.LFE323:
 648              		.section	.text.HAL_FLASH_OB_Unlock,"ax",%progbits
 649              		.align	1
 650              		.global	HAL_FLASH_OB_Unlock
 651              		.syntax unified
 652              		.thumb
 653              		.thumb_func
 654              		.fpu fpv4-sp-d16
 656              	HAL_FLASH_OB_Unlock:
 657              	.LFB324:
 544:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 658              		.loc 1 544 0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 662              		@ link register save eliminated.
 545:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 663              		.loc 1 545 0
 664 0000 074B     		ldr	r3, .L63
 665 0002 5B69     		ldr	r3, [r3, #20]
 666 0004 13F0804F 		tst	r3, #1073741824
 667 0008 07D0     		beq	.L62
 548:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 668              		.loc 1 548 0
 669 000a 054B     		ldr	r3, .L63
 670 000c 054A     		ldr	r2, .L63+4
 671 000e DA60     		str	r2, [r3, #12]
 549:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 672              		.loc 1 549 0
 673 0010 02F14432 		add	r2, r2, #1145324612
 674 0014 DA60     		str	r2, [r3, #12]
 556:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 675              		.loc 1 556 0
 676 0016 0020     		movs	r0, #0
 677 0018 7047     		bx	lr
 678              	.L62:
 553:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 679              		.loc 1 553 0
 680 001a 0120     		movs	r0, #1
 557:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 681              		.loc 1 557 0
 682 001c 7047     		bx	lr
 683              	.L64:
 684 001e 00BF     		.align	2
 685              	.L63:
 686 0020 00200240 		.word	1073881088
 687 0024 3B2A1908 		.word	135866939
 688              		.cfi_endproc
 689              	.LFE324:
 691              		.section	.text.HAL_FLASH_OB_Lock,"ax",%progbits
 692              		.align	1
 693              		.global	HAL_FLASH_OB_Lock
 694              		.syntax unified
 695              		.thumb
 696              		.thumb_func
 697              		.fpu fpv4-sp-d16
 699              	HAL_FLASH_OB_Lock:
 700              	.LFB325:
 564:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 701              		.loc 1 564 0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 0
 704              		@ frame_needed = 0, uses_anonymous_args = 0
 705              		@ link register save eliminated.
 566:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 706              		.loc 1 566 0
 707 0000 034A     		ldr	r2, .L66
 708 0002 5369     		ldr	r3, [r2, #20]
 709 0004 43F08043 		orr	r3, r3, #1073741824
 710 0008 5361     		str	r3, [r2, #20]
 569:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 711              		.loc 1 569 0
 712 000a 0020     		movs	r0, #0
 713 000c 7047     		bx	lr
 714              	.L67:
 715 000e 00BF     		.align	2
 716              	.L66:
 717 0010 00200240 		.word	1073881088
 718              		.cfi_endproc
 719              	.LFE325:
 721              		.section	.text.HAL_FLASH_GetError,"ax",%progbits
 722              		.align	1
 723              		.global	HAL_FLASH_GetError
 724              		.syntax unified
 725              		.thumb
 726              		.thumb_func
 727              		.fpu fpv4-sp-d16
 729              	HAL_FLASH_GetError:
 730              	.LFB327:
 625:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****    return pFlash.ErrorCode;
 731              		.loc 1 625 0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 0
 734              		@ frame_needed = 0, uses_anonymous_args = 0
 735              		@ link register save eliminated.
 626:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 736              		.loc 1 626 0
 737 0000 014B     		ldr	r3, .L69
 738 0002 5868     		ldr	r0, [r3, #4]
 627:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 739              		.loc 1 627 0
 740 0004 7047     		bx	lr
 741              	.L70:
 742 0006 00BF     		.align	2
 743              	.L69:
 744 0008 00000000 		.word	.LANCHOR0
 745              		.cfi_endproc
 746              	.LFE327:
 748              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 749              		.align	1
 750              		.global	FLASH_WaitForLastOperation
 751              		.syntax unified
 752              		.thumb
 753              		.thumb_func
 754              		.fpu fpv4-sp-d16
 756              	FLASH_WaitForLastOperation:
 757              	.LFB328:
 649:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
 758              		.loc 1 649 0
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 0
 761              		@ frame_needed = 0, uses_anonymous_args = 0
 762              	.LVL58:
 763 0000 38B5     		push	{r3, r4, r5, lr}
 764              		.cfi_def_cfa_offset 16
 765              		.cfi_offset 3, -16
 766              		.cfi_offset 4, -12
 767              		.cfi_offset 5, -8
 768              		.cfi_offset 14, -4
 769 0002 0446     		mov	r4, r0
 654:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   uint32_t error;
 770              		.loc 1 654 0
 771 0004 FFF7FEFF 		bl	HAL_GetTick
 772              	.LVL59:
 773 0008 0546     		mov	r5, r0
 774              	.LVL60:
 775              	.L73:
 657:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 776              		.loc 1 657 0
 777 000a 144B     		ldr	r3, .L82
 778 000c 1B69     		ldr	r3, [r3, #16]
 779 000e 13F4803F 		tst	r3, #65536
 780 0012 09D0     		beq	.L80
 659:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 781              		.loc 1 659 0
 782 0014 B4F1FF3F 		cmp	r4, #-1
 783 0018 F7D0     		beq	.L73
 661:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       {
 784              		.loc 1 661 0
 785 001a FFF7FEFF 		bl	HAL_GetTick
 786              	.LVL61:
 787 001e 401B     		subs	r0, r0, r5
 788 0020 A042     		cmp	r0, r4
 789 0022 F2D3     		bcc	.L73
 663:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       }
 790              		.loc 1 663 0
 791 0024 0320     		movs	r0, #3
 792 0026 16E0     		b	.L74
 793              	.L80:
 668:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 794              		.loc 1 668 0
 795 0028 0C4B     		ldr	r3, .L82
 796 002a 1B69     		ldr	r3, [r3, #16]
 797 002c 4CF2FA32 		movw	r2, #50170
 798              	.LVL62:
 670:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 799              		.loc 1 670 0
 800 0030 1340     		ands	r3, r3, r2
 801              	.LVL63:
 802 0032 09D1     		bne	.L81
 682:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 803              		.loc 1 682 0
 804 0034 094B     		ldr	r3, .L82
 805              	.LVL64:
 806 0036 1B69     		ldr	r3, [r3, #16]
 807 0038 13F0010F 		tst	r3, #1
 808 003c 0CD0     		beq	.L78
 685:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 809              		.loc 1 685 0 discriminator 4
 810 003e 074B     		ldr	r3, .L82
 811 0040 0122     		movs	r2, #1
 812 0042 1A61     		str	r2, [r3, #16]
 689:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 813              		.loc 1 689 0 discriminator 4
 814 0044 0020     		movs	r0, #0
 815 0046 06E0     		b	.L74
 816              	.LVL65:
 817              	.L81:
 673:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 818              		.loc 1 673 0
 819 0048 0549     		ldr	r1, .L82+4
 820 004a 4A68     		ldr	r2, [r1, #4]
 821 004c 1A43     		orrs	r2, r2, r3
 822 004e 4A60     		str	r2, [r1, #4]
 676:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 823              		.loc 1 676 0
 824 0050 024A     		ldr	r2, .L82
 825 0052 1361     		str	r3, [r2, #16]
 678:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 826              		.loc 1 678 0
 827 0054 0120     		movs	r0, #1
 828              	.LVL66:
 829              	.L74:
 690:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 830              		.loc 1 690 0
 831 0056 38BD     		pop	{r3, r4, r5, pc}
 832              	.LVL67:
 833              	.L78:
 689:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 834              		.loc 1 689 0
 835 0058 0020     		movs	r0, #0
 836 005a FCE7     		b	.L74
 837              	.L83:
 838              		.align	2
 839              	.L82:
 840 005c 00200240 		.word	1073881088
 841 0060 00000000 		.word	.LANCHOR0
 842              		.cfi_endproc
 843              	.LFE328:
 845              		.section	.text.HAL_FLASH_Program,"ax",%progbits
 846              		.align	1
 847              		.global	HAL_FLASH_Program
 848              		.syntax unified
 849              		.thumb
 850              		.thumb_func
 851              		.fpu fpv4-sp-d16
 853              	HAL_FLASH_Program:
 854              	.LFB317:
 172:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   HAL_StatusTypeDef status;
 855              		.loc 1 172 0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 0
 858              		@ frame_needed = 0, uses_anonymous_args = 0
 859              	.LVL68:
 860 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 861              		.cfi_def_cfa_offset 24
 862              		.cfi_offset 4, -24
 863              		.cfi_offset 5, -20
 864              		.cfi_offset 6, -16
 865              		.cfi_offset 7, -12
 866              		.cfi_offset 8, -8
 867              		.cfi_offset 14, -4
 868              	.LVL69:
 177:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 869              		.loc 1 177 0
 870 0004 284C     		ldr	r4, .L98
 871 0006 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 872 0008 012C     		cmp	r4, #1
 873 000a 4AD0     		beq	.L92
 874 000c 9846     		mov	r8, r3
 875 000e 1746     		mov	r7, r2
 876 0010 0D46     		mov	r5, r1
 877 0012 0446     		mov	r4, r0
 177:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 878              		.loc 1 177 0 is_stmt 0 discriminator 2
 879 0014 244B     		ldr	r3, .L98
 880 0016 0122     		movs	r2, #1
 881              	.LVL70:
 882 0018 1A70     		strb	r2, [r3]
 183:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 883              		.loc 1 183 0 is_stmt 1 discriminator 2
 884 001a 4CF25030 		movw	r0, #50000
 885              	.LVL71:
 886 001e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 887              	.LVL72:
 185:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   {
 888              		.loc 1 185 0 discriminator 2
 889 0022 0646     		mov	r6, r0
 890 0024 08BB     		cbnz	r0, .L86
 187:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 891              		.loc 1 187 0
 892 0026 204B     		ldr	r3, .L98
 893 0028 0022     		movs	r2, #0
 894 002a 5A60     		str	r2, [r3, #4]
 190:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 895              		.loc 1 190 0
 896 002c 1F4B     		ldr	r3, .L98+4
 897 002e 1B68     		ldr	r3, [r3]
 898 0030 13F4806F 		tst	r3, #1024
 899 0034 1FD0     		beq	.L87
 193:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 900              		.loc 1 193 0
 901 0036 1D4A     		ldr	r2, .L98+4
 902 0038 1368     		ldr	r3, [r2]
 903 003a 23F48063 		bic	r3, r3, #1024
 904 003e 1360     		str	r3, [r2]
 194:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 905              		.loc 1 194 0
 906 0040 194B     		ldr	r3, .L98
 907 0042 0222     		movs	r2, #2
 908 0044 1A77     		strb	r2, [r3, #28]
 909              	.L88:
 201:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 910              		.loc 1 201 0
 911 0046 D4B1     		cbz	r4, .L96
 207:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 912              		.loc 1 207 0
 913 0048 631E     		subs	r3, r4, #1
 914 004a 012B     		cmp	r3, #1
 915 004c 1ED9     		bls	.L97
 174:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 916              		.loc 1 174 0
 917 004e 0024     		movs	r4, #0
 918              	.LVL73:
 919              	.L90:
 224:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 920              		.loc 1 224 0
 921 0050 4CF25030 		movw	r0, #50000
 922 0054 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 923              	.LVL74:
 924 0058 0646     		mov	r6, r0
 925              	.LVL75:
 227:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     {
 926              		.loc 1 227 0
 927 005a 24B1     		cbz	r4, .L91
 229:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 928              		.loc 1 229 0
 929 005c 134A     		ldr	r2, .L98+4
 930 005e 5369     		ldr	r3, [r2, #20]
 931 0060 23EA0404 		bic	r4, r3, r4
 932              	.LVL76:
 933 0064 5461     		str	r4, [r2, #20]
 934              	.L91:
 233:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   }
 935              		.loc 1 233 0
 936 0066 FFF7FEFF 		bl	FLASH_FlushCaches
 937              	.LVL77:
 938              	.L86:
 237:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 939              		.loc 1 237 0
 940 006a 0F4B     		ldr	r3, .L98
 941 006c 0022     		movs	r2, #0
 942 006e 1A70     		strb	r2, [r3]
 943              	.LVL78:
 944              	.L85:
 240:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 945              		.loc 1 240 0
 946 0070 3046     		mov	r0, r6
 947 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 948              	.LVL79:
 949              	.L87:
 198:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 950              		.loc 1 198 0
 951 0076 0C4B     		ldr	r3, .L98
 952 0078 0022     		movs	r2, #0
 953 007a 1A77     		strb	r2, [r3, #28]
 954 007c E3E7     		b	.L88
 955              	.L96:
 204:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       prog_bit = FLASH_CR_PG;
 956              		.loc 1 204 0
 957 007e 3A46     		mov	r2, r7
 958 0080 4346     		mov	r3, r8
 959 0082 2846     		mov	r0, r5
 960              	.LVL80:
 961 0084 FFF7FEFF 		bl	FLASH_Program_DoubleWord
 962              	.LVL81:
 205:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****     }
 963              		.loc 1 205 0
 964 0088 0124     		movs	r4, #1
 965              	.LVL82:
 966 008a E1E7     		b	.L90
 967              	.LVL83:
 968              	.L97:
 210:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 969              		.loc 1 210 0
 970 008c 3946     		mov	r1, r7
 971 008e 2846     		mov	r0, r5
 972              	.LVL84:
 973 0090 FFF7FEFF 		bl	FLASH_Program_Fast
 974              	.LVL85:
 213:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       {
 975              		.loc 1 213 0
 976 0094 022C     		cmp	r4, #2
 977 0096 01D0     		beq	.L94
 174:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 978              		.loc 1 174 0
 979 0098 0024     		movs	r4, #0
 980              	.LVL86:
 981 009a D9E7     		b	.L90
 982              	.LVL87:
 983              	.L94:
 215:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****       }
 984              		.loc 1 215 0
 985 009c 4FF48024 		mov	r4, #262144
 986              	.LVL88:
 987 00a0 D6E7     		b	.L90
 988              	.LVL89:
 989              	.L92:
 177:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 990              		.loc 1 177 0
 991 00a2 0226     		movs	r6, #2
 992 00a4 E4E7     		b	.L85
 993              	.L99:
 994 00a6 00BF     		.align	2
 995              	.L98:
 996 00a8 00000000 		.word	.LANCHOR0
 997 00ac 00200240 		.word	1073881088
 998              		.cfi_endproc
 999              	.LFE317:
 1001              		.section	.text.HAL_FLASH_OB_Launch,"ax",%progbits
 1002              		.align	1
 1003              		.global	HAL_FLASH_OB_Launch
 1004              		.syntax unified
 1005              		.thumb
 1006              		.thumb_func
 1007              		.fpu fpv4-sp-d16
 1009              	HAL_FLASH_OB_Launch:
 1010              	.LFB326:
 576:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c ****   /* Set the bit to force the option byte reloading */
 1011              		.loc 1 576 0
 1012              		.cfi_startproc
 1013              		@ args = 0, pretend = 0, frame = 0
 1014              		@ frame_needed = 0, uses_anonymous_args = 0
 1015 0000 08B5     		push	{r3, lr}
 1016              		.cfi_def_cfa_offset 8
 1017              		.cfi_offset 3, -8
 1018              		.cfi_offset 14, -4
 578:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 1019              		.loc 1 578 0
 1020 0002 054A     		ldr	r2, .L102
 1021 0004 5369     		ldr	r3, [r2, #20]
 1022 0006 43F00063 		orr	r3, r3, #134217728
 1023 000a 5361     		str	r3, [r2, #20]
 581:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** }
 1024              		.loc 1 581 0
 1025 000c 4CF25030 		movw	r0, #50000
 1026 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1027              	.LVL90:
 582:../system/src/stm32l4-hal-driver/stm32l4xx_hal_flash.c **** 
 1028              		.loc 1 582 0
 1029 0014 08BD     		pop	{r3, pc}
 1030              	.L103:
 1031 0016 00BF     		.align	2
 1032              	.L102:
 1033 0018 00200240 		.word	1073881088
 1034              		.cfi_endproc
 1035              	.LFE326:
 1037              		.global	pFlash
 1038              		.section	.data.pFlash,"aw",%progbits
 1039              		.align	2
 1040              		.set	.LANCHOR0,. + 0
 1043              	pFlash:
 1044 0000 00       		.byte	0
 1045 0001 000000   		.space	3
 1046 0004 00000000 		.word	0
 1047 0008 00       		.byte	0
 1048 0009 000000   		.space	3
 1049 000c 00000000 		.word	0
 1050 0010 01000000 		.word	1
 1051 0014 00000000 		.word	0
 1052 0018 00000000 		.word	0
 1053 001c 00       		.byte	0
 1054 001d 000000   		.space	3
 1055              		.text
 1056              	.Letext0:
 1057              		.file 3 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 1058              		.file 4 "../system/include/cmsis/stm32l4xx/core_cm4.h"
 1059              		.file 5 "../system/include/cmsis/stm32l4xx/device/system_stm32l4xx.h"
 1060              		.file 6 "../system/include/cmsis/stm32l4xx/device/stm32l471xx.h"
 1061              		.file 7 "../system/include/stm32l4-hal-driver/stm32l4xx_hal_def.h"
 1062              		.file 8 "../system/include/stm32l4-hal-driver/stm32l4xx_hal_flash.h"
 1063              		.file 9 "../system/include/stm32l4-hal-driver/stm32l4xx_hal.h"
 1064              		.file 10 "../system/include/stm32l4-hal-driver/stm32l4xx_hal_flash_ex.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l4xx_hal_flash.c
     /tmp/ccsGVWyw.s:18     .text.FLASH_Program_DoubleWord:0000000000000000 $t
     /tmp/ccsGVWyw.s:24     .text.FLASH_Program_DoubleWord:0000000000000000 FLASH_Program_DoubleWord
     /tmp/ccsGVWyw.s:65     .text.FLASH_Program_DoubleWord:000000000000001c $d
     /tmp/ccsGVWyw.s:70     .text.FLASH_Program_Fast:0000000000000000 $t
     /tmp/ccsGVWyw.s:76     .text.FLASH_Program_Fast:0000000000000000 FLASH_Program_Fast
     /tmp/ccsGVWyw.s:152    .text.FLASH_Program_Fast:0000000000000030 $d
     /tmp/ccsGVWyw.s:157    .text.HAL_FLASH_Program_IT:0000000000000000 $t
     /tmp/ccsGVWyw.s:164    .text.HAL_FLASH_Program_IT:0000000000000000 HAL_FLASH_Program_IT
     /tmp/ccsGVWyw.s:278    .text.HAL_FLASH_Program_IT:0000000000000080 $d
     /tmp/ccsGVWyw.s:284    .text.HAL_FLASH_EndOfOperationCallback:0000000000000000 $t
     /tmp/ccsGVWyw.s:291    .text.HAL_FLASH_EndOfOperationCallback:0000000000000000 HAL_FLASH_EndOfOperationCallback
     /tmp/ccsGVWyw.s:305    .text.HAL_FLASH_OperationErrorCallback:0000000000000000 $t
     /tmp/ccsGVWyw.s:312    .text.HAL_FLASH_OperationErrorCallback:0000000000000000 HAL_FLASH_OperationErrorCallback
     /tmp/ccsGVWyw.s:326    .text.HAL_FLASH_IRQHandler:0000000000000000 $t
     /tmp/ccsGVWyw.s:333    .text.HAL_FLASH_IRQHandler:0000000000000000 HAL_FLASH_IRQHandler
     /tmp/ccsGVWyw.s:560    .text.HAL_FLASH_IRQHandler:0000000000000128 $d
     /tmp/ccsGVWyw.s:566    .text.HAL_FLASH_Unlock:0000000000000000 $t
     /tmp/ccsGVWyw.s:573    .text.HAL_FLASH_Unlock:0000000000000000 HAL_FLASH_Unlock
     /tmp/ccsGVWyw.s:613    .text.HAL_FLASH_Unlock:0000000000000028 $d
     /tmp/ccsGVWyw.s:619    .text.HAL_FLASH_Lock:0000000000000000 $t
     /tmp/ccsGVWyw.s:626    .text.HAL_FLASH_Lock:0000000000000000 HAL_FLASH_Lock
     /tmp/ccsGVWyw.s:644    .text.HAL_FLASH_Lock:0000000000000010 $d
     /tmp/ccsGVWyw.s:649    .text.HAL_FLASH_OB_Unlock:0000000000000000 $t
     /tmp/ccsGVWyw.s:656    .text.HAL_FLASH_OB_Unlock:0000000000000000 HAL_FLASH_OB_Unlock
     /tmp/ccsGVWyw.s:686    .text.HAL_FLASH_OB_Unlock:0000000000000020 $d
     /tmp/ccsGVWyw.s:692    .text.HAL_FLASH_OB_Lock:0000000000000000 $t
     /tmp/ccsGVWyw.s:699    .text.HAL_FLASH_OB_Lock:0000000000000000 HAL_FLASH_OB_Lock
     /tmp/ccsGVWyw.s:717    .text.HAL_FLASH_OB_Lock:0000000000000010 $d
     /tmp/ccsGVWyw.s:722    .text.HAL_FLASH_GetError:0000000000000000 $t
     /tmp/ccsGVWyw.s:729    .text.HAL_FLASH_GetError:0000000000000000 HAL_FLASH_GetError
     /tmp/ccsGVWyw.s:744    .text.HAL_FLASH_GetError:0000000000000008 $d
     /tmp/ccsGVWyw.s:749    .text.FLASH_WaitForLastOperation:0000000000000000 $t
     /tmp/ccsGVWyw.s:756    .text.FLASH_WaitForLastOperation:0000000000000000 FLASH_WaitForLastOperation
     /tmp/ccsGVWyw.s:840    .text.FLASH_WaitForLastOperation:000000000000005c $d
     /tmp/ccsGVWyw.s:846    .text.HAL_FLASH_Program:0000000000000000 $t
     /tmp/ccsGVWyw.s:853    .text.HAL_FLASH_Program:0000000000000000 HAL_FLASH_Program
     /tmp/ccsGVWyw.s:996    .text.HAL_FLASH_Program:00000000000000a8 $d
     /tmp/ccsGVWyw.s:1002   .text.HAL_FLASH_OB_Launch:0000000000000000 $t
     /tmp/ccsGVWyw.s:1009   .text.HAL_FLASH_OB_Launch:0000000000000000 HAL_FLASH_OB_Launch
     /tmp/ccsGVWyw.s:1033   .text.HAL_FLASH_OB_Launch:0000000000000018 $d
     /tmp/ccsGVWyw.s:1043   .data.pFlash:0000000000000000 pFlash
     /tmp/ccsGVWyw.s:1039   .data.pFlash:0000000000000000 $d
                           .group:0000000000000000 wm4.0.95bc707da9dcffdc6c8c58936cbc8421
                           .group:0000000000000000 wm4.stm32l4xx_hal_conf.h.24.9ebdf529a64add7ef5197540a829be93
                           .group:0000000000000000 wm4.stm32l4xx.h.39.54a1fe1e096c7852edd649652f013a11
                           .group:0000000000000000 wm4.stm32l471xx.h.35.e78ad65c513105dda311dc495ac74d04
                           .group:0000000000000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:0000000000000000 wm4.cmsis_version.h.32.46e8eccfa2cfeaae11d008bb2823a3ed
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.b6144e50d34fc998dd4c2cfb6387cf91
                           .group:0000000000000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:0000000000000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:0000000000000000 wm4.stm32l471xx.h.423.ceac761476affad641a3347d7727acfd
                           .group:0000000000000000 wm4.stm32l4xx.h.197.fb1c68184133668ca24c44c29ba4361f
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.23.c14bec61d389910444dd6f90923a87b3
                           .group:0000000000000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:0000000000000000 wm4.stm32l4xx_hal_def.h.58.ba9880fce6c06e05c42ff3652190ba19
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc.h.158.28a9a8aed9528254d5d00c542977dfd6
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc_ex.h.22.da7044b74af98b061fec57b6c981623c
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio.h.22.cdd02b3dd2d28ab2a58b80abaa62239c
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio_ex.h.22.e3066224621c54896e68c044cff2946f
                           .group:0000000000000000 wm4.stm32l4xx_hal_dma.h.22.13f7e03251508cf372ae373347b36e9b
                           .group:0000000000000000 wm4.stm32l4xx_hal_cortex.h.22.cb70b059ea6d04d060ca379a6d57d1fd
                           .group:0000000000000000 wm4.stm32l4xx_ll_adc.h.22.1a01db9155ec232fb5933b76785afed0
                           .group:0000000000000000 wm4.stm32l4xx_hal_adc.h.321.ee3f28f76fc70066e4cbbd758e576892
                           .group:0000000000000000 wm4.stm32l4xx_hal_adc_ex.h.22.fb5e6d418a426c9b079c9adc15fee3b1
                           .group:0000000000000000 wm4.stm32l4xx_hal_crc.h.22.e28f2dff7c14319a60cfaa8412b63a14
                           .group:0000000000000000 wm4.stm32l4xx_hal_crc_ex.h.22.58aa3be0563eedff5893c4b663184cf2
                           .group:0000000000000000 wm4.stm32l4xx_hal_dac.h.22.74749bf4f9405a5fbfaaf1cc4c06eba3
                           .group:0000000000000000 wm4.stm32l4xx_hal_dac_ex.h.22.4e3cedba5893653c1d8ca689fa739e33
                           .group:0000000000000000 wm4.stm32l4xx_hal_exti.h.22.d0c18acb1f51146e775f234290c1ac27
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.22.80f6973ea14060a68f7ca21c1dd39289
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.847.7bdb45d9d57728034960e0aaf38df4fb
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.22.5cbc76724b1dba5416e985e397b92828
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c_ex.h.22.4c81bf9806badb3d50f1da26b08d305a
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.715.a3aff164d469153c75cf623f9ff49d7a
                           .group:0000000000000000 wm4.stm32l4xx_hal_iwdg.h.22.7e954cf06602114b3daf58f5ffbb9e50
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr.h.22.0049bff0a26f90119451fdfe5f426c51
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr_ex.h.22.3d1049b6827a186d471882b21e35998d
                           .group:0000000000000000 wm4.stm32l4xx_hal_rng.h.22.3da3130b715b6ad6f9d8d49653bdfddb
                           .group:0000000000000000 wm4.stm32l4xx_hal_rtc.h.22.21d64301309237f9b9255a8c80902f7c
                           .group:0000000000000000 wm4.stm32l4xx_hal_rtc_ex.h.22.6c248c3dbae3d1f0fefc4b9faaa2cd0b
                           .group:0000000000000000 wm4.stm32l4xx_hal_rtc.h.977.b3b3c98b50a30362b61b120ec4fce236
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim.h.22.6c7398a1c55179e1de4bfd7d5a7564ac
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim_ex.h.22.1a7b532f5010a085c12eee7e9c7b0c21
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart.h.22.5f632bd044c516c02fe0b49488f063f8
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart_ex.h.22.de11c23890d64b2968c97dd6f5dae21a
                           .group:0000000000000000 wm4.stm32l4xx_hal.h.76.993cab68f7f350dd05a21a919b3be96f

UNDEFINED SYMBOLS
FLASH_PageErase
FLASH_FlushCaches
HAL_GetTick
