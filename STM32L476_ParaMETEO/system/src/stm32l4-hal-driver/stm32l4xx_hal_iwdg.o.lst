   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32l4xx_hal_iwdg.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_IWDG_Init,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_IWDG_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_IWDG_Init:
  26              	.LFB317:
  27              		.file 1 "../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c"
   1:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /**
   2:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   ******************************************************************************
   3:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @file    stm32l4xx_hal_iwdg.c
   4:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @author  MCD Application Team
   5:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @brief   IWDG HAL module driver.
   6:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *          This file provides firmware functions to manage the following
   7:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *          functionalities of the Independent Watchdog (IWDG) peripheral:
   8:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *           + Initialization and Start functions
   9:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *           + IO operation functions
  10:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *
  11:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   @verbatim
  12:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   ==============================================================================
  13:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****                     ##### IWDG Generic features #####
  14:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   ==============================================================================
  15:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   [..]
  16:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     (+) The IWDG can be started by either software or hardware (configurable
  17:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         through option byte).
  18:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
  19:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     (+) The IWDG is clocked by the Low-Speed Internal clock (LSI) and thus stays
  20:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         active even if the main clock fails.
  21:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
  22:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     (+) Once the IWDG is started, the LSI is forced ON and both cannot be
  23:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         disabled. The counter starts counting down from the reset value (0xFFF).
  24:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         When it reaches the end of count value (0x000) a reset signal is
  25:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         generated (IWDG reset).
  26:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
  27:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     (+) Whenever the key value 0x0000 AAAA is written in the IWDG_KR register,
  28:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         the IWDG_RLR value is reloaded into the counter and the watchdog reset
  29:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         is prevented.
  30:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
  31:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     (+) The IWDG is implemented in the VDD voltage domain that is still functional
  32:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         in STOP and STANDBY mode (IWDG reset can wake up the CPU from STANDBY).
  33:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         IWDGRST flag in RCC_CSR register can be used to inform when an IWDG
  34:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         reset occurs.
  35:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
  36:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     (+) Debug mode: When the microcontroller enters debug mode (core halted),
  37:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         the IWDG counter either continues to work normally or stops, depending
  38:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         on DBG_IWDG_STOP configuration bit in DBG module, accessible through
  39:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         __HAL_DBGMCU_FREEZE_IWDG() and __HAL_DBGMCU_UNFREEZE_IWDG() macros.
  40:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
  41:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     [..] Min-max timeout value @32KHz (LSI): ~125us / ~32.7s
  42:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****          The IWDG timeout may vary due to LSI clock frequency dispersion.
  43:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****          STM32L4xx devices provide the capability to measure the LSI clock
  44:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****          frequency (LSI clock is internally connected to TIM16 CH1 input capture).
  45:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****          The measured value can be used to have an IWDG timeout with an
  46:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****          acceptable accuracy.
  47:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
  48:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     [..] Default timeout value (necessary for IWDG_SR status register update):
  49:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****          Constant LSI_VALUE is defined based on the nominal LSI clock frequency.
  50:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****          This frequency being subject to variations as mentioned above, the
  51:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****          default timeout value (defined through constant HAL_IWDG_DEFAULT_TIMEOUT
  52:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****          below) may become too short or too long.
  53:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****          In such cases, this default timeout value can be tuned by redefining
  54:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****          the constant LSI_VALUE at user-application level (based, for instance,
  55:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****          on the measured LSI clock frequency as explained above).
  56:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
  57:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****                      ##### How to use this driver #####
  58:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   ==============================================================================
  59:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   [..]
  60:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     (#) Use IWDG using HAL_IWDG_Init() function to :
  61:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****       (++) Enable instance by writing Start keyword in IWDG_KEY register. LSI
  62:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****            clock is forced ON and IWDG counter starts counting down.
  63:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****       (++) Enable write access to configuration registers:
  64:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****           IWDG_PR, IWDG_RLR and IWDG_WINR.
  65:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****       (++) Configure the IWDG prescaler and counter reload value. This reload
  66:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****            value will be loaded in the IWDG counter each time the watchdog is
  67:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****            reloaded, then the IWDG will start counting down from this value.
  68:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****       (++) Wait for status flags to be reset.
  69:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****       (++) Depending on window parameter:
  70:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         (+++) If Window Init parameter is same as Window register value,
  71:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****              nothing more is done but reload counter value in order to exit
  72:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****              function with exact time base.
  73:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         (+++) Else modify Window register. This will automatically reload
  74:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****              watchdog counter.
  75:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
  76:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     (#) Then the application program must refresh the IWDG counter at regular
  77:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         intervals during normal operation to prevent an MCU reset, using
  78:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****         HAL_IWDG_Refresh() function.
  79:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
  80:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****      *** IWDG HAL driver macros list ***
  81:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****      ====================================
  82:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****      [..]
  83:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****        Below the list of most used macros in IWDG HAL driver:
  84:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****       (+) __HAL_IWDG_START: Enable the IWDG peripheral
  85:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****       (+) __HAL_IWDG_RELOAD_COUNTER: Reloads IWDG counter with value defined in
  86:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****           the reload register
  87:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
  88:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   @endverbatim
  89:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   ******************************************************************************
  90:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @attention
  91:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *
  92:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  93:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * All rights reserved.</center></h2>
  94:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *
  95:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  96:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * the "License"; You may not use this file except in compliance with the
  97:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * License. You may obtain a copy of the License at:
  98:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *                        opensource.org/licenses/BSD-3-Clause
  99:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *
 100:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   ******************************************************************************
 101:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   */
 102:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 103:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /* Includes ------------------------------------------------------------------*/
 104:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** #include "stm32l4xx_hal.h"
 105:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 106:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /** @addtogroup STM32L4xx_HAL_Driver
 107:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @{
 108:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   */
 109:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 110:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** #ifdef HAL_IWDG_MODULE_ENABLED
 111:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /** @addtogroup IWDG
 112:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @brief IWDG HAL module driver.
 113:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @{
 114:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   */
 115:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 116:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /* Private typedef -----------------------------------------------------------*/
 117:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /* Private define ------------------------------------------------------------*/
 118:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /** @defgroup IWDG_Private_Defines IWDG Private Defines
 119:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @{
 120:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   */
 121:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /* Status register needs up to 5 LSI clock periods divided by the clock
 122:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****    prescaler to be updated. The number of LSI clock periods is upper-rounded to
 123:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****    6 for the timeout value calculation.
 124:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****    The timeout value is also calculated using the highest prescaler (256) and
 125:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****    the LSI_VALUE constant. The value of this constant can be changed by the user
 126:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****    to take into account possible LSI clock period variations.
 127:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****    The timeout value is multiplied by 1000 to be converted in milliseconds. */
 128:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** #define HAL_IWDG_DEFAULT_TIMEOUT ((6UL * 256UL * 1000UL) / LSI_VALUE)
 129:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /**
 130:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @}
 131:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   */
 132:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 133:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /* Private macro -------------------------------------------------------------*/
 134:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /* Private variables ---------------------------------------------------------*/
 135:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /* Private function prototypes -----------------------------------------------*/
 136:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /* Exported functions --------------------------------------------------------*/
 137:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 138:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /** @addtogroup IWDG_Exported_Functions
 139:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @{
 140:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   */
 141:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 142:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /** @addtogroup IWDG_Exported_Functions_Group1
 143:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *  @brief    Initialization and Start functions.
 144:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *
 145:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** @verbatim
 146:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****  ===============================================================================
 147:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****           ##### Initialization and Start functions #####
 148:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****  ===============================================================================
 149:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****  [..]  This section provides functions allowing to:
 150:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****       (+) Initialize the IWDG according to the specified parameters in the
 151:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****           IWDG_InitTypeDef of associated handle.
 152:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****       (+) Manage Window option.
 153:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****       (+) Once initialization is performed in HAL_IWDG_Init function, Watchdog
 154:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****           is reloaded in order to exit function with correct time base.
 155:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 156:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** @endverbatim
 157:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @{
 158:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   */
 159:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 160:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /**
 161:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @brief  Initialize the IWDG according to the specified parameters in the
 162:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *         IWDG_InitTypeDef and start watchdog. Before exiting function,
 163:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *         watchdog is refreshed in order to have correct time base.
 164:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
 165:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *                the configuration information for the specified IWDG module.
 166:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @retval HAL status
 167:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   */
 168:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
 169:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** {
  28              		.loc 1 169 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
 170:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   uint32_t tickstart;
 171:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 172:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   /* Check the IWDG handle allocation */
 173:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   if (hiwdg == NULL)
  33              		.loc 1 173 0
  34 0000 40B3     		cbz	r0, .L6
 169:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   uint32_t tickstart;
  35              		.loc 1 169 0
  36 0002 38B5     		push	{r3, r4, r5, lr}
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 3, -16
  39              		.cfi_offset 4, -12
  40              		.cfi_offset 5, -8
  41              		.cfi_offset 14, -4
  42 0004 0446     		mov	r4, r0
 174:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   {
 175:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     return HAL_ERROR;
 176:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   }
 177:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 178:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   /* Check the parameters */
 179:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 180:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 181:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 182:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 183:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 184:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   /* Enable IWDG. LSI is turned on automatically */
 185:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   __HAL_IWDG_START(hiwdg);
  43              		.loc 1 185 0
  44 0006 0368     		ldr	r3, [r0]
  45 0008 4CF6CC42 		movw	r2, #52428
  46 000c 1A60     		str	r2, [r3]
 186:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 187:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
 188:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   0x5555 in KR */
 189:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   IWDG_ENABLE_WRITE_ACCESS(hiwdg);
  47              		.loc 1 189 0
  48 000e 0368     		ldr	r3, [r0]
  49 0010 45F25552 		movw	r2, #21845
  50 0014 1A60     		str	r2, [r3]
 190:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 191:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   /* Write to IWDG registers the Prescaler & Reload values to work with */
 192:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  51              		.loc 1 192 0
  52 0016 0368     		ldr	r3, [r0]
  53 0018 4268     		ldr	r2, [r0, #4]
  54 001a 5A60     		str	r2, [r3, #4]
 193:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   hiwdg->Instance->RLR = hiwdg->Init.Reload;
  55              		.loc 1 193 0
  56 001c 0368     		ldr	r3, [r0]
  57 001e 8268     		ldr	r2, [r0, #8]
  58 0020 9A60     		str	r2, [r3, #8]
 194:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 195:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   /* Check pending flag, if previous update not done, return timeout */
 196:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   tickstart = HAL_GetTick();
  59              		.loc 1 196 0
  60 0022 FFF7FEFF 		bl	HAL_GetTick
  61              	.LVL1:
  62 0026 0546     		mov	r5, r0
  63              	.LVL2:
  64              	.L3:
 197:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 198:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   /* Wait for register to be updated */
 199:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   while (hiwdg->Instance->SR != 0x00u)
  65              		.loc 1 199 0
  66 0028 2368     		ldr	r3, [r4]
  67 002a DA68     		ldr	r2, [r3, #12]
  68 002c 32B1     		cbz	r2, .L12
 200:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   {
 201:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
  69              		.loc 1 201 0
  70 002e FFF7FEFF 		bl	HAL_GetTick
  71              	.LVL3:
  72 0032 401B     		subs	r0, r0, r5
  73 0034 3028     		cmp	r0, #48
  74 0036 F7D9     		bls	.L3
 202:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     {
 203:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****       return HAL_TIMEOUT;
  75              		.loc 1 203 0
  76 0038 0320     		movs	r0, #3
  77              	.L2:
 204:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     }
 205:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   }
 206:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 207:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   /* If window parameter is different than current value, modify window
 208:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   register */
 209:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 210:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   {
 211:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
 212:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     even if window feature is disabled, Watchdog will be reloaded by writing
 213:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     windows register */
 214:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     hiwdg->Instance->WINR = hiwdg->Init.Window;
 215:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   }
 216:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   else
 217:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   {
 218:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     /* Reload IWDG counter with value defined in the reload register */
 219:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****     __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 220:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   }
 221:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 222:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   /* Return function status */
 223:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   return HAL_OK;
 224:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** }
  78              		.loc 1 224 0
  79 003a 38BD     		pop	{r3, r4, r5, pc}
  80              	.LVL4:
  81              	.L12:
 209:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   {
  82              		.loc 1 209 0
  83 003c 1969     		ldr	r1, [r3, #16]
  84 003e E268     		ldr	r2, [r4, #12]
  85 0040 9142     		cmp	r1, r2
  86 0042 02D0     		beq	.L5
 214:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   }
  87              		.loc 1 214 0
  88 0044 1A61     		str	r2, [r3, #16]
 223:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** }
  89              		.loc 1 223 0
  90 0046 0020     		movs	r0, #0
  91 0048 F7E7     		b	.L2
  92              	.L5:
 219:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   }
  93              		.loc 1 219 0
  94 004a 4AF6AA22 		movw	r2, #43690
  95 004e 1A60     		str	r2, [r3]
 223:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** }
  96              		.loc 1 223 0
  97 0050 0020     		movs	r0, #0
  98 0052 F2E7     		b	.L2
  99              	.LVL5:
 100              	.L6:
 101              		.cfi_def_cfa_offset 0
 102              		.cfi_restore 3
 103              		.cfi_restore 4
 104              		.cfi_restore 5
 105              		.cfi_restore 14
 175:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   }
 106              		.loc 1 175 0
 107 0054 0120     		movs	r0, #1
 108              	.LVL6:
 109              		.loc 1 224 0
 110 0056 7047     		bx	lr
 111              		.cfi_endproc
 112              	.LFE317:
 114              		.section	.text.HAL_IWDG_Refresh,"ax",%progbits
 115              		.align	1
 116              		.global	HAL_IWDG_Refresh
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu fpv4-sp-d16
 122              	HAL_IWDG_Refresh:
 123              	.LFB318:
 225:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 226:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /**
 227:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @}
 228:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   */
 229:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 230:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 231:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /** @addtogroup IWDG_Exported_Functions_Group2
 232:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *  @brief   IO operation functions
 233:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *
 234:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** @verbatim
 235:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****  ===============================================================================
 236:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****                       ##### IO operation functions #####
 237:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****  ===============================================================================
 238:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****  [..]  This section provides functions allowing to:
 239:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****       (+) Refresh the IWDG.
 240:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 241:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** @endverbatim
 242:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @{
 243:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   */
 244:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 245:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 246:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** /**
 247:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @brief  Refresh the IWDG.
 248:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
 249:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   *                the configuration information for the specified IWDG module.
 250:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   * @retval HAL status
 251:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   */
 252:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
 253:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** {
 124              		.loc 1 253 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 129              	.LVL7:
 254:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   /* Reload IWDG counter with value defined in the reload register */
 255:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 130              		.loc 1 255 0
 131 0000 0368     		ldr	r3, [r0]
 132 0002 4AF6AA22 		movw	r2, #43690
 133 0006 1A60     		str	r2, [r3]
 256:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** 
 257:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   /* Return function status */
 258:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c ****   return HAL_OK;
 259:../system/src/stm32l4-hal-driver/stm32l4xx_hal_iwdg.c **** }
 134              		.loc 1 259 0
 135 0008 0020     		movs	r0, #0
 136              	.LVL8:
 137 000a 7047     		bx	lr
 138              		.cfi_endproc
 139              	.LFE318:
 141              		.text
 142              	.Letext0:
 143              		.file 2 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 144              		.file 3 "../system/include/cmsis/stm32l4xx/core_cm4.h"
 145              		.file 4 "../system/include/cmsis/stm32l4xx/device/system_stm32l4xx.h"
 146              		.file 5 "../system/include/cmsis/stm32l4xx/device/stm32l471xx.h"
 147              		.file 6 "../system/include/stm32l4-hal-driver/stm32l4xx_hal_def.h"
 148              		.file 7 "../system/include/stm32l4-hal-driver/stm32l4xx_hal_flash.h"
 149              		.file 8 "../system/include/stm32l4-hal-driver/stm32l4xx_hal_iwdg.h"
 150              		.file 9 "../system/include/stm32l4-hal-driver/stm32l4xx_hal.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l4xx_hal_iwdg.c
     /tmp/ccrvtQF6.s:18     .text.HAL_IWDG_Init:0000000000000000 $t
     /tmp/ccrvtQF6.s:25     .text.HAL_IWDG_Init:0000000000000000 HAL_IWDG_Init
     /tmp/ccrvtQF6.s:115    .text.HAL_IWDG_Refresh:0000000000000000 $t
     /tmp/ccrvtQF6.s:122    .text.HAL_IWDG_Refresh:0000000000000000 HAL_IWDG_Refresh
                           .group:0000000000000000 wm4.0.95bc707da9dcffdc6c8c58936cbc8421
                           .group:0000000000000000 wm4.stm32l4xx_hal_conf.h.24.9ebdf529a64add7ef5197540a829be93
                           .group:0000000000000000 wm4.stm32l4xx.h.39.54a1fe1e096c7852edd649652f013a11
                           .group:0000000000000000 wm4.stm32l471xx.h.35.e78ad65c513105dda311dc495ac74d04
                           .group:0000000000000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:0000000000000000 wm4.cmsis_version.h.32.46e8eccfa2cfeaae11d008bb2823a3ed
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.b6144e50d34fc998dd4c2cfb6387cf91
                           .group:0000000000000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:0000000000000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:0000000000000000 wm4.stm32l471xx.h.423.ceac761476affad641a3347d7727acfd
                           .group:0000000000000000 wm4.stm32l4xx.h.197.fb1c68184133668ca24c44c29ba4361f
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.23.c14bec61d389910444dd6f90923a87b3
                           .group:0000000000000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:0000000000000000 wm4.stm32l4xx_hal_def.h.58.ba9880fce6c06e05c42ff3652190ba19
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc.h.158.28a9a8aed9528254d5d00c542977dfd6
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc_ex.h.22.da7044b74af98b061fec57b6c981623c
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio.h.22.cdd02b3dd2d28ab2a58b80abaa62239c
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio_ex.h.22.e3066224621c54896e68c044cff2946f
                           .group:0000000000000000 wm4.stm32l4xx_hal_dma.h.22.13f7e03251508cf372ae373347b36e9b
                           .group:0000000000000000 wm4.stm32l4xx_hal_cortex.h.22.cb70b059ea6d04d060ca379a6d57d1fd
                           .group:0000000000000000 wm4.stm32l4xx_ll_adc.h.22.1a01db9155ec232fb5933b76785afed0
                           .group:0000000000000000 wm4.stm32l4xx_hal_adc.h.321.ee3f28f76fc70066e4cbbd758e576892
                           .group:0000000000000000 wm4.stm32l4xx_hal_adc_ex.h.22.fb5e6d418a426c9b079c9adc15fee3b1
                           .group:0000000000000000 wm4.stm32l4xx_hal_crc.h.22.e28f2dff7c14319a60cfaa8412b63a14
                           .group:0000000000000000 wm4.stm32l4xx_hal_crc_ex.h.22.58aa3be0563eedff5893c4b663184cf2
                           .group:0000000000000000 wm4.stm32l4xx_hal_dac.h.22.74749bf4f9405a5fbfaaf1cc4c06eba3
                           .group:0000000000000000 wm4.stm32l4xx_hal_dac_ex.h.22.4e3cedba5893653c1d8ca689fa739e33
                           .group:0000000000000000 wm4.stm32l4xx_hal_exti.h.22.d0c18acb1f51146e775f234290c1ac27
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.22.80f6973ea14060a68f7ca21c1dd39289
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.847.7bdb45d9d57728034960e0aaf38df4fb
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.22.5cbc76724b1dba5416e985e397b92828
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c_ex.h.22.4c81bf9806badb3d50f1da26b08d305a
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.715.a3aff164d469153c75cf623f9ff49d7a
                           .group:0000000000000000 wm4.stm32l4xx_hal_iwdg.h.22.7e954cf06602114b3daf58f5ffbb9e50
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr.h.22.0049bff0a26f90119451fdfe5f426c51
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr_ex.h.22.3d1049b6827a186d471882b21e35998d
                           .group:0000000000000000 wm4.stm32l4xx_hal_rng.h.22.3da3130b715b6ad6f9d8d49653bdfddb
                           .group:0000000000000000 wm4.stm32l4xx_hal_rtc.h.22.21d64301309237f9b9255a8c80902f7c
                           .group:0000000000000000 wm4.stm32l4xx_hal_rtc_ex.h.22.6c248c3dbae3d1f0fefc4b9faaa2cd0b
                           .group:0000000000000000 wm4.stm32l4xx_hal_rtc.h.977.b3b3c98b50a30362b61b120ec4fce236
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim.h.22.6c7398a1c55179e1de4bfd7d5a7564ac
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim_ex.h.22.1a7b532f5010a085c12eee7e9c7b0c21
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart.h.22.5f632bd044c516c02fe0b49488f063f8
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart_ex.h.22.de11c23890d64b2968c97dd6f5dae21a
                           .group:0000000000000000 wm4.stm32l4xx_hal.h.76.993cab68f7f350dd05a21a919b3be96f

UNDEFINED SYMBOLS
HAL_GetTick
