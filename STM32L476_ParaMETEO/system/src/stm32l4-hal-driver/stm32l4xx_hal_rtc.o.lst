   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32l4xx_hal_rtc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
  18              		.align	1
  19              		.weak	HAL_RTC_MspInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_RTC_MspInit:
  26              	.LFB319:
  27              		.file 1 "../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c"
   1:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
   2:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   ******************************************************************************
   3:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @file    stm32l4xx_hal_rtc.c
   4:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @author  MCD Application Team
   5:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   6:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following
   7:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   8:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *           + Initialization/de-initialization functions
   9:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *           + Calendar (Time and Date) configuration
  10:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *           + Alarms (Alarm A and Alarm B) configuration
  11:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *           + WakeUp Timer configuration
  12:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *           + TimeStamp configuration
  13:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *           + Tampers configuration
  14:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *           + Backup Data Registers configuration
  15:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *           + RTC Tamper and TimeStamp Pins Selection
  16:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *           + Interrupts and flags management
  17:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *
  18:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   @verbatim
  19:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===============================================================================
  20:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                           ##### RTC Operating Condition #####
  21:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===============================================================================
  22:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..] The real-time clock (RTC) and the RTC backup registers can be powered
  23:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        from the VBAT voltage when the main VDD supply is powered off.
  24:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        To retain the content of the RTC backup registers and supply the RTC
  25:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        when VDD is turned off, VBAT pin can be connected to an optional
  26:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        standby voltage supplied by a battery or by another source.
  27:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
  28:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                    ##### Backup Domain Reset #####
  29:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===============================================================================
  30:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..] The backup domain reset sets all RTC registers and the RCC_BDCR register
  31:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        to their reset values.
  32:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        A backup domain reset is generated when one of the following events occurs:
  33:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (#) Software reset, triggered by setting the BDRST bit in the
  34:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         RCC Backup domain control register (RCC_BDCR).
  35:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (#) VDD or VBAT power on, if both supplies have previously been powered off.
  36:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (#) Tamper detection event resets all data backup registers.
  37:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
  38:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                    ##### Backup Domain Access #####
  39:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   ==================================================================
  40:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..] After reset, the backup domain (RTC registers and RTC backup data registers)
  41:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        is protected against possible unwanted write accesses.
  42:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  43:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) Enable the Power Controller (PWR) APB1 interface clock using the
  44:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_RCC_PWR_CLK_ENABLE() function.
  45:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  46:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) Select the RTC clock source using the __HAL_RCC_RTC_CONFIG() function.
  47:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() function.
  48:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
  49:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  50:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (#) Call the function HAL_RCCEx_PeriphCLKConfig with RCC_PERIPHCLK_RTC for
  51:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         PeriphClockSelection and select RTCClockSelection (LSE, LSI or HSEdiv32)
  52:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (#) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() macro.
  53:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
  54:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ##### How to use RTC Driver #####
  55:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===================================================================
  56:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..]
  57:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) Enable the RTC domain access (see description in the section above).
  58:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour
  59:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         format using the HAL_RTC_Init() function.
  60:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
  61:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *** Time and Date configuration ***
  62:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   ===================================
  63:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..]
  64:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime()
  65:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         and HAL_RTC_SetDate() functions.
  66:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions.
  67:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
  68:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *** Alarm configuration ***
  69:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   ===========================
  70:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..]
  71:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function.
  72:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****             You can also configure the RTC Alarm with interrupt mode using the
  73:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****             HAL_RTC_SetAlarm_IT() function.
  74:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
  75:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
  76:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ##### RTC and low power modes #####
  77:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   ==================================================================
  78:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..] The MCU can be woken up from a low power mode by an RTC alternate
  79:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        function.
  80:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B),
  81:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
  82:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        These RTC alternate functions can wake up the system from the Stop and
  83:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        Standby low power modes.
  84:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..] The system can also wake up from low power modes without depending
  85:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        on an external interrupt (Auto-wakeup mode), by using the RTC alarm
  86:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        or the RTC wakeup events.
  87:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..] The RTC provides a programmable time base for waking up from the
  88:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        Stop or Standby mode at regular intervals.
  89:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        Wakeup from STOP and STANDBY modes is possible only when the RTC clock source
  90:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****        is LSE or LSI.
  91:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
  92:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *** Callback registration ***
  93:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   =============================================
  94:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
  95:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..]
  96:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   When The compilation define USE_HAL_RTC_REGISTER_CALLBACKS is set to 0 or
  97:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   not defined, the callback registration feature is not available and all callbacks
  98:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   are set to the corresponding weak functions. This is the recommended configuration
  99:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   in order to optimize memory/code consumption footprint/performances.
 100:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 101:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..]
 102:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   The compilation define  USE_RTC_REGISTER_CALLBACKS when set to 1
 103:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   allows the user to configure dynamically the driver callbacks.
 104:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   Use Function @ref HAL_RTC_RegisterCallback() to register an interrupt callback.
 105:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 106:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..]
 107:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   Function @ref HAL_RTC_RegisterCallback() allows to register following callbacks:
 108:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 109:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
 110:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
 111:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
 112:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
 113:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) SSRUEventCallback            : RTC SSRU Event callback.
 114:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 115:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 116:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
 117:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) Tamper3EventCallback         : RTC Tamper 3 Event callback.
 118:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 119:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 120:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 121:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   and a pointer to the user callback function.
 122:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 123:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..]
 124:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   Use function @ref HAL_RTC_UnRegisterCallback() to reset a callback to the default
 125:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   weak function.
 126:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   @ref HAL_RTC_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 127:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   and the Callback ID.
 128:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   This function allows to reset following callbacks:
 129:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 130:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
 131:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
 132:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
 133:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
 134:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) SSRUEventCallback            : RTC SSRU Event callback.
 135:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 136:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 137:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
 138:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) Tamper3EventCallback         : RTC Tamper 3 Event callback.
 139:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 140:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 141:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 142:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..]
 143:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   By default, after the @ref HAL_RTC_Init() and when the state is HAL_RTC_STATE_RESET,
 144:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   all callbacks are set to the corresponding weak functions :
 145:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   examples @ref AlarmAEventCallback(), @ref TimeStampEventCallback().
 146:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   Exception done for MspInit and MspDeInit callbacks that are reset to the legacy weak function
 147:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   in the @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit() only when these callbacks are null
 148:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   (not registered beforehand).
 149:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   If not, MspInit or MspDeInit are not null, @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit()
 150:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 151:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 152:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..]
 153:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   Callbacks can be registered/unregistered in HAL_RTC_STATE_READY state only.
 154:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 155:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   in HAL_RTC_STATE_READY or HAL_RTC_STATE_RESET state,
 156:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 157:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   In that case first register the MspInit/MspDeInit user callbacks
 158:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   using @ref HAL_RTC_RegisterCallback() before calling @ref HAL_RTC_DeInit()
 159:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   or @ref HAL_RTC_Init() function.
 160:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 161:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   [..]
 162:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   When The compilation define USE_HAL_RTC_REGISTER_CALLBACKS is set to 0 or
 163:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   not defined, the callback registration feature is not available and all callbacks
 164:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   are set to the corresponding weak functions.
 165:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 166:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****    @endverbatim
 167:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   ******************************************************************************
 168:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @attention
 169:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *
 170:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 171:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * All rights reserved.</center></h2>
 172:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *
 173:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 174:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * the "License"; You may not use this file except in compliance with the
 175:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * License. You may obtain a copy of the License at:
 176:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 177:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *
 178:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   ******************************************************************************
 179:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 180:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 181:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 182:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #include "stm32l4xx_hal.h"
 183:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 184:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /** @addtogroup STM32L4xx_HAL_Driver
 185:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @{
 186:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 187:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 188:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 189:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /** @addtogroup RTC
 190:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief RTC HAL module driver
 191:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @{
 192:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 193:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 194:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 195:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 196:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 197:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 198:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 199:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
 200:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 201:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /* Exported functions --------------------------------------------------------*/
 202:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 203:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions
 204:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @{
 205:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 206:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 207:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group1
 208:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  *  @brief    Initialization and Configuration functions
 209:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  *
 210:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** @verbatim
 211:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===============================================================================
 212:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 213:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===============================================================================
 214:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****    [..] This section provides functions allowing to initialize and configure the
 215:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****          RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable
 216:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****          RTC registers Write protection, enter and exit the RTC initialization mode,
 217:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 218:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base.
 219:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 220:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****              (++) A 7-bit asynchronous prescaler and a 15-bit synchronous prescaler.
 221:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the
 222:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                  asynchronous prescaler to a high value to minimize power consumption.
 223:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 224:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 225:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****          (#) To configure the RTC Calendar, user application should enter
 226:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped
 227:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****              and its value can be updated. When the initialization sequence is
 228:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 229:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar
 230:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****              initialization, calendar update or after wakeup from low power modes
 231:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****              the software must first clear the RSF flag. The software must then
 232:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****              wait until it is set again before reading the calendar, which means
 233:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****              that the calendar registers have been correctly copied into the
 234:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****              RTC_TR and RTC_DR shadow registers.The HAL_RTC_WaitForSynchro() function
 235:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 236:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 237:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** @endverbatim
 238:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @{
 239:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 240:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 241:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
 242:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Initialize the RTC peripheral
 243:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
 244:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
 245:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 246:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
 247:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 248:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 249:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 250:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 251:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (hrtc != NULL)
 252:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 253:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Check the parameters */
 254:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 255:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 256:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 257:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 258:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 259:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 260:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 261:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 262:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
 263:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));
 264:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 265:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 266:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
 267:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_BINARY_MODE(hrtc->Init.BinMode));
 268:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_BINARY_MIX_BCDU(hrtc->Init.BinMixBcdU));
 269:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 270:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 271:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 272:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (hrtc->State == HAL_RTC_STATE_RESET)
 273:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 274:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Allocate lock resource and initialize it */
 275:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Lock = HAL_UNLOCKED;
 276:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;             /* Legacy weak
 277:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak
 278:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;        /* Legacy weak
 279:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback;      /* Legacy weak
 280:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
 281:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->SSRUEventCallback            =  HAL_RTCEx_SSRUEventCallback;             /* Legacy weak
 282:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 283:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 284:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(RTC_TAMPER1_SUPPORT)
 285:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;          /* Legacy weak
 286:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* RTC_TAMPER1_SUPPORT */
 287:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;          /* Legacy weak
 288:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(RTC_TAMPER3_SUPPORT)
 289:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;          /* Legacy weak
 290:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* RTC_TAMPER3_SUPPORT */
 291:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 292:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if (hrtc->MspInitCallback == NULL)
 293:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 294:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 295:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
 296:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Init the low level hardware */
 297:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->MspInitCallback(hrtc);
 298:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 299:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if (hrtc->MspDeInitCallback == NULL)
 300:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 301:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 302:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
 303:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
 304:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
 305:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (hrtc->State == HAL_RTC_STATE_RESET)
 306:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 307:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Allocate lock resource and initialize it */
 308:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Lock = HAL_UNLOCKED;
 309:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 310:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Initialize RTC MSP */
 311:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       HAL_RTC_MspInit(hrtc);
 312:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
 313:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
 314:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 315:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
 316:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Process TAMP ip offset from RTC one */
 317:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 318:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 319:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Set RTC state */
 320:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_BUSY;
 321:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 322:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Disable the write protection for RTC registers */
 323:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 324:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 325:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Enter Initialization mode */
 326:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     status = RTC_EnterInitMode(hrtc);
 327:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 328:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (status == HAL_OK)
 329:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 330:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
 331:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
 332:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 333:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #else
 334:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Clear RTC_CR FMT, OSEL and POL Bits */
 335:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 336:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 337:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Set RTC_CR register */
 338:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity)
 339:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 340:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Configure the RTC PRER */
 341:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 342:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 343:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 344:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
 345:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Configure the Binary mode */
 346:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcd
 347:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 348:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 349:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Exit Initialization mode */
 350:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       status = RTC_ExitInitMode(hrtc);
 351:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 352:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if (status == HAL_OK)
 353:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 354:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
 355:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 356:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutR
 357:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #else
 358:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 359:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 360:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 361:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 362:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 363:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 364:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 365:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****           hrtc->State = HAL_RTC_STATE_READY;
 366:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
 367:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
 368:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 369:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 370:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return status;
 371:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 372:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 373:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
 374:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  DeInitialize the RTC peripheral.
 375:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @note   This function does not reset the RTC Backup Data registers.
 376:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
 377:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
 378:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 379:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 380:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 381:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 382:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 383:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 384:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (hrtc != NULL)
 385:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 386:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Check the parameters */
 387:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 388:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 389:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Set RTC state */
 390:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_BUSY;
 391:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 392:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Disable the write protection for RTC registers */
 393:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 394:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 395:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Enter Initialization mode */
 396:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     status = RTC_EnterInitMode(hrtc);
 397:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 398:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (status == HAL_OK)
 399:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 400:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Reset all RTC CR register bits */
 401:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->TR = 0x00000000U;
 402:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->DR = ((uint32_t)(RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 403:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->CR &= 0x00000000U;
 404:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 405:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->WUTR = RTC_WUTR_WUT;
 406:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->PRER = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU));
 407:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->ALRMAR = 0x00000000U;
 408:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->ALRMBR = 0x00000000U;
 409:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->SHIFTR = 0x00000000U;
 410:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->CALR = 0x00000000U;
 411:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->ALRMASSR = 0x00000000U;
 412:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->ALRMBSSR = 0x00000000U;
 413:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 414:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Exit initialization mode */
 415:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       status = RTC_ExitInitMode(hrtc);
 416:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 417:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 418:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if (status == HAL_OK)
 419:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 420:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
 421:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Reset TAMP registers */
 422:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset))->CR1 = 0xFFFF0000U;
 423:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset))->CR2 = 0x00000000U;
 424:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #else
 425:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Reset Tamper configuration register */
 426:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->Instance->TAMPCR = 0x00000000U;
 427:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 428:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Reset Option register */
 429:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->Instance->OR = 0x00000000U;
 430:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 431:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 432:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 433:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 434:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 435:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 436:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         if (hrtc->MspDeInitCallback == NULL)
 437:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         {
 438:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****           hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 439:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         }
 440:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 441:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* DeInit the low level hardware: CLOCK, NVIC.*/
 442:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->MspDeInitCallback(hrtc);
 443:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #else
 444:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* De-Initialize RTC MSP */
 445:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         HAL_RTC_MspDeInit(hrtc);
 446:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 447:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 448:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_RESET;
 449:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 450:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Release Lock */
 451:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 452:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
 453:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
 454:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 455:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 456:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return status;
 457:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 458:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 459:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 460:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
 461:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Register a User RTC Callback
 462:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *         To be used instead of the weak predefined callback
 463:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
 464:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be registered
 465:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 466:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 467:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
 468:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
 469:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      WakeUp Timer Event Callback ID
 470:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 471:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
 472:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER3_EVENT_CB_ID          Tamper 3 Callback ID
 473:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID                Msp Init callback ID
 474:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID              Msp DeInit callback ID
 475:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  pCallback pointer to the Callback function
 476:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
 477:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 478:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_RegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Callb
 479:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 480:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 481:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 482:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (pCallback == NULL)
 483:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 484:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     return HAL_ERROR;
 485:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 486:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 487:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process locked */
 488:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 489:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 490:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (HAL_RTC_STATE_READY == hrtc->State)
 491:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 492:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     switch (CallbackID)
 493:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 494:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_ALARM_A_EVENT_CB_ID :
 495:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->AlarmAEventCallback = pCallback;
 496:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 497:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 498:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_ALARM_B_EVENT_CB_ID :
 499:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->AlarmBEventCallback = pCallback;
 500:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 501:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 502:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 503:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->TimeStampEventCallback = pCallback;
 504:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 505:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 506:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 507:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->WakeUpTimerEventCallback = pCallback;
 508:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 509:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 510:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
 511:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_SSRU_EVENT_CB_ID :
 512:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->SSRUEventCallback = pCallback;
 513:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 514:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 515:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 516:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(RTC_TAMPER1_SUPPORT)
 517:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_TAMPER1_EVENT_CB_ID :
 518:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->Tamper1EventCallback = pCallback;
 519:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 520:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* RTC_TAMPER1_SUPPORT */
 521:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 522:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_TAMPER2_EVENT_CB_ID :
 523:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->Tamper2EventCallback = pCallback;
 524:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 525:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 526:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(RTC_TAMPER3_SUPPORT)
 527:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_TAMPER3_EVENT_CB_ID :
 528:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->Tamper3EventCallback = pCallback;
 529:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 530:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* RTC_TAMPER3_SUPPORT */
 531:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 532:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 533:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->MspInitCallback = pCallback;
 534:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 535:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 536:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 537:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->MspDeInitCallback = pCallback;
 538:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 539:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 540:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       default :
 541:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Return error status */
 542:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         status =  HAL_ERROR;
 543:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 544:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
 545:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 546:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else if (HAL_RTC_STATE_RESET == hrtc->State)
 547:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 548:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     switch (CallbackID)
 549:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 550:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 551:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->MspInitCallback = pCallback;
 552:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 553:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 554:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 555:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->MspDeInitCallback = pCallback;
 556:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 557:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 558:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       default :
 559:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Return error status */
 560:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         status =  HAL_ERROR;
 561:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 562:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
 563:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 564:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else
 565:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 566:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Return error status */
 567:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     status =  HAL_ERROR;
 568:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 569:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 570:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Release Lock */
 571:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 572:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 573:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return status;
 574:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 575:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 576:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
 577:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Unregister an RTC Callback
 578:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *         RTC callback is redirected to the weak predefined callback
 579:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
 580:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be unregistered
 581:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 582:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 583:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
 584:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
 585:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
 586:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_SSRU_EVENT_CB_ID             SSRU Callback ID
 587:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 588:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      WakeUp Timer Event Callback ID
 589:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 590:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
 591:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER3_EVENT_CB_ID          Tamper 3 Callback ID
 592:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID Msp Init callback ID
 593:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID Msp DeInit callback ID
 594:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
 595:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 596:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_UnRegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Cal
 597:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 598:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 599:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 600:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process locked */
 601:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 602:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 603:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (HAL_RTC_STATE_READY == hrtc->State)
 604:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 605:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     switch (CallbackID)
 606:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 607:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_ALARM_A_EVENT_CB_ID :
 608:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->AlarmAEventCallback = HAL_RTC_AlarmAEventCallback;         /* Legacy weak AlarmAEvent
 609:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 610:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 611:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_ALARM_B_EVENT_CB_ID :
 612:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->AlarmBEventCallback = HAL_RTCEx_AlarmBEventCallback;          /* Legacy weak AlarmBEv
 613:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 614:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 615:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 616:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->TimeStampEventCallback = HAL_RTCEx_TimeStampEventCallback;    /* Legacy weak TimeStam
 617:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 618:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 619:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 620:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->WakeUpTimerEventCallback = HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpT
 621:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 622:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 623:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
 624:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_SSRU_EVENT_CB_ID :
 625:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->SSRUEventCallback = HAL_RTCEx_SSRUEventCallback;               /* Legacy weak SSRUEve
 626:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 627:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 628:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 629:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(RTC_TAMPER1_SUPPORT)
 630:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_TAMPER1_EVENT_CB_ID :
 631:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->Tamper1EventCallback = HAL_RTCEx_Tamper1EventCallback;         /* Legacy weak Tamper1
 632:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 633:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* RTC_TAMPER1_SUPPORT */
 634:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 635:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_TAMPER2_EVENT_CB_ID :
 636:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->Tamper2EventCallback = HAL_RTCEx_Tamper2EventCallback;         /* Legacy weak Tamper2
 637:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 638:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 639:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(RTC_TAMPER3_SUPPORT)
 640:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_TAMPER3_EVENT_CB_ID :
 641:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->Tamper3EventCallback = HAL_RTCEx_Tamper3EventCallback;         /* Legacy weak Tamper3
 642:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 643:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* RTC_TAMPER3_SUPPORT */
 644:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 645:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 646:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 647:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 648:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 649:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 650:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 651:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 652:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 653:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       default :
 654:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Return error status */
 655:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         status =  HAL_ERROR;
 656:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 657:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
 658:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 659:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else if (HAL_RTC_STATE_RESET == hrtc->State)
 660:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 661:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     switch (CallbackID)
 662:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 663:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 664:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 665:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 666:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 667:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 668:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 669:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 670:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 671:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       default :
 672:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Return error status */
 673:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         status =  HAL_ERROR;
 674:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         break;
 675:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
 676:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 677:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else
 678:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 679:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Return error status */
 680:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     status =  HAL_ERROR;
 681:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 682:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 683:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Release Lock */
 684:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 685:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 686:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return status;
 687:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 688:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 689:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 690:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
 691:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Initialize the RTC MSP.
 692:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
 693:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval None
 694:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 695:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
 696:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
  28              		.loc 1 696 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
 697:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 698:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   UNUSED(hrtc);
 699:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 700:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 701:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****             the HAL_RTC_MspInit could be implemented in the user file
 702:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****    */
 703:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
  34              		.loc 1 703 0
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE319:
  39              		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
  40              		.align	1
  41              		.weak	HAL_RTC_MspDeInit
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	HAL_RTC_MspDeInit:
  48              	.LFB320:
 704:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 705:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
 706:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  DeInitialize the RTC MSP.
 707:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
 708:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval None
 709:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 710:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef *hrtc)
 711:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
  49              		.loc 1 711 0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53              		@ link register save eliminated.
  54              	.LVL1:
 712:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 713:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   UNUSED(hrtc);
 714:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 715:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 716:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****             the HAL_RTC_MspDeInit could be implemented in the user file
 717:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****    */
 718:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
  55              		.loc 1 718 0
  56 0000 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE320:
  60              		.section	.text.HAL_RTC_DeactivateAlarm,"ax",%progbits
  61              		.align	1
  62              		.global	HAL_RTC_DeactivateAlarm
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	HAL_RTC_DeactivateAlarm:
  69              	.LFB327:
 719:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 720:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
 721:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @}
 722:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 723:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 724:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group2
 725:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  *  @brief   RTC Time and Date functions
 726:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  *
 727:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** @verbatim
 728:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===============================================================================
 729:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
 730:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===============================================================================
 731:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 732:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Time and Date features
 733:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 734:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** @endverbatim
 735:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @{
 736:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 737:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 738:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
 739:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
 740:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Set RTC current time.
 741:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
 742:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
 743:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          if Binary mode is RTC_BINARY_ONLY, this parameter is not used and RTC_SSR will be auto
 744:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****              else sTime->SubSeconds is not used and RTC_SSR will be automatically reset to the A 7-
 745:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Format Format of sTime->Hours, sTime->Minutes and sTime->Seconds.
 746:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          if Binary mode is RTC_BINARY_ONLY, this parameter is not used
 747:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          else this parameter can be one of the following values
 748:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary format
 749:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD format
 750:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
 751:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 752:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 753:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 754:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmpreg;
 755:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   HAL_StatusTypeDef status;
 756:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 757:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #ifdef USE_FULL_ASSERT
 758:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the parameters depending of the Binary mode with 32-bit free-running counter configurati
 759:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) == RTC_BINARY_NONE)
 760:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 761:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Check the parameters */
 762:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_FORMAT(Format));
 763:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 764:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 765:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 766:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 767:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 768:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Locked */
 769:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 770:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 771:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 772:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 773:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 774:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 775:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 776:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Enter Initialization mode */
 777:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   status = RTC_EnterInitMode(hrtc);
 778:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (status == HAL_OK)
 779:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 780:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Check Binary mode ((32-bit free-running counter) */
 781:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 782:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 783:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if (Format == RTC_FORMAT_BIN)
 784:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 785:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 786:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         {
 787:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****           assert_param(IS_RTC_HOUR12(sTime->Hours));
 788:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****           assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 789:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         }
 790:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         else
 791:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         {
 792:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****           sTime->TimeFormat = 0x00U;
 793:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****           assert_param(IS_RTC_HOUR24(sTime->Hours));
 794:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         }
 795:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_MINUTES(sTime->Minutes));
 796:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_SECONDS(sTime->Seconds));
 797:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 798:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 799:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                             ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                             ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 801:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                             (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 802:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 803:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
 804:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       else
 805:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 806:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 807:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         {
 808:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****           assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 809:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****           assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 810:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         }
 811:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         else
 812:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         {
 813:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****           sTime->TimeFormat = 0x00U;
 814:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****           assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 815:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         }
 816:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 817:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 818:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 819:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 820:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 821:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 822:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
 823:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 824:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Set the RTC_TR register */
 825:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 826:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 827:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx f
 828:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 829:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 830:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx f
 831:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 832:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
 833:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 834:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 835:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Exit Initialization mode */
 836:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   status = RTC_ExitInitMode(hrtc);
 837:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 838:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 839:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 840:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 841:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 842:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (status == HAL_OK)
 843:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 844:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 845:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 846:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 847:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Unlocked */
 848:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 849:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 850:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return status;
 851:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 852:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 853:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
 854:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Get RTC current time.
 855:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @note  You can use SubSeconds and SecondFraction (sTime structure fields returned) to convert S
 856:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        value in second fraction ratio with time unit following generic formula:
 857:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        Second fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1)] * ti
 858:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        This conversion can be performed only if no shift operation is pending (ie. SHFP=0) when
 859:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
 860:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
 861:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
 862:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        to ensure consistency between the time and date values.
 863:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
 864:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  sTime
 865:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          if Binary mode is RTC_BINARY_ONLY, sTime->SubSeconds only is updated
 866:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          else
 867:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             Pointer to Time structure with Hours, Minutes and Seconds fields returned
 868:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** *               with input format (BIN or BCD), also SubSeconds field returning the
 869:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** *               RTC_SSR register content and SecondFraction field the Synchronous pre-scaler
 870:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** *               factor to be used for second fraction ratio computation.
 871:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Format Format of sTime->Hours, sTime->Minutes and sTime->Seconds.
 872:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          if Binary mode is RTC_BINARY_ONLY, this parameter is not used
 873:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          else this parameter can be one of the following values:
 874:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary format
 875:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD format
 876:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
 877:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 878:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 879:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 880:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmpreg;
 881:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 882:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   UNUSED(hrtc);
 883:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Get subseconds structure field from the corresponding register*/
 884:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sTime->SubSeconds = READ_REG(RTC->SSR);
 885:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 886:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 887:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 888:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Check the parameters */
 889:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_FORMAT(Format));
 890:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 891:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Get SecondFraction structure field from the corresponding register field*/
 892:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 893:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 894:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Get the TR register */
 895:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 896:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 897:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Fill the structure fields with the read parameters */
 898:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 899:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 900:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 901:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 902:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 903:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Check the input parameters format */
 904:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (Format == RTC_FORMAT_BIN)
 905:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 906:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Convert the time structure parameters to Binary format */
 907:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 908:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 909:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 910:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
 911:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 912:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 913:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return HAL_OK;
 914:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 915:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 916:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
 917:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Set RTC current date.
 918:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
 919:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  sDate Pointer to date structure
 920:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Format Format of sDate->Year, sDate->Month and sDate->Weekday.
 921:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 922:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary format
 923:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD format
 924:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
 925:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
 926:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 927:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 928:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t datetmpreg;
 929:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   HAL_StatusTypeDef status;
 930:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 931:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the parameters */
 932:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 933:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 934:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Locked */
 935:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 936:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 937:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 938:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 939:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 940:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 941:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 942:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 943:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 944:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 945:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 946:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
 947:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 948:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
 949:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
 950:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date));
 951:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 952:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 953:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 954:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 955:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 956:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 957:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else
 958:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 959:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 960:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 961:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 962:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 963:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 964:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 965:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 966:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 967:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 968:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 969:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 970:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 971:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 972:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Enter Initialization mode */
 973:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   status = RTC_EnterInitMode(hrtc);
 974:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (status == HAL_OK)
 975:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 976:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Set the RTC_DR register */
 977:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 978:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 979:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Exit Initialization mode */
 980:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     status = RTC_ExitInitMode(hrtc);
 981:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 982:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 983:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 984:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 985:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 986:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (status == HAL_OK)
 987:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 988:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY ;
 989:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 990:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 991:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Unlocked */
 992:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 993:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 994:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return status;
 995:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 996:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 997:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
 998:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Get RTC current date.
 999:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
1000:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
1001:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
1002:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
1003:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  sDate Pointer to Date structure
1004:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Format Format of sDate->Year, sDate->Month and sDate->Weekday.
1005:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1006:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary format
1007:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD format
1008:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
1009:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
1010:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
1011:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
1012:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t datetmpreg;
1013:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1014:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   UNUSED(hrtc);
1015:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the parameters */
1016:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1017:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1018:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Get the DR register */
1019:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
1020:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1021:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
1022:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
1023:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
1024:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
1025:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
1026:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1027:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the input parameters format */
1028:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
1029:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1030:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
1031:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
1032:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
1033:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
1034:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1035:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return HAL_OK;
1036:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
1037:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1038:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
1039:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @}
1040:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
1041:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1042:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group3
1043:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
1044:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  *
1045:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** @verbatim
1046:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===============================================================================
1047:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
1048:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===============================================================================
1049:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1050:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
1051:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1052:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** @endverbatim
1053:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @{
1054:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
1055:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
1056:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm.
1057:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
1058:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1059:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          if Binary mode is RTC_BINARY_ONLY, 3 fields only are used
1060:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             sAlarm->AlarmTime.SubSeconds
1061:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             sAlarm->AlarmSubSecondMask
1062:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             sAlarm->BinaryAutoClr
1063:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Format of the entered parameters.
1064:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          if Binary mode is RTC_BINARY_ONLY, this parameter is not used
1065:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          else this parameter can be one of the following values
1066:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary format
1067:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD format
1068:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
1069:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
1070:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
1071:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
1072:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmpreg = 0, binaryMode;
1073:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1074:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1075:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1076:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1077:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #ifdef  USE_FULL_ASSERT
1078:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the parameters depending of the Binary mode (32-bit free-running counter configuration).
1079:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) == RTC_BINARY_NONE)
1080:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1081:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_FORMAT(Format));
1082:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1083:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1084:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1085:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1086:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1087:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1088:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) == RTC_BINARY_ONLY)
1089:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1090:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM_SUB_SECOND_BINARY_MASK(sAlarm->AlarmSubSecondMask));
1091:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARMSUBSECONDBIN_AUTOCLR(sAlarm->BinaryAutoClr));
1092:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1093:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else /* RTC_BINARY_MIX */
1094:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1095:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_FORMAT(Format));
1096:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1097:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1098:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1099:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* In Binary Mix Mode, the RTC can not generate an alarm on a match involving all calendar item
1100:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->IC
1101:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1102:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
1103:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1104:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Get Binary mode (32-bit free-running counter configuration) */
1105:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
1106:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1107:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (binaryMode != RTC_BINARY_ONLY)
1108:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1109:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (Format == RTC_FORMAT_BIN)
1110:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1111:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
1112:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1113:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1114:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1115:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1116:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       else
1117:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1118:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         sAlarm->AlarmTime.TimeFormat = 0x00U;
1119:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1120:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1121:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1122:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1123:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1124:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1125:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1126:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1127:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1128:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       else
1129:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1130:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1131:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1132:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
1133:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
1134:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
1135:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
1136:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
1137:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1138:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)sAlarm->AlarmMask));
1139:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1140:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     else /* format BCD */
1141:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1142:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
1143:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1144:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1145:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1146:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1147:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       else
1148:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1149:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         sAlarm->AlarmTime.TimeFormat = 0x00U;
1150:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1151:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1152:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1153:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1154:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1155:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1156:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #ifdef  USE_FULL_ASSERT
1157:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1158:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1159:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1160:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1161:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       else
1162:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1163:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1164:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1165:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1166:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* USE_FULL_ASSERT */
1167:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
1168:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
1169:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
1170:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
1171:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
1172:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1173:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)sAlarm->AlarmMask));
1174:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1175:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1176:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1177:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1178:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1179:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1180:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Configure the Alarm register */
1181:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (sAlarm->Alarm == RTC_ALARM_A)
1182:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1183:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1184:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1185:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
1186:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1187:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Clear flag alarm A */
1188:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
1189:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1190:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (binaryMode == RTC_BINARY_ONLY)
1191:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1192:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
1193:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1194:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     else
1195:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1196:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       WRITE_REG(RTC->ALRMAR, tmpreg);
1197:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
1198:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1199:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1200:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
1201:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1202:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1203:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     SET_BIT(RTC->CR, RTC_CR_ALRAE);
1204:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1205:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else
1206:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1207:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1208:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1209:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
1210:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1211:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Clear flag alarm B */
1212:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
1213:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1214:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (binaryMode == RTC_BINARY_ONLY)
1215:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1216:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
1217:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1218:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     else
1219:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1220:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       WRITE_REG(RTC->ALRMBR, tmpreg);
1221:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       WRITE_REG(RTC->ALRMBSSR,  sAlarm->AlarmSubSecondMask);
1222:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1223:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1224:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
1225:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1226:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1227:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     SET_BIT(RTC->CR, RTC_CR_ALRBE);
1228:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1229:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1230:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1231:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1232:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1233:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Change RTC state */
1234:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1235:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1236:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Unlocked */
1237:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1238:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1239:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return HAL_OK;
1240:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
1241:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1242:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
1243:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm with Interrupt.
1244:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
1245:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1246:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          if Binary mode is RTC_BINARY_ONLY, 3 fields only are used
1247:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             sAlarm->AlarmTime.SubSeconds
1248:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             sAlarm->AlarmSubSecondMask
1249:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             sAlarm->BinaryAutoClr
1250:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1251:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          if Binary mode is RTC_BINARY_ONLY, this parameter is not used
1252:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          else this parameter can be one of the following values
1253:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary format
1254:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD format
1255:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
1256:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
1257:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
1258:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
1259:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmpreg = 0, binaryMode;
1260:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1261:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Locked */
1262:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1263:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1264:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1265:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #ifdef  USE_FULL_ASSERT
1266:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the parameters depending of the Binary mode (32-bit free-running counter configuration).
1267:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) == RTC_BINARY_NONE)
1268:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1269:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_FORMAT(Format));
1270:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1271:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1272:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1273:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1274:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1275:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1276:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) == RTC_BINARY_ONLY)
1277:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1278:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM_SUB_SECOND_BINARY_MASK(sAlarm->AlarmSubSecondMask));
1279:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARMSUBSECONDBIN_AUTOCLR(sAlarm->BinaryAutoClr));
1280:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1281:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else /* RTC_BINARY_MIX */
1282:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1283:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_FORMAT(Format));
1284:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1285:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1286:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1287:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* In Binary Mix Mode, the RTC can not generate an alarm on a match involving all calendar item
1288:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->IC
1289:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1290:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
1291:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1292:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Get Binary mode (32-bit free-running counter configuration) */
1293:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
1294:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1295:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (binaryMode != RTC_BINARY_ONLY)
1296:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1297:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (Format == RTC_FORMAT_BIN)
1298:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1299:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
1300:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1301:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1302:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1303:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1304:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       else
1305:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1306:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         sAlarm->AlarmTime.TimeFormat = 0x00U;
1307:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1308:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1309:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1310:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1311:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1312:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1313:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1314:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1315:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1316:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       else
1317:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1318:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1319:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1320:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
1321:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
1322:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
1323:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
1324:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
1325:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1326:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)sAlarm->AlarmMask));
1327:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1328:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     else /* Format BCD */
1329:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1330:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
1331:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1332:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1333:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1334:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1335:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       else
1336:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1337:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         sAlarm->AlarmTime.TimeFormat = 0x00U;
1338:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1339:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1340:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1341:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1342:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1343:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1344:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #ifdef  USE_FULL_ASSERT
1345:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1346:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1347:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1348:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1349:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       else
1350:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1351:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1352:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1353:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1354:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* USE_FULL_ASSERT */
1355:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
1356:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
1357:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
1358:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
1359:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
1360:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1361:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)sAlarm->AlarmMask));
1362:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1363:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1364:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1365:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1366:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1367:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1368:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1369:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Configure the Alarm register */
1370:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (sAlarm->Alarm == RTC_ALARM_A)
1371:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1372:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1373:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
1374:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Clear flag alarm A */
1375:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
1376:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1377:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (binaryMode == RTC_BINARY_ONLY)
1378:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1379:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
1380:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1381:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     else
1382:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1383:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       WRITE_REG(RTC->ALRMAR, tmpreg);
1384:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
1385:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1386:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1387:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
1388:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1389:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1390:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
1391:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1392:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else
1393:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1394:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1395:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
1396:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Clear flag alarm B */
1397:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
1398:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1399:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (binaryMode == RTC_BINARY_ONLY)
1400:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1401:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
1402:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1403:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     else
1404:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1405:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       WRITE_REG(RTC->ALRMBR, tmpreg);
1406:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
1407:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1408:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1409:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
1410:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1411:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1412:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
1413:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1414:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1415:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
1416:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_IT();
1417:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
1418:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1419:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1420:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1421:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1422:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1423:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1424:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Unlocked */
1425:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1426:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1427:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return HAL_OK;
1428:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
1429:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1430:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #else /* #if defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
1431:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1432:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
1433:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Set RTC current time.
1434:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
1435:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
1436:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1437:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1438:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
1439:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
1440:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
1441:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
1442:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
1443:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
1444:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmpreg;
1445:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   HAL_StatusTypeDef status;
1446:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1447:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the parameters */
1448:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1449:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
1450:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
1451:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1452:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Locked */
1453:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1454:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1455:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1456:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1457:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1458:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1459:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1460:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Enter Initialization mode */
1461:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   status = RTC_EnterInitMode(hrtc);
1462:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (status == HAL_OK)
1463:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1464:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (Format == RTC_FORMAT_BIN)
1465:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1466:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
1467:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1468:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR12(sTime->Hours));
1469:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
1470:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1471:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       else
1472:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1473:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         sTime->TimeFormat = 0x00U;
1474:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(sTime->Hours));
1475:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1476:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_MINUTES(sTime->Minutes));
1477:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_SECONDS(sTime->Seconds));
1478:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1479:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
1480:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
1481:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
1482:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                           (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
1483:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1484:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     else
1485:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1486:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
1487:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1488:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
1489:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
1490:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1491:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       else
1492:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1493:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         sTime->TimeFormat = 0x00U;
1494:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
1495:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1496:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
1497:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
1498:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
1499:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
1500:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
1501:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
1502:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1503:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1504:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Set the RTC_TR register */
1505:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
1506:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1507:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Clear the bits to be configured */
1508:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
1509:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1510:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the RTC_CR register */
1511:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
1512:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1513:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Exit Initialization mode */
1514:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     status = RTC_ExitInitMode(hrtc);
1515:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1516:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1517:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1518:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1519:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1520:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (status == HAL_OK)
1521:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1522:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
1523:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1524:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1525:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Unlocked */
1526:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1527:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1528:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return status;
1529:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
1530:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1531:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
1532:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Get RTC current time.
1533:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @note  You can use SubSeconds and SecondFraction (sTime structure fields returned) to convert S
1534:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        value in second fraction ratio with time unit following generic formula:
1535:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        Second fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1)] * ti
1536:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        This conversion can be performed only if no shift operation is pending (ie. SHFP=0) when
1537:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
1538:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
1539:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
1540:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        to ensure consistency between the time and date values.
1541:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
1542:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure with Hours, Minutes and Seconds fields returned
1543:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *                with input format (BIN or BCD), also SubSeconds field returning the
1544:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *                RTC_SSR register content and SecondFraction field the Synchronous pre-scaler
1545:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *                factor to be used for second fraction ratio computation.
1546:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1547:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1548:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
1549:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
1550:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
1551:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
1552:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
1553:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
1554:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmpreg;
1555:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1556:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the parameters */
1557:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1558:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1559:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Get subseconds structure field from the corresponding register*/
1560:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
1561:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1562:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Get SecondFraction structure field from the corresponding register field*/
1563:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
1564:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1565:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Get the TR register */
1566:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
1567:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1568:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
1569:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
1570:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
1571:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
1572:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
1573:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1574:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the input parameters format */
1575:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
1576:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1577:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Convert the time structure parameters to Binary format */
1578:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
1579:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
1580:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
1581:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1582:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1583:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return HAL_OK;
1584:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
1585:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1586:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
1587:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Set RTC current date.
1588:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
1589:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  sDate Pointer to date structure
1590:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Format specifies the format of the entered parameters.
1591:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1592:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
1593:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
1594:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
1595:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
1596:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
1597:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
1598:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t datetmpreg;
1599:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   HAL_StatusTypeDef status;
1600:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1601:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the parameters */
1602:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1603:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1604:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Locked */
1605:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1606:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1607:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1608:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1609:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
1610:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1611:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
1612:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1613:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1614:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
1615:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1616:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
1617:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1618:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
1619:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
1620:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date));
1621:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1622:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
1623:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
1624:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
1625:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
1626:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1627:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else
1628:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1629:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
1630:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
1631:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
1632:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1633:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
1634:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
1635:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
1636:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
1637:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1638:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1639:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1640:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1641:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1642:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Enter Initialization mode */
1643:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   status = RTC_EnterInitMode(hrtc);
1644:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (status == HAL_OK)
1645:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1646:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Set the RTC_DR register */
1647:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
1648:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1649:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Exit Initialization mode */
1650:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     status = RTC_ExitInitMode(hrtc);
1651:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1652:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1653:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1654:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1655:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1656:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (status == HAL_OK)
1657:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1658:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY ;
1659:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1660:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1661:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Unlocked */
1662:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1663:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1664:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return status;
1665:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
1666:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1667:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
1668:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Get RTC current date.
1669:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
1670:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
1671:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
1672:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
1673:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  sDate Pointer to Date structure
1674:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1675:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1676:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN:  Binary data format
1677:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD:  BCD data format
1678:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
1679:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
1680:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
1681:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
1682:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t datetmpreg;
1683:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1684:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the parameters */
1685:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1686:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1687:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Get the DR register */
1688:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
1689:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1690:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
1691:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
1692:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
1693:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
1694:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
1695:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1696:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the input parameters format */
1697:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
1698:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1699:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
1700:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
1701:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
1702:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
1703:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1704:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return HAL_OK;
1705:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
1706:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1707:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
1708:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @}
1709:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
1710:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1711:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group3
1712:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
1713:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  *
1714:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** @verbatim
1715:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===============================================================================
1716:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
1717:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===============================================================================
1718:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1719:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
1720:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1721:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** @endverbatim
1722:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @{
1723:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
1724:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
1725:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm.
1726:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
1727:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1728:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1729:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1730:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1731:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1732:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
1733:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
1734:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
1735:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
1736:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmpreg, subsecondtmpreg;
1737:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1738:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the parameters */
1739:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1740:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1741:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1742:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1743:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1744:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1745:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1746:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Locked */
1747:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1748:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1749:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1750:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1751:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
1752:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1753:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
1754:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1755:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1756:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1757:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1758:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     else
1759:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1760:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1761:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1762:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1763:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1764:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1765:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1766:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1767:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1768:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1769:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1770:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     else
1771:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1772:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1773:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1774:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
1775:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
1776:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
1777:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
1778:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
1779:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1780:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1781:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1782:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else
1783:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1784:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
1785:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1786:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1787:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1788:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1789:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     else
1790:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1791:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1792:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1793:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1794:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1795:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1796:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1797:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1798:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #ifdef  USE_FULL_ASSERT
1799:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1800:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1801:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1802:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1803:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     else
1804:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1805:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1806:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1807:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1808:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* USE_FULL_ASSERT */
1809:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
1810:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
1811:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
1812:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
1813:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
1814:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1815:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1816:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1817:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1818:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1819:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
1820:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1821:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1822:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1823:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1824:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Configure the Alarm register */
1825:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (sAlarm->Alarm == RTC_ALARM_A)
1826:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1827:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1828:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
1829:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Clear flag alarm A */
1830:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
1831:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1832:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
1833:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1834:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (RTC_FLAG_ALRAWF)
1835:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     uint32_t tickstart = HAL_GetTick();
1836:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1837:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
1838:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1839:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
1840:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1841:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1842:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1843:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1844:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1845:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1846:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Process Unlocked */
1847:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1848:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1849:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         return HAL_TIMEOUT;
1850:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1851:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1852:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
1853:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1854:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
1855:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1856:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
1857:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1858:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
1859:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1860:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else
1861:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1862:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1863:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
1864:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Clear flag alarm B */
1865:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
1866:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1867:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
1868:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1869:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (RTC_FLAG_ALRBWF)
1870:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     uint32_t tickstart = HAL_GetTick();
1871:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1872:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
1873:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1874:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
1875:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
1876:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1877:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1878:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1879:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1880:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1881:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Process Unlocked */
1882:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1883:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1884:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         return HAL_TIMEOUT;
1885:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
1886:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1887:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
1888:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1889:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
1890:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1891:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
1892:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1893:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
1894:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1895:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1896:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1897:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1898:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1899:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Change RTC state */
1900:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1901:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1902:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Unlocked */
1903:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1904:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1905:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return HAL_OK;
1906:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
1907:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1908:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
1909:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm with Interrupt.
1910:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1911:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
1912:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
1913:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
1914:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1915:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1916:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1917:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1918:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1919:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
1920:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
1921:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
1922:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
1923:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmpreg, subsecondtmpreg;
1924:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1925:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the parameters */
1926:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1927:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1928:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1929:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1930:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1931:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1932:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1933:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Locked */
1934:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1935:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1936:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1937:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1938:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
1939:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1940:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
1941:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1942:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1943:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1944:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1945:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     else
1946:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1947:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1948:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1949:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1950:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1951:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1952:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1953:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1954:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1955:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1956:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1957:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     else
1958:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1959:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1960:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1961:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1962:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
1963:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
1964:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
1965:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
1966:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
1967:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1968:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1969:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
1970:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else
1971:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
1972:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
1973:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1974:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1975:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1976:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1977:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     else
1978:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1979:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1980:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1981:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1982:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1983:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1984:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1985:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1986:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #ifdef  USE_FULL_ASSERT
1987:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1988:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1989:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1990:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1991:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     else
1992:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
1993:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1994:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
1995:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
1996:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* USE_FULL_ASSERT */
1997:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
1998:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
1999:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
2000:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
2001:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
2002:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
2003:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
2004:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2005:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
2006:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
2007:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2008:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
2009:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2010:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2011:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Configure the Alarm register */
2012:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (sAlarm->Alarm == RTC_ALARM_A)
2013:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2014:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
2015:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
2016:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2017:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Clear flag alarm A */
2018:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
2019:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2020:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (RTC_FLAG_ALRAWF)
2021:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     uint32_t tickstart = HAL_GetTick();
2022:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
2023:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
2024:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
2025:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
2026:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
2027:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
2028:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2029:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2030:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
2031:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2032:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Process Unlocked */
2033:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
2034:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2035:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         return HAL_TIMEOUT;
2036:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
2037:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
2038:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
2039:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2040:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
2041:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
2042:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
2043:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
2044:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
2045:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
2046:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
2047:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2048:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else
2049:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2050:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
2051:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
2052:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2053:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Clear flag alarm B */
2054:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
2055:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2056:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (RTC_FLAG_ALRBWF)
2057:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     uint32_t tickstart = HAL_GetTick();
2058:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
2059:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
2060:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
2061:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
2062:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
2063:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
2064:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2065:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2066:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
2067:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2068:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Process Unlocked */
2069:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
2070:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2071:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         return HAL_TIMEOUT;
2072:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
2073:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
2074:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
2075:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2076:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
2077:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
2078:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
2079:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
2080:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
2081:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
2082:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
2083:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2084:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2085:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
2086:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_IT();
2087:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
2088:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2089:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
2090:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2091:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2092:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
2093:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2094:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Unlocked */
2095:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
2096:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2097:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return HAL_OK;
2098:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
2099:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2100:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* #if defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
2101:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2102:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2103:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Deactivate the specified RTC Alarm.
2104:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
2105:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
2106:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
2107:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_ALARM_A:  AlarmA
2108:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *            @arg RTC_ALARM_B:  AlarmB
2109:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
2110:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2111:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
2112:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
  70              		.loc 1 2112 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              	.LVL2:
  75 0000 38B5     		push	{r3, r4, r5, lr}
  76              		.cfi_def_cfa_offset 16
  77              		.cfi_offset 3, -16
  78              		.cfi_offset 4, -12
  79              		.cfi_offset 5, -8
  80              		.cfi_offset 14, -4
2113:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the parameters */
2114:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
2115:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2116:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Locked */
2117:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
  81              		.loc 1 2117 0
  82 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
  83 0006 012B     		cmp	r3, #1
  84 0008 5DD0     		beq	.L11
  85 000a 0446     		mov	r4, r0
  86              		.loc 1 2117 0 is_stmt 0 discriminator 2
  87 000c 0123     		movs	r3, #1
  88 000e 80F82030 		strb	r3, [r0, #32]
2118:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2119:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
  89              		.loc 1 2119 0 is_stmt 1 discriminator 2
  90 0012 0223     		movs	r3, #2
  91 0014 80F82130 		strb	r3, [r0, #33]
2120:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2121:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
2122:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  92              		.loc 1 2122 0 discriminator 2
  93 0018 0368     		ldr	r3, [r0]
  94 001a CA22     		movs	r2, #202
  95 001c 5A62     		str	r2, [r3, #36]
  96 001e 0368     		ldr	r3, [r0]
  97 0020 5322     		movs	r2, #83
  98 0022 5A62     		str	r2, [r3, #36]
2123:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2124:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (Alarm == RTC_ALARM_A)
  99              		.loc 1 2124 0 discriminator 2
 100 0024 B1F5807F 		cmp	r1, #256
 101 0028 21D0     		beq	.L13
 102              	.LBB2:
2125:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2126:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* AlarmA */
2127:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (RTC_ALRMASSR_SSCLR)
2128:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
2129:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
2130:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2131:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
2132:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2133:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
2134:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
2135:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2136:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (RTC_FLAG_ALRAWF)
2137:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     uint32_t tickstart = HAL_GetTick();
2138:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
2139:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
2140:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
2141:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
2142:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
2143:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
2144:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2145:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2146:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
2147:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2148:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Process Unlocked */
2149:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
2150:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2151:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         return HAL_TIMEOUT;
2152:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
2153:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
2154:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
2155:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2156:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else
2157:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2158:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* AlarmB */
2159:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (RTC_ALRMBSSR_SSCLR)
2160:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMASSR_SSCLR);
2161:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
2162:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2163:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 103              		.loc 1 2163 0
 104 002a 0268     		ldr	r2, [r0]
 105 002c 9368     		ldr	r3, [r2, #8]
 106 002e 23F40073 		bic	r3, r3, #512
 107 0032 9360     		str	r3, [r2, #8]
2164:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2165:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
2166:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 108              		.loc 1 2166 0
 109 0034 0268     		ldr	r2, [r0]
 110 0036 9368     		ldr	r3, [r2, #8]
 111 0038 23F40053 		bic	r3, r3, #8192
 112 003c 9360     		str	r3, [r2, #8]
2167:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2168:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined (RTC_FLAG_ALRBWF)
2169:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     uint32_t tickstart = HAL_GetTick();
 113              		.loc 1 2169 0
 114 003e FFF7FEFF 		bl	HAL_GetTick
 115              	.LVL3:
 116 0042 0546     		mov	r5, r0
 117              	.LVL4:
 118              	.L9:
2170:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
2171:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 119              		.loc 1 2171 0
 120 0044 2368     		ldr	r3, [r4]
 121 0046 DB68     		ldr	r3, [r3, #12]
 122 0048 13F0020F 		tst	r3, #2
 123 004c 31D1     		bne	.L8
2172:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
2173:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 124              		.loc 1 2173 0
 125 004e FFF7FEFF 		bl	HAL_GetTick
 126              	.LVL5:
 127 0052 401B     		subs	r0, r0, r5
 128 0054 B0F57A7F 		cmp	r0, #1000
 129 0058 F4D9     		bls	.L9
2174:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
2175:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
2176:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 130              		.loc 1 2176 0
 131 005a 2368     		ldr	r3, [r4]
 132 005c FF22     		movs	r2, #255
 133 005e 5A62     		str	r2, [r3, #36]
2177:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2178:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 134              		.loc 1 2178 0
 135 0060 0320     		movs	r0, #3
 136 0062 84F82100 		strb	r0, [r4, #33]
2179:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2180:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         /* Process Unlocked */
2181:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 137              		.loc 1 2181 0
 138 0066 0023     		movs	r3, #0
 139 0068 84F82030 		strb	r3, [r4, #32]
2182:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2183:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 140              		.loc 1 2183 0
 141 006c 2AE0     		b	.L4
 142              	.LVL6:
 143              	.L13:
 144              	.LBE2:
 145              	.LBB3:
2131:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 146              		.loc 1 2131 0
 147 006e 0268     		ldr	r2, [r0]
 148 0070 9368     		ldr	r3, [r2, #8]
 149 0072 23F48073 		bic	r3, r3, #256
 150 0076 9360     		str	r3, [r2, #8]
2134:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 151              		.loc 1 2134 0
 152 0078 0268     		ldr	r2, [r0]
 153 007a 9368     		ldr	r3, [r2, #8]
 154 007c 23F48053 		bic	r3, r3, #4096
 155 0080 9360     		str	r3, [r2, #8]
2137:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
 156              		.loc 1 2137 0
 157 0082 FFF7FEFF 		bl	HAL_GetTick
 158              	.LVL7:
 159 0086 0546     		mov	r5, r0
 160              	.LVL8:
 161              	.L6:
2139:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 162              		.loc 1 2139 0
 163 0088 2368     		ldr	r3, [r4]
 164 008a DB68     		ldr	r3, [r3, #12]
 165 008c 13F0010F 		tst	r3, #1
 166 0090 0FD1     		bne	.L8
2141:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 167              		.loc 1 2141 0
 168 0092 FFF7FEFF 		bl	HAL_GetTick
 169              	.LVL9:
 170 0096 401B     		subs	r0, r0, r5
 171 0098 B0F57A7F 		cmp	r0, #1000
 172 009c F4D9     		bls	.L6
2144:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 173              		.loc 1 2144 0
 174 009e 2368     		ldr	r3, [r4]
 175 00a0 FF22     		movs	r2, #255
 176 00a2 5A62     		str	r2, [r3, #36]
2146:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 177              		.loc 1 2146 0
 178 00a4 0320     		movs	r0, #3
 179 00a6 84F82100 		strb	r0, [r4, #33]
2149:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 180              		.loc 1 2149 0
 181 00aa 0023     		movs	r3, #0
 182 00ac 84F82030 		strb	r3, [r4, #32]
2151:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
 183              		.loc 1 2151 0
 184 00b0 08E0     		b	.L4
 185              	.LVL10:
 186              	.L8:
 187              	.LBE3:
2184:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
2185:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
2186:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
2187:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2188:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
2189:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 188              		.loc 1 2189 0
 189 00b2 2368     		ldr	r3, [r4]
 190 00b4 FF22     		movs	r2, #255
 191 00b6 5A62     		str	r2, [r3, #36]
2190:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2191:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 192              		.loc 1 2191 0
 193 00b8 0123     		movs	r3, #1
 194 00ba 84F82130 		strb	r3, [r4, #33]
2192:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2193:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Process Unlocked */
2194:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 195              		.loc 1 2194 0
 196 00be 0020     		movs	r0, #0
 197 00c0 84F82000 		strb	r0, [r4, #32]
 198              	.LVL11:
 199              	.L4:
2195:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2196:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return HAL_OK;
2197:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 200              		.loc 1 2197 0
 201 00c4 38BD     		pop	{r3, r4, r5, pc}
 202              	.LVL12:
 203              	.L11:
2117:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 204              		.loc 1 2117 0
 205 00c6 0220     		movs	r0, #2
 206              	.LVL13:
 207 00c8 FCE7     		b	.L4
 208              		.cfi_endproc
 209              	.LFE327:
 211              		.section	.text.HAL_RTC_DST_Add1Hour,"ax",%progbits
 212              		.align	1
 213              		.global	HAL_RTC_DST_Add1Hour
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 217              		.fpu fpv4-sp-d16
 219              	HAL_RTC_DST_Add1Hour:
 220              	.LFB329:
2198:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2199:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2200:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
2201:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
2202:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  sAlarm Pointer to Date structure
2203:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
2204:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
2205:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             @arg RTC_ALARM_A: AlarmA
2206:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             @arg RTC_ALARM_B: AlarmB
2207:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
2208:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
2209:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
2210:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
2211:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
2212:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2213:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alar
2214:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
2215:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmpreg, subsecondtmpreg;
2216:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2217:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check the parameters */
2218:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
2219:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
2220:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2221:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (Alarm == RTC_ALARM_A)
2222:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2223:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* AlarmA */
2224:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_A;
2225:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2226:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
2227:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
2228:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2229:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Fill the structure with the read parameters */
2230:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU
2231:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMA
2232:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_
2233:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
2234:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
2235:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_D
2236:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
2237:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
2238:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2239:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else
2240:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2241:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_B;
2242:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2243:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
2244:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
2245:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2246:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Fill the structure with the read parameters */
2247:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU
2248:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMB
2249:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_
2250:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
2251:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
2252:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_D
2253:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
2254:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
2255:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2256:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2257:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
2258:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2259:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
2260:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
2261:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
2262:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
2263:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2264:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2265:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return HAL_OK;
2266:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
2267:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2268:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2269:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2270:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Daylight Saving Time, Add one hour to the calendar in one single operation
2271:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *         without going through the initialization procedure.
2272:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
2273:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval None
2274:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2275:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
2276:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 221              		.loc 1 2276 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              		@ link register save eliminated.
 226              	.LVL14:
2277:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   UNUSED(hrtc);
2278:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 227              		.loc 1 2278 0
 228 0000 0368     		ldr	r3, [r0]
 229 0002 CA22     		movs	r2, #202
 230 0004 5A62     		str	r2, [r3, #36]
 231 0006 0368     		ldr	r3, [r0]
 232 0008 5322     		movs	r2, #83
 233 000a 5A62     		str	r2, [r3, #36]
2279:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   SET_BIT(RTC->CR, RTC_CR_ADD1H);
 234              		.loc 1 2279 0
 235 000c 044A     		ldr	r2, .L15
 236 000e 9368     		ldr	r3, [r2, #8]
 237 0010 43F48033 		orr	r3, r3, #65536
 238 0014 9360     		str	r3, [r2, #8]
2280:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 239              		.loc 1 2280 0
 240 0016 0368     		ldr	r3, [r0]
 241 0018 FF22     		movs	r2, #255
 242 001a 5A62     		str	r2, [r3, #36]
2281:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 243              		.loc 1 2281 0
 244 001c 7047     		bx	lr
 245              	.L16:
 246 001e 00BF     		.align	2
 247              	.L15:
 248 0020 00280040 		.word	1073752064
 249              		.cfi_endproc
 250              	.LFE329:
 252              		.section	.text.HAL_RTC_DST_Sub1Hour,"ax",%progbits
 253              		.align	1
 254              		.global	HAL_RTC_DST_Sub1Hour
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 258              		.fpu fpv4-sp-d16
 260              	HAL_RTC_DST_Sub1Hour:
 261              	.LFB330:
2282:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2283:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2284:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Daylight Saving Time, Substract one hour from the calendar in one
2285:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *         single operation without going through the initialization procedure.
2286:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
2287:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval None
2288:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2289:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** void HAL_RTC_DST_Sub1Hour(RTC_HandleTypeDef *hrtc)
2290:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 262              		.loc 1 2290 0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 0
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 266              		@ link register save eliminated.
 267              	.LVL15:
2291:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   UNUSED(hrtc);
2292:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 268              		.loc 1 2292 0
 269 0000 0368     		ldr	r3, [r0]
 270 0002 CA22     		movs	r2, #202
 271 0004 5A62     		str	r2, [r3, #36]
 272 0006 0368     		ldr	r3, [r0]
 273 0008 5322     		movs	r2, #83
 274 000a 5A62     		str	r2, [r3, #36]
2293:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   SET_BIT(RTC->CR, RTC_CR_SUB1H);
 275              		.loc 1 2293 0
 276 000c 044A     		ldr	r2, .L18
 277 000e 9368     		ldr	r3, [r2, #8]
 278 0010 43F40033 		orr	r3, r3, #131072
 279 0014 9360     		str	r3, [r2, #8]
2294:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 280              		.loc 1 2294 0
 281 0016 0368     		ldr	r3, [r0]
 282 0018 FF22     		movs	r2, #255
 283 001a 5A62     		str	r2, [r3, #36]
2295:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 284              		.loc 1 2295 0
 285 001c 7047     		bx	lr
 286              	.L19:
 287 001e 00BF     		.align	2
 288              	.L18:
 289 0020 00280040 		.word	1073752064
 290              		.cfi_endproc
 291              	.LFE330:
 293              		.section	.text.HAL_RTC_DST_SetStoreOperation,"ax",%progbits
 294              		.align	1
 295              		.global	HAL_RTC_DST_SetStoreOperation
 296              		.syntax unified
 297              		.thumb
 298              		.thumb_func
 299              		.fpu fpv4-sp-d16
 301              	HAL_RTC_DST_SetStoreOperation:
 302              	.LFB331:
2296:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2297:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2298:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Daylight Saving Time, Set the store operation bit.
2299:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @note   It can be used by the software in order to memorize the DST status.
2300:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
2301:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval None
2302:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2303:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** void HAL_RTC_DST_SetStoreOperation(RTC_HandleTypeDef *hrtc)
2304:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 303              		.loc 1 2304 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308              	.LVL16:
2305:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   UNUSED(hrtc);
2306:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 309              		.loc 1 2306 0
 310 0000 0368     		ldr	r3, [r0]
 311 0002 CA22     		movs	r2, #202
 312 0004 5A62     		str	r2, [r3, #36]
 313 0006 0368     		ldr	r3, [r0]
 314 0008 5322     		movs	r2, #83
 315 000a 5A62     		str	r2, [r3, #36]
2307:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   SET_BIT(RTC->CR, RTC_CR_BKP);
 316              		.loc 1 2307 0
 317 000c 044A     		ldr	r2, .L21
 318 000e 9368     		ldr	r3, [r2, #8]
 319 0010 43F48023 		orr	r3, r3, #262144
 320 0014 9360     		str	r3, [r2, #8]
2308:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 321              		.loc 1 2308 0
 322 0016 0368     		ldr	r3, [r0]
 323 0018 FF22     		movs	r2, #255
 324 001a 5A62     		str	r2, [r3, #36]
2309:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 325              		.loc 1 2309 0
 326 001c 7047     		bx	lr
 327              	.L22:
 328 001e 00BF     		.align	2
 329              	.L21:
 330 0020 00280040 		.word	1073752064
 331              		.cfi_endproc
 332              	.LFE331:
 334              		.section	.text.HAL_RTC_DST_ClearStoreOperation,"ax",%progbits
 335              		.align	1
 336              		.global	HAL_RTC_DST_ClearStoreOperation
 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 340              		.fpu fpv4-sp-d16
 342              	HAL_RTC_DST_ClearStoreOperation:
 343              	.LFB332:
2310:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2311:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2312:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Daylight Saving Time, Clear the store operation bit.
2313:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
2314:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval None
2315:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2316:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** void HAL_RTC_DST_ClearStoreOperation(RTC_HandleTypeDef *hrtc)
2317:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 344              		.loc 1 2317 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 0
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348              		@ link register save eliminated.
 349              	.LVL17:
2318:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   UNUSED(hrtc);
2319:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 350              		.loc 1 2319 0
 351 0000 0368     		ldr	r3, [r0]
 352 0002 CA22     		movs	r2, #202
 353 0004 5A62     		str	r2, [r3, #36]
 354 0006 0368     		ldr	r3, [r0]
 355 0008 5322     		movs	r2, #83
 356 000a 5A62     		str	r2, [r3, #36]
2320:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 357              		.loc 1 2320 0
 358 000c 044A     		ldr	r2, .L24
 359 000e 9368     		ldr	r3, [r2, #8]
 360 0010 23F48023 		bic	r3, r3, #262144
 361 0014 9360     		str	r3, [r2, #8]
2321:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 362              		.loc 1 2321 0
 363 0016 0368     		ldr	r3, [r0]
 364 0018 FF22     		movs	r2, #255
 365 001a 5A62     		str	r2, [r3, #36]
2322:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 366              		.loc 1 2322 0
 367 001c 7047     		bx	lr
 368              	.L25:
 369 001e 00BF     		.align	2
 370              	.L24:
 371 0020 00280040 		.word	1073752064
 372              		.cfi_endproc
 373              	.LFE332:
 375              		.section	.text.HAL_RTC_DST_ReadStoreOperation,"ax",%progbits
 376              		.align	1
 377              		.global	HAL_RTC_DST_ReadStoreOperation
 378              		.syntax unified
 379              		.thumb
 380              		.thumb_func
 381              		.fpu fpv4-sp-d16
 383              	HAL_RTC_DST_ReadStoreOperation:
 384              	.LFB333:
2323:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2324:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2325:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Daylight Saving Time, Read the store operation bit.
2326:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
2327:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval operation see RTC_StoreOperation_Definitions
2328:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2329:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** uint32_t HAL_RTC_DST_ReadStoreOperation(RTC_HandleTypeDef *hrtc)
2330:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 385              		.loc 1 2330 0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
 388              		@ frame_needed = 0, uses_anonymous_args = 0
 389              		@ link register save eliminated.
 390              	.LVL18:
2331:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   UNUSED(hrtc);
2332:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return READ_BIT(RTC->CR, RTC_CR_BKP);
 391              		.loc 1 2332 0
 392 0000 024B     		ldr	r3, .L27
 393 0002 9868     		ldr	r0, [r3, #8]
 394              	.LVL19:
2333:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 395              		.loc 1 2333 0
 396 0004 00F48020 		and	r0, r0, #262144
 397 0008 7047     		bx	lr
 398              	.L28:
 399 000a 00BF     		.align	2
 400              	.L27:
 401 000c 00280040 		.word	1073752064
 402              		.cfi_endproc
 403              	.LFE333:
 405              		.section	.text.HAL_RTC_AlarmAEventCallback,"ax",%progbits
 406              		.align	1
 407              		.weak	HAL_RTC_AlarmAEventCallback
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 411              		.fpu fpv4-sp-d16
 413              	HAL_RTC_AlarmAEventCallback:
 414              	.LFB335:
2334:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2335:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2336:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Handle Alarm interrupt request.
2337:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
2338:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval None
2339:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2340:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
2341:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
2342:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
2343:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
2344:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2345:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
2346:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Get interrupt status */
2347:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmp = hrtc->Instance->MISR;
2348:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2349:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if ((tmp & RTC_MISR_ALRAMF) != 0u)
2350:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2351:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Clear the AlarmA interrupt pending bit */
2352:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->Instance->SCR = RTC_SCR_CALRAF;
2353:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2354:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
2355:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Call Compare Match registered Callback */
2356:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->AlarmAEventCallback(hrtc);
2357:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
2358:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     HAL_RTC_AlarmAEventCallback(hrtc);
2359:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
2360:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2361:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2362:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if ((tmp & RTC_MISR_ALRBMF) != 0u)
2363:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2364:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Clear the AlarmB interrupt pending bit */
2365:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->Instance->SCR = RTC_SCR_CALRBF;
2366:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2367:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
2368:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Call Compare Match registered Callback */
2369:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->AlarmBEventCallback(hrtc);
2370:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #else
2371:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     HAL_RTCEx_AlarmBEventCallback(hrtc);
2372:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
2373:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2374:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2375:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM3
2376:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2377:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Get the AlarmA interrupt source enable status */
2378:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
2379:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2380:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Get the pending status of the AlarmA Interrupt */
2381:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
2382:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
2383:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Clear the AlarmA interrupt pending bit */
2384:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
2385:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2386:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
2387:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->AlarmAEventCallback(hrtc);
2388:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #else
2389:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
2390:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
2391:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
2392:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2393:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2394:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Get the AlarmB interrupt source enable status */
2395:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
2396:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2397:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Get the pending status of the AlarmB Interrupt */
2398:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
2399:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
2400:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       /* Clear the AlarmB interrupt pending bit */
2401:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
2402:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2403:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
2404:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->AlarmBEventCallback(hrtc);
2405:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #else
2406:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       HAL_RTCEx_AlarmBEventCallback(hrtc);
2407:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
2408:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
2409:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2410:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM
2411:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2412:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Change RTC state */
2413:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
2414:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
2415:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2416:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2417:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Alarm A callback.
2418:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
2419:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval None
2420:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2421:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
2422:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 415              		.loc 1 2422 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 419              		@ link register save eliminated.
 420              	.LVL20:
2423:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
2424:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   UNUSED(hrtc);
2425:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2426:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2427:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****             the HAL_RTC_AlarmAEventCallback could be implemented in the user file
2428:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****    */
2429:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 421              		.loc 1 2429 0
 422 0000 7047     		bx	lr
 423              		.cfi_endproc
 424              	.LFE335:
 426              		.section	.text.HAL_RTC_AlarmIRQHandler,"ax",%progbits
 427              		.align	1
 428              		.global	HAL_RTC_AlarmIRQHandler
 429              		.syntax unified
 430              		.thumb
 431              		.thumb_func
 432              		.fpu fpv4-sp-d16
 434              	HAL_RTC_AlarmIRQHandler:
 435              	.LFB334:
2341:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
 436              		.loc 1 2341 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440              	.LVL21:
 441 0000 10B5     		push	{r4, lr}
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 4, -8
 444              		.cfi_offset 14, -4
 445 0002 0446     		mov	r4, r0
2343:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 446              		.loc 1 2343 0
 447 0004 154B     		ldr	r3, .L36
 448 0006 4FF48022 		mov	r2, #262144
 449 000a 5A61     		str	r2, [r3, #20]
2378:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 450              		.loc 1 2378 0
 451 000c 0368     		ldr	r3, [r0]
 452 000e 9A68     		ldr	r2, [r3, #8]
 453 0010 12F4805F 		tst	r2, #4096
 454 0014 03D0     		beq	.L31
2381:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 455              		.loc 1 2381 0
 456 0016 DA68     		ldr	r2, [r3, #12]
 457 0018 12F4807F 		tst	r2, #256
 458 001c 0CD1     		bne	.L34
 459              	.LVL22:
 460              	.L31:
2395:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 461              		.loc 1 2395 0
 462 001e 2368     		ldr	r3, [r4]
 463 0020 9A68     		ldr	r2, [r3, #8]
 464 0022 12F4005F 		tst	r2, #8192
 465 0026 03D0     		beq	.L32
2398:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 466              		.loc 1 2398 0
 467 0028 DA68     		ldr	r2, [r3, #12]
 468 002a 12F4007F 		tst	r2, #512
 469 002e 0BD1     		bne	.L35
 470              	.L32:
2413:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 471              		.loc 1 2413 0
 472 0030 0123     		movs	r3, #1
 473 0032 84F82130 		strb	r3, [r4, #33]
2414:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 474              		.loc 1 2414 0
 475 0036 10BD     		pop	{r4, pc}
 476              	.LVL23:
 477              	.L34:
2384:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 478              		.loc 1 2384 0
 479 0038 DA68     		ldr	r2, [r3, #12]
 480 003a D2B2     		uxtb	r2, r2
 481 003c 62F4C072 		orn	r2, r2, #384
 482 0040 DA60     		str	r2, [r3, #12]
2389:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 483              		.loc 1 2389 0
 484 0042 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback
 485              	.LVL24:
 486 0046 EAE7     		b	.L31
 487              	.L35:
2401:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 488              		.loc 1 2401 0
 489 0048 DA68     		ldr	r2, [r3, #12]
 490 004a D2B2     		uxtb	r2, r2
 491 004c 62F42072 		orn	r2, r2, #640
 492 0050 DA60     		str	r2, [r3, #12]
2406:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 493              		.loc 1 2406 0
 494 0052 2046     		mov	r0, r4
 495 0054 FFF7FEFF 		bl	HAL_RTCEx_AlarmBEventCallback
 496              	.LVL25:
 497 0058 EAE7     		b	.L32
 498              	.L37:
 499 005a 00BF     		.align	2
 500              	.L36:
 501 005c 00040140 		.word	1073808384
 502              		.cfi_endproc
 503              	.LFE334:
 505              		.section	.text.HAL_RTC_PollForAlarmAEvent,"ax",%progbits
 506              		.align	1
 507              		.global	HAL_RTC_PollForAlarmAEvent
 508              		.syntax unified
 509              		.thumb
 510              		.thumb_func
 511              		.fpu fpv4-sp-d16
 513              	HAL_RTC_PollForAlarmAEvent:
 514              	.LFB336:
2430:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2431:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2432:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Handle AlarmA Polling request.
2433:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
2434:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Timeout Timeout duration
2435:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
2436:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2437:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
2438:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 515              		.loc 1 2438 0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 0
 518              		@ frame_needed = 0, uses_anonymous_args = 0
 519              	.LVL26:
 520 0000 70B5     		push	{r4, r5, r6, lr}
 521              		.cfi_def_cfa_offset 16
 522              		.cfi_offset 4, -16
 523              		.cfi_offset 5, -12
 524              		.cfi_offset 6, -8
 525              		.cfi_offset 14, -4
 526 0002 0446     		mov	r4, r0
 527 0004 0D46     		mov	r5, r1
2439:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2440:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tickstart = HAL_GetTick();
 528              		.loc 1 2440 0
 529 0006 FFF7FEFF 		bl	HAL_GetTick
 530              	.LVL27:
 531 000a 0646     		mov	r6, r0
 532              	.LVL28:
 533              	.L40:
2441:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2442:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == 0U)
 534              		.loc 1 2442 0
 535 000c 2368     		ldr	r3, [r4]
 536 000e DA68     		ldr	r2, [r3, #12]
 537 0010 12F4807F 		tst	r2, #256
 538 0014 0DD1     		bne	.L45
2443:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2444:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (Timeout != HAL_MAX_DELAY)
 539              		.loc 1 2444 0
 540 0016 B5F1FF3F 		cmp	r5, #-1
 541 001a F7D0     		beq	.L40
2445:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
2446:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 542              		.loc 1 2446 0
 543 001c FFF7FEFF 		bl	HAL_GetTick
 544              	.LVL29:
 545 0020 801B     		subs	r0, r0, r6
 546 0022 A842     		cmp	r0, r5
 547 0024 01D8     		bhi	.L41
 548              		.loc 1 2446 0 is_stmt 0 discriminator 1
 549 0026 002D     		cmp	r5, #0
 550 0028 F0D1     		bne	.L40
 551              	.L41:
2447:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
2448:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 552              		.loc 1 2448 0 is_stmt 1
 553 002a 0320     		movs	r0, #3
 554 002c 84F82100 		strb	r0, [r4, #33]
2449:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 555              		.loc 1 2449 0
 556 0030 08E0     		b	.L42
 557              	.L45:
2450:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
2451:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
2452:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2453:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2454:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Clear the Alarm interrupt pending bit */
2455:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 558              		.loc 1 2455 0
 559 0032 DA68     		ldr	r2, [r3, #12]
 560 0034 D2B2     		uxtb	r2, r2
 561 0036 62F4C072 		orn	r2, r2, #384
 562 003a DA60     		str	r2, [r3, #12]
2456:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2457:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Change RTC state */
2458:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 563              		.loc 1 2458 0
 564 003c 0123     		movs	r3, #1
 565 003e 84F82130 		strb	r3, [r4, #33]
2459:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2460:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return HAL_OK;
 566              		.loc 1 2460 0
 567 0042 0020     		movs	r0, #0
 568              	.L42:
2461:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 569              		.loc 1 2461 0
 570 0044 70BD     		pop	{r4, r5, r6, pc}
 571              		.cfi_endproc
 572              	.LFE336:
 574              		.section	.text.HAL_RTC_WaitForSynchro,"ax",%progbits
 575              		.align	1
 576              		.global	HAL_RTC_WaitForSynchro
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 580              		.fpu fpv4-sp-d16
 582              	HAL_RTC_WaitForSynchro:
 583              	.LFB337:
2462:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2463:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2464:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @}
2465:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2466:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2467:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group4
2468:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  *  @brief   Peripheral Control functions
2469:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  *
2470:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** @verbatim
2471:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===============================================================================
2472:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
2473:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===============================================================================
2474:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     [..]
2475:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     This subsection provides functions allowing to
2476:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
2477:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2478:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** @endverbatim
2479:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @{
2480:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2481:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2482:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2483:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Wait until the RTC Time and Date registers (RTC_TR and RTC_DR) are
2484:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *         synchronized with RTC APB clock.
2485:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the
2486:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
2487:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar
2488:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes
2489:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *         the software must first clear the RSF flag.
2490:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *         The software must then wait until it is set again before reading
2491:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *         the calendar, which means that the calendar registers have been
2492:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.
2493:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
2494:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
2495:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2496:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
2497:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 584              		.loc 1 2497 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              	.LVL30:
 589 0000 38B5     		push	{r3, r4, r5, lr}
 590              		.cfi_def_cfa_offset 16
 591              		.cfi_offset 3, -16
 592              		.cfi_offset 4, -12
 593              		.cfi_offset 5, -8
 594              		.cfi_offset 14, -4
 595 0002 0446     		mov	r4, r0
2498:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tickstart;
2499:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2500:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Clear RSF flag */
2501:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
2502:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
2503:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #else
2504:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 596              		.loc 1 2504 0
 597 0004 0268     		ldr	r2, [r0]
 598 0006 D368     		ldr	r3, [r2, #12]
 599 0008 23F0A003 		bic	r3, r3, #160
 600 000c D360     		str	r3, [r2, #12]
2505:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
2506:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2507:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   tickstart = HAL_GetTick();
 601              		.loc 1 2507 0
 602 000e FFF7FEFF 		bl	HAL_GetTick
 603              	.LVL31:
 604 0012 0546     		mov	r5, r0
 605              	.LVL32:
 606              	.L47:
2508:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2509:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Wait the registers to be synchronised */
2510:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
2511:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
2512:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #else
2513:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 607              		.loc 1 2513 0
 608 0014 2368     		ldr	r3, [r4]
 609 0016 DB68     		ldr	r3, [r3, #12]
 610 0018 13F0200F 		tst	r3, #32
 611 001c 07D1     		bne	.L52
2514:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
2515:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2516:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 612              		.loc 1 2516 0
 613 001e FFF7FEFF 		bl	HAL_GetTick
 614              	.LVL33:
 615 0022 401B     		subs	r0, r0, r5
 616 0024 B0F57A7F 		cmp	r0, #1000
 617 0028 F4D9     		bls	.L47
2517:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
2518:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       return HAL_TIMEOUT;
 618              		.loc 1 2518 0
 619 002a 0320     		movs	r0, #3
 620 002c 00E0     		b	.L48
 621              	.L52:
2519:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
2520:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2521:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2522:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return HAL_OK;
 622              		.loc 1 2522 0
 623 002e 0020     		movs	r0, #0
 624              	.L48:
2523:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 625              		.loc 1 2523 0
 626 0030 38BD     		pop	{r3, r4, r5, pc}
 627              		.cfi_endproc
 628              	.LFE337:
 630              		.section	.text.HAL_RTC_GetState,"ax",%progbits
 631              		.align	1
 632              		.global	HAL_RTC_GetState
 633              		.syntax unified
 634              		.thumb
 635              		.thumb_func
 636              		.fpu fpv4-sp-d16
 638              	HAL_RTC_GetState:
 639              	.LFB338:
2524:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2525:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2526:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @}
2527:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2528:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2529:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group5
2530:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  *  @brief   Peripheral State functions
2531:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  *
2532:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** @verbatim
2533:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===============================================================================
2534:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                      ##### Peripheral State functions #####
2535:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****  ===============================================================================
2536:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     [..]
2537:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     This subsection provides functions allowing to
2538:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       (+) Get RTC state
2539:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2540:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** @endverbatim
2541:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @{
2542:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2543:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2544:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Return the RTC handle state.
2545:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
2546:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL state
2547:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2548:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef *hrtc)
2549:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 640              		.loc 1 2549 0
 641              		.cfi_startproc
 642              		@ args = 0, pretend = 0, frame = 0
 643              		@ frame_needed = 0, uses_anonymous_args = 0
 644              		@ link register save eliminated.
 645              	.LVL34:
2550:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Return RTC handle state */
2551:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return hrtc->State;
 646              		.loc 1 2551 0
 647 0000 90F82100 		ldrb	r0, [r0, #33]	@ zero_extendqisi2
 648              	.LVL35:
2552:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 649              		.loc 1 2552 0
 650 0004 7047     		bx	lr
 651              		.cfi_endproc
 652              	.LFE338:
 654              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 655              		.align	1
 656              		.global	RTC_EnterInitMode
 657              		.syntax unified
 658              		.thumb
 659              		.thumb_func
 660              		.fpu fpv4-sp-d16
 662              	RTC_EnterInitMode:
 663              	.LFB339:
2553:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2554:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2555:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @}
2556:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2557:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2558:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2559:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @}
2560:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2561:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2562:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /** @addtogroup RTC_Private_Functions
2563:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @{
2564:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2565:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2566:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Enter the RTC Initialization mode.
2567:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the
2568:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
2569:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
2570:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
2571:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2572:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
2573:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 664              		.loc 1 2573 0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 0, uses_anonymous_args = 0
 668              	.LVL36:
 669 0000 70B5     		push	{r4, r5, r6, lr}
 670              		.cfi_def_cfa_offset 16
 671              		.cfi_offset 4, -16
 672              		.cfi_offset 5, -12
 673              		.cfi_offset 6, -8
 674              		.cfi_offset 14, -4
 675              	.LVL37:
2574:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tickstart;
2575:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
2576:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2577:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
2578:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
2579:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
2580:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2581:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Set the Initialization mode */
2582:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
2583:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2584:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     tickstart = HAL_GetTick();
2585:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
2586:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
2587:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
2588:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
2589:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
2590:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         status = HAL_TIMEOUT;
2591:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
2592:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
2593:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
2594:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2595:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM3
2596:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 676              		.loc 1 2596 0
 677 0002 0368     		ldr	r3, [r0]
 678 0004 DA68     		ldr	r2, [r3, #12]
 679 0006 12F0400F 		tst	r2, #64
 680 000a 02D0     		beq	.L61
2575:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 681              		.loc 1 2575 0
 682 000c 0025     		movs	r5, #0
 683              	.LVL38:
 684              	.L55:
2597:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2598:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Set the Initialization mode */
2599:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
2600:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2601:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     tickstart = HAL_GetTick();
2602:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
2603:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
2604:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
2605:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
2606:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
2607:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         status = HAL_TIMEOUT;
2608:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
2609:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
2610:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
2611:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2612:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM
2613:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2614:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return status;
2615:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 685              		.loc 1 2615 0
 686 000e 2846     		mov	r0, r5
 687 0010 70BD     		pop	{r4, r5, r6, pc}
 688              	.LVL39:
 689              	.L61:
 690 0012 0446     		mov	r4, r0
2599:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 691              		.loc 1 2599 0
 692 0014 4FF0FF32 		mov	r2, #-1
 693 0018 DA60     		str	r2, [r3, #12]
2601:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 694              		.loc 1 2601 0
 695 001a FFF7FEFF 		bl	HAL_GetTick
 696              	.LVL40:
 697 001e 0646     		mov	r6, r0
 698              	.LVL41:
2575:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 699              		.loc 1 2575 0
 700 0020 0025     		movs	r5, #0
 701              	.LVL42:
 702              	.L57:
2603:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 703              		.loc 1 2603 0
 704 0022 2368     		ldr	r3, [r4]
 705 0024 DB68     		ldr	r3, [r3, #12]
 706 0026 13F0400F 		tst	r3, #64
 707 002a F0D1     		bne	.L55
2603:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 708              		.loc 1 2603 0 is_stmt 0 discriminator 1
 709 002c 032D     		cmp	r5, #3
 710 002e EED0     		beq	.L55
2605:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 711              		.loc 1 2605 0 is_stmt 1
 712 0030 FFF7FEFF 		bl	HAL_GetTick
 713              	.LVL43:
 714 0034 801B     		subs	r0, r0, r6
 715 0036 B0F57A7F 		cmp	r0, #1000
 716 003a F2D9     		bls	.L57
 717              	.LVL44:
2608:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
 718              		.loc 1 2608 0
 719 003c 0325     		movs	r5, #3
 720 003e 84F82150 		strb	r5, [r4, #33]
 721 0042 EEE7     		b	.L57
 722              		.cfi_endproc
 723              	.LFE339:
 725              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 726              		.align	1
 727              		.global	RTC_ExitInitMode
 728              		.syntax unified
 729              		.thumb
 730              		.thumb_func
 731              		.fpu fpv4-sp-d16
 733              	RTC_ExitInitMode:
 734              	.LFB340:
2616:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2617:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2618:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Exit the RTC Initialization mode.
2619:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  hrtc RTC handle
2620:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval HAL status
2621:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2622:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
2623:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 735              		.loc 1 2623 0
 736              		.cfi_startproc
 737              		@ args = 0, pretend = 0, frame = 0
 738              		@ frame_needed = 0, uses_anonymous_args = 0
 739              	.LVL45:
 740 0000 10B5     		push	{r4, lr}
 741              		.cfi_def_cfa_offset 8
 742              		.cfi_offset 4, -8
 743              		.cfi_offset 14, -4
 744 0002 0446     		mov	r4, r0
 745              	.LVL46:
2624:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
2625:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2626:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Exit Initialization mode */
2627:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
2628:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
2629:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #else
2630:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* Exit Initialization mode */
2631:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 746              		.loc 1 2631 0
 747 0004 114B     		ldr	r3, .L67
 748 0006 DA68     		ldr	r2, [r3, #12]
 749 0008 22F08002 		bic	r2, r2, #128
 750 000c DA60     		str	r2, [r3, #12]
2632:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
2633:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2634:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   /* If CR_BYPSHAD bit = 0, wait for synchro */
2635:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 751              		.loc 1 2635 0
 752 000e 9B68     		ldr	r3, [r3, #8]
 753 0010 13F0200F 		tst	r3, #32
 754 0014 07D1     		bne	.L63
2636:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2637:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 755              		.loc 1 2637 0
 756 0016 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 757              	.LVL47:
 758 001a 0346     		mov	r3, r0
 759 001c A0B1     		cbz	r0, .L64
2638:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
2639:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 760              		.loc 1 2639 0
 761 001e 0323     		movs	r3, #3
 762 0020 84F82130 		strb	r3, [r4, #33]
 763              	.LVL48:
 764 0024 10E0     		b	.L64
 765              	.LVL49:
 766              	.L63:
2640:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       status = HAL_TIMEOUT;
2641:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
2642:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2643:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
2644:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2645:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Clear BYPSHAD bit */
2646:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 767              		.loc 1 2646 0
 768 0026 094A     		ldr	r2, .L67
 769 0028 9368     		ldr	r3, [r2, #8]
 770 002a 23F02003 		bic	r3, r3, #32
 771 002e 9360     		str	r3, [r2, #8]
2647:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 772              		.loc 1 2647 0
 773 0030 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 774              	.LVL50:
 775 0034 0346     		mov	r3, r0
 776 0036 10B1     		cbz	r0, .L65
2648:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
2649:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 777              		.loc 1 2649 0
 778 0038 0323     		movs	r3, #3
 779 003a 84F82130 		strb	r3, [r4, #33]
 780              	.LVL51:
 781              	.L65:
2650:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       status = HAL_TIMEOUT;
2651:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
2652:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Restore BYPSHAD bit */
2653:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 782              		.loc 1 2653 0
 783 003e 0349     		ldr	r1, .L67
 784 0040 8A68     		ldr	r2, [r1, #8]
 785 0042 42F02002 		orr	r2, r2, #32
 786 0046 8A60     		str	r2, [r1, #8]
 787              	.LVL52:
 788              	.L64:
2654:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2655:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2656:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return status;
2657:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 789              		.loc 1 2657 0
 790 0048 1846     		mov	r0, r3
 791 004a 10BD     		pop	{r4, pc}
 792              	.LVL53:
 793              	.L68:
 794              		.align	2
 795              	.L67:
 796 004c 00280040 		.word	1073752064
 797              		.cfi_endproc
 798              	.LFE340:
 800              		.section	.text.HAL_RTC_Init,"ax",%progbits
 801              		.align	1
 802              		.global	HAL_RTC_Init
 803              		.syntax unified
 804              		.thumb
 805              		.thumb_func
 806              		.fpu fpv4-sp-d16
 808              	HAL_RTC_Init:
 809              	.LFB317:
 247:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 810              		.loc 1 247 0
 811              		.cfi_startproc
 812              		@ args = 0, pretend = 0, frame = 0
 813              		@ frame_needed = 0, uses_anonymous_args = 0
 814              	.LVL54:
 815 0000 38B5     		push	{r3, r4, r5, lr}
 816              		.cfi_def_cfa_offset 16
 817              		.cfi_offset 3, -16
 818              		.cfi_offset 4, -12
 819              		.cfi_offset 5, -8
 820              		.cfi_offset 14, -4
 821              	.LVL55:
 251:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 822              		.loc 1 251 0
 823 0002 0028     		cmp	r0, #0
 824 0004 4AD0     		beq	.L72
 825 0006 0446     		mov	r4, r0
 305:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 826              		.loc 1 305 0
 827 0008 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 828 000c 7BB1     		cbz	r3, .L74
 829              	.LVL56:
 830              	.L71:
 320:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 831              		.loc 1 320 0
 832 000e 0223     		movs	r3, #2
 833 0010 84F82130 		strb	r3, [r4, #33]
 323:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 834              		.loc 1 323 0
 835 0014 2368     		ldr	r3, [r4]
 836 0016 CA22     		movs	r2, #202
 837 0018 5A62     		str	r2, [r3, #36]
 838 001a 2368     		ldr	r3, [r4]
 839 001c 5322     		movs	r2, #83
 840 001e 5A62     		str	r2, [r3, #36]
 326:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 841              		.loc 1 326 0
 842 0020 2046     		mov	r0, r4
 843 0022 FFF7FEFF 		bl	RTC_EnterInitMode
 844              	.LVL57:
 328:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 845              		.loc 1 328 0
 846 0026 0346     		mov	r3, r0
 847 0028 30B1     		cbz	r0, .L75
 848              	.LVL58:
 849              	.L70:
 371:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 850              		.loc 1 371 0
 851 002a 1846     		mov	r0, r3
 852 002c 38BD     		pop	{r3, r4, r5, pc}
 853              	.LVL59:
 854              	.L74:
 308:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 855              		.loc 1 308 0
 856 002e 80F82030 		strb	r3, [r0, #32]
 311:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
 857              		.loc 1 311 0
 858 0032 FFF7FEFF 		bl	HAL_RTC_MspInit
 859              	.LVL60:
 860 0036 EAE7     		b	.L71
 861              	.LVL61:
 862              	.L75:
 335:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 863              		.loc 1 335 0
 864 0038 2268     		ldr	r2, [r4]
 865 003a 9368     		ldr	r3, [r2, #8]
 866 003c 23F4E003 		bic	r3, r3, #7340032
 867 0040 23F04003 		bic	r3, r3, #64
 868 0044 9360     		str	r3, [r2, #8]
 338:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 869              		.loc 1 338 0
 870 0046 2168     		ldr	r1, [r4]
 871 0048 8A68     		ldr	r2, [r1, #8]
 872 004a 6368     		ldr	r3, [r4, #4]
 873 004c 2069     		ldr	r0, [r4, #16]
 874              	.LVL62:
 875 004e 0343     		orrs	r3, r3, r0
 876 0050 A069     		ldr	r0, [r4, #24]
 877 0052 0343     		orrs	r3, r3, r0
 878 0054 1343     		orrs	r3, r3, r2
 879 0056 8B60     		str	r3, [r1, #8]
 341:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 880              		.loc 1 341 0
 881 0058 2368     		ldr	r3, [r4]
 882 005a E268     		ldr	r2, [r4, #12]
 883 005c 1A61     		str	r2, [r3, #16]
 342:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 884              		.loc 1 342 0
 885 005e 2268     		ldr	r2, [r4]
 886 0060 1369     		ldr	r3, [r2, #16]
 887 0062 A168     		ldr	r1, [r4, #8]
 888 0064 43EA0143 		orr	r3, r3, r1, lsl #16
 889 0068 1361     		str	r3, [r2, #16]
 350:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 890              		.loc 1 350 0
 891 006a 2046     		mov	r0, r4
 892 006c FFF7FEFF 		bl	RTC_ExitInitMode
 893              	.LVL63:
 352:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 894              		.loc 1 352 0
 895 0070 0346     		mov	r3, r0
 896 0072 0028     		cmp	r0, #0
 897 0074 D9D1     		bne	.L70
 358:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 898              		.loc 1 358 0
 899 0076 2168     		ldr	r1, [r4]
 900 0078 CA6C     		ldr	r2, [r1, #76]
 901 007a 22F00302 		bic	r2, r2, #3
 902 007e CA64     		str	r2, [r1, #76]
 359:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 903              		.loc 1 359 0
 904 0080 2068     		ldr	r0, [r4]
 905              	.LVL64:
 906 0082 C26C     		ldr	r2, [r0, #76]
 907 0084 E169     		ldr	r1, [r4, #28]
 908 0086 6569     		ldr	r5, [r4, #20]
 909 0088 2943     		orrs	r1, r1, r5
 910 008a 0A43     		orrs	r2, r2, r1
 911 008c C264     		str	r2, [r0, #76]
 363:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 912              		.loc 1 363 0
 913 008e 2268     		ldr	r2, [r4]
 914 0090 FF21     		movs	r1, #255
 915 0092 5162     		str	r1, [r2, #36]
 365:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
 916              		.loc 1 365 0
 917 0094 0122     		movs	r2, #1
 918 0096 84F82120 		strb	r2, [r4, #33]
 919 009a C6E7     		b	.L70
 920              	.LVL65:
 921              	.L72:
 248:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 922              		.loc 1 248 0
 923 009c 0123     		movs	r3, #1
 924 009e C4E7     		b	.L70
 925              		.cfi_endproc
 926              	.LFE317:
 928              		.section	.text.HAL_RTC_DeInit,"ax",%progbits
 929              		.align	1
 930              		.global	HAL_RTC_DeInit
 931              		.syntax unified
 932              		.thumb
 933              		.thumb_func
 934              		.fpu fpv4-sp-d16
 936              	HAL_RTC_DeInit:
 937              	.LFB318:
 380:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 938              		.loc 1 380 0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 0
 941              		@ frame_needed = 0, uses_anonymous_args = 0
 942              	.LVL66:
 943 0000 70B5     		push	{r4, r5, r6, lr}
 944              		.cfi_def_cfa_offset 16
 945              		.cfi_offset 4, -16
 946              		.cfi_offset 5, -12
 947              		.cfi_offset 6, -8
 948              		.cfi_offset 14, -4
 949              	.LVL67:
 384:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 950              		.loc 1 384 0
 951 0002 0028     		cmp	r0, #0
 952 0004 40D0     		beq	.L78
 953 0006 0446     		mov	r4, r0
 390:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 954              		.loc 1 390 0
 955 0008 0223     		movs	r3, #2
 956 000a 80F82130 		strb	r3, [r0, #33]
 393:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 957              		.loc 1 393 0
 958 000e 0368     		ldr	r3, [r0]
 959 0010 CA22     		movs	r2, #202
 960 0012 5A62     		str	r2, [r3, #36]
 961 0014 0368     		ldr	r3, [r0]
 962 0016 5322     		movs	r2, #83
 963 0018 5A62     		str	r2, [r3, #36]
 396:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 964              		.loc 1 396 0
 965 001a FFF7FEFF 		bl	RTC_EnterInitMode
 966              	.LVL68:
 398:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 967              		.loc 1 398 0
 968 001e 0546     		mov	r5, r0
 969 0020 0028     		cmp	r0, #0
 970 0022 32D1     		bne	.L77
 401:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->DR = ((uint32_t)(RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 971              		.loc 1 401 0
 972 0024 2268     		ldr	r2, [r4]
 973 0026 0023     		movs	r3, #0
 974 0028 1360     		str	r3, [r2]
 402:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->CR &= 0x00000000U;
 975              		.loc 1 402 0
 976 002a 2268     		ldr	r2, [r4]
 977 002c 42F20111 		movw	r1, #8449
 978 0030 5160     		str	r1, [r2, #4]
 403:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 979              		.loc 1 403 0
 980 0032 2268     		ldr	r2, [r4]
 981 0034 9168     		ldr	r1, [r2, #8]
 982 0036 9360     		str	r3, [r2, #8]
 405:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->PRER = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU));
 983              		.loc 1 405 0
 984 0038 2268     		ldr	r2, [r4]
 985 003a 4FF6FF71 		movw	r1, #65535
 986 003e 5161     		str	r1, [r2, #20]
 406:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->ALRMAR = 0x00000000U;
 987              		.loc 1 406 0
 988 0040 2268     		ldr	r2, [r4]
 989 0042 1349     		ldr	r1, .L80
 990 0044 1161     		str	r1, [r2, #16]
 407:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->ALRMBR = 0x00000000U;
 991              		.loc 1 407 0
 992 0046 2268     		ldr	r2, [r4]
 993 0048 D361     		str	r3, [r2, #28]
 408:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->SHIFTR = 0x00000000U;
 994              		.loc 1 408 0
 995 004a 2268     		ldr	r2, [r4]
 996 004c 1362     		str	r3, [r2, #32]
 409:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->CALR = 0x00000000U;
 997              		.loc 1 409 0
 998 004e 2268     		ldr	r2, [r4]
 999 0050 D362     		str	r3, [r2, #44]
 410:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->ALRMASSR = 0x00000000U;
 1000              		.loc 1 410 0
 1001 0052 2268     		ldr	r2, [r4]
 1002 0054 D363     		str	r3, [r2, #60]
 411:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       hrtc->Instance->ALRMBSSR = 0x00000000U;
 1003              		.loc 1 411 0
 1004 0056 2268     		ldr	r2, [r4]
 1005 0058 5364     		str	r3, [r2, #68]
 412:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1006              		.loc 1 412 0
 1007 005a 2268     		ldr	r2, [r4]
 1008 005c 9364     		str	r3, [r2, #72]
 415:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1009              		.loc 1 415 0
 1010 005e 2046     		mov	r0, r4
 1011              	.LVL69:
 1012 0060 FFF7FEFF 		bl	RTC_ExitInitMode
 1013              	.LVL70:
 418:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 1014              		.loc 1 418 0
 1015 0064 0546     		mov	r5, r0
 1016 0066 80B9     		cbnz	r0, .L77
 426:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1017              		.loc 1 426 0
 1018 0068 2368     		ldr	r3, [r4]
 1019 006a 0026     		movs	r6, #0
 1020 006c 1E64     		str	r6, [r3, #64]
 429:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif
 1021              		.loc 1 429 0
 1022 006e 2368     		ldr	r3, [r4]
 1023 0070 DE64     		str	r6, [r3, #76]
 433:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1024              		.loc 1 433 0
 1025 0072 2368     		ldr	r3, [r4]
 1026 0074 FF22     		movs	r2, #255
 1027 0076 5A62     		str	r2, [r3, #36]
 445:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 1028              		.loc 1 445 0
 1029 0078 2046     		mov	r0, r4
 1030              	.LVL71:
 1031 007a FFF7FEFF 		bl	HAL_RTC_MspDeInit
 1032              	.LVL72:
 448:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1033              		.loc 1 448 0
 1034 007e 84F82160 		strb	r6, [r4, #33]
 451:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
 1035              		.loc 1 451 0
 1036 0082 84F82060 		strb	r6, [r4, #32]
 1037 0086 00E0     		b	.L77
 1038              	.LVL73:
 1039              	.L78:
 381:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1040              		.loc 1 381 0
 1041 0088 0125     		movs	r5, #1
 1042              	.LVL74:
 1043              	.L77:
 457:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1044              		.loc 1 457 0
 1045 008a 2846     		mov	r0, r5
 1046 008c 70BD     		pop	{r4, r5, r6, pc}
 1047              	.LVL75:
 1048              	.L81:
 1049 008e 00BF     		.align	2
 1050              	.L80:
 1051 0090 FF007F00 		.word	8323327
 1052              		.cfi_endproc
 1053              	.LFE318:
 1055              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 1056              		.align	1
 1057              		.global	RTC_ByteToBcd2
 1058              		.syntax unified
 1059              		.thumb
 1060              		.thumb_func
 1061              		.fpu fpv4-sp-d16
 1063              	RTC_ByteToBcd2:
 1064              	.LFB341:
2658:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2659:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2660:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2661:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2662:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Convert a 2 digit decimal to BCD format.
2663:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Value Byte to be converted
2664:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval Converted byte
2665:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2666:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** uint8_t RTC_ByteToBcd2(uint8_t Value)
2667:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 1065              		.loc 1 2667 0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 0
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 1069              		@ link register save eliminated.
 1070              	.LVL76:
2668:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t bcdhigh = 0U;
 1071              		.loc 1 2668 0
 1072 0000 0023     		movs	r3, #0
2669:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint8_t temp = Value;
2670:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2671:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   while (temp >= 10U)
 1073              		.loc 1 2671 0
 1074 0002 02E0     		b	.L83
 1075              	.LVL77:
 1076              	.L84:
2672:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
2673:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     bcdhigh++;
 1077              		.loc 1 2673 0
 1078 0004 0133     		adds	r3, r3, #1
 1079              	.LVL78:
2674:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     temp -= 10U;
 1080              		.loc 1 2674 0
 1081 0006 0A38     		subs	r0, r0, #10
 1082              	.LVL79:
 1083 0008 C0B2     		uxtb	r0, r0
 1084              	.LVL80:
 1085              	.L83:
2671:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 1086              		.loc 1 2671 0
 1087 000a 0928     		cmp	r0, #9
 1088 000c FAD8     		bhi	.L84
2675:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
2676:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2677:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return ((uint8_t)(bcdhigh << 4U) | temp);
 1089              		.loc 1 2677 0
 1090 000e 1B01     		lsls	r3, r3, #4
 1091              	.LVL81:
 1092 0010 DBB2     		uxtb	r3, r3
2678:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 1093              		.loc 1 2678 0
 1094 0012 1843     		orrs	r0, r0, r3
 1095              	.LVL82:
 1096 0014 7047     		bx	lr
 1097              		.cfi_endproc
 1098              	.LFE341:
 1100              		.section	.text.HAL_RTC_SetTime,"ax",%progbits
 1101              		.align	1
 1102              		.global	HAL_RTC_SetTime
 1103              		.syntax unified
 1104              		.thumb
 1105              		.thumb_func
 1106              		.fpu fpv4-sp-d16
 1108              	HAL_RTC_SetTime:
 1109              	.LFB321:
1443:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmpreg;
 1110              		.loc 1 1443 0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 1114              	.LVL83:
1453:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1115              		.loc 1 1453 0
 1116 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1117 0004 012B     		cmp	r3, #1
 1118 0006 61D0     		beq	.L93
1443:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmpreg;
 1119              		.loc 1 1443 0 discriminator 2
 1120 0008 70B5     		push	{r4, r5, r6, lr}
 1121              		.cfi_def_cfa_offset 16
 1122              		.cfi_offset 4, -16
 1123              		.cfi_offset 5, -12
 1124              		.cfi_offset 6, -8
 1125              		.cfi_offset 14, -4
 1126 000a 1646     		mov	r6, r2
 1127 000c 0D46     		mov	r5, r1
 1128 000e 0446     		mov	r4, r0
1453:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1129              		.loc 1 1453 0 discriminator 2
 1130 0010 0123     		movs	r3, #1
 1131 0012 80F82030 		strb	r3, [r0, #32]
1455:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1132              		.loc 1 1455 0 discriminator 2
 1133 0016 0223     		movs	r3, #2
 1134 0018 80F82130 		strb	r3, [r0, #33]
1458:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1135              		.loc 1 1458 0 discriminator 2
 1136 001c 0368     		ldr	r3, [r0]
 1137 001e CA22     		movs	r2, #202
 1138              	.LVL84:
 1139 0020 5A62     		str	r2, [r3, #36]
 1140 0022 0368     		ldr	r3, [r0]
 1141 0024 5322     		movs	r2, #83
 1142 0026 5A62     		str	r2, [r3, #36]
1461:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (status == HAL_OK)
 1143              		.loc 1 1461 0 discriminator 2
 1144 0028 FFF7FEFF 		bl	RTC_EnterInitMode
 1145              	.LVL85:
1462:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 1146              		.loc 1 1462 0 discriminator 2
 1147 002c 0346     		mov	r3, r0
 1148 002e 0028     		cmp	r0, #0
 1149 0030 2ED1     		bne	.L87
1464:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 1150              		.loc 1 1464 0
 1151 0032 002E     		cmp	r6, #0
 1152 0034 38D1     		bne	.L88
1466:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 1153              		.loc 1 1466 0
 1154 0036 2368     		ldr	r3, [r4]
 1155 0038 9B68     		ldr	r3, [r3, #8]
 1156 003a 13F0400F 		tst	r3, #64
 1157 003e 01D1     		bne	.L89
1473:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(sTime->Hours));
 1158              		.loc 1 1473 0
 1159 0040 0023     		movs	r3, #0
 1160 0042 EB70     		strb	r3, [r5, #3]
 1161              	.L89:
1479:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 1162              		.loc 1 1479 0
 1163 0044 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1164              	.LVL86:
 1165 0046 FFF7FEFF 		bl	RTC_ByteToBcd2
 1166              	.LVL87:
 1167 004a 0604     		lsls	r6, r0, #16
 1168              	.LVL88:
1480:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 1169              		.loc 1 1480 0
 1170 004c 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1171 004e FFF7FEFF 		bl	RTC_ByteToBcd2
 1172              	.LVL89:
1479:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 1173              		.loc 1 1479 0
 1174 0052 46EA0026 		orr	r6, r6, r0, lsl #8
1481:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                           (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 1175              		.loc 1 1481 0
 1176 0056 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1177 0058 FFF7FEFF 		bl	RTC_ByteToBcd2
 1178              	.LVL90:
1480:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 1179              		.loc 1 1480 0
 1180 005c 3043     		orrs	r0, r0, r6
1482:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
 1181              		.loc 1 1482 0
 1182 005e EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
1479:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 1183              		.loc 1 1479 0
 1184 0060 40EA8350 		orr	r0, r0, r3, lsl #22
 1185              	.LVL91:
 1186              	.L90:
1505:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1187              		.loc 1 1505 0
 1188 0064 2368     		ldr	r3, [r4]
 1189 0066 00F07F30 		and	r0, r0, #2139062143
 1190              	.LVL92:
 1191 006a 20F0FE40 		bic	r0, r0, #2130706432
 1192 006e 1860     		str	r0, [r3]
1508:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1193              		.loc 1 1508 0
 1194 0070 2268     		ldr	r2, [r4]
 1195 0072 9368     		ldr	r3, [r2, #8]
 1196 0074 23F48023 		bic	r3, r3, #262144
 1197 0078 9360     		str	r3, [r2, #8]
1511:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1198              		.loc 1 1511 0
 1199 007a 2168     		ldr	r1, [r4]
 1200 007c 8B68     		ldr	r3, [r1, #8]
 1201 007e EA68     		ldr	r2, [r5, #12]
 1202 0080 2869     		ldr	r0, [r5, #16]
 1203 0082 0243     		orrs	r2, r2, r0
 1204 0084 1343     		orrs	r3, r3, r2
 1205 0086 8B60     		str	r3, [r1, #8]
1514:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 1206              		.loc 1 1514 0
 1207 0088 2046     		mov	r0, r4
 1208 008a FFF7FEFF 		bl	RTC_ExitInitMode
 1209              	.LVL93:
 1210 008e 0346     		mov	r3, r0
 1211              	.LVL94:
 1212              	.L87:
1518:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1213              		.loc 1 1518 0
 1214 0090 2268     		ldr	r2, [r4]
 1215 0092 FF21     		movs	r1, #255
 1216 0094 5162     		str	r1, [r2, #36]
1520:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 1217              		.loc 1 1520 0
 1218 0096 13B9     		cbnz	r3, .L92
1522:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 1219              		.loc 1 1522 0
 1220 0098 0122     		movs	r2, #1
 1221 009a 84F82120 		strb	r2, [r4, #33]
 1222              	.L92:
1526:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1223              		.loc 1 1526 0
 1224 009e 0022     		movs	r2, #0
 1225 00a0 84F82020 		strb	r2, [r4, #32]
1529:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1226              		.loc 1 1529 0
 1227 00a4 1846     		mov	r0, r3
 1228 00a6 70BD     		pop	{r4, r5, r6, pc}
 1229              	.LVL95:
 1230              	.L88:
1486:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 1231              		.loc 1 1486 0
 1232 00a8 2368     		ldr	r3, [r4]
 1233 00aa 9B68     		ldr	r3, [r3, #8]
 1234 00ac 13F0400F 		tst	r3, #64
 1235 00b0 01D1     		bne	.L91
1493:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 1236              		.loc 1 1493 0
 1237 00b2 0023     		movs	r3, #0
 1238 00b4 EB70     		strb	r3, [r5, #3]
 1239              	.L91:
1498:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 1240              		.loc 1 1498 0
 1241 00b6 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
1499:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 1242              		.loc 1 1499 0
 1243 00b8 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1244              	.LVL96:
 1245 00ba 0002     		lsls	r0, r0, #8
1498:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 1246              		.loc 1 1498 0
 1247 00bc 40EA0340 		orr	r0, r0, r3, lsl #16
1500:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 1248              		.loc 1 1500 0
 1249 00c0 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
1499:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 1250              		.loc 1 1499 0
 1251 00c2 1843     		orrs	r0, r0, r3
1501:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     }
 1252              		.loc 1 1501 0
 1253 00c4 EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
1498:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 1254              		.loc 1 1498 0
 1255 00c6 40EA8350 		orr	r0, r0, r3, lsl #22
 1256              	.LVL97:
 1257 00ca CBE7     		b	.L90
 1258              	.LVL98:
 1259              	.L93:
 1260              		.cfi_def_cfa_offset 0
 1261              		.cfi_restore 4
 1262              		.cfi_restore 5
 1263              		.cfi_restore 6
 1264              		.cfi_restore 14
1453:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1265              		.loc 1 1453 0
 1266 00cc 0223     		movs	r3, #2
1529:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1267              		.loc 1 1529 0
 1268 00ce 1846     		mov	r0, r3
 1269              	.LVL99:
 1270 00d0 7047     		bx	lr
 1271              		.cfi_endproc
 1272              	.LFE321:
 1274              		.section	.text.HAL_RTC_SetDate,"ax",%progbits
 1275              		.align	1
 1276              		.global	HAL_RTC_SetDate
 1277              		.syntax unified
 1278              		.thumb
 1279              		.thumb_func
 1280              		.fpu fpv4-sp-d16
 1282              	HAL_RTC_SetDate:
 1283              	.LFB323:
1597:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t datetmpreg;
 1284              		.loc 1 1597 0
 1285              		.cfi_startproc
 1286              		@ args = 0, pretend = 0, frame = 0
 1287              		@ frame_needed = 0, uses_anonymous_args = 0
 1288              	.LVL100:
1605:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1289              		.loc 1 1605 0
 1290 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1291 0004 012B     		cmp	r3, #1
 1292 0006 4FD0     		beq	.L105
1597:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t datetmpreg;
 1293              		.loc 1 1597 0 discriminator 2
 1294 0008 70B5     		push	{r4, r5, r6, lr}
 1295              		.cfi_def_cfa_offset 16
 1296              		.cfi_offset 4, -16
 1297              		.cfi_offset 5, -12
 1298              		.cfi_offset 6, -8
 1299              		.cfi_offset 14, -4
1605:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1300              		.loc 1 1605 0 discriminator 2
 1301 000a 0123     		movs	r3, #1
 1302 000c 80F82030 		strb	r3, [r0, #32]
1607:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1303              		.loc 1 1607 0 discriminator 2
 1304 0010 0223     		movs	r3, #2
 1305 0012 80F82130 		strb	r3, [r0, #33]
1609:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 1306              		.loc 1 1609 0 discriminator 2
 1307 0016 3AB9     		cbnz	r2, .L100
1609:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 1308              		.loc 1 1609 0 is_stmt 0 discriminator 1
 1309 0018 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 1310 001a 13F0100F 		tst	r3, #16
 1311 001e 03D0     		beq	.L100
1611:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 1312              		.loc 1 1611 0 is_stmt 1
 1313 0020 03F0EF03 		and	r3, r3, #239
 1314 0024 0A33     		adds	r3, r3, #10
 1315 0026 4B70     		strb	r3, [r1, #1]
 1316              	.L100:
 1317 0028 0E46     		mov	r6, r1
 1318 002a 0446     		mov	r4, r0
1616:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 1319              		.loc 1 1616 0
 1320 002c 32BB     		cbnz	r2, .L101
1622:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1321              		.loc 1 1622 0
 1322 002e C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 1323              	.LVL101:
 1324 0030 FFF7FEFF 		bl	RTC_ByteToBcd2
 1325              	.LVL102:
 1326 0034 0504     		lsls	r5, r0, #16
1623:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 1327              		.loc 1 1623 0
 1328 0036 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1329 0038 FFF7FEFF 		bl	RTC_ByteToBcd2
 1330              	.LVL103:
1622:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1331              		.loc 1 1622 0
 1332 003c 45EA0025 		orr	r5, r5, r0, lsl #8
1624:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 1333              		.loc 1 1624 0
 1334 0040 B078     		ldrb	r0, [r6, #2]	@ zero_extendqisi2
 1335 0042 FFF7FEFF 		bl	RTC_ByteToBcd2
 1336              	.LVL104:
1623:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 1337              		.loc 1 1623 0
 1338 0046 0543     		orrs	r5, r5, r0
1625:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 1339              		.loc 1 1625 0
 1340 0048 3078     		ldrb	r0, [r6]	@ zero_extendqisi2
1622:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1341              		.loc 1 1622 0
 1342 004a 45EA4035 		orr	r5, r5, r0, lsl #13
 1343              	.LVL105:
 1344              	.L102:
1640:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1345              		.loc 1 1640 0
 1346 004e 2368     		ldr	r3, [r4]
 1347 0050 CA22     		movs	r2, #202
 1348 0052 5A62     		str	r2, [r3, #36]
 1349 0054 2368     		ldr	r3, [r4]
 1350 0056 5322     		movs	r2, #83
 1351 0058 5A62     		str	r2, [r3, #36]
1643:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   if (status == HAL_OK)
 1352              		.loc 1 1643 0
 1353 005a 2046     		mov	r0, r4
 1354 005c FFF7FEFF 		bl	RTC_EnterInitMode
 1355              	.LVL106:
1644:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 1356              		.loc 1 1644 0
 1357 0060 0346     		mov	r3, r0
 1358 0062 B0B1     		cbz	r0, .L110
 1359              	.LVL107:
 1360              	.L103:
1654:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1361              		.loc 1 1654 0
 1362 0064 2268     		ldr	r2, [r4]
 1363 0066 FF21     		movs	r1, #255
 1364 0068 5162     		str	r1, [r2, #36]
1656:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 1365              		.loc 1 1656 0
 1366 006a 13B9     		cbnz	r3, .L104
1658:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 1367              		.loc 1 1658 0
 1368 006c 0122     		movs	r2, #1
 1369 006e 84F82120 		strb	r2, [r4, #33]
 1370              	.L104:
1662:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1371              		.loc 1 1662 0
 1372 0072 0022     		movs	r2, #0
 1373 0074 84F82020 		strb	r2, [r4, #32]
1665:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1374              		.loc 1 1665 0
 1375 0078 1846     		mov	r0, r3
 1376 007a 70BD     		pop	{r4, r5, r6, pc}
 1377              	.LVL108:
 1378              	.L101:
1633:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 1379              		.loc 1 1633 0
 1380 007c C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 1381              	.LVL109:
1634:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 1382              		.loc 1 1634 0
 1383 007e 4D78     		ldrb	r5, [r1, #1]	@ zero_extendqisi2
 1384 0080 2D02     		lsls	r5, r5, #8
1633:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 1385              		.loc 1 1633 0
 1386 0082 45EA0045 		orr	r5, r5, r0, lsl #16
1635:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 1387              		.loc 1 1635 0
 1388 0086 8878     		ldrb	r0, [r1, #2]	@ zero_extendqisi2
1634:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 1389              		.loc 1 1634 0
 1390 0088 0543     		orrs	r5, r5, r0
1636:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 1391              		.loc 1 1636 0
 1392 008a 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
1633:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 1393              		.loc 1 1633 0
 1394 008c 45EA4035 		orr	r5, r5, r0, lsl #13
 1395              	.LVL110:
 1396 0090 DDE7     		b	.L102
 1397              	.LVL111:
 1398              	.L110:
1647:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1399              		.loc 1 1647 0
 1400 0092 2368     		ldr	r3, [r4]
 1401 0094 25F07F45 		bic	r5, r5, #-16777216
 1402              	.LVL112:
 1403 0098 25F0C005 		bic	r5, r5, #192
 1404 009c 5D60     		str	r5, [r3, #4]
1650:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 1405              		.loc 1 1650 0
 1406 009e 2046     		mov	r0, r4
 1407              	.LVL113:
 1408 00a0 FFF7FEFF 		bl	RTC_ExitInitMode
 1409              	.LVL114:
 1410 00a4 0346     		mov	r3, r0
 1411              	.LVL115:
 1412 00a6 DDE7     		b	.L103
 1413              	.LVL116:
 1414              	.L105:
 1415              		.cfi_def_cfa_offset 0
 1416              		.cfi_restore 4
 1417              		.cfi_restore 5
 1418              		.cfi_restore 6
 1419              		.cfi_restore 14
1605:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1420              		.loc 1 1605 0
 1421 00a8 0223     		movs	r3, #2
1665:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1422              		.loc 1 1665 0
 1423 00aa 1846     		mov	r0, r3
 1424              	.LVL117:
 1425 00ac 7047     		bx	lr
 1426              		.cfi_endproc
 1427              	.LFE323:
 1429              		.section	.text.HAL_RTC_SetAlarm,"ax",%progbits
 1430              		.align	1
 1431              		.global	HAL_RTC_SetAlarm
 1432              		.syntax unified
 1433              		.thumb
 1434              		.thumb_func
 1435              		.fpu fpv4-sp-d16
 1437              	HAL_RTC_SetAlarm:
 1438              	.LFB325:
1735:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmpreg, subsecondtmpreg;
 1439              		.loc 1 1735 0
 1440              		.cfi_startproc
 1441              		@ args = 0, pretend = 0, frame = 0
 1442              		@ frame_needed = 0, uses_anonymous_args = 0
 1443              	.LVL118:
 1444 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1445              		.cfi_def_cfa_offset 24
 1446              		.cfi_offset 3, -24
 1447              		.cfi_offset 4, -20
 1448              		.cfi_offset 5, -16
 1449              		.cfi_offset 6, -12
 1450              		.cfi_offset 7, -8
 1451              		.cfi_offset 14, -4
1747:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1452              		.loc 1 1747 0
 1453 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1454 0006 012B     		cmp	r3, #1
 1455 0008 00F0BD80 		beq	.L123
 1456 000c 0D46     		mov	r5, r1
 1457 000e 0446     		mov	r4, r0
1747:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1458              		.loc 1 1747 0 is_stmt 0 discriminator 2
 1459 0010 0123     		movs	r3, #1
 1460 0012 80F82030 		strb	r3, [r0, #32]
1749:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1461              		.loc 1 1749 0 is_stmt 1 discriminator 2
 1462 0016 0223     		movs	r3, #2
 1463 0018 80F82130 		strb	r3, [r0, #33]
1751:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 1464              		.loc 1 1751 0 discriminator 2
 1465 001c 002A     		cmp	r2, #0
 1466 001e 55D1     		bne	.L113
1753:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 1467              		.loc 1 1753 0
 1468 0020 0368     		ldr	r3, [r0]
 1469 0022 9B68     		ldr	r3, [r3, #8]
 1470 0024 13F0400F 		tst	r3, #64
 1471 0028 01D1     		bne	.L114
1760:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 1472              		.loc 1 1760 0
 1473 002a 0023     		movs	r3, #0
 1474 002c CB70     		strb	r3, [r1, #3]
 1475              	.L114:
1766:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 1476              		.loc 1 1766 0
 1477 002e 2E6A     		ldr	r6, [r5, #32]
1774:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1478              		.loc 1 1774 0
 1479 0030 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1480              	.LVL119:
 1481 0032 FFF7FEFF 		bl	RTC_ByteToBcd2
 1482              	.LVL120:
 1483 0036 0704     		lsls	r7, r0, #16
1775:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 1484              		.loc 1 1775 0
 1485 0038 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1486 003a FFF7FEFF 		bl	RTC_ByteToBcd2
 1487              	.LVL121:
1774:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1488              		.loc 1 1774 0
 1489 003e 47EA0027 		orr	r7, r7, r0, lsl #8
1776:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 1490              		.loc 1 1776 0
 1491 0042 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1492 0044 FFF7FEFF 		bl	RTC_ByteToBcd2
 1493              	.LVL122:
1775:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 1494              		.loc 1 1775 0
 1495 0048 0743     		orrs	r7, r7, r0
1777:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 1496              		.loc 1 1777 0
 1497 004a E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
1776:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 1498              		.loc 1 1776 0
 1499 004c 47EA8057 		orr	r7, r7, r0, lsl #22
1778:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1500              		.loc 1 1778 0
 1501 0050 95F82400 		ldrb	r0, [r5, #36]	@ zero_extendqisi2
 1502 0054 FFF7FEFF 		bl	RTC_ByteToBcd2
 1503              	.LVL123:
1777:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 1504              		.loc 1 1777 0
 1505 0058 47EA0060 		orr	r0, r7, r0, lsl #24
1778:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1506              		.loc 1 1778 0
 1507 005c 0643     		orrs	r6, r6, r0
1780:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 1508              		.loc 1 1780 0
 1509 005e 6869     		ldr	r0, [r5, #20]
1774:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1510              		.loc 1 1774 0
 1511 0060 0643     		orrs	r6, r6, r0
 1512              	.LVL124:
 1513              	.L115:
1819:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1514              		.loc 1 1819 0
 1515 0062 6F68     		ldr	r7, [r5, #4]
 1516 0064 EB69     		ldr	r3, [r5, #28]
 1517 0066 1F43     		orrs	r7, r7, r3
 1518              	.LVL125:
1822:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1519              		.loc 1 1822 0
 1520 0068 2368     		ldr	r3, [r4]
 1521 006a CA22     		movs	r2, #202
 1522 006c 5A62     		str	r2, [r3, #36]
 1523 006e 2368     		ldr	r3, [r4]
 1524 0070 5322     		movs	r2, #83
 1525 0072 5A62     		str	r2, [r3, #36]
1825:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 1526              		.loc 1 1825 0
 1527 0074 AB6A     		ldr	r3, [r5, #40]
 1528 0076 B3F5807F 		cmp	r3, #256
 1529 007a 41D0     		beq	.L125
 1530              	.LBB4:
1863:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Clear flag alarm B */
 1531              		.loc 1 1863 0
 1532 007c 2268     		ldr	r2, [r4]
 1533 007e 9368     		ldr	r3, [r2, #8]
 1534 0080 23F40073 		bic	r3, r3, #512
 1535 0084 9360     		str	r3, [r2, #8]
1865:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
 1536              		.loc 1 1865 0
 1537 0086 2268     		ldr	r2, [r4]
 1538 0088 D368     		ldr	r3, [r2, #12]
 1539 008a DBB2     		uxtb	r3, r3
 1540 008c 63F42073 		orn	r3, r3, #640
 1541 0090 D360     		str	r3, [r2, #12]
1867:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1542              		.loc 1 1867 0
 1543 0092 2268     		ldr	r2, [r4]
 1544 0094 9368     		ldr	r3, [r2, #8]
 1545 0096 23F40053 		bic	r3, r3, #8192
 1546 009a 9360     		str	r3, [r2, #8]
1870:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
 1547              		.loc 1 1870 0
 1548 009c FFF7FEFF 		bl	HAL_GetTick
 1549              	.LVL126:
 1550 00a0 0546     		mov	r5, r0
 1551              	.LVL127:
 1552              	.L121:
1872:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 1553              		.loc 1 1872 0
 1554 00a2 2368     		ldr	r3, [r4]
 1555 00a4 DA68     		ldr	r2, [r3, #12]
 1556 00a6 12F0020F 		tst	r2, #2
 1557 00aa 5AD1     		bne	.L126
1874:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 1558              		.loc 1 1874 0
 1559 00ac FFF7FEFF 		bl	HAL_GetTick
 1560              	.LVL128:
 1561 00b0 401B     		subs	r0, r0, r5
 1562 00b2 B0F57A7F 		cmp	r0, #1000
 1563 00b6 F4D9     		bls	.L121
1877:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1564              		.loc 1 1877 0
 1565 00b8 2368     		ldr	r3, [r4]
 1566 00ba FF22     		movs	r2, #255
 1567 00bc 5A62     		str	r2, [r3, #36]
1879:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1568              		.loc 1 1879 0
 1569 00be 0320     		movs	r0, #3
 1570 00c0 84F82100 		strb	r0, [r4, #33]
1882:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1571              		.loc 1 1882 0
 1572 00c4 0023     		movs	r3, #0
 1573 00c6 84F82030 		strb	r3, [r4, #32]
1884:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
 1574              		.loc 1 1884 0
 1575 00ca 5BE0     		b	.L112
 1576              	.LVL129:
 1577              	.L113:
 1578              	.LBE4:
1784:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 1579              		.loc 1 1784 0
 1580 00cc 0368     		ldr	r3, [r0]
 1581 00ce 9B68     		ldr	r3, [r3, #8]
 1582 00d0 13F0400F 		tst	r3, #64
 1583 00d4 01D1     		bne	.L116
1791:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 1584              		.loc 1 1791 0
 1585 00d6 0023     		movs	r3, #0
 1586 00d8 CB70     		strb	r3, [r1, #3]
 1587              	.L116:
1809:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1588              		.loc 1 1809 0
 1589 00da 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
1810:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 1590              		.loc 1 1810 0
 1591 00dc 6E78     		ldrb	r6, [r5, #1]	@ zero_extendqisi2
 1592 00de 3602     		lsls	r6, r6, #8
1809:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1593              		.loc 1 1809 0
 1594 00e0 46EA0346 		orr	r6, r6, r3, lsl #16
1811:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 1595              		.loc 1 1811 0
 1596 00e4 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
1810:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 1597              		.loc 1 1810 0
 1598 00e6 1E43     		orrs	r6, r6, r3
1812:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 1599              		.loc 1 1812 0
 1600 00e8 EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
1811:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 1601              		.loc 1 1811 0
 1602 00ea 46EA8356 		orr	r6, r6, r3, lsl #22
1813:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1603              		.loc 1 1813 0
 1604 00ee 95F82430 		ldrb	r3, [r5, #36]	@ zero_extendqisi2
1812:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 1605              		.loc 1 1812 0
 1606 00f2 46EA0366 		orr	r6, r6, r3, lsl #24
1814:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
 1607              		.loc 1 1814 0
 1608 00f6 2B6A     		ldr	r3, [r5, #32]
1813:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1609              		.loc 1 1813 0
 1610 00f8 1E43     		orrs	r6, r6, r3
1815:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 1611              		.loc 1 1815 0
 1612 00fa 6869     		ldr	r0, [r5, #20]
 1613              	.LVL130:
1809:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1614              		.loc 1 1809 0
 1615 00fc 0643     		orrs	r6, r6, r0
 1616              	.LVL131:
 1617 00fe B0E7     		b	.L115
 1618              	.LVL132:
 1619              	.L125:
 1620              	.LBB5:
1828:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Clear flag alarm A */
 1621              		.loc 1 1828 0
 1622 0100 2268     		ldr	r2, [r4]
 1623 0102 9368     		ldr	r3, [r2, #8]
 1624 0104 23F48073 		bic	r3, r3, #256
 1625 0108 9360     		str	r3, [r2, #8]
1830:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
 1626              		.loc 1 1830 0
 1627 010a 2268     		ldr	r2, [r4]
 1628 010c D368     		ldr	r3, [r2, #12]
 1629 010e DBB2     		uxtb	r3, r3
 1630 0110 63F4C073 		orn	r3, r3, #384
 1631 0114 D360     		str	r3, [r2, #12]
1832:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1632              		.loc 1 1832 0
 1633 0116 2268     		ldr	r2, [r4]
 1634 0118 9368     		ldr	r3, [r2, #8]
 1635 011a 23F48053 		bic	r3, r3, #4096
 1636 011e 9360     		str	r3, [r2, #8]
1835:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 1637              		.loc 1 1835 0
 1638 0120 FFF7FEFF 		bl	HAL_GetTick
 1639              	.LVL133:
 1640 0124 0546     		mov	r5, r0
 1641              	.LVL134:
 1642              	.L118:
1837:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 1643              		.loc 1 1837 0
 1644 0126 2368     		ldr	r3, [r4]
 1645 0128 DA68     		ldr	r2, [r3, #12]
 1646 012a 12F0010F 		tst	r2, #1
 1647 012e 0FD1     		bne	.L127
1839:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 1648              		.loc 1 1839 0
 1649 0130 FFF7FEFF 		bl	HAL_GetTick
 1650              	.LVL135:
 1651 0134 401B     		subs	r0, r0, r5
 1652 0136 B0F57A7F 		cmp	r0, #1000
 1653 013a F4D9     		bls	.L118
1842:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1654              		.loc 1 1842 0
 1655 013c 2368     		ldr	r3, [r4]
 1656 013e FF22     		movs	r2, #255
 1657 0140 5A62     		str	r2, [r3, #36]
1844:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1658              		.loc 1 1844 0
 1659 0142 0320     		movs	r0, #3
 1660 0144 84F82100 		strb	r0, [r4, #33]
1847:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1661              		.loc 1 1847 0
 1662 0148 0023     		movs	r3, #0
 1663 014a 84F82030 		strb	r3, [r4, #32]
1849:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
 1664              		.loc 1 1849 0
 1665 014e 19E0     		b	.L112
 1666              	.L127:
1854:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 1667              		.loc 1 1854 0
 1668 0150 DE61     		str	r6, [r3, #28]
1856:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1669              		.loc 1 1856 0
 1670 0152 2368     		ldr	r3, [r4]
 1671 0154 5F64     		str	r7, [r3, #68]
1858:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 1672              		.loc 1 1858 0
 1673 0156 2268     		ldr	r2, [r4]
 1674 0158 9368     		ldr	r3, [r2, #8]
 1675 015a 43F48073 		orr	r3, r3, #256
 1676 015e 9360     		str	r3, [r2, #8]
 1677              	.LBE5:
 1678 0160 07E0     		b	.L120
 1679              	.LVL136:
 1680              	.L126:
 1681              	.LBB6:
1889:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
 1682              		.loc 1 1889 0
 1683 0162 1E62     		str	r6, [r3, #32]
1891:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1684              		.loc 1 1891 0
 1685 0164 2368     		ldr	r3, [r4]
 1686 0166 9F64     		str	r7, [r3, #72]
1893:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 1687              		.loc 1 1893 0
 1688 0168 2268     		ldr	r2, [r4]
 1689 016a 9368     		ldr	r3, [r2, #8]
 1690 016c 43F40073 		orr	r3, r3, #512
 1691 0170 9360     		str	r3, [r2, #8]
 1692              	.LVL137:
 1693              	.L120:
 1694              	.LBE6:
1897:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1695              		.loc 1 1897 0
 1696 0172 2368     		ldr	r3, [r4]
 1697 0174 FF22     		movs	r2, #255
 1698 0176 5A62     		str	r2, [r3, #36]
1900:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1699              		.loc 1 1900 0
 1700 0178 0123     		movs	r3, #1
 1701 017a 84F82130 		strb	r3, [r4, #33]
1903:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1702              		.loc 1 1903 0
 1703 017e 0020     		movs	r0, #0
 1704 0180 84F82000 		strb	r0, [r4, #32]
 1705              	.LVL138:
 1706              	.L112:
1906:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1707              		.loc 1 1906 0
 1708 0184 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1709              	.LVL139:
 1710              	.L123:
1747:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1711              		.loc 1 1747 0
 1712 0186 0220     		movs	r0, #2
 1713              	.LVL140:
 1714 0188 FCE7     		b	.L112
 1715              		.cfi_endproc
 1716              	.LFE325:
 1718              		.section	.text.HAL_RTC_SetAlarm_IT,"ax",%progbits
 1719              		.align	1
 1720              		.global	HAL_RTC_SetAlarm_IT
 1721              		.syntax unified
 1722              		.thumb
 1723              		.thumb_func
 1724              		.fpu fpv4-sp-d16
 1726              	HAL_RTC_SetAlarm_IT:
 1727              	.LFB326:
1922:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmpreg, subsecondtmpreg;
 1728              		.loc 1 1922 0
 1729              		.cfi_startproc
 1730              		@ args = 0, pretend = 0, frame = 0
 1731              		@ frame_needed = 0, uses_anonymous_args = 0
 1732              	.LVL141:
 1733 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1734              		.cfi_def_cfa_offset 24
 1735              		.cfi_offset 3, -24
 1736              		.cfi_offset 4, -20
 1737              		.cfi_offset 5, -16
 1738              		.cfi_offset 6, -12
 1739              		.cfi_offset 7, -8
 1740              		.cfi_offset 14, -4
1934:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1741              		.loc 1 1934 0
 1742 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1743 0006 012B     		cmp	r3, #1
 1744 0008 00F0C680 		beq	.L140
 1745 000c 0D46     		mov	r5, r1
 1746 000e 0446     		mov	r4, r0
1934:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1747              		.loc 1 1934 0 is_stmt 0 discriminator 2
 1748 0010 0123     		movs	r3, #1
 1749 0012 80F82030 		strb	r3, [r0, #32]
1936:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1750              		.loc 1 1936 0 is_stmt 1 discriminator 2
 1751 0016 0223     		movs	r3, #2
 1752 0018 80F82130 		strb	r3, [r0, #33]
1938:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 1753              		.loc 1 1938 0 discriminator 2
 1754 001c 002A     		cmp	r2, #0
 1755 001e 50D1     		bne	.L130
1940:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 1756              		.loc 1 1940 0
 1757 0020 0368     		ldr	r3, [r0]
 1758 0022 9B68     		ldr	r3, [r3, #8]
 1759 0024 13F0400F 		tst	r3, #64
 1760 0028 01D1     		bne	.L131
1947:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 1761              		.loc 1 1947 0
 1762 002a 0023     		movs	r3, #0
 1763 002c CB70     		strb	r3, [r1, #3]
 1764              	.L131:
1953:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 1765              		.loc 1 1953 0
 1766 002e 2E6A     		ldr	r6, [r5, #32]
1962:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1767              		.loc 1 1962 0
 1768 0030 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1769              	.LVL142:
 1770 0032 FFF7FEFF 		bl	RTC_ByteToBcd2
 1771              	.LVL143:
 1772 0036 0704     		lsls	r7, r0, #16
1963:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 1773              		.loc 1 1963 0
 1774 0038 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1775 003a FFF7FEFF 		bl	RTC_ByteToBcd2
 1776              	.LVL144:
1962:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1777              		.loc 1 1962 0
 1778 003e 47EA0027 		orr	r7, r7, r0, lsl #8
1964:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 1779              		.loc 1 1964 0
 1780 0042 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1781 0044 FFF7FEFF 		bl	RTC_ByteToBcd2
 1782              	.LVL145:
1963:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 1783              		.loc 1 1963 0
 1784 0048 0743     		orrs	r7, r7, r0
1965:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 1785              		.loc 1 1965 0
 1786 004a E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
1964:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 1787              		.loc 1 1964 0
 1788 004c 47EA8057 		orr	r7, r7, r0, lsl #22
1966:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1789              		.loc 1 1966 0
 1790 0050 95F82400 		ldrb	r0, [r5, #36]	@ zero_extendqisi2
 1791 0054 FFF7FEFF 		bl	RTC_ByteToBcd2
 1792              	.LVL146:
1965:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 1793              		.loc 1 1965 0
 1794 0058 47EA0060 		orr	r0, r7, r0, lsl #24
1966:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1795              		.loc 1 1966 0
 1796 005c 0643     		orrs	r6, r6, r0
1968:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 1797              		.loc 1 1968 0
 1798 005e 6869     		ldr	r0, [r5, #20]
1962:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1799              		.loc 1 1962 0
 1800 0060 0643     		orrs	r6, r6, r0
 1801              	.LVL147:
 1802              	.L132:
2006:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1803              		.loc 1 2006 0
 1804 0062 6F68     		ldr	r7, [r5, #4]
 1805 0064 EB69     		ldr	r3, [r5, #28]
 1806 0066 1F43     		orrs	r7, r7, r3
 1807              	.LVL148:
2009:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1808              		.loc 1 2009 0
 1809 0068 2368     		ldr	r3, [r4]
 1810 006a CA22     		movs	r2, #202
 1811 006c 5A62     		str	r2, [r3, #36]
 1812 006e 2368     		ldr	r3, [r4]
 1813 0070 5322     		movs	r2, #83
 1814 0072 5A62     		str	r2, [r3, #36]
2012:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 1815              		.loc 1 2012 0
 1816 0074 AB6A     		ldr	r3, [r5, #40]
 1817 0076 B3F5807F 		cmp	r3, #256
 1818 007a 3CD0     		beq	.L142
 1819              	.LBB7:
2051:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1820              		.loc 1 2051 0
 1821 007c 2268     		ldr	r2, [r4]
 1822 007e 9368     		ldr	r3, [r2, #8]
 1823 0080 23F40073 		bic	r3, r3, #512
 1824 0084 9360     		str	r3, [r2, #8]
2054:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1825              		.loc 1 2054 0
 1826 0086 2268     		ldr	r2, [r4]
 1827 0088 D368     		ldr	r3, [r2, #12]
 1828 008a DBB2     		uxtb	r3, r3
 1829 008c 63F42073 		orn	r3, r3, #640
 1830 0090 D360     		str	r3, [r2, #12]
2057:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
 1831              		.loc 1 2057 0
 1832 0092 FFF7FEFF 		bl	HAL_GetTick
 1833              	.LVL149:
 1834 0096 0546     		mov	r5, r0
 1835              	.LVL150:
 1836              	.L138:
2059:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 1837              		.loc 1 2059 0
 1838 0098 2368     		ldr	r3, [r4]
 1839 009a DA68     		ldr	r2, [r3, #12]
 1840 009c 12F0020F 		tst	r2, #2
 1841 00a0 5AD1     		bne	.L143
2061:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 1842              		.loc 1 2061 0
 1843 00a2 FFF7FEFF 		bl	HAL_GetTick
 1844              	.LVL151:
 1845 00a6 401B     		subs	r0, r0, r5
 1846 00a8 B0F57A7F 		cmp	r0, #1000
 1847 00ac F4D9     		bls	.L138
2064:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1848              		.loc 1 2064 0
 1849 00ae 2368     		ldr	r3, [r4]
 1850 00b0 FF22     		movs	r2, #255
 1851 00b2 5A62     		str	r2, [r3, #36]
2066:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1852              		.loc 1 2066 0
 1853 00b4 0320     		movs	r0, #3
 1854 00b6 84F82100 		strb	r0, [r4, #33]
2069:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1855              		.loc 1 2069 0
 1856 00ba 0023     		movs	r3, #0
 1857 00bc 84F82030 		strb	r3, [r4, #32]
2071:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
 1858              		.loc 1 2071 0
 1859 00c0 69E0     		b	.L129
 1860              	.LVL152:
 1861              	.L130:
 1862              	.LBE7:
1972:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 1863              		.loc 1 1972 0
 1864 00c2 0368     		ldr	r3, [r0]
 1865 00c4 9B68     		ldr	r3, [r3, #8]
 1866 00c6 13F0400F 		tst	r3, #64
 1867 00ca 01D1     		bne	.L133
1979:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 1868              		.loc 1 1979 0
 1869 00cc 0023     		movs	r3, #0
 1870 00ce CB70     		strb	r3, [r1, #3]
 1871              	.L133:
1997:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1872              		.loc 1 1997 0
 1873 00d0 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
1998:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 1874              		.loc 1 1998 0
 1875 00d2 6E78     		ldrb	r6, [r5, #1]	@ zero_extendqisi2
 1876 00d4 3602     		lsls	r6, r6, #8
1997:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1877              		.loc 1 1997 0
 1878 00d6 46EA0346 		orr	r6, r6, r3, lsl #16
1999:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 1879              		.loc 1 1999 0
 1880 00da AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
1998:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 1881              		.loc 1 1998 0
 1882 00dc 1E43     		orrs	r6, r6, r3
2000:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 1883              		.loc 1 2000 0
 1884 00de EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
1999:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 1885              		.loc 1 1999 0
 1886 00e0 46EA8356 		orr	r6, r6, r3, lsl #22
2001:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1887              		.loc 1 2001 0
 1888 00e4 95F82430 		ldrb	r3, [r5, #36]	@ zero_extendqisi2
2000:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 1889              		.loc 1 2000 0
 1890 00e8 46EA0366 		orr	r6, r6, r3, lsl #24
2002:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
 1891              		.loc 1 2002 0
 1892 00ec 2B6A     		ldr	r3, [r5, #32]
2001:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1893              		.loc 1 2001 0
 1894 00ee 1E43     		orrs	r6, r6, r3
2003:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 1895              		.loc 1 2003 0
 1896 00f0 6869     		ldr	r0, [r5, #20]
 1897              	.LVL153:
1997:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1898              		.loc 1 1997 0
 1899 00f2 0643     		orrs	r6, r6, r0
 1900              	.LVL154:
 1901 00f4 B5E7     		b	.L132
 1902              	.LVL155:
 1903              	.L142:
 1904              	.LBB8:
2015:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1905              		.loc 1 2015 0
 1906 00f6 2268     		ldr	r2, [r4]
 1907 00f8 9368     		ldr	r3, [r2, #8]
 1908 00fa 23F48073 		bic	r3, r3, #256
 1909 00fe 9360     		str	r3, [r2, #8]
2018:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1910              		.loc 1 2018 0
 1911 0100 2268     		ldr	r2, [r4]
 1912 0102 D368     		ldr	r3, [r2, #12]
 1913 0104 DBB2     		uxtb	r3, r3
 1914 0106 63F4C073 		orn	r3, r3, #384
 1915 010a D360     		str	r3, [r2, #12]
2021:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 1916              		.loc 1 2021 0
 1917 010c FFF7FEFF 		bl	HAL_GetTick
 1918              	.LVL156:
 1919 0110 0546     		mov	r5, r0
 1920              	.LVL157:
 1921              	.L135:
2023:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     {
 1922              		.loc 1 2023 0
 1923 0112 2368     		ldr	r3, [r4]
 1924 0114 DA68     		ldr	r2, [r3, #12]
 1925 0116 12F0010F 		tst	r2, #1
 1926 011a 0FD1     		bne	.L144
2025:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       {
 1927              		.loc 1 2025 0
 1928 011c FFF7FEFF 		bl	HAL_GetTick
 1929              	.LVL158:
 1930 0120 401B     		subs	r0, r0, r5
 1931 0122 B0F57A7F 		cmp	r0, #1000
 1932 0126 F4D9     		bls	.L135
2028:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1933              		.loc 1 2028 0
 1934 0128 2368     		ldr	r3, [r4]
 1935 012a FF22     		movs	r2, #255
 1936 012c 5A62     		str	r2, [r3, #36]
2030:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1937              		.loc 1 2030 0
 1938 012e 0320     		movs	r0, #3
 1939 0130 84F82100 		strb	r0, [r4, #33]
2033:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1940              		.loc 1 2033 0
 1941 0134 0023     		movs	r3, #0
 1942 0136 84F82030 		strb	r3, [r4, #32]
2035:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****       }
 1943              		.loc 1 2035 0
 1944 013a 2CE0     		b	.L129
 1945              	.L144:
2040:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 1946              		.loc 1 2040 0
 1947 013c DE61     		str	r6, [r3, #28]
2042:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1948              		.loc 1 2042 0
 1949 013e 2368     		ldr	r3, [r4]
 1950 0140 5F64     		str	r7, [r3, #68]
2044:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
 1951              		.loc 1 2044 0
 1952 0142 2268     		ldr	r2, [r4]
 1953 0144 9368     		ldr	r3, [r2, #8]
 1954 0146 43F48073 		orr	r3, r3, #256
 1955 014a 9360     		str	r3, [r2, #8]
2046:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 1956              		.loc 1 2046 0
 1957 014c 2268     		ldr	r2, [r4]
 1958 014e 9368     		ldr	r3, [r2, #8]
 1959 0150 43F48053 		orr	r3, r3, #4096
 1960 0154 9360     		str	r3, [r2, #8]
 1961              	.LBE8:
 1962 0156 0CE0     		b	.L137
 1963              	.LVL159:
 1964              	.L143:
 1965              	.LBB9:
2076:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
 1966              		.loc 1 2076 0
 1967 0158 1E62     		str	r6, [r3, #32]
2078:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1968              		.loc 1 2078 0
 1969 015a 2368     		ldr	r3, [r4]
 1970 015c 9F64     		str	r7, [r3, #72]
2080:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
 1971              		.loc 1 2080 0
 1972 015e 2268     		ldr	r2, [r4]
 1973 0160 9368     		ldr	r3, [r2, #8]
 1974 0162 43F40073 		orr	r3, r3, #512
 1975 0166 9360     		str	r3, [r2, #8]
2082:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 1976              		.loc 1 2082 0
 1977 0168 2268     		ldr	r2, [r4]
 1978 016a 9368     		ldr	r3, [r2, #8]
 1979 016c 43F40053 		orr	r3, r3, #8192
 1980 0170 9360     		str	r3, [r2, #8]
 1981              	.LVL160:
 1982              	.L137:
 1983              	.LBE9:
2086:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 1984              		.loc 1 2086 0
 1985 0172 0A4B     		ldr	r3, .L145
 1986 0174 1A68     		ldr	r2, [r3]
 1987 0176 42F48022 		orr	r2, r2, #262144
 1988 017a 1A60     		str	r2, [r3]
2087:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1989              		.loc 1 2087 0
 1990 017c 9A68     		ldr	r2, [r3, #8]
 1991 017e 42F48022 		orr	r2, r2, #262144
 1992 0182 9A60     		str	r2, [r3, #8]
2090:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1993              		.loc 1 2090 0
 1994 0184 2368     		ldr	r3, [r4]
 1995 0186 FF22     		movs	r2, #255
 1996 0188 5A62     		str	r2, [r3, #36]
2092:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 1997              		.loc 1 2092 0
 1998 018a 0123     		movs	r3, #1
 1999 018c 84F82130 		strb	r3, [r4, #33]
2095:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2000              		.loc 1 2095 0
 2001 0190 0020     		movs	r0, #0
 2002 0192 84F82000 		strb	r0, [r4, #32]
 2003              	.LVL161:
 2004              	.L129:
2098:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2005              		.loc 1 2098 0
 2006 0196 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2007              	.LVL162:
 2008              	.L140:
1934:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2009              		.loc 1 1934 0
 2010 0198 0220     		movs	r0, #2
 2011              	.LVL163:
 2012 019a FCE7     		b	.L129
 2013              	.L146:
 2014              		.align	2
 2015              	.L145:
 2016 019c 00040140 		.word	1073808384
 2017              		.cfi_endproc
 2018              	.LFE326:
 2020              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 2021              		.align	1
 2022              		.global	RTC_Bcd2ToByte
 2023              		.syntax unified
 2024              		.thumb
 2025              		.thumb_func
 2026              		.fpu fpv4-sp-d16
 2028              	RTC_Bcd2ToByte:
 2029              	.LFB342:
2679:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
2680:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** /**
2681:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2682:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @param  Value BCD value to be converted
2683:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   * @retval Converted word
2684:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   */
2685:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** uint8_t RTC_Bcd2ToByte(uint8_t Value)
2686:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** {
 2030              		.loc 1 2686 0
 2031              		.cfi_startproc
 2032              		@ args = 0, pretend = 0, frame = 0
 2033              		@ frame_needed = 0, uses_anonymous_args = 0
 2034              		@ link register save eliminated.
 2035              	.LVL164:
2687:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint8_t tmp;
2688:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   tmp = ((Value & 0xF0U) >> 4U) * 10U;
 2036              		.loc 1 2688 0
 2037 0000 0309     		lsrs	r3, r0, #4
 2038 0002 03EB8303 		add	r3, r3, r3, lsl #2
 2039 0006 5A00     		lsls	r2, r3, #1
 2040              	.LVL165:
2689:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   return (tmp + (Value & 0x0FU));
 2041              		.loc 1 2689 0
 2042 0008 00F00F00 		and	r0, r0, #15
 2043              	.LVL166:
 2044 000c 1044     		add	r0, r0, r2
2690:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** }
 2045              		.loc 1 2690 0
 2046 000e C0B2     		uxtb	r0, r0
 2047 0010 7047     		bx	lr
 2048              		.cfi_endproc
 2049              	.LFE342:
 2051              		.section	.text.HAL_RTC_GetTime,"ax",%progbits
 2052              		.align	1
 2053              		.global	HAL_RTC_GetTime
 2054              		.syntax unified
 2055              		.thumb
 2056              		.thumb_func
 2057              		.fpu fpv4-sp-d16
 2059              	HAL_RTC_GetTime:
 2060              	.LFB322:
1553:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmpreg;
 2061              		.loc 1 1553 0
 2062              		.cfi_startproc
 2063              		@ args = 0, pretend = 0, frame = 0
 2064              		@ frame_needed = 0, uses_anonymous_args = 0
 2065              	.LVL167:
 2066 0000 70B5     		push	{r4, r5, r6, lr}
 2067              		.cfi_def_cfa_offset 16
 2068              		.cfi_offset 4, -16
 2069              		.cfi_offset 5, -12
 2070              		.cfi_offset 6, -8
 2071              		.cfi_offset 14, -4
1560:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2072              		.loc 1 1560 0
 2073 0002 0368     		ldr	r3, [r0]
 2074 0004 9B6A     		ldr	r3, [r3, #40]
 2075 0006 4B60     		str	r3, [r1, #4]
1563:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2076              		.loc 1 1563 0
 2077 0008 0368     		ldr	r3, [r0]
 2078 000a 1B69     		ldr	r3, [r3, #16]
 2079 000c C3F30E03 		ubfx	r3, r3, #0, #15
 2080 0010 8B60     		str	r3, [r1, #8]
1566:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2081              		.loc 1 1566 0
 2082 0012 0368     		ldr	r3, [r0]
 2083 0014 1B68     		ldr	r3, [r3]
 2084 0016 03F07F33 		and	r3, r3, #2139062143
 2085 001a 23F0FE43 		bic	r3, r3, #2130706432
 2086              	.LVL168:
1569:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 2087              		.loc 1 1569 0
 2088 001e C3F30540 		ubfx	r0, r3, #16, #6
 2089              	.LVL169:
 2090 0022 0870     		strb	r0, [r1]
1570:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 2091              		.loc 1 1570 0
 2092 0024 C3F30626 		ubfx	r6, r3, #8, #7
 2093 0028 4E70     		strb	r6, [r1, #1]
1571:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 2094              		.loc 1 1571 0
 2095 002a 03F07F05 		and	r5, r3, #127
 2096 002e 8D70     		strb	r5, [r1, #2]
1572:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2097              		.loc 1 1572 0
 2098 0030 9B0D     		lsrs	r3, r3, #22
 2099              	.LVL170:
 2100 0032 CB70     		strb	r3, [r1, #3]
1575:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 2101              		.loc 1 1575 0
 2102 0034 5AB9     		cbnz	r2, .L149
 2103 0036 0C46     		mov	r4, r1
1578:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 2104              		.loc 1 1578 0
 2105 0038 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2106              	.LVL171:
 2107 003c 2070     		strb	r0, [r4]
1579:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 2108              		.loc 1 1579 0
 2109 003e 3046     		mov	r0, r6
 2110 0040 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2111              	.LVL172:
 2112 0044 6070     		strb	r0, [r4, #1]
1580:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 2113              		.loc 1 1580 0
 2114 0046 2846     		mov	r0, r5
 2115 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2116              	.LVL173:
 2117 004c A070     		strb	r0, [r4, #2]
 2118              	.LVL174:
 2119              	.L149:
1584:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2120              		.loc 1 1584 0
 2121 004e 0020     		movs	r0, #0
 2122 0050 70BD     		pop	{r4, r5, r6, pc}
 2123              		.cfi_endproc
 2124              	.LFE322:
 2126              		.section	.text.HAL_RTC_GetDate,"ax",%progbits
 2127              		.align	1
 2128              		.global	HAL_RTC_GetDate
 2129              		.syntax unified
 2130              		.thumb
 2131              		.thumb_func
 2132              		.fpu fpv4-sp-d16
 2134              	HAL_RTC_GetDate:
 2135              	.LFB324:
1681:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t datetmpreg;
 2136              		.loc 1 1681 0
 2137              		.cfi_startproc
 2138              		@ args = 0, pretend = 0, frame = 0
 2139              		@ frame_needed = 0, uses_anonymous_args = 0
 2140              	.LVL175:
 2141 0000 70B5     		push	{r4, r5, r6, lr}
 2142              		.cfi_def_cfa_offset 16
 2143              		.cfi_offset 4, -16
 2144              		.cfi_offset 5, -12
 2145              		.cfi_offset 6, -8
 2146              		.cfi_offset 14, -4
1688:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2147              		.loc 1 1688 0
 2148 0002 0368     		ldr	r3, [r0]
 2149 0004 5B68     		ldr	r3, [r3, #4]
 2150 0006 23F07F43 		bic	r3, r3, #-16777216
 2151 000a 23F0C003 		bic	r3, r3, #192
 2152              	.LVL176:
1691:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 2153              		.loc 1 1691 0
 2154 000e 180C     		lsrs	r0, r3, #16
 2155              	.LVL177:
 2156 0010 C870     		strb	r0, [r1, #3]
1692:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 2157              		.loc 1 1692 0
 2158 0012 C3F30426 		ubfx	r6, r3, #8, #5
 2159 0016 4E70     		strb	r6, [r1, #1]
1693:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 2160              		.loc 1 1693 0
 2161 0018 03F03F05 		and	r5, r3, #63
 2162 001c 8D70     		strb	r5, [r1, #2]
1694:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2163              		.loc 1 1694 0
 2164 001e C3F34233 		ubfx	r3, r3, #13, #3
 2165              	.LVL178:
 2166 0022 0B70     		strb	r3, [r1]
1697:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 2167              		.loc 1 1697 0
 2168 0024 5AB9     		cbnz	r2, .L152
 2169 0026 0C46     		mov	r4, r1
1700:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 2170              		.loc 1 1700 0
 2171 0028 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2172              	.LVL179:
 2173 002c E070     		strb	r0, [r4, #3]
1701:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 2174              		.loc 1 1701 0
 2175 002e 3046     		mov	r0, r6
 2176 0030 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2177              	.LVL180:
 2178 0034 6070     		strb	r0, [r4, #1]
1702:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 2179              		.loc 1 1702 0
 2180 0036 2846     		mov	r0, r5
 2181 0038 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2182              	.LVL181:
 2183 003c A070     		strb	r0, [r4, #2]
 2184              	.LVL182:
 2185              	.L152:
1705:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2186              		.loc 1 1705 0
 2187 003e 0020     		movs	r0, #0
 2188 0040 70BD     		pop	{r4, r5, r6, pc}
 2189              		.cfi_endproc
 2190              	.LFE324:
 2192              		.section	.text.HAL_RTC_GetAlarm,"ax",%progbits
 2193              		.align	1
 2194              		.global	HAL_RTC_GetAlarm
 2195              		.syntax unified
 2196              		.thumb
 2197              		.thumb_func
 2198              		.fpu fpv4-sp-d16
 2200              	HAL_RTC_GetAlarm:
 2201              	.LFB328:
2214:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   uint32_t tmpreg, subsecondtmpreg;
 2202              		.loc 1 2214 0
 2203              		.cfi_startproc
 2204              		@ args = 0, pretend = 0, frame = 0
 2205              		@ frame_needed = 0, uses_anonymous_args = 0
 2206              	.LVL183:
 2207 0000 10B5     		push	{r4, lr}
 2208              		.cfi_def_cfa_offset 8
 2209              		.cfi_offset 4, -8
 2210              		.cfi_offset 14, -4
2221:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 2211              		.loc 1 2221 0
 2212 0002 B2F5807F 		cmp	r2, #256
 2213 0006 34D0     		beq	.L159
2241:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2214              		.loc 1 2241 0
 2215 0008 4FF40072 		mov	r2, #512
 2216              	.LVL184:
 2217 000c 8A62     		str	r2, [r1, #40]
2243:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2218              		.loc 1 2243 0
 2219 000e 0068     		ldr	r0, [r0]
 2220              	.LVL185:
 2221 0010 026A     		ldr	r2, [r0, #32]
 2222              	.LVL186:
2244:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2223              		.loc 1 2244 0
 2224 0012 806C     		ldr	r0, [r0, #72]
 2225 0014 C0F30E00 		ubfx	r0, r0, #0, #15
 2226              	.LVL187:
2247:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMB
 2227              		.loc 1 2247 0
 2228 0018 C2F30544 		ubfx	r4, r2, #16, #6
 2229 001c 0C70     		strb	r4, [r1]
2248:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_
 2230              		.loc 1 2248 0
 2231 001e C2F30624 		ubfx	r4, r2, #8, #7
 2232 0022 4C70     		strb	r4, [r1, #1]
2249:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 2233              		.loc 1 2249 0
 2234 0024 02F07F04 		and	r4, r2, #127
 2235 0028 8C70     		strb	r4, [r1, #2]
2250:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2236              		.loc 1 2250 0
 2237 002a C2F38054 		ubfx	r4, r2, #22, #1
 2238 002e CC70     		strb	r4, [r1, #3]
2251:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_D
 2239              		.loc 1 2251 0
 2240 0030 4860     		str	r0, [r1, #4]
2252:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 2241              		.loc 1 2252 0
 2242 0032 C2F30560 		ubfx	r0, r2, #24, #6
 2243              	.LVL188:
 2244 0036 81F82400 		strb	r0, [r1, #36]
2253:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 2245              		.loc 1 2253 0
 2246 003a 02F08040 		and	r0, r2, #1073741824
 2247 003e 0862     		str	r0, [r1, #32]
2254:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 2248              		.loc 1 2254 0
 2249 0040 02F08032 		and	r2, r2, #-2139062144
 2250              	.LVL189:
 2251 0044 4A61     		str	r2, [r1, #20]
 2252              	.LVL190:
 2253              	.L156:
2257:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   {
 2254              		.loc 1 2257 0
 2255 0046 93B9     		cbnz	r3, .L157
 2256 0048 0C46     		mov	r4, r1
2259:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 2257              		.loc 1 2259 0
 2258 004a 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 2259 004c FFF7FEFF 		bl	RTC_Bcd2ToByte
 2260              	.LVL191:
 2261 0050 2070     		strb	r0, [r4]
2260:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 2262              		.loc 1 2260 0
 2263 0052 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2264 0054 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2265              	.LVL192:
 2266 0058 6070     		strb	r0, [r4, #1]
2261:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2267              		.loc 1 2261 0
 2268 005a A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 2269 005c FFF7FEFF 		bl	RTC_Bcd2ToByte
 2270              	.LVL193:
 2271 0060 A070     		strb	r0, [r4, #2]
2262:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 2272              		.loc 1 2262 0
 2273 0062 94F82400 		ldrb	r0, [r4, #36]	@ zero_extendqisi2
 2274 0066 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2275              	.LVL194:
 2276 006a 84F82400 		strb	r0, [r4, #36]
 2277              	.LVL195:
 2278              	.L157:
2266:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2279              		.loc 1 2266 0
 2280 006e 0020     		movs	r0, #0
 2281 0070 10BD     		pop	{r4, pc}
 2282              	.LVL196:
 2283              	.L159:
2224:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2284              		.loc 1 2224 0
 2285 0072 8A62     		str	r2, [r1, #40]
2226:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 2286              		.loc 1 2226 0
 2287 0074 0068     		ldr	r0, [r0]
 2288              	.LVL197:
 2289 0076 C269     		ldr	r2, [r0, #28]
 2290              	.LVL198:
2227:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c **** 
 2291              		.loc 1 2227 0
 2292 0078 406C     		ldr	r0, [r0, #68]
 2293 007a C0F30E00 		ubfx	r0, r0, #0, #15
 2294              	.LVL199:
2230:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMA
 2295              		.loc 1 2230 0
 2296 007e C2F30544 		ubfx	r4, r2, #16, #6
 2297 0082 0C70     		strb	r4, [r1]
2231:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_
 2298              		.loc 1 2231 0
 2299 0084 C2F30624 		ubfx	r4, r2, #8, #7
 2300 0088 4C70     		strb	r4, [r1, #1]
2232:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 2301              		.loc 1 2232 0
 2302 008a 02F07F04 		and	r4, r2, #127
 2303 008e 8C70     		strb	r4, [r1, #2]
2233:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2304              		.loc 1 2233 0
 2305 0090 C2F38054 		ubfx	r4, r2, #22, #1
 2306 0094 CC70     		strb	r4, [r1, #3]
2234:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_D
 2307              		.loc 1 2234 0
 2308 0096 4860     		str	r0, [r1, #4]
2235:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 2309              		.loc 1 2235 0
 2310 0098 C2F30560 		ubfx	r0, r2, #24, #6
 2311              	.LVL200:
 2312 009c 81F82400 		strb	r0, [r1, #36]
2236:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****     sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 2313              		.loc 1 2236 0
 2314 00a0 02F08040 		and	r0, r2, #1073741824
 2315 00a4 0862     		str	r0, [r1, #32]
2237:../system/src/stm32l4-hal-driver/stm32l4xx_hal_rtc.c ****   }
 2316              		.loc 1 2237 0
 2317 00a6 02F08032 		and	r2, r2, #-2139062144
 2318              	.LVL201:
 2319 00aa 4A61     		str	r2, [r1, #20]
 2320 00ac CBE7     		b	.L156
 2321              		.cfi_endproc
 2322              	.LFE328:
 2324              		.text
 2325              	.Letext0:
 2326              		.file 2 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 2327              		.file 3 "../system/include/cmsis/stm32l4xx/core_cm4.h"
 2328              		.file 4 "../system/include/cmsis/stm32l4xx/device/system_stm32l4xx.h"
 2329              		.file 5 "../system/include/cmsis/stm32l4xx/device/stm32l471xx.h"
 2330              		.file 6 "../system/include/stm32l4-hal-driver/stm32l4xx_hal_def.h"
 2331              		.file 7 "../system/include/stm32l4-hal-driver/stm32l4xx_hal_flash.h"
 2332              		.file 8 "../system/include/stm32l4-hal-driver/stm32l4xx_hal_rtc.h"
 2333              		.file 9 "../system/include/stm32l4-hal-driver/stm32l4xx_hal.h"
 2334              		.file 10 "../system/include/stm32l4-hal-driver/stm32l4xx_hal_rtc_ex.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l4xx_hal_rtc.c
     /tmp/ccfV2KsU.s:18     .text.HAL_RTC_MspInit:0000000000000000 $t
     /tmp/ccfV2KsU.s:25     .text.HAL_RTC_MspInit:0000000000000000 HAL_RTC_MspInit
     /tmp/ccfV2KsU.s:40     .text.HAL_RTC_MspDeInit:0000000000000000 $t
     /tmp/ccfV2KsU.s:47     .text.HAL_RTC_MspDeInit:0000000000000000 HAL_RTC_MspDeInit
     /tmp/ccfV2KsU.s:61     .text.HAL_RTC_DeactivateAlarm:0000000000000000 $t
     /tmp/ccfV2KsU.s:68     .text.HAL_RTC_DeactivateAlarm:0000000000000000 HAL_RTC_DeactivateAlarm
     /tmp/ccfV2KsU.s:212    .text.HAL_RTC_DST_Add1Hour:0000000000000000 $t
     /tmp/ccfV2KsU.s:219    .text.HAL_RTC_DST_Add1Hour:0000000000000000 HAL_RTC_DST_Add1Hour
     /tmp/ccfV2KsU.s:248    .text.HAL_RTC_DST_Add1Hour:0000000000000020 $d
     /tmp/ccfV2KsU.s:253    .text.HAL_RTC_DST_Sub1Hour:0000000000000000 $t
     /tmp/ccfV2KsU.s:260    .text.HAL_RTC_DST_Sub1Hour:0000000000000000 HAL_RTC_DST_Sub1Hour
     /tmp/ccfV2KsU.s:289    .text.HAL_RTC_DST_Sub1Hour:0000000000000020 $d
     /tmp/ccfV2KsU.s:294    .text.HAL_RTC_DST_SetStoreOperation:0000000000000000 $t
     /tmp/ccfV2KsU.s:301    .text.HAL_RTC_DST_SetStoreOperation:0000000000000000 HAL_RTC_DST_SetStoreOperation
     /tmp/ccfV2KsU.s:330    .text.HAL_RTC_DST_SetStoreOperation:0000000000000020 $d
     /tmp/ccfV2KsU.s:335    .text.HAL_RTC_DST_ClearStoreOperation:0000000000000000 $t
     /tmp/ccfV2KsU.s:342    .text.HAL_RTC_DST_ClearStoreOperation:0000000000000000 HAL_RTC_DST_ClearStoreOperation
     /tmp/ccfV2KsU.s:371    .text.HAL_RTC_DST_ClearStoreOperation:0000000000000020 $d
     /tmp/ccfV2KsU.s:376    .text.HAL_RTC_DST_ReadStoreOperation:0000000000000000 $t
     /tmp/ccfV2KsU.s:383    .text.HAL_RTC_DST_ReadStoreOperation:0000000000000000 HAL_RTC_DST_ReadStoreOperation
     /tmp/ccfV2KsU.s:401    .text.HAL_RTC_DST_ReadStoreOperation:000000000000000c $d
     /tmp/ccfV2KsU.s:406    .text.HAL_RTC_AlarmAEventCallback:0000000000000000 $t
     /tmp/ccfV2KsU.s:413    .text.HAL_RTC_AlarmAEventCallback:0000000000000000 HAL_RTC_AlarmAEventCallback
     /tmp/ccfV2KsU.s:427    .text.HAL_RTC_AlarmIRQHandler:0000000000000000 $t
     /tmp/ccfV2KsU.s:434    .text.HAL_RTC_AlarmIRQHandler:0000000000000000 HAL_RTC_AlarmIRQHandler
     /tmp/ccfV2KsU.s:501    .text.HAL_RTC_AlarmIRQHandler:000000000000005c $d
     /tmp/ccfV2KsU.s:506    .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 $t
     /tmp/ccfV2KsU.s:513    .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 HAL_RTC_PollForAlarmAEvent
     /tmp/ccfV2KsU.s:575    .text.HAL_RTC_WaitForSynchro:0000000000000000 $t
     /tmp/ccfV2KsU.s:582    .text.HAL_RTC_WaitForSynchro:0000000000000000 HAL_RTC_WaitForSynchro
     /tmp/ccfV2KsU.s:631    .text.HAL_RTC_GetState:0000000000000000 $t
     /tmp/ccfV2KsU.s:638    .text.HAL_RTC_GetState:0000000000000000 HAL_RTC_GetState
     /tmp/ccfV2KsU.s:655    .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/ccfV2KsU.s:662    .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/ccfV2KsU.s:726    .text.RTC_ExitInitMode:0000000000000000 $t
     /tmp/ccfV2KsU.s:733    .text.RTC_ExitInitMode:0000000000000000 RTC_ExitInitMode
     /tmp/ccfV2KsU.s:796    .text.RTC_ExitInitMode:000000000000004c $d
     /tmp/ccfV2KsU.s:801    .text.HAL_RTC_Init:0000000000000000 $t
     /tmp/ccfV2KsU.s:808    .text.HAL_RTC_Init:0000000000000000 HAL_RTC_Init
     /tmp/ccfV2KsU.s:929    .text.HAL_RTC_DeInit:0000000000000000 $t
     /tmp/ccfV2KsU.s:936    .text.HAL_RTC_DeInit:0000000000000000 HAL_RTC_DeInit
     /tmp/ccfV2KsU.s:1051   .text.HAL_RTC_DeInit:0000000000000090 $d
     /tmp/ccfV2KsU.s:1056   .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/ccfV2KsU.s:1063   .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/ccfV2KsU.s:1101   .text.HAL_RTC_SetTime:0000000000000000 $t
     /tmp/ccfV2KsU.s:1108   .text.HAL_RTC_SetTime:0000000000000000 HAL_RTC_SetTime
     /tmp/ccfV2KsU.s:1275   .text.HAL_RTC_SetDate:0000000000000000 $t
     /tmp/ccfV2KsU.s:1282   .text.HAL_RTC_SetDate:0000000000000000 HAL_RTC_SetDate
     /tmp/ccfV2KsU.s:1430   .text.HAL_RTC_SetAlarm:0000000000000000 $t
     /tmp/ccfV2KsU.s:1437   .text.HAL_RTC_SetAlarm:0000000000000000 HAL_RTC_SetAlarm
     /tmp/ccfV2KsU.s:1719   .text.HAL_RTC_SetAlarm_IT:0000000000000000 $t
     /tmp/ccfV2KsU.s:1726   .text.HAL_RTC_SetAlarm_IT:0000000000000000 HAL_RTC_SetAlarm_IT
     /tmp/ccfV2KsU.s:2016   .text.HAL_RTC_SetAlarm_IT:000000000000019c $d
     /tmp/ccfV2KsU.s:2021   .text.RTC_Bcd2ToByte:0000000000000000 $t
     /tmp/ccfV2KsU.s:2028   .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/ccfV2KsU.s:2052   .text.HAL_RTC_GetTime:0000000000000000 $t
     /tmp/ccfV2KsU.s:2059   .text.HAL_RTC_GetTime:0000000000000000 HAL_RTC_GetTime
     /tmp/ccfV2KsU.s:2127   .text.HAL_RTC_GetDate:0000000000000000 $t
     /tmp/ccfV2KsU.s:2134   .text.HAL_RTC_GetDate:0000000000000000 HAL_RTC_GetDate
     /tmp/ccfV2KsU.s:2193   .text.HAL_RTC_GetAlarm:0000000000000000 $t
     /tmp/ccfV2KsU.s:2200   .text.HAL_RTC_GetAlarm:0000000000000000 HAL_RTC_GetAlarm
                           .group:0000000000000000 wm4.0.95bc707da9dcffdc6c8c58936cbc8421
                           .group:0000000000000000 wm4.stm32l4xx_hal_conf.h.24.9ebdf529a64add7ef5197540a829be93
                           .group:0000000000000000 wm4.stm32l4xx.h.39.54a1fe1e096c7852edd649652f013a11
                           .group:0000000000000000 wm4.stm32l471xx.h.35.e78ad65c513105dda311dc495ac74d04
                           .group:0000000000000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:0000000000000000 wm4.cmsis_version.h.32.46e8eccfa2cfeaae11d008bb2823a3ed
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.b6144e50d34fc998dd4c2cfb6387cf91
                           .group:0000000000000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:0000000000000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:0000000000000000 wm4.stm32l471xx.h.423.ceac761476affad641a3347d7727acfd
                           .group:0000000000000000 wm4.stm32l4xx.h.197.fb1c68184133668ca24c44c29ba4361f
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.23.c14bec61d389910444dd6f90923a87b3
                           .group:0000000000000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:0000000000000000 wm4.stm32l4xx_hal_def.h.58.ba9880fce6c06e05c42ff3652190ba19
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc.h.158.28a9a8aed9528254d5d00c542977dfd6
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc_ex.h.22.da7044b74af98b061fec57b6c981623c
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio.h.22.cdd02b3dd2d28ab2a58b80abaa62239c
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio_ex.h.22.e3066224621c54896e68c044cff2946f
                           .group:0000000000000000 wm4.stm32l4xx_hal_dma.h.22.13f7e03251508cf372ae373347b36e9b
                           .group:0000000000000000 wm4.stm32l4xx_hal_cortex.h.22.cb70b059ea6d04d060ca379a6d57d1fd
                           .group:0000000000000000 wm4.stm32l4xx_ll_adc.h.22.1a01db9155ec232fb5933b76785afed0
                           .group:0000000000000000 wm4.stm32l4xx_hal_adc.h.321.ee3f28f76fc70066e4cbbd758e576892
                           .group:0000000000000000 wm4.stm32l4xx_hal_adc_ex.h.22.fb5e6d418a426c9b079c9adc15fee3b1
                           .group:0000000000000000 wm4.stm32l4xx_hal_crc.h.22.e28f2dff7c14319a60cfaa8412b63a14
                           .group:0000000000000000 wm4.stm32l4xx_hal_crc_ex.h.22.58aa3be0563eedff5893c4b663184cf2
                           .group:0000000000000000 wm4.stm32l4xx_hal_dac.h.22.74749bf4f9405a5fbfaaf1cc4c06eba3
                           .group:0000000000000000 wm4.stm32l4xx_hal_dac_ex.h.22.4e3cedba5893653c1d8ca689fa739e33
                           .group:0000000000000000 wm4.stm32l4xx_hal_exti.h.22.d0c18acb1f51146e775f234290c1ac27
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.22.80f6973ea14060a68f7ca21c1dd39289
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.847.7bdb45d9d57728034960e0aaf38df4fb
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.22.5cbc76724b1dba5416e985e397b92828
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c_ex.h.22.4c81bf9806badb3d50f1da26b08d305a
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.715.a3aff164d469153c75cf623f9ff49d7a
                           .group:0000000000000000 wm4.stm32l4xx_hal_iwdg.h.22.7e954cf06602114b3daf58f5ffbb9e50
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr.h.22.0049bff0a26f90119451fdfe5f426c51
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr_ex.h.22.3d1049b6827a186d471882b21e35998d
                           .group:0000000000000000 wm4.stm32l4xx_hal_rng.h.22.3da3130b715b6ad6f9d8d49653bdfddb
                           .group:0000000000000000 wm4.stm32l4xx_hal_rtc.h.22.21d64301309237f9b9255a8c80902f7c
                           .group:0000000000000000 wm4.stm32l4xx_hal_rtc_ex.h.22.6c248c3dbae3d1f0fefc4b9faaa2cd0b
                           .group:0000000000000000 wm4.stm32l4xx_hal_rtc.h.977.b3b3c98b50a30362b61b120ec4fce236
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim.h.22.6c7398a1c55179e1de4bfd7d5a7564ac
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim_ex.h.22.1a7b532f5010a085c12eee7e9c7b0c21
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart.h.22.5f632bd044c516c02fe0b49488f063f8
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart_ex.h.22.de11c23890d64b2968c97dd6f5dae21a
                           .group:0000000000000000 wm4.stm32l4xx_hal.h.76.993cab68f7f350dd05a21a919b3be96f

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RTCEx_AlarmBEventCallback
