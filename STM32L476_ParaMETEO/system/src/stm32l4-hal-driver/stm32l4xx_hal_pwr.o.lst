   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32l4xx_hal_pwr.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_PWR_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_PWR_DeInit:
  26              	.LFB317:
  27              		.file 1 "../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c"
   1:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
   2:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   ******************************************************************************
   3:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @file    stm32l4xx_hal_pwr.c
   4:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @author  MCD Application Team
   5:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   6:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following
   7:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   8:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *           + Initialization/de-initialization functions
   9:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *           + Peripheral Control functions
  10:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *
  11:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   ******************************************************************************
  12:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @attention
  13:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *
  14:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  15:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * All rights reserved.</center></h2>
  16:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *
  17:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  18:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * the "License"; You may not use this file except in compliance with the
  19:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * License. You may obtain a copy of the License at:
  20:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *                        opensource.org/licenses/BSD-3-Clause
  21:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *
  22:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   ******************************************************************************
  23:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
  24:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
  25:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
  26:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** #include "stm32l4xx_hal.h"
  27:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
  28:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /** @addtogroup STM32L4xx_HAL_Driver
  29:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @{
  30:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
  31:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
  32:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /** @defgroup PWR PWR
  33:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief PWR HAL module driver
  34:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @{
  35:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
  36:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
  37:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** #ifdef HAL_PWR_MODULE_ENABLED
  38:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
  39:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  40:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
  41:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
  42:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /** @defgroup PWR_Private_Defines PWR Private Defines
  43:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @{
  44:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
  45:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
  46:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /** @defgroup PWR_PVD_Mode_Mask PWR PVD Mode Mask
  47:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @{
  48:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
  49:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** #define PVD_MODE_IT               ((uint32_t)0x00010000)  /*!< Mask for interruption yielded by PVD
  50:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** #define PVD_MODE_EVT              ((uint32_t)0x00020000)  /*!< Mask for event yielded by PVD thresh
  51:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** #define PVD_RISING_EDGE           ((uint32_t)0x00000001)  /*!< Mask for rising edge set as PVD trig
  52:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** #define PVD_FALLING_EDGE          ((uint32_t)0x00000002)  /*!< Mask for falling edge set as PVD tri
  53:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
  54:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @}
  55:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
  56:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
  57:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
  58:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @}
  59:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
  60:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
  61:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /* Private macro -------------------------------------------------------------*/
  62:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
  63:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  64:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /* Exported functions --------------------------------------------------------*/
  65:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
  66:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions PWR Exported Functions
  67:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @{
  68:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
  69:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
  70:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group1 Initialization and de-initialization functions
  71:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *  @brief    Initialization and de-initialization functions
  72:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *
  73:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** @verbatim
  74:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****  ===============================================================================
  75:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****               ##### Initialization and de-initialization functions #####
  76:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****  ===============================================================================
  77:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     [..]
  78:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
  79:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** @endverbatim
  80:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @{
  81:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
  82:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
  83:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
  84:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief Deinitialize the HAL PWR peripheral registers to their default reset values.
  85:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
  86:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
  87:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
  88:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
  28              		.loc 1 88 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  89:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   __HAL_RCC_PWR_FORCE_RESET();
  33              		.loc 1 89 0
  34 0000 044B     		ldr	r3, .L2
  35 0002 9A6B     		ldr	r2, [r3, #56]
  36 0004 42F08052 		orr	r2, r2, #268435456
  37 0008 9A63     		str	r2, [r3, #56]
  90:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   __HAL_RCC_PWR_RELEASE_RESET();
  38              		.loc 1 90 0
  39 000a 9A6B     		ldr	r2, [r3, #56]
  40 000c 22F08052 		bic	r2, r2, #268435456
  41 0010 9A63     		str	r2, [r3, #56]
  91:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
  42              		.loc 1 91 0
  43 0012 7047     		bx	lr
  44              	.L3:
  45              		.align	2
  46              	.L2:
  47 0014 00100240 		.word	1073876992
  48              		.cfi_endproc
  49              	.LFE317:
  51              		.section	.text.HAL_PWR_EnableBkUpAccess,"ax",%progbits
  52              		.align	1
  53              		.global	HAL_PWR_EnableBkUpAccess
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	HAL_PWR_EnableBkUpAccess:
  60              	.LFB318:
  92:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
  93:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
  94:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief Enable access to the backup domain
  95:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        (RTC registers, RTC backup data registers).
  96:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note  After reset, the backup domain is protected against
  97:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        possible unwanted write accesses.
  98:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note  RTCSEL that sets the RTC clock source selection is in the RTC back-up domain.
  99:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        In order to set or modify the RTC clock, the backup domain access must be
 100:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        disabled.
 101:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
 102:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        back-up domain.
 103:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
 104:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 105:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 106:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
  61              		.loc 1 106 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
 107:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   SET_BIT(PWR->CR1, PWR_CR1_DBP);
  66              		.loc 1 107 0
  67 0000 024A     		ldr	r2, .L5
  68 0002 1368     		ldr	r3, [r2]
  69 0004 43F48073 		orr	r3, r3, #256
  70 0008 1360     		str	r3, [r2]
 108:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
  71              		.loc 1 108 0
  72 000a 7047     		bx	lr
  73              	.L6:
  74              		.align	2
  75              	.L5:
  76 000c 00700040 		.word	1073770496
  77              		.cfi_endproc
  78              	.LFE318:
  80              		.section	.text.HAL_PWR_DisableBkUpAccess,"ax",%progbits
  81              		.align	1
  82              		.global	HAL_PWR_DisableBkUpAccess
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  86              		.fpu fpv4-sp-d16
  88              	HAL_PWR_DisableBkUpAccess:
  89              	.LFB319:
 109:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 110:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
 111:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief Disable access to the backup domain
 112:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        (RTC registers, RTC backup data registers).
 113:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
 114:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 115:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
 116:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
  90              		.loc 1 116 0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
 117:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
  95              		.loc 1 117 0
  96 0000 024A     		ldr	r2, .L8
  97 0002 1368     		ldr	r3, [r2]
  98 0004 23F48073 		bic	r3, r3, #256
  99 0008 1360     		str	r3, [r2]
 118:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
 100              		.loc 1 118 0
 101 000a 7047     		bx	lr
 102              	.L9:
 103              		.align	2
 104              	.L8:
 105 000c 00700040 		.word	1073770496
 106              		.cfi_endproc
 107              	.LFE319:
 109              		.section	.text.HAL_PWR_ConfigPVD,"ax",%progbits
 110              		.align	1
 111              		.global	HAL_PWR_ConfigPVD
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu fpv4-sp-d16
 117              	HAL_PWR_ConfigPVD:
 118              	.LFB320:
 119:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 120:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 121:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 122:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 123:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
 124:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @}
 125:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 126:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 127:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 128:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 129:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group2 Peripheral Control functions
 130:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *  @brief Low Power modes configuration functions
 131:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *
 132:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** @verbatim
 133:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 134:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****  ===============================================================================
 135:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****                  ##### Peripheral Control functions #####
 136:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****  ===============================================================================
 137:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 138:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****      [..]
 139:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****      *** PVD configuration ***
 140:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     =========================
 141:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     [..]
 142:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a
 143:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in PWR_CR2 register).
 144:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 145:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) PVDO flag is available to indicate if VDD/VDDA is higher or lower
 146:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI
 147:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           line16 and can generate an interrupt if enabled. This is done through
 148:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           __HAL_PVD_EXTI_ENABLE_IT() macro.
 149:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) The PVD is stopped in Standby mode.
 150:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 151:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 152:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     *** WakeUp pin configuration ***
 153:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     ================================
 154:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     [..]
 155:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) WakeUp pins are used to wakeup the system from Standby mode or Shutdown mode.
 156:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           The polarity of these pins can be set to configure event detection on high
 157:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           level (rising edge) or low level (falling edge).
 158:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 159:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 160:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 161:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     *** Low Power modes configuration ***
 162:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     =====================================
 163:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     [..]
 164:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       The devices feature 8 low-power modes:
 165:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Low-power Run mode: core and peripherals are running, main regulator off, low power regul
 166:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Sleep mode: Cortex-M4 core stopped, peripherals kept running, main and low power regulato
 167:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Low-power Sleep mode: Cortex-M4 core stopped, peripherals kept running, main regulator of
 168:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Stop 0 mode: all clocks are stopped except LSI and LSE, main and low power regulators on.
 169:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Stop 1 mode: all clocks are stopped except LSI and LSE, main regulator off, low power reg
 170:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Stop 2 mode: all clocks are stopped except LSI and LSE, main regulator off, low power reg
 171:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Standby mode with SRAM2: all clocks are stopped except LSI and LSE, SRAM2 content preserv
 172:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Standby mode without SRAM2: all clocks are stopped except LSI and LSE, main and low power
 173:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Shutdown mode: all clocks are stopped except LSE, main and low power regulators off.
 174:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 175:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 176:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****    *** Low-power run mode ***
 177:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****    ==========================
 178:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     [..]
 179:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Entry: (from main run mode)
 180:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****         (++) set LPR bit with HAL_PWREx_EnableLowPowerRunMode() API after having decreased the syst
 181:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 182:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Exit:
 183:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****         (++) clear LPR bit then wait for REGLP bit to be reset with HAL_PWREx_DisableLowPowerRunMod
 184:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****              then can the system clock frequency be increased above 2 MHz.
 185:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 186:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 187:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****    *** Sleep mode / Low-power sleep mode ***
 188:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****    =========================================
 189:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     [..]
 190:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Entry:
 191:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           The Sleep mode / Low-power Sleep mode is entered thru HAL_PWR_EnterSLEEPMode() API
 192:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           in specifying whether or not the regulator is forced to low-power mode and if exit is int
 193:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (++) PWR_MAINREGULATOR_ON: Sleep mode (regulator in main mode).
 194:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (++) PWR_LOWPOWERREGULATOR_ON: Low-power sleep (regulator in low power mode).
 195:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           In the latter case, the system clock frequency must have been decreased below 2 MHz befor
 196:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 197:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 198:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 199:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) WFI Exit:
 200:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****         (++) Any peripheral interrupt acknowledged by the nested vectored interrupt
 201:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****              controller (NVIC) or any wake-up event.
 202:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 203:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) WFE Exit:
 204:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****         (++) Any wake-up event such as an EXTI line configured in event mode.
 205:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 206:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****          [..] When exiting the Low-power sleep mode by issuing an interrupt or a wakeup event,
 207:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****              the MCU is in Low-power Run mode.
 208:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 209:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****    *** Stop 0, Stop 1 and Stop 2 modes ***
 210:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****    ===============================
 211:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     [..]
 212:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Entry:
 213:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           The Stop 0, Stop 1 or Stop 2 modes are entered thru the following API's:
 214:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (++) HAL_PWREx_EnterSTOP0Mode() for mode 0 or HAL_PWREx_EnterSTOP1Mode() for mode 1 or fo
 215:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (++) HAL_PWREx_EnterSTOP2Mode() for mode 2.
 216:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Regulator setting (applicable to HAL_PWR_EnterSTOPMode() only):
 217:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (++) PWR_MAINREGULATOR_ON
 218:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (++) PWR_LOWPOWERREGULATOR_ON
 219:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Exit (interrupt or event-triggered, specified when entering STOP mode):
 220:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (++) PWR_STOPENTRY_WFI: enter Stop mode with WFI instruction
 221:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (++) PWR_STOPENTRY_WFE: enter Stop mode with WFE instruction
 222:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 223:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) WFI Exit:
 224:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (++) Any EXTI Line (Internal or External) configured in Interrupt mode.
 225:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (++) Some specific communication peripherals (USART, LPUART, I2C) interrupts
 226:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****                when programmed in wakeup mode.
 227:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) WFE Exit:
 228:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (++) Any EXTI Line (Internal or External) configured in Event mode.
 229:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 230:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****        [..]
 231:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           When exiting Stop 0 and Stop 1 modes, the MCU is either in Run mode or in Low-power Run m
 232:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           depending on the LPR bit setting.
 233:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           When exiting Stop 2 mode, the MCU is in Run mode.
 234:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 235:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****    *** Standby mode ***
 236:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****    ====================
 237:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****      [..]
 238:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       The Standby mode offers two options:
 239:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) option a) all clocks off except LSI and LSE, RRS bit set (keeps voltage regulator in low 
 240:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****         SRAM and registers contents are lost except for the SRAM2 content, the RTC registers, RTC b
 241:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****         and Standby circuitry.
 242:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) option b) all clocks off except LSI and LSE, RRS bit cleared (voltage regulator then disa
 243:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****         SRAM and register contents are lost except for the RTC registers, RTC backup registers
 244:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****         and Standby circuitry.
 245:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 246:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (++) Entry:
 247:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (+++) The Standby mode is entered thru HAL_PWR_EnterSTANDBYMode() API.
 248:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****                 SRAM1 and register contents are lost except for registers in the Backup domain and
 249:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****                 Standby circuitry. SRAM2 content can be preserved if the bit RRS is set in PWR_CR3 
 250:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****                 To enable this feature, the user can resort to HAL_PWREx_EnableSRAM2ContentRetentio
 251:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****                 to set RRS bit.
 252:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 253:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (++) Exit:
 254:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (+++) WKUP pin rising edge, RTC alarm or wakeup, tamper event, time-stamp event,
 255:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****                 external reset in NRST pin, IWDG reset.
 256:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 257:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       [..]    After waking up from Standby mode, program execution restarts in the same way as afte
 258:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 259:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 260:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     *** Shutdown mode ***
 261:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****    ======================
 262:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****      [..]
 263:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       In Shutdown mode,
 264:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****         voltage regulator is disabled, all clocks are off except LSE, RRS bit is cleared.
 265:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****         SRAM and registers contents are lost except for backup domain registers.
 266:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 267:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Entry:
 268:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           The Shutdown mode is entered thru HAL_PWREx_EnterSHUTDOWNMode() API.
 269:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 270:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) Exit:
 271:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****           (++) WKUP pin rising edge, RTC alarm or wakeup, tamper event, time-stamp event,
 272:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****                external reset in NRST pin.
 273:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 274:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****          [..] After waking up from Shutdown mode, program execution restarts in the same way as aft
 275:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 276:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 277:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 278:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****    =============================================
 279:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     [..]
 280:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC
 281:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       Wakeup event, a tamper event or a time-stamp event, without depending on
 282:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       an external interrupt (Auto-wakeup mode).
 283:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 284:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       (+) RTC auto-wakeup (AWU) from the Stop, Standby and Shutdown modes
 285:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 286:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 287:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to
 288:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****              configure the RTC to generate the RTC alarm using the HAL_RTC_SetAlarm_IT() function.
 289:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 290:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it
 291:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****              is necessary to configure the RTC to detect the tamper or time stamp event using the
 292:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****              HAL_RTCEx_SetTimeStamp_IT() or HAL_RTCEx_SetTamper_IT() functions.
 293:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 294:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC WakeUp event, it is necessary to
 295:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****               configure the RTC to generate the RTC WakeUp event using the HAL_RTCEx_SetWakeUpTimer
 296:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 297:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** @endverbatim
 298:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @{
 299:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 300:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 301:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 302:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 303:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
 304:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief Configure the voltage threshold detected by the Power Voltage Detector (PVD).
 305:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @param sConfigPVD: pointer to a PWR_PVDTypeDef structure that contains the PVD
 306:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        configuration information.
 307:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note Refer to the electrical characteristics of your device datasheet for
 308:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *         more details about the voltage thresholds corresponding to each
 309:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *         detection level.
 310:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
 311:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 312:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
 313:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
 119              		.loc 1 313 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
 124              	.LVL0:
 314:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Check the parameters */
 315:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
 316:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
 317:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 318:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Set PLS bits according to PVDLevel value */
 319:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 125              		.loc 1 319 0
 126 0000 1E4A     		ldr	r2, .L15
 127 0002 5368     		ldr	r3, [r2, #4]
 128 0004 23F00E03 		bic	r3, r3, #14
 129 0008 0168     		ldr	r1, [r0]
 130 000a 0B43     		orrs	r3, r3, r1
 131 000c 5360     		str	r3, [r2, #4]
 320:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 321:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Clear any previous config. Keep it clear if no event or IT mode is selected */
 322:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 132              		.loc 1 322 0
 133 000e 1C4B     		ldr	r3, .L15+4
 134 0010 5A68     		ldr	r2, [r3, #4]
 135 0012 22F48032 		bic	r2, r2, #65536
 136 0016 5A60     		str	r2, [r3, #4]
 323:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_IT();
 137              		.loc 1 323 0
 138 0018 1A68     		ldr	r2, [r3]
 139 001a 22F48032 		bic	r2, r2, #65536
 140 001e 1A60     		str	r2, [r3]
 324:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 141              		.loc 1 324 0
 142 0020 DA68     		ldr	r2, [r3, #12]
 143 0022 22F48032 		bic	r2, r2, #65536
 144 0026 DA60     		str	r2, [r3, #12]
 325:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 145              		.loc 1 325 0
 146 0028 9A68     		ldr	r2, [r3, #8]
 147 002a 22F48032 		bic	r2, r2, #65536
 148 002e 9A60     		str	r2, [r3, #8]
 326:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 327:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Configure interrupt mode */
 328:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 149              		.loc 1 328 0
 150 0030 4368     		ldr	r3, [r0, #4]
 151 0032 13F4803F 		tst	r3, #65536
 152 0036 04D0     		beq	.L11
 329:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   {
 330:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_IT();
 153              		.loc 1 330 0
 154 0038 114A     		ldr	r2, .L15+4
 155 003a 1368     		ldr	r3, [r2]
 156 003c 43F48033 		orr	r3, r3, #65536
 157 0040 1360     		str	r3, [r2]
 158              	.L11:
 331:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   }
 332:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 333:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Configure event mode */
 334:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 159              		.loc 1 334 0
 160 0042 4368     		ldr	r3, [r0, #4]
 161 0044 13F4003F 		tst	r3, #131072
 162 0048 04D0     		beq	.L12
 335:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   {
 336:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 163              		.loc 1 336 0
 164 004a 0D4A     		ldr	r2, .L15+4
 165 004c 5368     		ldr	r3, [r2, #4]
 166 004e 43F48033 		orr	r3, r3, #65536
 167 0052 5360     		str	r3, [r2, #4]
 168              	.L12:
 337:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   }
 338:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 339:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Configure the edge */
 340:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 169              		.loc 1 340 0
 170 0054 4368     		ldr	r3, [r0, #4]
 171 0056 13F0010F 		tst	r3, #1
 172 005a 04D0     		beq	.L13
 341:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   {
 342:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 173              		.loc 1 342 0
 174 005c 084A     		ldr	r2, .L15+4
 175 005e 9368     		ldr	r3, [r2, #8]
 176 0060 43F48033 		orr	r3, r3, #65536
 177 0064 9360     		str	r3, [r2, #8]
 178              	.L13:
 343:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   }
 344:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 345:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 179              		.loc 1 345 0
 180 0066 4368     		ldr	r3, [r0, #4]
 181 0068 13F0020F 		tst	r3, #2
 182 006c 04D0     		beq	.L14
 346:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   {
 347:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 183              		.loc 1 347 0
 184 006e 044A     		ldr	r2, .L15+4
 185 0070 D368     		ldr	r3, [r2, #12]
 186 0072 43F48033 		orr	r3, r3, #65536
 187 0076 D360     		str	r3, [r2, #12]
 188              	.L14:
 348:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   }
 349:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 350:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   return HAL_OK;
 351:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
 189              		.loc 1 351 0
 190 0078 0020     		movs	r0, #0
 191              	.LVL1:
 192 007a 7047     		bx	lr
 193              	.L16:
 194              		.align	2
 195              	.L15:
 196 007c 00700040 		.word	1073770496
 197 0080 00040140 		.word	1073808384
 198              		.cfi_endproc
 199              	.LFE320:
 201              		.section	.text.HAL_PWR_EnablePVD,"ax",%progbits
 202              		.align	1
 203              		.global	HAL_PWR_EnablePVD
 204              		.syntax unified
 205              		.thumb
 206              		.thumb_func
 207              		.fpu fpv4-sp-d16
 209              	HAL_PWR_EnablePVD:
 210              	.LFB321:
 352:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 353:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 354:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
 355:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief Enable the Power Voltage Detector (PVD).
 356:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
 357:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 358:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnablePVD(void)
 359:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
 211              		.loc 1 359 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215              		@ link register save eliminated.
 360:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 216              		.loc 1 360 0
 217 0000 024A     		ldr	r2, .L18
 218 0002 5368     		ldr	r3, [r2, #4]
 219 0004 43F00103 		orr	r3, r3, #1
 220 0008 5360     		str	r3, [r2, #4]
 361:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
 221              		.loc 1 361 0
 222 000a 7047     		bx	lr
 223              	.L19:
 224              		.align	2
 225              	.L18:
 226 000c 00700040 		.word	1073770496
 227              		.cfi_endproc
 228              	.LFE321:
 230              		.section	.text.HAL_PWR_DisablePVD,"ax",%progbits
 231              		.align	1
 232              		.global	HAL_PWR_DisablePVD
 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 236              		.fpu fpv4-sp-d16
 238              	HAL_PWR_DisablePVD:
 239              	.LFB322:
 362:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 363:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
 364:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief Disable the Power Voltage Detector (PVD).
 365:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
 366:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 367:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** void HAL_PWR_DisablePVD(void)
 368:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
 240              		.loc 1 368 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 369:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 245              		.loc 1 369 0
 246 0000 024A     		ldr	r2, .L21
 247 0002 5368     		ldr	r3, [r2, #4]
 248 0004 23F00103 		bic	r3, r3, #1
 249 0008 5360     		str	r3, [r2, #4]
 370:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
 250              		.loc 1 370 0
 251 000a 7047     		bx	lr
 252              	.L22:
 253              		.align	2
 254              	.L21:
 255 000c 00700040 		.word	1073770496
 256              		.cfi_endproc
 257              	.LFE322:
 259              		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
 260              		.align	1
 261              		.global	HAL_PWR_EnableWakeUpPin
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu fpv4-sp-d16
 267              	HAL_PWR_EnableWakeUpPin:
 268              	.LFB323:
 371:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 372:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 373:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 374:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 375:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
 376:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief Enable the WakeUp PINx functionality.
 377:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @param WakeUpPinPolarity: Specifies which Wake-Up pin to enable.
 378:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *         This parameter can be one of the following legacy values which set the default polarity
 379:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *         i.e. detection on high level (rising edge):
 380:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAK
 381:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *
 382:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *         or one of the following value where the user can explicitly specify the enabled pin and
 383:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *         the chosen polarity:
 384:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN1_HIGH or PWR_WAKEUP_PIN1_LOW
 385:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN2_HIGH or PWR_WAKEUP_PIN2_LOW
 386:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN3_HIGH or PWR_WAKEUP_PIN3_LOW
 387:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN4_HIGH or PWR_WAKEUP_PIN4_LOW
 388:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
 389:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
 390:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
 391:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 392:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
 393:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
 269              		.loc 1 393 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 274              	.LVL2:
 394:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));
 395:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 396:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Specifies the Wake-Up pin polarity for the event detection
 397:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     (rising or falling edge) */
 398:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_S
 275              		.loc 1 398 0
 276 0000 064A     		ldr	r2, .L24
 277 0002 D368     		ldr	r3, [r2, #12]
 278 0004 00F01F01 		and	r1, r0, #31
 279 0008 23EA0103 		bic	r3, r3, r1
 280 000c 43EA5010 		orr	r0, r3, r0, lsr #5
 281              	.LVL3:
 282 0010 D060     		str	r0, [r2, #12]
 399:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 400:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Enable wake-up pin */
 401:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 283              		.loc 1 401 0
 284 0012 9368     		ldr	r3, [r2, #8]
 285 0014 1943     		orrs	r1, r1, r3
 286 0016 9160     		str	r1, [r2, #8]
 402:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 403:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 404:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
 287              		.loc 1 404 0
 288 0018 7047     		bx	lr
 289              	.L25:
 290 001a 00BF     		.align	2
 291              	.L24:
 292 001c 00700040 		.word	1073770496
 293              		.cfi_endproc
 294              	.LFE323:
 296              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
 297              		.align	1
 298              		.global	HAL_PWR_DisableWakeUpPin
 299              		.syntax unified
 300              		.thumb
 301              		.thumb_func
 302              		.fpu fpv4-sp-d16
 304              	HAL_PWR_DisableWakeUpPin:
 305              	.LFB324:
 405:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 406:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
 407:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief Disable the WakeUp PINx functionality.
 408:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @param WakeUpPinx: Specifies the Power Wake-Up pin to disable.
 409:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 410:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAK
 411:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
 412:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 413:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 414:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
 306              		.loc 1 414 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 0, uses_anonymous_args = 0
 310              		@ link register save eliminated.
 311              	.LVL4:
 415:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 416:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 417:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 312              		.loc 1 417 0
 313 0000 034A     		ldr	r2, .L27
 314 0002 9368     		ldr	r3, [r2, #8]
 315 0004 00F01F00 		and	r0, r0, #31
 316              	.LVL5:
 317 0008 23EA0003 		bic	r3, r3, r0
 318 000c 9360     		str	r3, [r2, #8]
 418:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
 319              		.loc 1 418 0
 320 000e 7047     		bx	lr
 321              	.L28:
 322              		.align	2
 323              	.L27:
 324 0010 00700040 		.word	1073770496
 325              		.cfi_endproc
 326              	.LFE324:
 328              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 329              		.align	1
 330              		.global	HAL_PWR_EnterSLEEPMode
 331              		.syntax unified
 332              		.thumb
 333              		.thumb_func
 334              		.fpu fpv4-sp-d16
 336              	HAL_PWR_EnterSLEEPMode:
 337              	.LFB325:
 419:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 420:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 421:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
 422:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief Enter Sleep or Low-power Sleep mode.
 423:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note  In Sleep/Low-power Sleep mode, all I/O pins keep the same state as in Run mode.
 424:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @param Regulator: Specifies the regulator state in Sleep/Low-power Sleep mode.
 425:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 426:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_MAINREGULATOR_ON Sleep mode (regulator in main mode)
 427:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_LOWPOWERREGULATOR_ON Low-power Sleep mode (regulator in low-power mode
 428:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note  Low-power Sleep mode is entered from Low-power Run mode. Therefore, if not yet
 429:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        in Low-power Run mode before calling HAL_PWR_EnterSLEEPMode() with Regulator set
 430:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        to PWR_LOWPOWERREGULATOR_ON, the user can optionally configure the
 431:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        Flash in power-down monde in setting the SLEEP_PD bit in FLASH_ACR register.
 432:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        Additionally, the clock frequency must be reduced below 2 MHz.
 433:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        Setting SLEEP_PD in FLASH_ACR then appropriately reducing the clock frequency must
 434:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        be done before calling HAL_PWR_EnterSLEEPMode() API.
 435:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note  When exiting Low-power Sleep mode, the MCU is in Low-power Run mode. To move in
 436:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        Run mode, the user must resort to HAL_PWREx_DisableLowPowerRunMode() API.
 437:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @param SLEEPEntry: Specifies if Sleep mode is entered with WFI or WFE instruction.
 438:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *           This parameter can be one of the following values:
 439:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_SLEEPENTRY_WFI enter Sleep or Low-power Sleep mode with WFI instructio
 440:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_SLEEPENTRY_WFE enter Sleep or Low-power Sleep mode with WFE instructio
 441:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
 442:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        the interrupt wake up source.
 443:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
 444:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 445:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 446:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
 338              		.loc 1 446 0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 0, uses_anonymous_args = 0
 342              	.LVL6:
 343 0000 10B5     		push	{r4, lr}
 344              		.cfi_def_cfa_offset 8
 345              		.cfi_offset 4, -8
 346              		.cfi_offset 14, -4
 347 0002 0C46     		mov	r4, r1
 447:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Check the parameters */
 448:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 449:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 450:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 451:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Set Regulator parameter */
 452:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   if (Regulator == PWR_MAINREGULATOR_ON)
 348              		.loc 1 452 0
 349 0004 A0B9     		cbnz	r0, .L30
 453:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   {
 454:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     /* If in low-power run mode at this point, exit it */
 455:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 350              		.loc 1 455 0
 351 0006 0F4B     		ldr	r3, .L37
 352 0008 5B69     		ldr	r3, [r3, #20]
 353 000a 13F4007F 		tst	r3, #512
 354 000e 0AD1     		bne	.L35
 355              	.LVL7:
 356              	.L31:
 456:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     {
 457:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 458:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       {
 459:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****         return ;
 460:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       }
 461:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     }
 462:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     /* Regulator now in main mode. */
 463:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   }
 464:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   else
 465:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   {
 466:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     /* If in run mode, first move to low-power run mode.
 467:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****        The system clock frequency must be below 2 MHz at this point. */
 468:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 469:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     {
 470:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       HAL_PWREx_EnableLowPowerRunMode();
 471:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     }
 472:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   }
 473:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 474:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
 475:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 357              		.loc 1 475 0
 358 0010 0D4A     		ldr	r2, .L37+4
 359 0012 1369     		ldr	r3, [r2, #16]
 360 0014 23F00403 		bic	r3, r3, #4
 361 0018 1361     		str	r3, [r2, #16]
 476:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 477:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 478:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 362              		.loc 1 478 0
 363 001a 012C     		cmp	r4, #1
 364 001c 10D0     		beq	.L36
 479:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   {
 480:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 481:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     __WFI();
 482:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   }
 483:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   else
 484:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   {
 485:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     /* Request Wait For Event */
 486:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     __SEV();
 365              		.loc 1 486 0
 366              		.syntax unified
 367              	@ 486 "../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c" 1
 368 001e 40BF     		sev
 369              	@ 0 "" 2
 487:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     __WFE();
 370              		.loc 1 487 0
 371              	@ 487 "../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c" 1
 372 0020 20BF     		wfe
 373              	@ 0 "" 2
 488:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     __WFE();
 374              		.loc 1 488 0
 375              	@ 488 "../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c" 1
 376 0022 20BF     		wfe
 377              	@ 0 "" 2
 378              		.thumb
 379              		.syntax unified
 380              	.L29:
 489:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   }
 490:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 491:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
 381              		.loc 1 491 0
 382 0024 10BD     		pop	{r4, pc}
 383              	.LVL8:
 384              	.L35:
 457:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****       {
 385              		.loc 1 457 0
 386 0026 FFF7FEFF 		bl	HAL_PWREx_DisableLowPowerRunMode
 387              	.LVL9:
 388 002a 0028     		cmp	r0, #0
 389 002c F0D0     		beq	.L31
 390 002e F9E7     		b	.L29
 391              	.LVL10:
 392              	.L30:
 468:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     {
 393              		.loc 1 468 0
 394 0030 044B     		ldr	r3, .L37
 395 0032 5B69     		ldr	r3, [r3, #20]
 396 0034 13F4007F 		tst	r3, #512
 397 0038 EAD1     		bne	.L31
 470:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     }
 398              		.loc 1 470 0
 399 003a FFF7FEFF 		bl	HAL_PWREx_EnableLowPowerRunMode
 400              	.LVL11:
 401 003e E7E7     		b	.L31
 402              	.L36:
 481:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   }
 403              		.loc 1 481 0
 404              		.syntax unified
 405              	@ 481 "../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c" 1
 406 0040 30BF     		wfi
 407              	@ 0 "" 2
 408              		.thumb
 409              		.syntax unified
 410 0042 EFE7     		b	.L29
 411              	.L38:
 412              		.align	2
 413              	.L37:
 414 0044 00700040 		.word	1073770496
 415 0048 00ED00E0 		.word	-536810240
 416              		.cfi_endproc
 417              	.LFE325:
 419              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 420              		.align	1
 421              		.global	HAL_PWR_EnterSTOPMode
 422              		.syntax unified
 423              		.thumb
 424              		.thumb_func
 425              		.fpu fpv4-sp-d16
 427              	HAL_PWR_EnterSTOPMode:
 428              	.LFB326:
 492:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 493:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 494:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
 495:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief Enter Stop mode
 496:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note  This API is named HAL_PWR_EnterSTOPMode to ensure compatibility with legacy code running
 497:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        on devices where only "Stop mode" is mentioned with main or low power regulator ON.
 498:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note  In Stop mode, all I/O pins keep the same state as in Run mode.
 499:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note  All clocks in the VCORE domain are stopped; the PLL, the MSI,
 500:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        the HSI and the HSE oscillators are disabled. Some peripherals with the wakeup capabilit
 501:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        (I2Cx, USARTx and LPUART) can switch on the HSI to receive a frame, and switch off the H
 502:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        after receiving the frame if it is not a wakeup frame. In this case, the HSI clock is pr
 503:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        only to the peripheral requesting it.
 504:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        SRAM1, SRAM2 and register contents are preserved.
 505:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        The BOR is available.
 506:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        The voltage regulator can be configured either in normal (Stop 0) or low-power mode (Sto
 507:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note  When exiting Stop 0 or Stop 1 mode by issuing an interrupt or a wakeup event,
 508:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *         the HSI RC oscillator is selected as system clock if STOPWUCK bit in RCC_CFGR register
 509:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *         is set; the MSI oscillator is selected if STOPWUCK is cleared.
 510:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note  When the voltage regulator operates in low power mode (Stop 1), an additional
 511:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *         startup delay is incurred when waking up.
 512:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *         By keeping the internal regulator ON during Stop mode (Stop 0), the consumption
 513:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *         is higher although the startup time is reduced.
 514:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @param Regulator: Specifies the regulator state in Stop mode.
 515:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 516:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_MAINREGULATOR_ON  Stop 0 mode (main regulator ON)
 517:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_LOWPOWERREGULATOR_ON  Stop 1 mode (low power regulator ON)
 518:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @param STOPEntry: Specifies Stop 0 or Stop 1 mode is entered with WFI or WFE instruction.
 519:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 520:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
 521:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
 522:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
 523:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 524:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 525:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
 429              		.loc 1 525 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 433              	.LVL12:
 434 0000 08B5     		push	{r3, lr}
 435              		.cfi_def_cfa_offset 8
 436              		.cfi_offset 3, -8
 437              		.cfi_offset 14, -4
 526:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Check the parameters */
 527:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 528:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 529:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 438              		.loc 1 529 0
 439 0002 B0F5804F 		cmp	r0, #16384
 440 0006 03D0     		beq	.L43
 530:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   {
 531:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 532:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   }
 533:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   else
 534:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   {
 535:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****     HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 441              		.loc 1 535 0
 442 0008 0846     		mov	r0, r1
 443              	.LVL13:
 444 000a FFF7FEFF 		bl	HAL_PWREx_EnterSTOP0Mode
 445              	.LVL14:
 446              	.L39:
 536:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   }
 537:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
 447              		.loc 1 537 0
 448 000e 08BD     		pop	{r3, pc}
 449              	.LVL15:
 450              	.L43:
 531:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   }
 451              		.loc 1 531 0
 452 0010 0846     		mov	r0, r1
 453              	.LVL16:
 454 0012 FFF7FEFF 		bl	HAL_PWREx_EnterSTOP1Mode
 455              	.LVL17:
 456 0016 FAE7     		b	.L39
 457              		.cfi_endproc
 458              	.LFE326:
 460              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 461              		.align	1
 462              		.global	HAL_PWR_EnterSTANDBYMode
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv4-sp-d16
 468              	HAL_PWR_EnterSTANDBYMode:
 469              	.LFB327:
 538:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 539:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
 540:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief Enter Standby mode.
 541:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note  In Standby mode, the PLL, the HSI, the MSI and the HSE oscillators are switched
 542:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        off. The voltage regulator is disabled, except when SRAM2 content is preserved
 543:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        in which case the regulator is in low-power mode.
 544:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        SRAM1 and register contents are lost except for registers in the Backup domain and
 545:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        Standby circuitry. SRAM2 content can be preserved if the bit RRS is set in PWR_CR3 regis
 546:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        To enable this feature, the user can resort to HAL_PWREx_EnableSRAM2ContentRetention() A
 547:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        to set RRS bit.
 548:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        The BOR is available.
 549:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog s
 550:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() respectively enable Pull
 551:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        Pull Down state, HAL_PWREx_DisableGPIOPullUp() and HAL_PWREx_DisableGPIOPullDown() disab
 552:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        same.
 553:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        These states are effective in Standby mode only if APC bit is set through
 554:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *        HAL_PWREx_EnablePullUpPullDownConfig() API.
 555:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
 556:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 557:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 558:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
 470              		.loc 1 558 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474              		@ link register save eliminated.
 559:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Set Stand-by mode */
 560:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 475              		.loc 1 560 0
 476 0000 064A     		ldr	r2, .L45
 477 0002 1368     		ldr	r3, [r2]
 478 0004 23F00703 		bic	r3, r3, #7
 479 0008 43F00303 		orr	r3, r3, #3
 480 000c 1360     		str	r3, [r2]
 561:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 562:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 563:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 481              		.loc 1 563 0
 482 000e 044A     		ldr	r2, .L45+4
 483 0010 1369     		ldr	r3, [r2, #16]
 484 0012 43F00403 		orr	r3, r3, #4
 485 0016 1361     		str	r3, [r2, #16]
 564:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 565:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /* This option is used to ensure that store operations are completed */
 566:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** #if defined ( __CC_ARM)
 567:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   __force_stores();
 568:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** #endif
 569:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 570:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   __WFI();
 486              		.loc 1 570 0
 487              		.syntax unified
 488              	@ 570 "../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c" 1
 489 0018 30BF     		wfi
 490              	@ 0 "" 2
 571:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
 491              		.loc 1 571 0
 492              		.thumb
 493              		.syntax unified
 494 001a 7047     		bx	lr
 495              	.L46:
 496              		.align	2
 497              	.L45:
 498 001c 00700040 		.word	1073770496
 499 0020 00ED00E0 		.word	-536810240
 500              		.cfi_endproc
 501              	.LFE327:
 503              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
 504              		.align	1
 505              		.global	HAL_PWR_EnableSleepOnExit
 506              		.syntax unified
 507              		.thumb
 508              		.thumb_func
 509              		.fpu fpv4-sp-d16
 511              	HAL_PWR_EnableSleepOnExit:
 512              	.LFB328:
 572:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 573:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 574:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 575:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
 576:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief Indicate Sleep-On-Exit when returning from Handler mode to Thread mode.
 577:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note Set SLEEPONEXIT bit of SCR register. When this bit is set, the processor
 578:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 579:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *       Setting this bit is useful when the processor is expected to run only on
 580:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *       interruptions handling.
 581:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
 582:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 583:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 584:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
 513              		.loc 1 584 0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 0
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 517              		@ link register save eliminated.
 585:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex System Control Register */
 586:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 518              		.loc 1 586 0
 519 0000 024A     		ldr	r2, .L48
 520 0002 1369     		ldr	r3, [r2, #16]
 521 0004 43F00203 		orr	r3, r3, #2
 522 0008 1361     		str	r3, [r2, #16]
 587:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
 523              		.loc 1 587 0
 524 000a 7047     		bx	lr
 525              	.L49:
 526              		.align	2
 527              	.L48:
 528 000c 00ED00E0 		.word	-536810240
 529              		.cfi_endproc
 530              	.LFE328:
 532              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 533              		.align	1
 534              		.global	HAL_PWR_DisableSleepOnExit
 535              		.syntax unified
 536              		.thumb
 537              		.thumb_func
 538              		.fpu fpv4-sp-d16
 540              	HAL_PWR_DisableSleepOnExit:
 541              	.LFB329:
 588:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 589:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 590:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
 591:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief Disable Sleep-On-Exit feature when returning from Handler mode to Thread mode.
 592:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
 593:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 594:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
 595:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 596:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 597:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
 542              		.loc 1 597 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 0
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 546              		@ link register save eliminated.
 598:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex System Control Register */
 599:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 547              		.loc 1 599 0
 548 0000 024A     		ldr	r2, .L51
 549 0002 1369     		ldr	r3, [r2, #16]
 550 0004 23F00203 		bic	r3, r3, #2
 551 0008 1361     		str	r3, [r2, #16]
 600:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
 552              		.loc 1 600 0
 553 000a 7047     		bx	lr
 554              	.L52:
 555              		.align	2
 556              	.L51:
 557 000c 00ED00E0 		.word	-536810240
 558              		.cfi_endproc
 559              	.LFE329:
 561              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 562              		.align	1
 563              		.global	HAL_PWR_EnableSEVOnPend
 564              		.syntax unified
 565              		.thumb
 566              		.thumb_func
 567              		.fpu fpv4-sp-d16
 569              	HAL_PWR_EnableSEVOnPend:
 570              	.LFB330:
 601:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 602:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 603:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 604:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
 605:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief Enable CORTEX M4 SEVONPEND bit.
 606:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note Set SEVONPEND bit of SCR register. When this bit is set, this causes
 607:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 608:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
 609:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 610:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
 611:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
 571              		.loc 1 611 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 575              		@ link register save eliminated.
 612:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex System Control Register */
 613:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 576              		.loc 1 613 0
 577 0000 024A     		ldr	r2, .L54
 578 0002 1369     		ldr	r3, [r2, #16]
 579 0004 43F01003 		orr	r3, r3, #16
 580 0008 1361     		str	r3, [r2, #16]
 614:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
 581              		.loc 1 614 0
 582 000a 7047     		bx	lr
 583              	.L55:
 584              		.align	2
 585              	.L54:
 586 000c 00ED00E0 		.word	-536810240
 587              		.cfi_endproc
 588              	.LFE330:
 590              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
 591              		.align	1
 592              		.global	HAL_PWR_DisableSEVOnPend
 593              		.syntax unified
 594              		.thumb
 595              		.thumb_func
 596              		.fpu fpv4-sp-d16
 598              	HAL_PWR_DisableSEVOnPend:
 599              	.LFB331:
 615:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 616:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 617:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
 618:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief Disable CORTEX M4 SEVONPEND bit.
 619:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @note Clear SEVONPEND bit of SCR register. When this bit is set, this causes
 620:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 621:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
 622:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 623:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 624:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
 600              		.loc 1 624 0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604              		@ link register save eliminated.
 625:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex System Control Register */
 626:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 605              		.loc 1 626 0
 606 0000 024A     		ldr	r2, .L57
 607 0002 1369     		ldr	r3, [r2, #16]
 608 0004 23F01003 		bic	r3, r3, #16
 609 0008 1361     		str	r3, [r2, #16]
 627:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
 610              		.loc 1 627 0
 611 000a 7047     		bx	lr
 612              	.L58:
 613              		.align	2
 614              	.L57:
 615 000c 00ED00E0 		.word	-536810240
 616              		.cfi_endproc
 617              	.LFE331:
 619              		.section	.text.HAL_PWR_PVDCallback,"ax",%progbits
 620              		.align	1
 621              		.weak	HAL_PWR_PVDCallback
 622              		.syntax unified
 623              		.thumb
 624              		.thumb_func
 625              		.fpu fpv4-sp-d16
 627              	HAL_PWR_PVDCallback:
 628              	.LFB332:
 628:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 629:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 630:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 631:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 632:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** 
 633:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** /**
 634:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @brief PWR PVD interrupt callback
 635:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   * @retval None
 636:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   */
 637:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** __weak void HAL_PWR_PVDCallback(void)
 638:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** {
 629              		.loc 1 638 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 0
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633              		@ link register save eliminated.
 639:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****   /* NOTE : This function should not be modified; when the callback is needed,
 640:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****             the HAL_PWR_PVDCallback can be implemented in the user file
 641:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c ****    */
 642:../system/src/stm32l4-hal-driver/stm32l4xx_hal_pwr.c **** }
 634              		.loc 1 642 0
 635 0000 7047     		bx	lr
 636              		.cfi_endproc
 637              	.LFE332:
 639              		.text
 640              	.Letext0:
 641              		.file 2 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 642              		.file 3 "../system/include/cmsis/stm32l4xx/core_cm4.h"
 643              		.file 4 "../system/include/cmsis/stm32l4xx/device/system_stm32l4xx.h"
 644              		.file 5 "../system/include/cmsis/stm32l4xx/device/stm32l471xx.h"
 645              		.file 6 "../system/include/cmsis/stm32l4xx/device/stm32l4xx.h"
 646              		.file 7 "../system/include/stm32l4-hal-driver/stm32l4xx_hal_def.h"
 647              		.file 8 "../system/include/stm32l4-hal-driver/stm32l4xx_hal_flash.h"
 648              		.file 9 "../system/include/stm32l4-hal-driver/stm32l4xx_hal_pwr.h"
 649              		.file 10 "../system/include/stm32l4-hal-driver/stm32l4xx_hal.h"
 650              		.file 11 "../system/include/stm32l4-hal-driver/stm32l4xx_hal_pwr_ex.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l4xx_hal_pwr.c
     /tmp/ccH8a1F8.s:18     .text.HAL_PWR_DeInit:0000000000000000 $t
     /tmp/ccH8a1F8.s:25     .text.HAL_PWR_DeInit:0000000000000000 HAL_PWR_DeInit
     /tmp/ccH8a1F8.s:47     .text.HAL_PWR_DeInit:0000000000000014 $d
     /tmp/ccH8a1F8.s:52     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 $t
     /tmp/ccH8a1F8.s:59     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 HAL_PWR_EnableBkUpAccess
     /tmp/ccH8a1F8.s:76     .text.HAL_PWR_EnableBkUpAccess:000000000000000c $d
     /tmp/ccH8a1F8.s:81     .text.HAL_PWR_DisableBkUpAccess:0000000000000000 $t
     /tmp/ccH8a1F8.s:88     .text.HAL_PWR_DisableBkUpAccess:0000000000000000 HAL_PWR_DisableBkUpAccess
     /tmp/ccH8a1F8.s:105    .text.HAL_PWR_DisableBkUpAccess:000000000000000c $d
     /tmp/ccH8a1F8.s:110    .text.HAL_PWR_ConfigPVD:0000000000000000 $t
     /tmp/ccH8a1F8.s:117    .text.HAL_PWR_ConfigPVD:0000000000000000 HAL_PWR_ConfigPVD
     /tmp/ccH8a1F8.s:196    .text.HAL_PWR_ConfigPVD:000000000000007c $d
     /tmp/ccH8a1F8.s:202    .text.HAL_PWR_EnablePVD:0000000000000000 $t
     /tmp/ccH8a1F8.s:209    .text.HAL_PWR_EnablePVD:0000000000000000 HAL_PWR_EnablePVD
     /tmp/ccH8a1F8.s:226    .text.HAL_PWR_EnablePVD:000000000000000c $d
     /tmp/ccH8a1F8.s:231    .text.HAL_PWR_DisablePVD:0000000000000000 $t
     /tmp/ccH8a1F8.s:238    .text.HAL_PWR_DisablePVD:0000000000000000 HAL_PWR_DisablePVD
     /tmp/ccH8a1F8.s:255    .text.HAL_PWR_DisablePVD:000000000000000c $d
     /tmp/ccH8a1F8.s:260    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 $t
     /tmp/ccH8a1F8.s:267    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 HAL_PWR_EnableWakeUpPin
     /tmp/ccH8a1F8.s:292    .text.HAL_PWR_EnableWakeUpPin:000000000000001c $d
     /tmp/ccH8a1F8.s:297    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 $t
     /tmp/ccH8a1F8.s:304    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 HAL_PWR_DisableWakeUpPin
     /tmp/ccH8a1F8.s:324    .text.HAL_PWR_DisableWakeUpPin:0000000000000010 $d
     /tmp/ccH8a1F8.s:329    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 $t
     /tmp/ccH8a1F8.s:336    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 HAL_PWR_EnterSLEEPMode
     /tmp/ccH8a1F8.s:414    .text.HAL_PWR_EnterSLEEPMode:0000000000000044 $d
     /tmp/ccH8a1F8.s:420    .text.HAL_PWR_EnterSTOPMode:0000000000000000 $t
     /tmp/ccH8a1F8.s:427    .text.HAL_PWR_EnterSTOPMode:0000000000000000 HAL_PWR_EnterSTOPMode
     /tmp/ccH8a1F8.s:461    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 $t
     /tmp/ccH8a1F8.s:468    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 HAL_PWR_EnterSTANDBYMode
     /tmp/ccH8a1F8.s:498    .text.HAL_PWR_EnterSTANDBYMode:000000000000001c $d
     /tmp/ccH8a1F8.s:504    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 $t
     /tmp/ccH8a1F8.s:511    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 HAL_PWR_EnableSleepOnExit
     /tmp/ccH8a1F8.s:528    .text.HAL_PWR_EnableSleepOnExit:000000000000000c $d
     /tmp/ccH8a1F8.s:533    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 $t
     /tmp/ccH8a1F8.s:540    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 HAL_PWR_DisableSleepOnExit
     /tmp/ccH8a1F8.s:557    .text.HAL_PWR_DisableSleepOnExit:000000000000000c $d
     /tmp/ccH8a1F8.s:562    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 $t
     /tmp/ccH8a1F8.s:569    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 HAL_PWR_EnableSEVOnPend
     /tmp/ccH8a1F8.s:586    .text.HAL_PWR_EnableSEVOnPend:000000000000000c $d
     /tmp/ccH8a1F8.s:591    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 $t
     /tmp/ccH8a1F8.s:598    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 HAL_PWR_DisableSEVOnPend
     /tmp/ccH8a1F8.s:615    .text.HAL_PWR_DisableSEVOnPend:000000000000000c $d
     /tmp/ccH8a1F8.s:620    .text.HAL_PWR_PVDCallback:0000000000000000 $t
     /tmp/ccH8a1F8.s:627    .text.HAL_PWR_PVDCallback:0000000000000000 HAL_PWR_PVDCallback
                           .group:0000000000000000 wm4.0.95bc707da9dcffdc6c8c58936cbc8421
                           .group:0000000000000000 wm4.stm32l4xx_hal_conf.h.24.9ebdf529a64add7ef5197540a829be93
                           .group:0000000000000000 wm4.stm32l4xx.h.39.54a1fe1e096c7852edd649652f013a11
                           .group:0000000000000000 wm4.stm32l471xx.h.35.e78ad65c513105dda311dc495ac74d04
                           .group:0000000000000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:0000000000000000 wm4.cmsis_version.h.32.46e8eccfa2cfeaae11d008bb2823a3ed
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.b6144e50d34fc998dd4c2cfb6387cf91
                           .group:0000000000000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:0000000000000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:0000000000000000 wm4.stm32l471xx.h.423.ceac761476affad641a3347d7727acfd
                           .group:0000000000000000 wm4.stm32l4xx.h.197.fb1c68184133668ca24c44c29ba4361f
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.23.c14bec61d389910444dd6f90923a87b3
                           .group:0000000000000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:0000000000000000 wm4.stm32l4xx_hal_def.h.58.ba9880fce6c06e05c42ff3652190ba19
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc.h.158.28a9a8aed9528254d5d00c542977dfd6
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc_ex.h.22.da7044b74af98b061fec57b6c981623c
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio.h.22.cdd02b3dd2d28ab2a58b80abaa62239c
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio_ex.h.22.e3066224621c54896e68c044cff2946f
                           .group:0000000000000000 wm4.stm32l4xx_hal_dma.h.22.13f7e03251508cf372ae373347b36e9b
                           .group:0000000000000000 wm4.stm32l4xx_hal_cortex.h.22.cb70b059ea6d04d060ca379a6d57d1fd
                           .group:0000000000000000 wm4.stm32l4xx_ll_adc.h.22.1a01db9155ec232fb5933b76785afed0
                           .group:0000000000000000 wm4.stm32l4xx_hal_adc.h.321.ee3f28f76fc70066e4cbbd758e576892
                           .group:0000000000000000 wm4.stm32l4xx_hal_adc_ex.h.22.fb5e6d418a426c9b079c9adc15fee3b1
                           .group:0000000000000000 wm4.stm32l4xx_hal_crc.h.22.e28f2dff7c14319a60cfaa8412b63a14
                           .group:0000000000000000 wm4.stm32l4xx_hal_crc_ex.h.22.58aa3be0563eedff5893c4b663184cf2
                           .group:0000000000000000 wm4.stm32l4xx_hal_dac.h.22.74749bf4f9405a5fbfaaf1cc4c06eba3
                           .group:0000000000000000 wm4.stm32l4xx_hal_dac_ex.h.22.4e3cedba5893653c1d8ca689fa739e33
                           .group:0000000000000000 wm4.stm32l4xx_hal_exti.h.22.d0c18acb1f51146e775f234290c1ac27
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.22.80f6973ea14060a68f7ca21c1dd39289
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.847.7bdb45d9d57728034960e0aaf38df4fb
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.22.5cbc76724b1dba5416e985e397b92828
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c_ex.h.22.4c81bf9806badb3d50f1da26b08d305a
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.715.a3aff164d469153c75cf623f9ff49d7a
                           .group:0000000000000000 wm4.stm32l4xx_hal_iwdg.h.22.7e954cf06602114b3daf58f5ffbb9e50
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr.h.22.0049bff0a26f90119451fdfe5f426c51
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr_ex.h.22.3d1049b6827a186d471882b21e35998d
                           .group:0000000000000000 wm4.stm32l4xx_hal_rng.h.22.3da3130b715b6ad6f9d8d49653bdfddb
                           .group:0000000000000000 wm4.stm32l4xx_hal_rtc.h.22.21d64301309237f9b9255a8c80902f7c
                           .group:0000000000000000 wm4.stm32l4xx_hal_rtc_ex.h.22.6c248c3dbae3d1f0fefc4b9faaa2cd0b
                           .group:0000000000000000 wm4.stm32l4xx_hal_rtc.h.977.b3b3c98b50a30362b61b120ec4fce236
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim.h.22.6c7398a1c55179e1de4bfd7d5a7564ac
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim_ex.h.22.1a7b532f5010a085c12eee7e9c7b0c21
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart.h.22.5f632bd044c516c02fe0b49488f063f8
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart_ex.h.22.de11c23890d64b2968c97dd6f5dae21a
                           .group:0000000000000000 wm4.stm32l4xx_hal.h.76.993cab68f7f350dd05a21a919b3be96f

UNDEFINED SYMBOLS
HAL_PWREx_DisableLowPowerRunMode
HAL_PWREx_EnableLowPowerRunMode
HAL_PWREx_EnterSTOP0Mode
HAL_PWREx_EnterSTOP1Mode
