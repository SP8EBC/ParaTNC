   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"digi.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.digi_init,"ax",%progbits
  18              		.align	1
  19              		.global	digi_init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	digi_init:
  26              	.LFB352:
  27              		.file 1 "../system/src/aprs/digi.c"
   1:../system/src/aprs/digi.c **** /*
   2:../system/src/aprs/digi.c ****  * digi.c
   3:../system/src/aprs/digi.c ****  *
   4:../system/src/aprs/digi.c ****  *  Created on: 28.05.2017
   5:../system/src/aprs/digi.c ****  *      Author: mateusz
   6:../system/src/aprs/digi.c ****  */
   7:../system/src/aprs/digi.c **** 
   8:../system/src/aprs/digi.c **** #include <string.h>
   9:../system/src/aprs/digi.c **** 
  10:../system/src/aprs/digi.c **** #include "aprs/digi.h"
  11:../system/src/aprs/digi.c **** #include "main.h"
  12:../system/src/aprs/digi.c **** #include "TimerConfig.h"
  13:../system/src/aprs/digi.c **** #include "delay.h"
  14:../system/src/aprs/digi.c **** 
  15:../system/src/aprs/digi.c **** #include "station_config.h"
  16:../system/src/aprs/digi.c **** #include "config.h"
  17:../system/src/aprs/digi.c **** 
  18:../system/src/aprs/digi.c **** // global variables to store a frame content to be digipeated
  19:../system/src/aprs/digi.c **** uint8_t digi_msg[CONFIG_AX25_FRAME_BUF_LEN];
  20:../system/src/aprs/digi.c **** uint16_t digi_msg_len;
  21:../system/src/aprs/digi.c **** AX25Call digi_path[7];
  22:../system/src/aprs/digi.c **** uint8_t digi_call_len = 0;
  23:../system/src/aprs/digi.c **** 
  24:../system/src/aprs/digi.c **** // digipeater working mode
  25:../system/src/aprs/digi.c **** digi_mode_t digi_mode;
  26:../system/src/aprs/digi.c **** 
  27:../system/src/aprs/digi.c **** uint8_t digi_viscous_delay_sec;
  28:../system/src/aprs/digi.c **** uint8_t digi_viscous_counter_sec;
  29:../system/src/aprs/digi.c **** 
  30:../system/src/aprs/digi.c **** 
  31:../system/src/aprs/digi.c **** void digi_init(const config_data_mode_t* const config_data_mode) {
  28              		.loc 1 31 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  32:../system/src/aprs/digi.c **** 	digi_viscous_counter_sec = 0;
  34              		.loc 1 32 0
  35 0000 0023     		movs	r3, #0
  36 0002 114A     		ldr	r2, .L9
  37 0004 1370     		strb	r3, [r2]
  33:../system/src/aprs/digi.c **** 
  34:../system/src/aprs/digi.c **** 	digi_msg_len = 0;
  38              		.loc 1 34 0
  39 0006 114A     		ldr	r2, .L9+4
  40 0008 1380     		strh	r3, [r2]	@ movhi
  35:../system/src/aprs/digi.c **** 
  36:../system/src/aprs/digi.c **** 	digi_mode = DIGI_OFF;
  41              		.loc 1 36 0
  42 000a 114A     		ldr	r2, .L9+8
  43 000c 1370     		strb	r3, [r2]
  37:../system/src/aprs/digi.c **** 
  38:../system/src/aprs/digi.c **** 	if (config_data_mode->digi_viscous == 1) {
  44              		.loc 1 38 0
  45 000e C379     		ldrb	r3, [r0, #7]	@ zero_extendqisi2
  46 0010 012B     		cmp	r3, #1
  47 0012 09D0     		beq	.L6
  39:../system/src/aprs/digi.c **** 
  40:../system/src/aprs/digi.c **** 		if (config_data_mode->digi_only_ssids == 1) {
  41:../system/src/aprs/digi.c **** 			digi_mode = DIGI_VISCOUS_SSID_WIDE1;
  42:../system/src/aprs/digi.c **** 		}
  43:../system/src/aprs/digi.c **** 		else {
  44:../system/src/aprs/digi.c **** 			digi_mode = DIGI_VISCOUS_ALL_WIDE1;
  45:../system/src/aprs/digi.c **** 		}
  46:../system/src/aprs/digi.c **** 	}
  47:../system/src/aprs/digi.c **** 	else {
  48:../system/src/aprs/digi.c **** 		if (config_data_mode->digi_only_ssids == 1) {
  48              		.loc 1 48 0
  49 0014 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
  50 0016 012B     		cmp	r3, #1
  51 0018 11D0     		beq	.L7
  49:../system/src/aprs/digi.c **** 			digi_mode = DIGI_ON_SSID_WIDE1;
  50:../system/src/aprs/digi.c **** 		}
  51:../system/src/aprs/digi.c **** 		else {
  52:../system/src/aprs/digi.c **** 			digi_mode = DIGI_ON_ALL_WIDE1;
  52              		.loc 1 52 0
  53 001a 0D4B     		ldr	r3, .L9+8
  54 001c 0122     		movs	r2, #1
  55 001e 1A70     		strb	r2, [r3]
  56              	.L4:
  53:../system/src/aprs/digi.c **** 		}
  54:../system/src/aprs/digi.c **** 	}
  55:../system/src/aprs/digi.c **** 
  56:../system/src/aprs/digi.c **** 	digi_viscous_delay_sec = config_data_mode->digi_viscous_delay_sec;
  57              		.loc 1 56 0
  58 0020 427A     		ldrb	r2, [r0, #9]	@ zero_extendqisi2
  59 0022 0C4B     		ldr	r3, .L9+12
  60 0024 1A70     		strb	r2, [r3]
  57:../system/src/aprs/digi.c **** 
  58:../system/src/aprs/digi.c **** //#ifdef _DIGI_VISCOUS
  59:../system/src/aprs/digi.c **** //
  60:../system/src/aprs/digi.c **** //	#ifdef _DIGI_ONLY_789
  61:../system/src/aprs/digi.c **** //		digi_mode = DIGI_VISCOUS_SSID_WIDE1;
  62:../system/src/aprs/digi.c **** //	#else
  63:../system/src/aprs/digi.c **** //		digi_mode = DIGI_VISCOUS_ALL_WIDE1;
  64:../system/src/aprs/digi.c **** //	#endif
  65:../system/src/aprs/digi.c **** //
  66:../system/src/aprs/digi.c **** //#else
  67:../system/src/aprs/digi.c **** //
  68:../system/src/aprs/digi.c **** //	#ifdef _DIGI_ONLY_789
  69:../system/src/aprs/digi.c **** //		digi_mode = DIGI_ON_SSID_WIDE1;
  70:../system/src/aprs/digi.c **** //	#else
  71:../system/src/aprs/digi.c **** //		digi_mode = DIGI_ON_ALL_WIDE1;
  72:../system/src/aprs/digi.c **** //	#endif
  73:../system/src/aprs/digi.c **** //
  74:../system/src/aprs/digi.c **** //#endif
  75:../system/src/aprs/digi.c **** 
  76:../system/src/aprs/digi.c **** //#ifdef _DIGI_VISCOUS_DEALY
  77:../system/src/aprs/digi.c **** //		digi_viscous_delay_sec =_DIGI_VISCOUS_DEALY;
  78:../system/src/aprs/digi.c **** //#else
  79:../system/src/aprs/digi.c **** //		digi_viscous_delay_sec = 3;
  80:../system/src/aprs/digi.c **** //#endif
  81:../system/src/aprs/digi.c **** }
  61              		.loc 1 81 0
  62 0026 7047     		bx	lr
  63              	.L6:
  40:../system/src/aprs/digi.c **** 			digi_mode = DIGI_VISCOUS_SSID_WIDE1;
  64              		.loc 1 40 0
  65 0028 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
  66 002a 012B     		cmp	r3, #1
  67 002c 03D0     		beq	.L8
  44:../system/src/aprs/digi.c **** 		}
  68              		.loc 1 44 0
  69 002e 084B     		ldr	r3, .L9+8
  70 0030 0322     		movs	r2, #3
  71 0032 1A70     		strb	r2, [r3]
  72 0034 F4E7     		b	.L4
  73              	.L8:
  41:../system/src/aprs/digi.c **** 		}
  74              		.loc 1 41 0
  75 0036 1346     		mov	r3, r2
  76 0038 0422     		movs	r2, #4
  77 003a 1A70     		strb	r2, [r3]
  78 003c F0E7     		b	.L4
  79              	.L7:
  49:../system/src/aprs/digi.c **** 		}
  80              		.loc 1 49 0
  81 003e 044B     		ldr	r3, .L9+8
  82 0040 0222     		movs	r2, #2
  83 0042 1A70     		strb	r2, [r3]
  84 0044 ECE7     		b	.L4
  85              	.L10:
  86 0046 00BF     		.align	2
  87              	.L9:
  88 0048 00000000 		.word	digi_viscous_counter_sec
  89 004c 00000000 		.word	digi_msg_len
  90 0050 00000000 		.word	digi_mode
  91 0054 00000000 		.word	digi_viscous_delay_sec
  92              		.cfi_endproc
  93              	.LFE352:
  95              		.section	.text.digi_process,"ax",%progbits
  96              		.align	1
  97              		.global	digi_process
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 101              		.fpu fpv4-sp-d16
 103              	digi_process:
 104              	.LFB353:
  82:../system/src/aprs/digi.c **** 
  83:../system/src/aprs/digi.c **** uint8_t digi_process(struct AX25Msg *msg, const config_data_basic_t* const config, const config_dat
 105              		.loc 1 83 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              	.LVL1:
  84:../system/src/aprs/digi.c **** 	uint8_t retval = DIGI_PACKET_DIDNT_DIGIPEATED;
  85:../system/src/aprs/digi.c **** 
  86:../system/src/aprs/digi.c **** #ifdef _DIGI
  87:../system/src/aprs/digi.c **** 
  88:../system/src/aprs/digi.c **** 	// check if the received message is not too long for the transmit buffers
  89:../system/src/aprs/digi.c **** 	if (msg->len >= (CONFIG_AX25_FRAME_BUF_LEN - sizeof(AX25Call) * 7) ) {
 110              		.loc 1 89 0
 111 0000 B0F85030 		ldrh	r3, [r0, #80]
 112 0004 B3F5E77F 		cmp	r3, #462
 113 0008 00F23981 		bhi	.L19
  83:../system/src/aprs/digi.c **** 	uint8_t retval = DIGI_PACKET_DIDNT_DIGIPEATED;
 114              		.loc 1 83 0
 115 000c 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 116              		.cfi_def_cfa_offset 24
 117              		.cfi_offset 4, -24
 118              		.cfi_offset 5, -20
 119              		.cfi_offset 6, -16
 120              		.cfi_offset 7, -12
 121              		.cfi_offset 8, -8
 122              		.cfi_offset 14, -4
 123 0010 82B0     		sub	sp, sp, #8
 124              		.cfi_def_cfa_offset 32
 125 0012 0446     		mov	r4, r0
  90:../system/src/aprs/digi.c **** 		return DIGI_PACKET_TOO_LONG;
  91:../system/src/aprs/digi.c **** 	}
  92:../system/src/aprs/digi.c **** 
  93:../system/src/aprs/digi.c **** 	if ((msg->src.ssid < 7 || msg->src.ssid > 9) && (digi_mode == DIGI_ON_SSID_WIDE1 || digi_mode == D
 126              		.loc 1 93 0
 127 0014 8379     		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 128 0016 073B     		subs	r3, r3, #7
 129 0018 DBB2     		uxtb	r3, r3
 130 001a 022B     		cmp	r3, #2
 131 001c 07D9     		bls	.L13
 132              		.loc 1 93 0 is_stmt 0 discriminator 1
 133 001e 9D4B     		ldr	r3, .L40
 134 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 135 0022 022B     		cmp	r3, #2
 136 0024 00F02D81 		beq	.L20
 137              		.loc 1 93 0 discriminator 2
 138 0028 042B     		cmp	r3, #4
 139 002a 00F02C81 		beq	.L21
 140              	.L13:
  94:../system/src/aprs/digi.c **** 		return DIGI_PACKET_DIDNT_DIGIPEATED;
  95:../system/src/aprs/digi.c **** 	}
  96:../system/src/aprs/digi.c **** 
  97:../system/src/aprs/digi.c **** 	if (after_tx_lock == 0) {
 141              		.loc 1 97 0 is_stmt 1
 142 002e 9A4B     		ldr	r3, .L40+4
 143 0030 93F90030 		ldrsb	r3, [r3]
 144 0034 002B     		cmp	r3, #0
 145 0036 40F01C81 		bne	.L14
  98:../system/src/aprs/digi.c **** 		// if the packet has any path and there is no packed waiting in viscous delay
  99:../system/src/aprs/digi.c **** 		if(msg->rpt_cnt >= 1 && digi_msg_len == 0) {
 146              		.loc 1 99 0
 147 003a 94F84600 		ldrb	r0, [r4, #70]	@ zero_extendqisi2
 148              	.LVL2:
 149 003e 0028     		cmp	r0, #0
 150 0040 00F01A81 		beq	.L12
 151              		.loc 1 99 0 is_stmt 0 discriminator 1
 152 0044 954B     		ldr	r3, .L40+8
 153 0046 1B88     		ldrh	r3, [r3]
 154 0048 0BB1     		cbz	r3, .L33
  84:../system/src/aprs/digi.c **** 
 155              		.loc 1 84 0 is_stmt 1
 156 004a 0020     		movs	r0, #0
 157 004c 14E1     		b	.L12
 158              	.L33:
 159 004e 0D46     		mov	r5, r1
 100:../system/src/aprs/digi.c **** 
 101:../system/src/aprs/digi.c **** 			// initialize global variables used to store digipeated packet
 102:../system/src/aprs/digi.c **** 			memset(digi_path, 0x00, sizeof(AX25Call) * 7);
 160              		.loc 1 102 0
 161 0050 3122     		movs	r2, #49
 162              	.LVL3:
 163 0052 0021     		movs	r1, #0
 164              	.LVL4:
 165 0054 9248     		ldr	r0, .L40+12
 166 0056 FFF7FEFF 		bl	memset
 167              	.LVL5:
 103:../system/src/aprs/digi.c **** 			memset(digi_msg, 0x00, CONFIG_AX25_FRAME_BUF_LEN);
 168              		.loc 1 103 0
 169 005a 4FF40072 		mov	r2, #512
 170 005e 0021     		movs	r1, #0
 171 0060 9048     		ldr	r0, .L40+16
 172 0062 FFF7FEFF 		bl	memset
 173              	.LVL6:
 104:../system/src/aprs/digi.c **** 
 105:../system/src/aprs/digi.c **** //			if (msg->rpt_cnt == 1 && strcmp("WIDE2", msg->rpt_lst[0].call) == 0 && (msg->rpt_lst[0].ssid =
 106:../system/src/aprs/digi.c **** //				/* Powtarzanie ścieżki WIDE2-1 i WIDE2-2 */
 107:../system/src/aprs/digi.c **** //				strcpy(digi_path[0].call, msg->dst.call);	// znak docelowy
 108:../system/src/aprs/digi.c **** //				digi_path[0].ssid = msg->dst.ssid;
 109:../system/src/aprs/digi.c **** //				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 110:../system/src/aprs/digi.c **** //				digi_path[1].ssid = msg->src.ssid;
 111:../system/src/aprs/digi.c **** //				sprintf(digi_path[2].call, "%s", "SR8WXO");	// zamiana WIDE2-2 albo WIDE2-1 na znak digi
 112:../system/src/aprs/digi.c **** //				digi_path[2].ssid = 0x40;
 113:../system/src/aprs/digi.c **** //				sprintf(digi_path[3].call, "%s", "WIDE2");	// dodawanie WIDE2*
 114:../system/src/aprs/digi.c **** //				digi_path[3].ssid = 0x40;			/* 0x40 oznacza jedynkę na 6 bicie (przy numeracji od zera). Po 
 115:../system/src/aprs/digi.c **** //													   otrzymuje się 0x80 czyli jedynkę na H-bicie */
 116:../system/src/aprs/digi.c **** //				digi_q = 1;
 117:../system/src/aprs/digi.c **** //				call_len = 4;	// długość ścieżki
 118:../system/src/aprs/digi.c **** 
 119:../system/src/aprs/digi.c **** //			}
 120:../system/src/aprs/digi.c **** 			if (msg->rpt_cnt == 1 && strcmp("WIDE1", msg->rpt_lst[0].call) == 0 && msg->rpt_lst[0].ssid == 1
 174              		.loc 1 120 0
 175 0066 94F84630 		ldrb	r3, [r4, #70]	@ zero_extendqisi2
 176 006a 012B     		cmp	r3, #1
 177 006c 12D0     		beq	.L34
 178              	.L15:
 121:../system/src/aprs/digi.c **** 				/* Powtarzanie ścieżki WIDE1-1 */
 122:../system/src/aprs/digi.c **** 				strcpy(digi_path[0].call, msg->dst.call);	// znak docelowy
 123:../system/src/aprs/digi.c **** 				digi_path[0].ssid = msg->dst.ssid;
 124:../system/src/aprs/digi.c **** 				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 125:../system/src/aprs/digi.c **** 				digi_path[1].ssid = msg->src.ssid;
 126:../system/src/aprs/digi.c **** 				sprintf(digi_path[2].call, "%s", config->callsign);	// zamiana WIDE2-2 albo WIDE2-1 na znak dig
 127:../system/src/aprs/digi.c **** 				digi_path[2].ssid = (config->ssid | 0x40);
 128:../system/src/aprs/digi.c **** 				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE2*
 129:../system/src/aprs/digi.c **** 				digi_path[3].ssid = 0x40;			/* 0x40 oznacza jedynkę na 6 bicie (przy numeracji od zera). Po pr
 130:../system/src/aprs/digi.c **** 													   otrzymuje się 0x80 czyli jedynkę na H-bicie */
 131:../system/src/aprs/digi.c **** 				retval = DIGI_PACKET_DIGIPEATED;
 132:../system/src/aprs/digi.c **** 				digi_call_len = 4;	// długość ścieżki
 133:../system/src/aprs/digi.c **** 
 134:../system/src/aprs/digi.c **** 			}
 135:../system/src/aprs/digi.c **** 			else if(msg->rpt_cnt > 1 && strcmp("WIDE1", msg->rpt_lst[0].call) == 0 && strcmp("WIDE2", msg->r
 179              		.loc 1 135 0
 180 006e 94F84630 		ldrb	r3, [r4, #70]	@ zero_extendqisi2
 181 0072 012B     		cmp	r3, #1
 182 0074 4ED8     		bhi	.L35
 183              	.L17:
 136:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-1     */
 137:../system/src/aprs/digi.c **** 				strcpy(digi_path[0].call, msg->dst.call);	// znak docelowy
 138:../system/src/aprs/digi.c **** 				digi_path[0].ssid = msg->dst.ssid;
 139:../system/src/aprs/digi.c **** 				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 140:../system/src/aprs/digi.c **** 				digi_path[1].ssid = msg->src.ssid;
 141:../system/src/aprs/digi.c **** 				sprintf(digi_path[2].call, "%s", config->callsign);	// zamiana WIDE1-1 na własny znak digi
 142:../system/src/aprs/digi.c **** 				digi_path[2].ssid =  (config->ssid | 0x40);
 143:../system/src/aprs/digi.c **** 				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE1* na końcu
 144:../system/src/aprs/digi.c **** 				digi_path[3].ssid = 0x40;
 145:../system/src/aprs/digi.c **** 				sprintf(digi_path[4].call, "%s", msg->rpt_lst[1].call);	// przepisywanie WIDE2-1
 146:../system/src/aprs/digi.c **** 				digi_path[4].ssid = msg->rpt_lst[1].ssid;
 147:../system/src/aprs/digi.c **** 				retval = DIGI_PACKET_DIGIPEATED;
 148:../system/src/aprs/digi.c **** 				digi_call_len = 5;
 149:../system/src/aprs/digi.c **** 			}
 150:../system/src/aprs/digi.c **** 			else if(msg->rpt_cnt > 1 && strcmp("WIDE1", msg->rpt_lst[0].call) == 0 && strcmp("WIDE2", msg->r
 184              		.loc 1 150 0
 185 0076 94F84630 		ldrb	r3, [r4, #70]	@ zero_extendqisi2
 186 007a 012B     		cmp	r3, #1
 187 007c 40F20581 		bls	.L23
 188              		.loc 1 150 0 is_stmt 0 discriminator 1
 189 0080 04F10E01 		add	r1, r4, #14
 190 0084 8848     		ldr	r0, .L40+20
 191 0086 FFF7FEFF 		bl	strcmp
 192              	.LVL7:
 193 008a 0028     		cmp	r0, #0
 194 008c 00F08580 		beq	.L36
  84:../system/src/aprs/digi.c **** 
 195              		.loc 1 84 0 is_stmt 1
 196 0090 0020     		movs	r0, #0
 197 0092 F1E0     		b	.L12
 198              	.L34:
 120:../system/src/aprs/digi.c **** 				/* Powtarzanie ścieżki WIDE1-1 */
 199              		.loc 1 120 0 discriminator 1
 200 0094 04F10E01 		add	r1, r4, #14
 201 0098 8348     		ldr	r0, .L40+20
 202 009a FFF7FEFF 		bl	strcmp
 203              	.LVL8:
 204 009e 0028     		cmp	r0, #0
 205 00a0 E5D1     		bne	.L15
 120:../system/src/aprs/digi.c **** 				/* Powtarzanie ścieżki WIDE1-1 */
 206              		.loc 1 120 0 is_stmt 0 discriminator 2
 207 00a2 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 208 00a4 012B     		cmp	r3, #1
 209 00a6 E2D1     		bne	.L15
 210              	.LBB2:
 122:../system/src/aprs/digi.c **** 				digi_path[0].ssid = msg->dst.ssid;
 211              		.loc 1 122 0 is_stmt 1
 212 00a8 7D4E     		ldr	r6, .L40+12
 213 00aa E11D     		adds	r1, r4, #7
 214 00ac 3046     		mov	r0, r6
 215 00ae FFF7FEFF 		bl	strcpy
 216              	.LVL9:
 123:../system/src/aprs/digi.c **** 				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 217              		.loc 1 123 0
 218 00b2 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 219 00b4 B371     		strb	r3, [r6, #6]
 124:../system/src/aprs/digi.c **** 				digi_path[1].ssid = msg->src.ssid;
 220              		.loc 1 124 0
 221 00b6 2146     		mov	r1, r4
 222 00b8 F01D     		adds	r0, r6, #7
 223 00ba FFF7FEFF 		bl	strcpy
 224              	.LVL10:
 125:../system/src/aprs/digi.c **** 				sprintf(digi_path[2].call, "%s", config->callsign);	// zamiana WIDE2-2 albo WIDE2-1 na znak dig
 225              		.loc 1 125 0
 226 00be A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 227 00c0 7373     		strb	r3, [r6, #13]
 126:../system/src/aprs/digi.c **** 				digi_path[2].ssid = (config->ssid | 0x40);
 228              		.loc 1 126 0
 229 00c2 7A4F     		ldr	r7, .L40+24
 230 00c4 2A46     		mov	r2, r5
 231 00c6 3946     		mov	r1, r7
 232 00c8 06F10E00 		add	r0, r6, #14
 233 00cc FFF7FEFF 		bl	sprintf
 234              	.LVL11:
 127:../system/src/aprs/digi.c **** 				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE2*
 235              		.loc 1 127 0
 236 00d0 EB79     		ldrb	r3, [r5, #7]	@ zero_extendqisi2
 237 00d2 43F04003 		orr	r3, r3, #64
 238 00d6 3375     		strb	r3, [r6, #20]
 128:../system/src/aprs/digi.c **** 				digi_path[3].ssid = 0x40;			/* 0x40 oznacza jedynkę na 6 bicie (przy numeracji od zera). Po pr
 239              		.loc 1 128 0
 240 00d8 734A     		ldr	r2, .L40+20
 241 00da 3946     		mov	r1, r7
 242 00dc 06F11500 		add	r0, r6, #21
 243 00e0 FFF7FEFF 		bl	sprintf
 244              	.LVL12:
 129:../system/src/aprs/digi.c **** 													   otrzymuje się 0x80 czyli jedynkę na H-bicie */
 245              		.loc 1 129 0
 246 00e4 4023     		movs	r3, #64
 247 00e6 F376     		strb	r3, [r6, #27]
 248              	.LVL13:
 132:../system/src/aprs/digi.c **** 
 249              		.loc 1 132 0
 250 00e8 714B     		ldr	r3, .L40+28
 251 00ea 0422     		movs	r2, #4
 252 00ec 1A70     		strb	r2, [r3]
 253              	.L16:
 254              	.LBE2:
 255              	.LBB3:
 151:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-2     */
 152:../system/src/aprs/digi.c **** 				strcpy(digi_path[0].call, msg->dst.call);	// znak docelowy
 153:../system/src/aprs/digi.c **** 				digi_path[0].ssid = msg->dst.ssid;
 154:../system/src/aprs/digi.c **** 				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 155:../system/src/aprs/digi.c **** 				digi_path[1].ssid = msg->src.ssid;
 156:../system/src/aprs/digi.c **** 				sprintf(digi_path[2].call, "%s", config->callsign);	// zamiana WIDE1-1 na własny znak digi
 157:../system/src/aprs/digi.c **** 				digi_path[2].ssid = (config->ssid | 0x40);
 158:../system/src/aprs/digi.c **** 				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE1* na końcu
 159:../system/src/aprs/digi.c **** 				digi_path[3].ssid = 0x40;
 160:../system/src/aprs/digi.c **** 				sprintf(digi_path[4].call, "%s", "WIDE2");	// skracanie dalszej czesci do WIDE2-1
 161:../system/src/aprs/digi.c **** 				digi_path[4].ssid = 1;
 162:../system/src/aprs/digi.c **** 				retval = DIGI_PACKET_DIGIPEATED;
 163:../system/src/aprs/digi.c **** 				digi_call_len = 5;
 164:../system/src/aprs/digi.c **** 			}
 165:../system/src/aprs/digi.c **** //			else if (msg->rpt_cnt >= 2 && strcmp("WIDE2", msg->rpt_lst[1].call) == 0 && msg->rpt_lst[1].ss
 166:../system/src/aprs/digi.c **** //				/* Powtarzanie aliasu WIDE2-1 w sciezce WIDE2*,WIDE2-1 */
 167:../system/src/aprs/digi.c **** //				strcpy(digi_path[0].call, msg->dst.call);	// znak docelowy
 168:../system/src/aprs/digi.c **** //				digi_path[0].ssid = msg->dst.ssid;
 169:../system/src/aprs/digi.c **** //				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 170:../system/src/aprs/digi.c **** //				digi_path[1].ssid = msg->src.ssid;
 171:../system/src/aprs/digi.c **** //				sprintf(digi_path[2].call, "%s", msg->rpt_lst[0].call);	// dołączanie znaku poprzedniego di
 172:../system/src/aprs/digi.c **** //				digi_path[2].ssid = (msg->rpt_lst[0].ssid | 0x40);
 173:../system/src/aprs/digi.c **** //				sprintf(digi_path[3].call, "%s", "SR8WXO");	// zamiana WIDE2-1 na własny znak digi
 174:../system/src/aprs/digi.c **** //				digi_path[3].ssid = 0x40;
 175:../system/src/aprs/digi.c **** //				sprintf(digi_path[4].call, "%s", "WIDE2");	// dodawanie WIDE2* na końcu
 176:../system/src/aprs/digi.c **** //				digi_path[4].ssid = 0x40;
 177:../system/src/aprs/digi.c **** //				digi_q = 1;
 178:../system/src/aprs/digi.c **** //				call_len = 5;
 179:../system/src/aprs/digi.c **** //			}
 180:../system/src/aprs/digi.c **** //			else if(msg->rpt_cnt >= 2 && strcmp("WIDE2", msg->rpt_lst[2].call) == 0 && (msg->rpt_lst[2].ss
 181:../system/src/aprs/digi.c **** //				/* Powtarzanie aliasu WIDE2-1 oraz WIDE 2-2 w sciezce typu WIDE1*,WIDE2-n     */
 182:../system/src/aprs/digi.c **** //				strcpy(digi_path[0].call, msg->dst.call);	// znak docelowy
 183:../system/src/aprs/digi.c **** //				digi_path[0].ssid = msg->dst.ssid;
 184:../system/src/aprs/digi.c **** //				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 185:../system/src/aprs/digi.c **** //				digi_path[1].ssid = msg->src.ssid;
 186:../system/src/aprs/digi.c **** //				sprintf(digi_path[2].call, "%s", msg->rpt_lst[0].call);	// dołączanie znaku poprzedniego di
 187:../system/src/aprs/digi.c **** //				digi_path[2].ssid = (msg->rpt_lst[0].ssid | 0x40);
 188:../system/src/aprs/digi.c **** // 				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE1 na końcu
 189:../system/src/aprs/digi.c **** //				digi_path[3].ssid = 0x40;
 190:../system/src/aprs/digi.c **** //				sprintf(digi_path[4].call, "%s", "SR8WXO");		// zamiana WIDE2-1 albo WIDE2-2 na własny znak 
 191:../system/src/aprs/digi.c **** //				digi_path[4].ssid = 0x40;
 192:../system/src/aprs/digi.c **** //				sprintf(digi_path[5].call, "%s", "WIDE2");	// dodawanie WIDE2* na końcu
 193:../system/src/aprs/digi.c **** //				digi_path[5].ssid = 0x40;
 194:../system/src/aprs/digi.c **** //				digi_q = 1;
 195:../system/src/aprs/digi.c **** //				call_len = 6;
 196:../system/src/aprs/digi.c **** //			}
 197:../system/src/aprs/digi.c **** //			else if(msg->rpt_cnt >= 4 && strcmp("WIDE2", msg->rpt_lst[3].call) == 0 && (msg->rpt_lst[3].ss
 198:../system/src/aprs/digi.c **** //				/* Powtarzanie aliasu WIDE2-1 w sciezce typu WIDE1*,WIDE2*,WIDE2-1     */
 199:../system/src/aprs/digi.c **** //				strcpy(digi_path[0].call, msg->dst.call);	// znak docelowy
 200:../system/src/aprs/digi.c **** //				digi_path[0].ssid = msg->dst.ssid;
 201:../system/src/aprs/digi.c **** //				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 202:../system/src/aprs/digi.c **** //				digi_path[1].ssid = msg->src.ssid;
 203:../system/src/aprs/digi.c **** //				sprintf(digi_path[2].call, "%s", msg->rpt_lst[0].call);	// dołączanie znaku poprzedniego di
 204:../system/src/aprs/digi.c **** //				digi_path[2].ssid = (msg->rpt_lst[0].ssid | 0x40);
 205:../system/src/aprs/digi.c **** //				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE1
 206:../system/src/aprs/digi.c **** //				digi_path[3].ssid = 0x40;
 207:../system/src/aprs/digi.c **** //				sprintf(digi_path[4].call, "%s", msg->rpt_lst[2].call);	// dołączanie znaku poprzedniego di
 208:../system/src/aprs/digi.c **** //				digi_path[4].ssid = (msg->rpt_lst[2].ssid | 0x40);
 209:../system/src/aprs/digi.c **** //				sprintf(digi_path[5].call, "%s", "SR8WXO");		// zamiana WIDE2-1 na własny znak digi
 210:../system/src/aprs/digi.c **** //				digi_path[5].ssid = 0x40;
 211:../system/src/aprs/digi.c **** //				sprintf(digi_path[6].call, "%s", "WIDE2");	// dodawanie WIDE2* na końcu
 212:../system/src/aprs/digi.c **** //				digi_path[6].ssid = 0x40;
 213:../system/src/aprs/digi.c **** //				digi_q = 1;
 214:../system/src/aprs/digi.c **** //				call_len = 7;
 215:../system/src/aprs/digi.c **** //			}
 216:../system/src/aprs/digi.c **** 
 217:../system/src/aprs/digi.c **** 			if (retval == DIGI_PACKET_DIGIPEATED) {
 218:../system/src/aprs/digi.c **** 
 219:../system/src/aprs/digi.c **** 				// copying the content
 220:../system/src/aprs/digi.c **** 				digi_msg_len = msg->len+1;
 256              		.loc 1 220 0
 257 00ee B4F85010 		ldrh	r1, [r4, #80]
 258 00f2 0131     		adds	r1, r1, #1
 259 00f4 694B     		ldr	r3, .L40+8
 260 00f6 1980     		strh	r1, [r3]	@ movhi
 221:../system/src/aprs/digi.c **** 				snprintf(digi_msg, msg->len+1, "%s", msg->info);
 261              		.loc 1 221 0
 262 00f8 E36C     		ldr	r3, [r4, #76]
 263 00fa 6C4A     		ldr	r2, .L40+24
 264 00fc 6948     		ldr	r0, .L40+16
 265 00fe FFF7FEFF 		bl	snprintf
 266              	.LVL14:
 222:../system/src/aprs/digi.c **** 
 223:../system/src/aprs/digi.c **** 				// if Viscous mode is not enabled proceed to transmission immediately
 224:../system/src/aprs/digi.c **** 				if (digi_mode == DIGI_ON_SSID_WIDE1 || digi_mode == DIGI_ON_ALL_WIDE1) {
 267              		.loc 1 224 0
 268 0102 644B     		ldr	r3, .L40
 269 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 270 0106 013B     		subs	r3, r3, #1
 271 0108 DBB2     		uxtb	r3, r3
 272 010a 012B     		cmp	r3, #1
 273 010c 40F28380 		bls	.L37
 274 0110 0120     		movs	r0, #1
 275 0112 B1E0     		b	.L12
 276              	.LVL15:
 277              	.L35:
 278              	.LBE3:
 135:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-1     */
 279              		.loc 1 135 0 discriminator 1
 280 0114 04F10E01 		add	r1, r4, #14
 281 0118 6348     		ldr	r0, .L40+20
 282 011a FFF7FEFF 		bl	strcmp
 283              	.LVL16:
 284 011e 0028     		cmp	r0, #0
 285 0120 A9D1     		bne	.L17
 135:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-1     */
 286              		.loc 1 135 0 is_stmt 0 discriminator 2
 287 0122 04F11506 		add	r6, r4, #21
 288 0126 3146     		mov	r1, r6
 289 0128 6248     		ldr	r0, .L40+32
 290 012a FFF7FEFF 		bl	strcmp
 291              	.LVL17:
 292 012e 0028     		cmp	r0, #0
 293 0130 A1D1     		bne	.L17
 135:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-1     */
 294              		.loc 1 135 0 discriminator 3
 295 0132 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 296 0134 012B     		cmp	r3, #1
 297 0136 9ED1     		bne	.L17
 135:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-1     */
 298              		.loc 1 135 0 discriminator 4
 299 0138 E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 300 013a 012B     		cmp	r3, #1
 301 013c 9BD1     		bne	.L17
 302              	.LBB4:
 137:../system/src/aprs/digi.c **** 				digi_path[0].ssid = msg->dst.ssid;
 303              		.loc 1 137 0 is_stmt 1
 304 013e 584F     		ldr	r7, .L40+12
 305 0140 E11D     		adds	r1, r4, #7
 306 0142 3846     		mov	r0, r7
 307 0144 FFF7FEFF 		bl	strcpy
 308              	.LVL18:
 138:../system/src/aprs/digi.c **** 				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 309              		.loc 1 138 0
 310 0148 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 311 014a BB71     		strb	r3, [r7, #6]
 139:../system/src/aprs/digi.c **** 				digi_path[1].ssid = msg->src.ssid;
 312              		.loc 1 139 0
 313 014c 2146     		mov	r1, r4
 314 014e F81D     		adds	r0, r7, #7
 315 0150 FFF7FEFF 		bl	strcpy
 316              	.LVL19:
 140:../system/src/aprs/digi.c **** 				sprintf(digi_path[2].call, "%s", config->callsign);	// zamiana WIDE1-1 na własny znak digi
 317              		.loc 1 140 0
 318 0154 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 319 0156 7B73     		strb	r3, [r7, #13]
 141:../system/src/aprs/digi.c **** 				digi_path[2].ssid =  (config->ssid | 0x40);
 320              		.loc 1 141 0
 321 0158 DFF85081 		ldr	r8, .L40+24
 322 015c 2A46     		mov	r2, r5
 323 015e 4146     		mov	r1, r8
 324 0160 07F10E00 		add	r0, r7, #14
 325 0164 FFF7FEFF 		bl	sprintf
 326              	.LVL20:
 142:../system/src/aprs/digi.c **** 				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE1* na końcu
 327              		.loc 1 142 0
 328 0168 EB79     		ldrb	r3, [r5, #7]	@ zero_extendqisi2
 329 016a 43F04003 		orr	r3, r3, #64
 330 016e 3B75     		strb	r3, [r7, #20]
 143:../system/src/aprs/digi.c **** 				digi_path[3].ssid = 0x40;
 331              		.loc 1 143 0
 332 0170 4D4A     		ldr	r2, .L40+20
 333 0172 4146     		mov	r1, r8
 334 0174 07F11500 		add	r0, r7, #21
 335 0178 FFF7FEFF 		bl	sprintf
 336              	.LVL21:
 144:../system/src/aprs/digi.c **** 				sprintf(digi_path[4].call, "%s", msg->rpt_lst[1].call);	// przepisywanie WIDE2-1
 337              		.loc 1 144 0
 338 017c 4023     		movs	r3, #64
 339 017e FB76     		strb	r3, [r7, #27]
 145:../system/src/aprs/digi.c **** 				digi_path[4].ssid = msg->rpt_lst[1].ssid;
 340              		.loc 1 145 0
 341 0180 3246     		mov	r2, r6
 342 0182 4146     		mov	r1, r8
 343 0184 07F11C00 		add	r0, r7, #28
 344 0188 FFF7FEFF 		bl	sprintf
 345              	.LVL22:
 146:../system/src/aprs/digi.c **** 				retval = DIGI_PACKET_DIGIPEATED;
 346              		.loc 1 146 0
 347 018c E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 348 018e 87F82230 		strb	r3, [r7, #34]
 349              	.LVL23:
 148:../system/src/aprs/digi.c **** 			}
 350              		.loc 1 148 0
 351 0192 474B     		ldr	r3, .L40+28
 352 0194 0522     		movs	r2, #5
 353 0196 1A70     		strb	r2, [r3]
 354 0198 A9E7     		b	.L16
 355              	.LVL24:
 356              	.L36:
 357              	.LBE4:
 150:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-2     */
 358              		.loc 1 150 0 discriminator 2
 359 019a 04F11501 		add	r1, r4, #21
 360 019e 4548     		ldr	r0, .L40+32
 361 01a0 FFF7FEFF 		bl	strcmp
 362              	.LVL25:
 363 01a4 0028     		cmp	r0, #0
 364 01a6 72D1     		bne	.L25
 150:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-2     */
 365              		.loc 1 150 0 is_stmt 0 discriminator 3
 366 01a8 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 367 01aa 012B     		cmp	r3, #1
 368 01ac 01D0     		beq	.L38
  84:../system/src/aprs/digi.c **** 
 369              		.loc 1 84 0 is_stmt 1
 370 01ae 0020     		movs	r0, #0
 371 01b0 62E0     		b	.L12
 372              	.L38:
 150:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-2     */
 373              		.loc 1 150 0 discriminator 4
 374 01b2 E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 375 01b4 022B     		cmp	r3, #2
 376 01b6 01D0     		beq	.L39
  84:../system/src/aprs/digi.c **** 
 377              		.loc 1 84 0
 378 01b8 0020     		movs	r0, #0
 379 01ba 5DE0     		b	.L12
 380              	.L39:
 381              	.LBB5:
 152:../system/src/aprs/digi.c **** 				digi_path[0].ssid = msg->dst.ssid;
 382              		.loc 1 152 0
 383 01bc 384E     		ldr	r6, .L40+12
 384 01be E11D     		adds	r1, r4, #7
 385 01c0 3046     		mov	r0, r6
 386 01c2 FFF7FEFF 		bl	strcpy
 387              	.LVL26:
 153:../system/src/aprs/digi.c **** 				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 388              		.loc 1 153 0
 389 01c6 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 390 01c8 B371     		strb	r3, [r6, #6]
 154:../system/src/aprs/digi.c **** 				digi_path[1].ssid = msg->src.ssid;
 391              		.loc 1 154 0
 392 01ca 2146     		mov	r1, r4
 393 01cc F01D     		adds	r0, r6, #7
 394 01ce FFF7FEFF 		bl	strcpy
 395              	.LVL27:
 155:../system/src/aprs/digi.c **** 				sprintf(digi_path[2].call, "%s", config->callsign);	// zamiana WIDE1-1 na własny znak digi
 396              		.loc 1 155 0
 397 01d2 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 398 01d4 7373     		strb	r3, [r6, #13]
 156:../system/src/aprs/digi.c **** 				digi_path[2].ssid = (config->ssid | 0x40);
 399              		.loc 1 156 0
 400 01d6 354F     		ldr	r7, .L40+24
 401 01d8 2A46     		mov	r2, r5
 402 01da 3946     		mov	r1, r7
 403 01dc 06F10E00 		add	r0, r6, #14
 404 01e0 FFF7FEFF 		bl	sprintf
 405              	.LVL28:
 157:../system/src/aprs/digi.c **** 				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE1* na końcu
 406              		.loc 1 157 0
 407 01e4 EB79     		ldrb	r3, [r5, #7]	@ zero_extendqisi2
 408 01e6 43F04003 		orr	r3, r3, #64
 409 01ea 3375     		strb	r3, [r6, #20]
 158:../system/src/aprs/digi.c **** 				digi_path[3].ssid = 0x40;
 410              		.loc 1 158 0
 411 01ec 2E4A     		ldr	r2, .L40+20
 412 01ee 3946     		mov	r1, r7
 413 01f0 06F11500 		add	r0, r6, #21
 414 01f4 FFF7FEFF 		bl	sprintf
 415              	.LVL29:
 159:../system/src/aprs/digi.c **** 				sprintf(digi_path[4].call, "%s", "WIDE2");	// skracanie dalszej czesci do WIDE2-1
 416              		.loc 1 159 0
 417 01f8 4023     		movs	r3, #64
 418 01fa F376     		strb	r3, [r6, #27]
 160:../system/src/aprs/digi.c **** 				digi_path[4].ssid = 1;
 419              		.loc 1 160 0
 420 01fc 2D4A     		ldr	r2, .L40+32
 421 01fe 3946     		mov	r1, r7
 422 0200 06F11C00 		add	r0, r6, #28
 423 0204 FFF7FEFF 		bl	sprintf
 424              	.LVL30:
 161:../system/src/aprs/digi.c **** 				retval = DIGI_PACKET_DIGIPEATED;
 425              		.loc 1 161 0
 426 0208 0123     		movs	r3, #1
 427 020a 86F82230 		strb	r3, [r6, #34]
 428              	.LVL31:
 163:../system/src/aprs/digi.c **** 			}
 429              		.loc 1 163 0
 430 020e 284B     		ldr	r3, .L40+28
 431 0210 0522     		movs	r2, #5
 432 0212 1A70     		strb	r2, [r3]
 433 0214 6BE7     		b	.L16
 434              	.L37:
 435              	.LBE5:
 436              	.LBB6:
 225:../system/src/aprs/digi.c **** 					digi10m++;
 437              		.loc 1 225 0
 438 0216 284A     		ldr	r2, .L40+36
 439 0218 1388     		ldrh	r3, [r2]
 440 021a 0133     		adds	r3, r3, #1
 441 021c 1380     		strh	r3, [r2]	@ movhi
 226:../system/src/aprs/digi.c **** 
 227:../system/src/aprs/digi.c **** 					// delaying retransmission.. well this will block I/O for a while
 228:../system/src/aprs/digi.c **** 					// and it could be refactor to ommit that but for now it needs to stay
 229:../system/src/aprs/digi.c **** 					// as it is.
 230:../system/src/aprs/digi.c **** 					delay_from_preset();
 442              		.loc 1 230 0
 443 021e FFF7FEFF 		bl	delay_from_preset
 444              	.LVL32:
 445              	.L18:
 231:../system/src/aprs/digi.c **** 
 232:../system/src/aprs/digi.c **** 					while(main_ax25.dcd == true);
 446              		.loc 1 232 0 discriminator 1
 447 0222 264B     		ldr	r3, .L40+40
 448 0224 93F81432 		ldrb	r3, [r3, #532]	@ zero_extendqisi2
 449 0228 002B     		cmp	r3, #0
 450 022a FAD1     		bne	.L18
 233:../system/src/aprs/digi.c **** 					ax25_sendVia(&main_ax25, digi_path, digi_call_len, digi_msg, digi_msg_len-1);
 451              		.loc 1 233 0
 452 022c 1D4E     		ldr	r6, .L40+16
 453 022e 204B     		ldr	r3, .L40+28
 454 0230 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 455 0232 1B4F     		ldr	r7, .L40+12
 456 0234 194D     		ldr	r5, .L40+8
 457              	.LVL33:
 458 0236 2B88     		ldrh	r3, [r5]
 459 0238 013B     		subs	r3, r3, #1
 460 023a 9BB2     		uxth	r3, r3
 461 023c 0093     		str	r3, [sp]
 462 023e 3346     		mov	r3, r6
 463 0240 3946     		mov	r1, r7
 464 0242 1E48     		ldr	r0, .L40+40
 465 0244 FFF7FEFF 		bl	ax25_sendVia
 466              	.LVL34:
 234:../system/src/aprs/digi.c **** 					after_tx_lock = 1;
 467              		.loc 1 234 0
 468 0248 0124     		movs	r4, #1
 469              	.LVL35:
 470 024a 134B     		ldr	r3, .L40+4
 471 024c 1C70     		strb	r4, [r3]
 235:../system/src/aprs/digi.c **** 					afsk_txStart(&main_afsk);
 472              		.loc 1 235 0
 473 024e 1C48     		ldr	r0, .L40+44
 474 0250 FFF7FEFF 		bl	afsk_txStart
 475              	.LVL36:
 236:../system/src/aprs/digi.c **** 
 237:../system/src/aprs/digi.c **** 					// clear variables when there are not needed
 238:../system/src/aprs/digi.c **** 					memset(digi_path, 0x00, sizeof(AX25Call) * 7);
 476              		.loc 1 238 0
 477 0254 3122     		movs	r2, #49
 478 0256 0021     		movs	r1, #0
 479 0258 3846     		mov	r0, r7
 480 025a FFF7FEFF 		bl	memset
 481              	.LVL37:
 239:../system/src/aprs/digi.c **** 					memset(digi_msg, 0x00, CONFIG_AX25_FRAME_BUF_LEN);
 482              		.loc 1 239 0
 483 025e 4FF40072 		mov	r2, #512
 484 0262 0021     		movs	r1, #0
 485 0264 3046     		mov	r0, r6
 486 0266 FFF7FEFF 		bl	memset
 487              	.LVL38:
 240:../system/src/aprs/digi.c **** 					digi_msg_len = 0;
 488              		.loc 1 240 0
 489 026a 0023     		movs	r3, #0
 490 026c 2B80     		strh	r3, [r5]	@ movhi
 241:../system/src/aprs/digi.c **** 
 242:../system/src/aprs/digi.c **** 					return retval;
 491              		.loc 1 242 0
 492 026e 2046     		mov	r0, r4
 493 0270 02E0     		b	.L12
 494              	.LVL39:
 495              	.L14:
 496              	.LBE6:
 243:../system/src/aprs/digi.c **** 
 244:../system/src/aprs/digi.c **** 				} // digi_mode == DIGI_ON_SSID_WIDE1 || digi_mode == DIGI_ON_ALL_WIDE1
 245:../system/src/aprs/digi.c **** 			}	// retval == DIGI_PACKET_DIGIPEATED
 246:../system/src/aprs/digi.c **** 		} // msg->rpt_cnt >= 1 && digi_msg_len == 0
 247:../system/src/aprs/digi.c **** 	}
 248:../system/src/aprs/digi.c **** 	else {
 249:../system/src/aprs/digi.c **** 		after_tx_lock = 0;
 497              		.loc 1 249 0
 498 0272 0020     		movs	r0, #0
 499              	.LVL40:
 500 0274 084B     		ldr	r3, .L40+4
 501 0276 1870     		strb	r0, [r3]
 502              	.LVL41:
 503              	.L12:
 250:../system/src/aprs/digi.c **** 	}
 251:../system/src/aprs/digi.c **** #endif
 252:../system/src/aprs/digi.c **** 	return retval;
 253:../system/src/aprs/digi.c **** }
 504              		.loc 1 253 0
 505 0278 02B0     		add	sp, sp, #8
 506              		.cfi_def_cfa_offset 24
 507              		@ sp needed
 508 027a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 509              	.LVL42:
 510              	.L19:
 511              		.cfi_def_cfa_offset 0
 512              		.cfi_restore 4
 513              		.cfi_restore 5
 514              		.cfi_restore 6
 515              		.cfi_restore 7
 516              		.cfi_restore 8
 517              		.cfi_restore 14
  90:../system/src/aprs/digi.c **** 	}
 518              		.loc 1 90 0
 519 027e FF20     		movs	r0, #255
 520              	.LVL43:
 521              		.loc 1 253 0
 522 0280 7047     		bx	lr
 523              	.LVL44:
 524              	.L20:
 525              		.cfi_def_cfa_offset 32
 526              		.cfi_offset 4, -24
 527              		.cfi_offset 5, -20
 528              		.cfi_offset 6, -16
 529              		.cfi_offset 7, -12
 530              		.cfi_offset 8, -8
 531              		.cfi_offset 14, -4
  94:../system/src/aprs/digi.c **** 	}
 532              		.loc 1 94 0
 533 0282 0020     		movs	r0, #0
 534              	.LVL45:
 535 0284 F8E7     		b	.L12
 536              	.LVL46:
 537              	.L21:
 538 0286 0020     		movs	r0, #0
 539              	.LVL47:
 540 0288 F6E7     		b	.L12
 541              	.LVL48:
 542              	.L23:
  84:../system/src/aprs/digi.c **** 
 543              		.loc 1 84 0
 544 028a 0020     		movs	r0, #0
 545 028c F4E7     		b	.L12
 546              	.L25:
 547 028e 0020     		movs	r0, #0
 548 0290 F2E7     		b	.L12
 549              	.L41:
 550 0292 00BF     		.align	2
 551              	.L40:
 552 0294 00000000 		.word	digi_mode
 553 0298 00000000 		.word	after_tx_lock
 554 029c 00000000 		.word	digi_msg_len
 555 02a0 00000000 		.word	digi_path
 556 02a4 00000000 		.word	digi_msg
 557 02a8 00000000 		.word	.LC0
 558 02ac 08000000 		.word	.LC1
 559 02b0 00000000 		.word	.LANCHOR0
 560 02b4 0C000000 		.word	.LC2
 561 02b8 00000000 		.word	digi10m
 562 02bc 00000000 		.word	main_ax25
 563 02c0 00000000 		.word	main_afsk
 564              		.cfi_endproc
 565              	.LFE353:
 567              		.section	.text.digi_check_with_viscous,"ax",%progbits
 568              		.align	1
 569              		.global	digi_check_with_viscous
 570              		.syntax unified
 571              		.thumb
 572              		.thumb_func
 573              		.fpu fpv4-sp-d16
 575              	digi_check_with_viscous:
 576              	.LFB354:
 254:../system/src/aprs/digi.c **** 
 255:../system/src/aprs/digi.c **** uint8_t digi_check_with_viscous(struct AX25Msg *msg) {
 577              		.loc 1 255 0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 0
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 581              	.LVL49:
 256:../system/src/aprs/digi.c **** 	uint8_t retval = 0;
 257:../system/src/aprs/digi.c **** 
 258:../system/src/aprs/digi.c **** 	// if there is a message waiting in buffer for digipeating
 259:../system/src/aprs/digi.c **** 	if (digi_msg_len > 0) {
 582              		.loc 1 259 0
 583 0000 134B     		ldr	r3, .L50
 584 0002 1B88     		ldrh	r3, [r3]
 585 0004 0BB9     		cbnz	r3, .L48
 260:../system/src/aprs/digi.c **** 		// check the source call
 261:../system/src/aprs/digi.c **** 		if (strncmp(msg->src.call, digi_path[1].call, 6) == 0)  {
 262:../system/src/aprs/digi.c **** 			// if the source call is the same check the SSID
 263:../system/src/aprs/digi.c **** 			if (msg->src.ssid == digi_path[1].ssid) {
 264:../system/src/aprs/digi.c **** 				// this is a message from the same station check the message content
 265:../system/src/aprs/digi.c **** 				if (memcmp(msg->info, digi_msg, msg->len) == 0) {
 266:../system/src/aprs/digi.c **** 					// if the message content is the same it means that current buffer content shall be discarded
 267:../system/src/aprs/digi.c **** 					// and frame shall not be retransmited
 268:../system/src/aprs/digi.c **** 					digi_msg_len = 0;
 269:../system/src/aprs/digi.c **** 					memset(digi_msg, 0x00, CONFIG_AX25_FRAME_BUF_LEN);
 270:../system/src/aprs/digi.c **** 
 271:../system/src/aprs/digi.c **** 					// increase viscous drop counter
 272:../system/src/aprs/digi.c **** 					digidrop10m++;
 273:../system/src/aprs/digi.c **** 				}
 274:../system/src/aprs/digi.c **** 			}
 275:../system/src/aprs/digi.c **** 		}
 276:../system/src/aprs/digi.c **** 	}
 277:../system/src/aprs/digi.c **** 
 278:../system/src/aprs/digi.c **** 	return retval;
 279:../system/src/aprs/digi.c **** }
 586              		.loc 1 279 0
 587 0006 0020     		movs	r0, #0
 588              	.LVL50:
 589 0008 7047     		bx	lr
 590              	.LVL51:
 591              	.L48:
 255:../system/src/aprs/digi.c **** 	uint8_t retval = 0;
 592              		.loc 1 255 0
 593 000a 10B5     		push	{r4, lr}
 594              		.cfi_def_cfa_offset 8
 595              		.cfi_offset 4, -8
 596              		.cfi_offset 14, -4
 597 000c 0446     		mov	r4, r0
 261:../system/src/aprs/digi.c **** 			// if the source call is the same check the SSID
 598              		.loc 1 261 0
 599 000e 0622     		movs	r2, #6
 600 0010 1049     		ldr	r1, .L50+4
 601 0012 FFF7FEFF 		bl	strncmp
 602              	.LVL52:
 603 0016 20B9     		cbnz	r0, .L43
 263:../system/src/aprs/digi.c **** 				// this is a message from the same station check the message content
 604              		.loc 1 263 0
 605 0018 A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 606 001a 0F4B     		ldr	r3, .L50+8
 607 001c 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 608 001e 9A42     		cmp	r2, r3
 609 0020 01D0     		beq	.L49
 610              	.L43:
 611              		.loc 1 279 0
 612 0022 0020     		movs	r0, #0
 613 0024 10BD     		pop	{r4, pc}
 614              	.LVL53:
 615              	.L49:
 265:../system/src/aprs/digi.c **** 					// if the message content is the same it means that current buffer content shall be discarded
 616              		.loc 1 265 0
 617 0026 B4F85020 		ldrh	r2, [r4, #80]
 618 002a 0C49     		ldr	r1, .L50+12
 619 002c E06C     		ldr	r0, [r4, #76]
 620 002e FFF7FEFF 		bl	memcmp
 621              	.LVL54:
 622 0032 0028     		cmp	r0, #0
 623 0034 F5D1     		bne	.L43
 268:../system/src/aprs/digi.c **** 					memset(digi_msg, 0x00, CONFIG_AX25_FRAME_BUF_LEN);
 624              		.loc 1 268 0
 625 0036 0021     		movs	r1, #0
 626 0038 054B     		ldr	r3, .L50
 627 003a 1980     		strh	r1, [r3]	@ movhi
 269:../system/src/aprs/digi.c **** 
 628              		.loc 1 269 0
 629 003c 4FF40072 		mov	r2, #512
 630 0040 0648     		ldr	r0, .L50+12
 631 0042 FFF7FEFF 		bl	memset
 632              	.LVL55:
 272:../system/src/aprs/digi.c **** 				}
 633              		.loc 1 272 0
 634 0046 064A     		ldr	r2, .L50+16
 635 0048 1388     		ldrh	r3, [r2]
 636 004a 0133     		adds	r3, r3, #1
 637 004c 1380     		strh	r3, [r2]	@ movhi
 638 004e E8E7     		b	.L43
 639              	.L51:
 640              		.align	2
 641              	.L50:
 642 0050 00000000 		.word	digi_msg_len
 643 0054 07000000 		.word	digi_path+7
 644 0058 00000000 		.word	digi_path
 645 005c 00000000 		.word	digi_msg
 646 0060 00000000 		.word	digidrop10m
 647              		.cfi_endproc
 648              	.LFE354:
 650              		.section	.text.digi_pool_viscous,"ax",%progbits
 651              		.align	1
 652              		.global	digi_pool_viscous
 653              		.syntax unified
 654              		.thumb
 655              		.thumb_func
 656              		.fpu fpv4-sp-d16
 658              	digi_pool_viscous:
 659              	.LFB355:
 280:../system/src/aprs/digi.c **** 
 281:../system/src/aprs/digi.c **** uint8_t digi_pool_viscous(void) {
 660              		.loc 1 281 0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 0
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 664              	.LVL56:
 282:../system/src/aprs/digi.c **** 	uint8_t retval = DIGI_PACKET_DIDNT_DIGIPEATED;
 283:../system/src/aprs/digi.c **** 
 284:../system/src/aprs/digi.c **** 	// proceed only if Viscous mode is enabled
 285:../system/src/aprs/digi.c **** 	if (digi_mode == DIGI_VISCOUS_ALL_WIDE1 || digi_mode == DIGI_VISCOUS_SSID_WIDE1) {
 665              		.loc 1 285 0
 666 0000 244B     		ldr	r3, .L62
 667 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 668 0004 033B     		subs	r3, r3, #3
 669 0006 DBB2     		uxtb	r3, r3
 670 0008 012B     		cmp	r3, #1
 671 000a 01D9     		bls	.L61
 282:../system/src/aprs/digi.c **** 	uint8_t retval = DIGI_PACKET_DIDNT_DIGIPEATED;
 672              		.loc 1 282 0
 673 000c 0020     		movs	r0, #0
 674 000e 7047     		bx	lr
 675              	.L61:
 286:../system/src/aprs/digi.c **** 
 287:../system/src/aprs/digi.c **** 		// if there is any message waiting in viscous delay
 288:../system/src/aprs/digi.c **** 		if (digi_msg_len > 0) {
 676              		.loc 1 288 0
 677 0010 214B     		ldr	r3, .L62+4
 678 0012 1988     		ldrh	r1, [r3]
 679 0014 0029     		cmp	r1, #0
 680 0016 36D0     		beq	.L54
 289:../system/src/aprs/digi.c **** 			digi_viscous_counter_sec++;
 681              		.loc 1 289 0
 682 0018 204A     		ldr	r2, .L62+8
 683 001a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 684 001c 0133     		adds	r3, r3, #1
 685 001e DBB2     		uxtb	r3, r3
 686 0020 1370     		strb	r3, [r2]
 290:../system/src/aprs/digi.c **** 
 291:../system/src/aprs/digi.c **** 			// if the counter reach the delay limit and packet still waits
 292:../system/src/aprs/digi.c **** 			// so it hasn't been cleared by 'digi_check_with_viscous'
 293:../system/src/aprs/digi.c **** 			if (digi_viscous_counter_sec >= digi_viscous_delay_sec) {
 687              		.loc 1 293 0
 688 0022 1F4A     		ldr	r2, .L62+12
 689 0024 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 690 0026 9342     		cmp	r3, r2
 691 0028 31D3     		bcc	.L57
 281:../system/src/aprs/digi.c **** 	uint8_t retval = DIGI_PACKET_DIDNT_DIGIPEATED;
 692              		.loc 1 281 0
 693 002a 70B5     		push	{r4, r5, r6, lr}
 694              		.cfi_def_cfa_offset 16
 695              		.cfi_offset 4, -16
 696              		.cfi_offset 5, -12
 697              		.cfi_offset 6, -8
 698              		.cfi_offset 14, -4
 699 002c 82B0     		sub	sp, sp, #8
 700              		.cfi_def_cfa_offset 24
 701              	.L55:
 294:../system/src/aprs/digi.c **** 
 295:../system/src/aprs/digi.c **** 				// wait when radio channel will became avaliable
 296:../system/src/aprs/digi.c **** 				while(main_ax25.dcd == true);
 702              		.loc 1 296 0 discriminator 1
 703 002e 1D4B     		ldr	r3, .L62+16
 704 0030 93F81432 		ldrb	r3, [r3, #532]	@ zero_extendqisi2
 705 0034 002B     		cmp	r3, #0
 706 0036 FAD1     		bne	.L55
 297:../system/src/aprs/digi.c **** 
 298:../system/src/aprs/digi.c **** 				// put message vaiting in viscous dealy into AX25 buffer in correct, encoded form
 299:../system/src/aprs/digi.c **** 				ax25_sendVia(&main_ax25, digi_path, digi_call_len, digi_msg, digi_msg_len-1);
 707              		.loc 1 299 0
 708 0038 1B4D     		ldr	r5, .L62+20
 709 003a 1C4B     		ldr	r3, .L62+24
 710 003c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 711 003e 1C4E     		ldr	r6, .L62+28
 712 0040 0139     		subs	r1, r1, #1
 713 0042 89B2     		uxth	r1, r1
 714 0044 0091     		str	r1, [sp]
 715 0046 2B46     		mov	r3, r5
 716 0048 3146     		mov	r1, r6
 717 004a 1648     		ldr	r0, .L62+16
 718 004c FFF7FEFF 		bl	ax25_sendVia
 719              	.LVL57:
 300:../system/src/aprs/digi.c **** 				after_tx_lock = 1;
 720              		.loc 1 300 0
 721 0050 0124     		movs	r4, #1
 722 0052 184B     		ldr	r3, .L62+32
 723 0054 1C70     		strb	r4, [r3]
 301:../system/src/aprs/digi.c **** 
 302:../system/src/aprs/digi.c **** 				// start transmission (non blicking call)
 303:../system/src/aprs/digi.c **** 				afsk_txStart(&main_afsk);
 724              		.loc 1 303 0
 725 0056 1848     		ldr	r0, .L62+36
 726 0058 FFF7FEFF 		bl	afsk_txStart
 727              	.LVL58:
 304:../system/src/aprs/digi.c **** 
 305:../system/src/aprs/digi.c **** 				// clear variables when there are not needed
 306:../system/src/aprs/digi.c **** 				memset(digi_path, 0x00, sizeof(AX25Call) * 7);
 728              		.loc 1 306 0
 729 005c 3122     		movs	r2, #49
 730 005e 0021     		movs	r1, #0
 731 0060 3046     		mov	r0, r6
 732 0062 FFF7FEFF 		bl	memset
 733              	.LVL59:
 307:../system/src/aprs/digi.c **** 				memset(digi_msg, 0x00, CONFIG_AX25_FRAME_BUF_LEN);
 734              		.loc 1 307 0
 735 0066 4FF40072 		mov	r2, #512
 736 006a 0021     		movs	r1, #0
 737 006c 2846     		mov	r0, r5
 738 006e FFF7FEFF 		bl	memset
 739              	.LVL60:
 308:../system/src/aprs/digi.c **** 				digi_msg_len = 0;
 740              		.loc 1 308 0
 741 0072 094B     		ldr	r3, .L62+4
 742 0074 0022     		movs	r2, #0
 743 0076 1A80     		strh	r2, [r3]	@ movhi
 309:../system/src/aprs/digi.c **** 
 310:../system/src/aprs/digi.c **** 				digi10m++;
 744              		.loc 1 310 0
 745 0078 104A     		ldr	r2, .L62+40
 746 007a 1388     		ldrh	r3, [r2]
 747 007c 2344     		add	r3, r3, r4
 748 007e 1380     		strh	r3, [r2]	@ movhi
 749              	.LVL61:
 311:../system/src/aprs/digi.c **** 
 312:../system/src/aprs/digi.c **** 				retval = DIGI_PACKET_DIGIPEATED;
 750              		.loc 1 312 0
 751 0080 2046     		mov	r0, r4
 752              	.LVL62:
 313:../system/src/aprs/digi.c **** 			}
 314:../system/src/aprs/digi.c **** 
 315:../system/src/aprs/digi.c **** 		}
 316:../system/src/aprs/digi.c **** 		else {
 317:../system/src/aprs/digi.c **** 			// if there isn't only zero the counter and do nothing
 318:../system/src/aprs/digi.c **** 			digi_viscous_counter_sec = 0;
 319:../system/src/aprs/digi.c **** 		}
 320:../system/src/aprs/digi.c **** 
 321:../system/src/aprs/digi.c **** 	}
 322:../system/src/aprs/digi.c **** 
 323:../system/src/aprs/digi.c **** 	return retval;
 324:../system/src/aprs/digi.c **** }
 753              		.loc 1 324 0
 754 0082 02B0     		add	sp, sp, #8
 755              		.cfi_def_cfa_offset 16
 756              		@ sp needed
 757 0084 70BD     		pop	{r4, r5, r6, pc}
 758              	.LVL63:
 759              	.L54:
 760              		.cfi_def_cfa_offset 0
 761              		.cfi_restore 4
 762              		.cfi_restore 5
 763              		.cfi_restore 6
 764              		.cfi_restore 14
 318:../system/src/aprs/digi.c **** 		}
 765              		.loc 1 318 0
 766 0086 0020     		movs	r0, #0
 767 0088 044B     		ldr	r3, .L62+8
 768 008a 1870     		strb	r0, [r3]
 769 008c 7047     		bx	lr
 770              	.L57:
 282:../system/src/aprs/digi.c **** 
 771              		.loc 1 282 0
 772 008e 0020     		movs	r0, #0
 773              	.LVL64:
 774              		.loc 1 324 0
 775 0090 7047     		bx	lr
 776              	.L63:
 777 0092 00BF     		.align	2
 778              	.L62:
 779 0094 00000000 		.word	digi_mode
 780 0098 00000000 		.word	digi_msg_len
 781 009c 00000000 		.word	digi_viscous_counter_sec
 782 00a0 00000000 		.word	digi_viscous_delay_sec
 783 00a4 00000000 		.word	main_ax25
 784 00a8 00000000 		.word	digi_msg
 785 00ac 00000000 		.word	.LANCHOR0
 786 00b0 00000000 		.word	digi_path
 787 00b4 00000000 		.word	after_tx_lock
 788 00b8 00000000 		.word	main_afsk
 789 00bc 00000000 		.word	digi10m
 790              		.cfi_endproc
 791              	.LFE355:
 793              		.comm	digi_viscous_counter_sec,1,1
 794              		.comm	digi_viscous_delay_sec,1,1
 795              		.comm	digi_mode,1,1
 796              		.global	digi_call_len
 797              		.comm	digi_path,49,4
 798              		.comm	digi_msg_len,2,2
 799              		.comm	digi_msg,512,4
 800              		.section	.bss.digi_call_len,"aw",%nobits
 801              		.set	.LANCHOR0,. + 0
 804              	digi_call_len:
 805 0000 00       		.space	1
 806              		.section	.rodata.digi_process.str1.4,"aMS",%progbits,1
 807              		.align	2
 808              	.LC0:
 809 0000 57494445 		.ascii	"WIDE1\000"
 809      3100
 810 0006 0000     		.space	2
 811              	.LC1:
 812 0008 257300   		.ascii	"%s\000"
 813 000b 00       		.space	1
 814              	.LC2:
 815 000c 57494445 		.ascii	"WIDE2\000"
 815      3200
 816              		.text
 817              	.Letext0:
 818              		.file 2 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 819              		.file 3 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 820              		.file 4 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 821              		.file 5 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 822              		.file 6 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 823              		.file 7 "../system/include/aprs/cfifo.h"
 824              		.file 8 "../system/include/aprs/afsk.h"
 825              		.file 9 "../system/include/aprs/ax25.h"
 826              		.file 10 "../include/config_data.h"
 827              		.file 11 "../system/include/aprs/digi.h"
 828              		.file 12 "../system/include/cmsis/stm32l4xx/core_cm4.h"
 829              		.file 13 "../system/include/cmsis/stm32l4xx/device/system_stm32l4xx.h"
 830              		.file 14 "../system/include/cmsis/stm32l4xx/device/stm32l471xx.h"
 831              		.file 15 "../system/include/drivers/serial.h"
 832              		.file 16 "../include/main.h"
 833              		.file 17 "../include/delay.h"
 834              		.file 18 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 digi.c
     /tmp/ccS8HgMl.s:18     .text.digi_init:0000000000000000 $t
     /tmp/ccS8HgMl.s:25     .text.digi_init:0000000000000000 digi_init
     /tmp/ccS8HgMl.s:88     .text.digi_init:0000000000000048 $d
                            *COM*:0000000000000001 digi_viscous_counter_sec
                            *COM*:0000000000000002 digi_msg_len
                            *COM*:0000000000000001 digi_mode
                            *COM*:0000000000000001 digi_viscous_delay_sec
     /tmp/ccS8HgMl.s:96     .text.digi_process:0000000000000000 $t
     /tmp/ccS8HgMl.s:103    .text.digi_process:0000000000000000 digi_process
     /tmp/ccS8HgMl.s:552    .text.digi_process:0000000000000294 $d
                            *COM*:0000000000000031 digi_path
                            *COM*:0000000000000200 digi_msg
     /tmp/ccS8HgMl.s:568    .text.digi_check_with_viscous:0000000000000000 $t
     /tmp/ccS8HgMl.s:575    .text.digi_check_with_viscous:0000000000000000 digi_check_with_viscous
     /tmp/ccS8HgMl.s:642    .text.digi_check_with_viscous:0000000000000050 $d
     /tmp/ccS8HgMl.s:651    .text.digi_pool_viscous:0000000000000000 $t
     /tmp/ccS8HgMl.s:658    .text.digi_pool_viscous:0000000000000000 digi_pool_viscous
     /tmp/ccS8HgMl.s:779    .text.digi_pool_viscous:0000000000000094 $d
     /tmp/ccS8HgMl.s:804    .bss.digi_call_len:0000000000000000 digi_call_len
     /tmp/ccS8HgMl.s:805    .bss.digi_call_len:0000000000000000 $d
     /tmp/ccS8HgMl.s:807    .rodata.digi_process.str1.4:0000000000000000 $d
                           .group:0000000000000000 wm4.0.95bc707da9dcffdc6c8c58936cbc8421
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.newlib.h.18.5e5ca3429233af402d406a202f1fc1ac
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:0000000000000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:0000000000000000 wm4.macros.h.2.7a7a5ac48d4160b7481c806e80b68442
                           .group:0000000000000000 wm4.config.h.2.f5e96167cb26b0ce97c5e7513a95bc8b
                           .group:0000000000000000 wm4.afsk.h.17.cf8f922069680e152e1eddb76cd4cc82
                           .group:0000000000000000 wm4.ax25.h.18.077e42a4af9016476e34900472a8fe18
                           .group:0000000000000000 wm4.config_data.h.9.6026a38cd2f39158a8fd50707ba1bf90
                           .group:0000000000000000 wm4.digi.h.14.769ea2ae98162dd36806ccf4982c3c8a
                           .group:0000000000000000 wm4.stm32l4xx.h.39.54a1fe1e096c7852edd649652f013a11
                           .group:0000000000000000 wm4.stm32l471xx.h.35.e78ad65c513105dda311dc495ac74d04
                           .group:0000000000000000 wm4.cmsis_version.h.32.46e8eccfa2cfeaae11d008bb2823a3ed
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.78077cef1206e937f7b56043ffca496a
                           .group:0000000000000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:0000000000000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:0000000000000000 wm4.stm32l471xx.h.423.ceac761476affad641a3347d7727acfd
                           .group:0000000000000000 wm4.stm32l4xx.h.197.fb1c68184133668ca24c44c29ba4361f
                           .group:0000000000000000 wm4.stm32l4xx_ll_usart.h.22.ec2beebcd146668c5b35749264d7b58a
                           .group:0000000000000000 wm4.serial.h.14.eed7cf013c382ed4598746b40f0e2523
                           .group:0000000000000000 wm4.main.h.8.3d6ad69e5f061008d8c5cc5f5c9dd15a
                           .group:0000000000000000 wm4.station_config.h.9.d547169434a316afe56104ac612d2109

UNDEFINED SYMBOLS
memset
strcmp
strcpy
sprintf
snprintf
delay_from_preset
ax25_sendVia
afsk_txStart
after_tx_lock
digi10m
main_ax25
main_afsk
strncmp
memcmp
digidrop10m
