   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"digi.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.digi_init,"ax",%progbits
  16              		.align	1
  17              		.global	digi_init
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	digi_init:
  24              	.LFB71:
  25              		.file 1 "../system/src/aprs/digi.c"
   1:../system/src/aprs/digi.c **** /*
   2:../system/src/aprs/digi.c ****  * digi.c
   3:../system/src/aprs/digi.c ****  *
   4:../system/src/aprs/digi.c ****  *  Created on: 28.05.2017
   5:../system/src/aprs/digi.c ****  *      Author: mateusz
   6:../system/src/aprs/digi.c ****  */
   7:../system/src/aprs/digi.c **** 
   8:../system/src/aprs/digi.c **** #include <string.h>
   9:../system/src/aprs/digi.c **** 
  10:../system/src/aprs/digi.c **** #include "aprs/digi.h"
  11:../system/src/aprs/digi.c **** #include "main.h"
  12:../system/src/aprs/digi.c **** #include "TimerConfig.h"
  13:../system/src/aprs/digi.c **** #include "delay.h"
  14:../system/src/aprs/digi.c **** 
  15:../system/src/aprs/digi.c **** #include "station_config.h"
  16:../system/src/aprs/digi.c **** #include "config.h"
  17:../system/src/aprs/digi.c **** 
  18:../system/src/aprs/digi.c **** // global variables to store a frame content to be digipeated
  19:../system/src/aprs/digi.c **** uint8_t digi_msg[CONFIG_AX25_FRAME_BUF_LEN];
  20:../system/src/aprs/digi.c **** uint16_t digi_msg_len;
  21:../system/src/aprs/digi.c **** AX25Call digi_path[7];
  22:../system/src/aprs/digi.c **** uint8_t digi_call_len = 0;
  23:../system/src/aprs/digi.c **** 
  24:../system/src/aprs/digi.c **** // digipeater working mode
  25:../system/src/aprs/digi.c **** digi_mode_t digi_mode;
  26:../system/src/aprs/digi.c **** 
  27:../system/src/aprs/digi.c **** uint8_t digi_viscous_delay_sec;
  28:../system/src/aprs/digi.c **** uint8_t digi_viscous_counter_sec;
  29:../system/src/aprs/digi.c **** 
  30:../system/src/aprs/digi.c **** 
  31:../system/src/aprs/digi.c **** void digi_init(const config_data_mode_t* const config_data_mode) {
  26              		.loc 1 31 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32:../system/src/aprs/digi.c **** 	digi_viscous_counter_sec = 0;
  32              		.loc 1 32 0
  33 0000 0023     		movs	r3, #0
  34 0002 114A     		ldr	r2, .L9
  35 0004 1370     		strb	r3, [r2]
  33:../system/src/aprs/digi.c **** 
  34:../system/src/aprs/digi.c **** 	digi_msg_len = 0;
  36              		.loc 1 34 0
  37 0006 114A     		ldr	r2, .L9+4
  38 0008 1380     		strh	r3, [r2]	@ movhi
  35:../system/src/aprs/digi.c **** 
  36:../system/src/aprs/digi.c **** 	digi_mode = DIGI_OFF;
  39              		.loc 1 36 0
  40 000a 114A     		ldr	r2, .L9+8
  41 000c 1370     		strb	r3, [r2]
  37:../system/src/aprs/digi.c **** 
  38:../system/src/aprs/digi.c **** 	if (config_data_mode->digi_viscous == 1) {
  42              		.loc 1 38 0
  43 000e C379     		ldrb	r3, [r0, #7]	@ zero_extendqisi2
  44 0010 012B     		cmp	r3, #1
  45 0012 09D0     		beq	.L6
  39:../system/src/aprs/digi.c **** 
  40:../system/src/aprs/digi.c **** 		if (config_data_mode->digi_only_ssids == 1) {
  41:../system/src/aprs/digi.c **** 			digi_mode = DIGI_VISCOUS_SSID_WIDE1;
  42:../system/src/aprs/digi.c **** 		}
  43:../system/src/aprs/digi.c **** 		else {
  44:../system/src/aprs/digi.c **** 			digi_mode = DIGI_VISCOUS_ALL_WIDE1;
  45:../system/src/aprs/digi.c **** 		}
  46:../system/src/aprs/digi.c **** 	}
  47:../system/src/aprs/digi.c **** 	else {
  48:../system/src/aprs/digi.c **** 		if (config_data_mode->digi_only_ssids == 1) {
  46              		.loc 1 48 0
  47 0014 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
  48 0016 012B     		cmp	r3, #1
  49 0018 11D0     		beq	.L7
  49:../system/src/aprs/digi.c **** 			digi_mode = DIGI_ON_SSID_WIDE1;
  50:../system/src/aprs/digi.c **** 		}
  51:../system/src/aprs/digi.c **** 		else {
  52:../system/src/aprs/digi.c **** 			digi_mode = DIGI_ON_ALL_WIDE1;
  50              		.loc 1 52 0
  51 001a 0D4B     		ldr	r3, .L9+8
  52 001c 0122     		movs	r2, #1
  53 001e 1A70     		strb	r2, [r3]
  54              	.L4:
  53:../system/src/aprs/digi.c **** 		}
  54:../system/src/aprs/digi.c **** 	}
  55:../system/src/aprs/digi.c **** 
  56:../system/src/aprs/digi.c **** 	digi_viscous_delay_sec = config_data_mode->digi_viscous_delay_sec;
  55              		.loc 1 56 0
  56 0020 427A     		ldrb	r2, [r0, #9]	@ zero_extendqisi2
  57 0022 0C4B     		ldr	r3, .L9+12
  58 0024 1A70     		strb	r2, [r3]
  57:../system/src/aprs/digi.c **** 
  58:../system/src/aprs/digi.c **** //#ifdef _DIGI_VISCOUS
  59:../system/src/aprs/digi.c **** //
  60:../system/src/aprs/digi.c **** //	#ifdef _DIGI_ONLY_789
  61:../system/src/aprs/digi.c **** //		digi_mode = DIGI_VISCOUS_SSID_WIDE1;
  62:../system/src/aprs/digi.c **** //	#else
  63:../system/src/aprs/digi.c **** //		digi_mode = DIGI_VISCOUS_ALL_WIDE1;
  64:../system/src/aprs/digi.c **** //	#endif
  65:../system/src/aprs/digi.c **** //
  66:../system/src/aprs/digi.c **** //#else
  67:../system/src/aprs/digi.c **** //
  68:../system/src/aprs/digi.c **** //	#ifdef _DIGI_ONLY_789
  69:../system/src/aprs/digi.c **** //		digi_mode = DIGI_ON_SSID_WIDE1;
  70:../system/src/aprs/digi.c **** //	#else
  71:../system/src/aprs/digi.c **** //		digi_mode = DIGI_ON_ALL_WIDE1;
  72:../system/src/aprs/digi.c **** //	#endif
  73:../system/src/aprs/digi.c **** //
  74:../system/src/aprs/digi.c **** //#endif
  75:../system/src/aprs/digi.c **** 
  76:../system/src/aprs/digi.c **** //#ifdef _DIGI_VISCOUS_DEALY
  77:../system/src/aprs/digi.c **** //		digi_viscous_delay_sec =_DIGI_VISCOUS_DEALY;
  78:../system/src/aprs/digi.c **** //#else
  79:../system/src/aprs/digi.c **** //		digi_viscous_delay_sec = 3;
  80:../system/src/aprs/digi.c **** //#endif
  81:../system/src/aprs/digi.c **** }
  59              		.loc 1 81 0
  60 0026 7047     		bx	lr
  61              	.L6:
  40:../system/src/aprs/digi.c **** 			digi_mode = DIGI_VISCOUS_SSID_WIDE1;
  62              		.loc 1 40 0
  63 0028 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
  64 002a 012B     		cmp	r3, #1
  65 002c 03D0     		beq	.L8
  44:../system/src/aprs/digi.c **** 		}
  66              		.loc 1 44 0
  67 002e 084B     		ldr	r3, .L9+8
  68 0030 0322     		movs	r2, #3
  69 0032 1A70     		strb	r2, [r3]
  70 0034 F4E7     		b	.L4
  71              	.L8:
  41:../system/src/aprs/digi.c **** 		}
  72              		.loc 1 41 0
  73 0036 1346     		mov	r3, r2
  74 0038 0422     		movs	r2, #4
  75 003a 1A70     		strb	r2, [r3]
  76 003c F0E7     		b	.L4
  77              	.L7:
  49:../system/src/aprs/digi.c **** 		}
  78              		.loc 1 49 0
  79 003e 044B     		ldr	r3, .L9+8
  80 0040 0222     		movs	r2, #2
  81 0042 1A70     		strb	r2, [r3]
  82 0044 ECE7     		b	.L4
  83              	.L10:
  84 0046 00BF     		.align	2
  85              	.L9:
  86 0048 00000000 		.word	digi_viscous_counter_sec
  87 004c 00000000 		.word	digi_msg_len
  88 0050 00000000 		.word	digi_mode
  89 0054 00000000 		.word	digi_viscous_delay_sec
  90              		.cfi_endproc
  91              	.LFE71:
  93              		.section	.text.digi_process,"ax",%progbits
  94              		.align	1
  95              		.global	digi_process
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
  99              		.fpu softvfp
 101              	digi_process:
 102              	.LFB72:
  82:../system/src/aprs/digi.c **** 
  83:../system/src/aprs/digi.c **** uint8_t digi_process(struct AX25Msg *msg, const config_data_basic_t* const config, const config_dat
 103              		.loc 1 83 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              	.LVL1:
  84:../system/src/aprs/digi.c **** 	uint8_t retval = DIGI_PACKET_DIDNT_DIGIPEATED;
  85:../system/src/aprs/digi.c **** 
  86:../system/src/aprs/digi.c **** #ifdef _DIGI
  87:../system/src/aprs/digi.c **** 
  88:../system/src/aprs/digi.c **** 	// check if the received message is not too long for the transmit buffers
  89:../system/src/aprs/digi.c **** 	if (msg->len >= (CONFIG_AX25_FRAME_BUF_LEN - sizeof(AX25Call) * 7) ) {
 108              		.loc 1 89 0
 109 0000 B0F85030 		ldrh	r3, [r0, #80]
 110 0004 B3F5E77F 		cmp	r3, #462
 111 0008 00F23981 		bhi	.L19
  83:../system/src/aprs/digi.c **** 	uint8_t retval = DIGI_PACKET_DIDNT_DIGIPEATED;
 112              		.loc 1 83 0
 113 000c 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 114              		.cfi_def_cfa_offset 24
 115              		.cfi_offset 4, -24
 116              		.cfi_offset 5, -20
 117              		.cfi_offset 6, -16
 118              		.cfi_offset 7, -12
 119              		.cfi_offset 8, -8
 120              		.cfi_offset 14, -4
 121 0010 82B0     		sub	sp, sp, #8
 122              		.cfi_def_cfa_offset 32
 123 0012 0446     		mov	r4, r0
  90:../system/src/aprs/digi.c **** 		return DIGI_PACKET_TOO_LONG;
  91:../system/src/aprs/digi.c **** 	}
  92:../system/src/aprs/digi.c **** 
  93:../system/src/aprs/digi.c **** 	if ((msg->src.ssid < 7 || msg->src.ssid > 9) && (digi_mode == DIGI_ON_SSID_WIDE1 || digi_mode == D
 124              		.loc 1 93 0
 125 0014 8379     		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 126 0016 073B     		subs	r3, r3, #7
 127 0018 DBB2     		uxtb	r3, r3
 128 001a 022B     		cmp	r3, #2
 129 001c 07D9     		bls	.L13
 130              		.loc 1 93 0 is_stmt 0 discriminator 1
 131 001e 9D4B     		ldr	r3, .L40
 132 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 133 0022 022B     		cmp	r3, #2
 134 0024 00F02D81 		beq	.L20
 135              		.loc 1 93 0 discriminator 2
 136 0028 042B     		cmp	r3, #4
 137 002a 00F02C81 		beq	.L21
 138              	.L13:
  94:../system/src/aprs/digi.c **** 		return DIGI_PACKET_DIDNT_DIGIPEATED;
  95:../system/src/aprs/digi.c **** 	}
  96:../system/src/aprs/digi.c **** 
  97:../system/src/aprs/digi.c **** 	if (after_tx_lock == 0) {
 139              		.loc 1 97 0 is_stmt 1
 140 002e 9A4B     		ldr	r3, .L40+4
 141 0030 93F90030 		ldrsb	r3, [r3]
 142 0034 002B     		cmp	r3, #0
 143 0036 40F01C81 		bne	.L14
  98:../system/src/aprs/digi.c **** 		// if the packet has any path and there is no packed waiting in viscous delay
  99:../system/src/aprs/digi.c **** 		if(msg->rpt_cnt >= 1 && digi_msg_len == 0) {
 144              		.loc 1 99 0
 145 003a 94F84600 		ldrb	r0, [r4, #70]	@ zero_extendqisi2
 146              	.LVL2:
 147 003e 0028     		cmp	r0, #0
 148 0040 00F01A81 		beq	.L12
 149              		.loc 1 99 0 is_stmt 0 discriminator 1
 150 0044 954B     		ldr	r3, .L40+8
 151 0046 1B88     		ldrh	r3, [r3]
 152 0048 0BB1     		cbz	r3, .L33
  84:../system/src/aprs/digi.c **** 
 153              		.loc 1 84 0 is_stmt 1
 154 004a 0020     		movs	r0, #0
 155 004c 14E1     		b	.L12
 156              	.L33:
 157 004e 0D46     		mov	r5, r1
 100:../system/src/aprs/digi.c **** 
 101:../system/src/aprs/digi.c **** 			// initialize global variables used to store digipeated packet
 102:../system/src/aprs/digi.c **** 			memset(digi_path, 0x00, sizeof(AX25Call) * 7);
 158              		.loc 1 102 0
 159 0050 3122     		movs	r2, #49
 160              	.LVL3:
 161 0052 0021     		movs	r1, #0
 162              	.LVL4:
 163 0054 9248     		ldr	r0, .L40+12
 164 0056 FFF7FEFF 		bl	memset
 165              	.LVL5:
 103:../system/src/aprs/digi.c **** 			memset(digi_msg, 0x00, CONFIG_AX25_FRAME_BUF_LEN);
 166              		.loc 1 103 0
 167 005a 4FF40072 		mov	r2, #512
 168 005e 0021     		movs	r1, #0
 169 0060 9048     		ldr	r0, .L40+16
 170 0062 FFF7FEFF 		bl	memset
 171              	.LVL6:
 104:../system/src/aprs/digi.c **** 
 105:../system/src/aprs/digi.c **** //			if (msg->rpt_cnt == 1 && strcmp("WIDE2", msg->rpt_lst[0].call) == 0 && (msg->rpt_lst[0].ssid =
 106:../system/src/aprs/digi.c **** //				/* Powtarzanie ścieżki WIDE2-1 i WIDE2-2 */
 107:../system/src/aprs/digi.c **** //				strcpy(digi_path[0].call, msg->dst.call);	// znak docelowy
 108:../system/src/aprs/digi.c **** //				digi_path[0].ssid = msg->dst.ssid;
 109:../system/src/aprs/digi.c **** //				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 110:../system/src/aprs/digi.c **** //				digi_path[1].ssid = msg->src.ssid;
 111:../system/src/aprs/digi.c **** //				sprintf(digi_path[2].call, "%s", "SR8WXO");	// zamiana WIDE2-2 albo WIDE2-1 na znak digi
 112:../system/src/aprs/digi.c **** //				digi_path[2].ssid = 0x40;
 113:../system/src/aprs/digi.c **** //				sprintf(digi_path[3].call, "%s", "WIDE2");	// dodawanie WIDE2*
 114:../system/src/aprs/digi.c **** //				digi_path[3].ssid = 0x40;			/* 0x40 oznacza jedynkę na 6 bicie (przy numeracji od zera). Po 
 115:../system/src/aprs/digi.c **** //													   otrzymuje się 0x80 czyli jedynkę na H-bicie */
 116:../system/src/aprs/digi.c **** //				digi_q = 1;
 117:../system/src/aprs/digi.c **** //				call_len = 4;	// długość ścieżki
 118:../system/src/aprs/digi.c **** 
 119:../system/src/aprs/digi.c **** //			}
 120:../system/src/aprs/digi.c **** 			if (msg->rpt_cnt == 1 && strcmp("WIDE1", msg->rpt_lst[0].call) == 0 && msg->rpt_lst[0].ssid == 1
 172              		.loc 1 120 0
 173 0066 94F84630 		ldrb	r3, [r4, #70]	@ zero_extendqisi2
 174 006a 012B     		cmp	r3, #1
 175 006c 12D0     		beq	.L34
 176              	.L15:
 121:../system/src/aprs/digi.c **** 				/* Powtarzanie ścieżki WIDE1-1 */
 122:../system/src/aprs/digi.c **** 				strcpy(digi_path[0].call, msg->dst.call);	// znak docelowy
 123:../system/src/aprs/digi.c **** 				digi_path[0].ssid = msg->dst.ssid;
 124:../system/src/aprs/digi.c **** 				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 125:../system/src/aprs/digi.c **** 				digi_path[1].ssid = msg->src.ssid;
 126:../system/src/aprs/digi.c **** 				sprintf(digi_path[2].call, "%s", config->callsign);	// zamiana WIDE2-2 albo WIDE2-1 na znak dig
 127:../system/src/aprs/digi.c **** 				digi_path[2].ssid = (config->ssid | 0x40);
 128:../system/src/aprs/digi.c **** 				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE2*
 129:../system/src/aprs/digi.c **** 				digi_path[3].ssid = 0x40;			/* 0x40 oznacza jedynkę na 6 bicie (przy numeracji od zera). Po pr
 130:../system/src/aprs/digi.c **** 													   otrzymuje się 0x80 czyli jedynkę na H-bicie */
 131:../system/src/aprs/digi.c **** 				retval = DIGI_PACKET_DIGIPEATED;
 132:../system/src/aprs/digi.c **** 				digi_call_len = 4;	// długość ścieżki
 133:../system/src/aprs/digi.c **** 
 134:../system/src/aprs/digi.c **** 			}
 135:../system/src/aprs/digi.c **** 			else if(msg->rpt_cnt > 1 && strcmp("WIDE1", msg->rpt_lst[0].call) == 0 && strcmp("WIDE2", msg->r
 177              		.loc 1 135 0
 178 006e 94F84630 		ldrb	r3, [r4, #70]	@ zero_extendqisi2
 179 0072 012B     		cmp	r3, #1
 180 0074 4ED8     		bhi	.L35
 181              	.L17:
 136:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-1     */
 137:../system/src/aprs/digi.c **** 				strcpy(digi_path[0].call, msg->dst.call);	// znak docelowy
 138:../system/src/aprs/digi.c **** 				digi_path[0].ssid = msg->dst.ssid;
 139:../system/src/aprs/digi.c **** 				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 140:../system/src/aprs/digi.c **** 				digi_path[1].ssid = msg->src.ssid;
 141:../system/src/aprs/digi.c **** 				sprintf(digi_path[2].call, "%s", config->callsign);	// zamiana WIDE1-1 na własny znak digi
 142:../system/src/aprs/digi.c **** 				digi_path[2].ssid =  (config->ssid | 0x40);
 143:../system/src/aprs/digi.c **** 				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE1* na końcu
 144:../system/src/aprs/digi.c **** 				digi_path[3].ssid = 0x40;
 145:../system/src/aprs/digi.c **** 				sprintf(digi_path[4].call, "%s", msg->rpt_lst[1].call);	// przepisywanie WIDE2-1
 146:../system/src/aprs/digi.c **** 				digi_path[4].ssid = msg->rpt_lst[1].ssid;
 147:../system/src/aprs/digi.c **** 				retval = DIGI_PACKET_DIGIPEATED;
 148:../system/src/aprs/digi.c **** 				digi_call_len = 5;
 149:../system/src/aprs/digi.c **** 			}
 150:../system/src/aprs/digi.c **** 			else if(msg->rpt_cnt > 1 && strcmp("WIDE1", msg->rpt_lst[0].call) == 0 && strcmp("WIDE2", msg->r
 182              		.loc 1 150 0
 183 0076 94F84630 		ldrb	r3, [r4, #70]	@ zero_extendqisi2
 184 007a 012B     		cmp	r3, #1
 185 007c 40F20581 		bls	.L23
 186              		.loc 1 150 0 is_stmt 0 discriminator 1
 187 0080 04F10E01 		add	r1, r4, #14
 188 0084 8848     		ldr	r0, .L40+20
 189 0086 FFF7FEFF 		bl	strcmp
 190              	.LVL7:
 191 008a 0028     		cmp	r0, #0
 192 008c 00F08580 		beq	.L36
  84:../system/src/aprs/digi.c **** 
 193              		.loc 1 84 0 is_stmt 1
 194 0090 0020     		movs	r0, #0
 195 0092 F1E0     		b	.L12
 196              	.L34:
 120:../system/src/aprs/digi.c **** 				/* Powtarzanie ścieżki WIDE1-1 */
 197              		.loc 1 120 0 discriminator 1
 198 0094 04F10E01 		add	r1, r4, #14
 199 0098 8348     		ldr	r0, .L40+20
 200 009a FFF7FEFF 		bl	strcmp
 201              	.LVL8:
 202 009e 0028     		cmp	r0, #0
 203 00a0 E5D1     		bne	.L15
 120:../system/src/aprs/digi.c **** 				/* Powtarzanie ścieżki WIDE1-1 */
 204              		.loc 1 120 0 is_stmt 0 discriminator 2
 205 00a2 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 206 00a4 012B     		cmp	r3, #1
 207 00a6 E2D1     		bne	.L15
 208              	.LBB2:
 122:../system/src/aprs/digi.c **** 				digi_path[0].ssid = msg->dst.ssid;
 209              		.loc 1 122 0 is_stmt 1
 210 00a8 7D4E     		ldr	r6, .L40+12
 211 00aa E11D     		adds	r1, r4, #7
 212 00ac 3046     		mov	r0, r6
 213 00ae FFF7FEFF 		bl	strcpy
 214              	.LVL9:
 123:../system/src/aprs/digi.c **** 				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 215              		.loc 1 123 0
 216 00b2 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 217 00b4 B371     		strb	r3, [r6, #6]
 124:../system/src/aprs/digi.c **** 				digi_path[1].ssid = msg->src.ssid;
 218              		.loc 1 124 0
 219 00b6 2146     		mov	r1, r4
 220 00b8 F01D     		adds	r0, r6, #7
 221 00ba FFF7FEFF 		bl	strcpy
 222              	.LVL10:
 125:../system/src/aprs/digi.c **** 				sprintf(digi_path[2].call, "%s", config->callsign);	// zamiana WIDE2-2 albo WIDE2-1 na znak dig
 223              		.loc 1 125 0
 224 00be A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 225 00c0 7373     		strb	r3, [r6, #13]
 126:../system/src/aprs/digi.c **** 				digi_path[2].ssid = (config->ssid | 0x40);
 226              		.loc 1 126 0
 227 00c2 7A4F     		ldr	r7, .L40+24
 228 00c4 2A46     		mov	r2, r5
 229 00c6 3946     		mov	r1, r7
 230 00c8 06F10E00 		add	r0, r6, #14
 231 00cc FFF7FEFF 		bl	sprintf
 232              	.LVL11:
 127:../system/src/aprs/digi.c **** 				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE2*
 233              		.loc 1 127 0
 234 00d0 EB79     		ldrb	r3, [r5, #7]	@ zero_extendqisi2
 235 00d2 43F04003 		orr	r3, r3, #64
 236 00d6 3375     		strb	r3, [r6, #20]
 128:../system/src/aprs/digi.c **** 				digi_path[3].ssid = 0x40;			/* 0x40 oznacza jedynkę na 6 bicie (przy numeracji od zera). Po pr
 237              		.loc 1 128 0
 238 00d8 734A     		ldr	r2, .L40+20
 239 00da 3946     		mov	r1, r7
 240 00dc 06F11500 		add	r0, r6, #21
 241 00e0 FFF7FEFF 		bl	sprintf
 242              	.LVL12:
 129:../system/src/aprs/digi.c **** 													   otrzymuje się 0x80 czyli jedynkę na H-bicie */
 243              		.loc 1 129 0
 244 00e4 4023     		movs	r3, #64
 245 00e6 F376     		strb	r3, [r6, #27]
 246              	.LVL13:
 132:../system/src/aprs/digi.c **** 
 247              		.loc 1 132 0
 248 00e8 714B     		ldr	r3, .L40+28
 249 00ea 0422     		movs	r2, #4
 250 00ec 1A70     		strb	r2, [r3]
 251              	.L16:
 252              	.LBE2:
 253              	.LBB3:
 151:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-2     */
 152:../system/src/aprs/digi.c **** 				strcpy(digi_path[0].call, msg->dst.call);	// znak docelowy
 153:../system/src/aprs/digi.c **** 				digi_path[0].ssid = msg->dst.ssid;
 154:../system/src/aprs/digi.c **** 				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 155:../system/src/aprs/digi.c **** 				digi_path[1].ssid = msg->src.ssid;
 156:../system/src/aprs/digi.c **** 				sprintf(digi_path[2].call, "%s", config->callsign);	// zamiana WIDE1-1 na własny znak digi
 157:../system/src/aprs/digi.c **** 				digi_path[2].ssid = (config->ssid | 0x40);
 158:../system/src/aprs/digi.c **** 				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE1* na końcu
 159:../system/src/aprs/digi.c **** 				digi_path[3].ssid = 0x40;
 160:../system/src/aprs/digi.c **** 				sprintf(digi_path[4].call, "%s", "WIDE2");	// skracanie dalszej czesci do WIDE2-1
 161:../system/src/aprs/digi.c **** 				digi_path[4].ssid = 1;
 162:../system/src/aprs/digi.c **** 				retval = DIGI_PACKET_DIGIPEATED;
 163:../system/src/aprs/digi.c **** 				digi_call_len = 5;
 164:../system/src/aprs/digi.c **** 			}
 165:../system/src/aprs/digi.c **** //			else if (msg->rpt_cnt >= 2 && strcmp("WIDE2", msg->rpt_lst[1].call) == 0 && msg->rpt_lst[1].ss
 166:../system/src/aprs/digi.c **** //				/* Powtarzanie aliasu WIDE2-1 w sciezce WIDE2*,WIDE2-1 */
 167:../system/src/aprs/digi.c **** //				strcpy(digi_path[0].call, msg->dst.call);	// znak docelowy
 168:../system/src/aprs/digi.c **** //				digi_path[0].ssid = msg->dst.ssid;
 169:../system/src/aprs/digi.c **** //				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 170:../system/src/aprs/digi.c **** //				digi_path[1].ssid = msg->src.ssid;
 171:../system/src/aprs/digi.c **** //				sprintf(digi_path[2].call, "%s", msg->rpt_lst[0].call);	// dołączanie znaku poprzedniego di
 172:../system/src/aprs/digi.c **** //				digi_path[2].ssid = (msg->rpt_lst[0].ssid | 0x40);
 173:../system/src/aprs/digi.c **** //				sprintf(digi_path[3].call, "%s", "SR8WXO");	// zamiana WIDE2-1 na własny znak digi
 174:../system/src/aprs/digi.c **** //				digi_path[3].ssid = 0x40;
 175:../system/src/aprs/digi.c **** //				sprintf(digi_path[4].call, "%s", "WIDE2");	// dodawanie WIDE2* na końcu
 176:../system/src/aprs/digi.c **** //				digi_path[4].ssid = 0x40;
 177:../system/src/aprs/digi.c **** //				digi_q = 1;
 178:../system/src/aprs/digi.c **** //				call_len = 5;
 179:../system/src/aprs/digi.c **** //			}
 180:../system/src/aprs/digi.c **** //			else if(msg->rpt_cnt >= 2 && strcmp("WIDE2", msg->rpt_lst[2].call) == 0 && (msg->rpt_lst[2].ss
 181:../system/src/aprs/digi.c **** //				/* Powtarzanie aliasu WIDE2-1 oraz WIDE 2-2 w sciezce typu WIDE1*,WIDE2-n     */
 182:../system/src/aprs/digi.c **** //				strcpy(digi_path[0].call, msg->dst.call);	// znak docelowy
 183:../system/src/aprs/digi.c **** //				digi_path[0].ssid = msg->dst.ssid;
 184:../system/src/aprs/digi.c **** //				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 185:../system/src/aprs/digi.c **** //				digi_path[1].ssid = msg->src.ssid;
 186:../system/src/aprs/digi.c **** //				sprintf(digi_path[2].call, "%s", msg->rpt_lst[0].call);	// dołączanie znaku poprzedniego di
 187:../system/src/aprs/digi.c **** //				digi_path[2].ssid = (msg->rpt_lst[0].ssid | 0x40);
 188:../system/src/aprs/digi.c **** // 				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE1 na końcu
 189:../system/src/aprs/digi.c **** //				digi_path[3].ssid = 0x40;
 190:../system/src/aprs/digi.c **** //				sprintf(digi_path[4].call, "%s", "SR8WXO");		// zamiana WIDE2-1 albo WIDE2-2 na własny znak 
 191:../system/src/aprs/digi.c **** //				digi_path[4].ssid = 0x40;
 192:../system/src/aprs/digi.c **** //				sprintf(digi_path[5].call, "%s", "WIDE2");	// dodawanie WIDE2* na końcu
 193:../system/src/aprs/digi.c **** //				digi_path[5].ssid = 0x40;
 194:../system/src/aprs/digi.c **** //				digi_q = 1;
 195:../system/src/aprs/digi.c **** //				call_len = 6;
 196:../system/src/aprs/digi.c **** //			}
 197:../system/src/aprs/digi.c **** //			else if(msg->rpt_cnt >= 4 && strcmp("WIDE2", msg->rpt_lst[3].call) == 0 && (msg->rpt_lst[3].ss
 198:../system/src/aprs/digi.c **** //				/* Powtarzanie aliasu WIDE2-1 w sciezce typu WIDE1*,WIDE2*,WIDE2-1     */
 199:../system/src/aprs/digi.c **** //				strcpy(digi_path[0].call, msg->dst.call);	// znak docelowy
 200:../system/src/aprs/digi.c **** //				digi_path[0].ssid = msg->dst.ssid;
 201:../system/src/aprs/digi.c **** //				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 202:../system/src/aprs/digi.c **** //				digi_path[1].ssid = msg->src.ssid;
 203:../system/src/aprs/digi.c **** //				sprintf(digi_path[2].call, "%s", msg->rpt_lst[0].call);	// dołączanie znaku poprzedniego di
 204:../system/src/aprs/digi.c **** //				digi_path[2].ssid = (msg->rpt_lst[0].ssid | 0x40);
 205:../system/src/aprs/digi.c **** //				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE1
 206:../system/src/aprs/digi.c **** //				digi_path[3].ssid = 0x40;
 207:../system/src/aprs/digi.c **** //				sprintf(digi_path[4].call, "%s", msg->rpt_lst[2].call);	// dołączanie znaku poprzedniego di
 208:../system/src/aprs/digi.c **** //				digi_path[4].ssid = (msg->rpt_lst[2].ssid | 0x40);
 209:../system/src/aprs/digi.c **** //				sprintf(digi_path[5].call, "%s", "SR8WXO");		// zamiana WIDE2-1 na własny znak digi
 210:../system/src/aprs/digi.c **** //				digi_path[5].ssid = 0x40;
 211:../system/src/aprs/digi.c **** //				sprintf(digi_path[6].call, "%s", "WIDE2");	// dodawanie WIDE2* na końcu
 212:../system/src/aprs/digi.c **** //				digi_path[6].ssid = 0x40;
 213:../system/src/aprs/digi.c **** //				digi_q = 1;
 214:../system/src/aprs/digi.c **** //				call_len = 7;
 215:../system/src/aprs/digi.c **** //			}
 216:../system/src/aprs/digi.c **** 
 217:../system/src/aprs/digi.c **** 			if (retval == DIGI_PACKET_DIGIPEATED) {
 218:../system/src/aprs/digi.c **** 
 219:../system/src/aprs/digi.c **** 				// copying the content
 220:../system/src/aprs/digi.c **** 				digi_msg_len = msg->len+1;
 254              		.loc 1 220 0
 255 00ee B4F85010 		ldrh	r1, [r4, #80]
 256 00f2 0131     		adds	r1, r1, #1
 257 00f4 694B     		ldr	r3, .L40+8
 258 00f6 1980     		strh	r1, [r3]	@ movhi
 221:../system/src/aprs/digi.c **** 				snprintf(digi_msg, msg->len+1, "%s", msg->info);
 259              		.loc 1 221 0
 260 00f8 E36C     		ldr	r3, [r4, #76]
 261 00fa 6C4A     		ldr	r2, .L40+24
 262 00fc 6948     		ldr	r0, .L40+16
 263 00fe FFF7FEFF 		bl	snprintf
 264              	.LVL14:
 222:../system/src/aprs/digi.c **** 
 223:../system/src/aprs/digi.c **** 				// if Viscous mode is not enabled proceed to transmission immediately
 224:../system/src/aprs/digi.c **** 				if (digi_mode == DIGI_ON_SSID_WIDE1 || digi_mode == DIGI_ON_ALL_WIDE1) {
 265              		.loc 1 224 0
 266 0102 644B     		ldr	r3, .L40
 267 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 268 0106 013B     		subs	r3, r3, #1
 269 0108 DBB2     		uxtb	r3, r3
 270 010a 012B     		cmp	r3, #1
 271 010c 40F28380 		bls	.L37
 272 0110 0120     		movs	r0, #1
 273 0112 B1E0     		b	.L12
 274              	.LVL15:
 275              	.L35:
 276              	.LBE3:
 135:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-1     */
 277              		.loc 1 135 0 discriminator 1
 278 0114 04F10E01 		add	r1, r4, #14
 279 0118 6348     		ldr	r0, .L40+20
 280 011a FFF7FEFF 		bl	strcmp
 281              	.LVL16:
 282 011e 0028     		cmp	r0, #0
 283 0120 A9D1     		bne	.L17
 135:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-1     */
 284              		.loc 1 135 0 is_stmt 0 discriminator 2
 285 0122 04F11506 		add	r6, r4, #21
 286 0126 3146     		mov	r1, r6
 287 0128 6248     		ldr	r0, .L40+32
 288 012a FFF7FEFF 		bl	strcmp
 289              	.LVL17:
 290 012e 0028     		cmp	r0, #0
 291 0130 A1D1     		bne	.L17
 135:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-1     */
 292              		.loc 1 135 0 discriminator 3
 293 0132 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 294 0134 012B     		cmp	r3, #1
 295 0136 9ED1     		bne	.L17
 135:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-1     */
 296              		.loc 1 135 0 discriminator 4
 297 0138 E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 298 013a 012B     		cmp	r3, #1
 299 013c 9BD1     		bne	.L17
 300              	.LBB4:
 137:../system/src/aprs/digi.c **** 				digi_path[0].ssid = msg->dst.ssid;
 301              		.loc 1 137 0 is_stmt 1
 302 013e 584F     		ldr	r7, .L40+12
 303 0140 E11D     		adds	r1, r4, #7
 304 0142 3846     		mov	r0, r7
 305 0144 FFF7FEFF 		bl	strcpy
 306              	.LVL18:
 138:../system/src/aprs/digi.c **** 				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 307              		.loc 1 138 0
 308 0148 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 309 014a BB71     		strb	r3, [r7, #6]
 139:../system/src/aprs/digi.c **** 				digi_path[1].ssid = msg->src.ssid;
 310              		.loc 1 139 0
 311 014c 2146     		mov	r1, r4
 312 014e F81D     		adds	r0, r7, #7
 313 0150 FFF7FEFF 		bl	strcpy
 314              	.LVL19:
 140:../system/src/aprs/digi.c **** 				sprintf(digi_path[2].call, "%s", config->callsign);	// zamiana WIDE1-1 na własny znak digi
 315              		.loc 1 140 0
 316 0154 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 317 0156 7B73     		strb	r3, [r7, #13]
 141:../system/src/aprs/digi.c **** 				digi_path[2].ssid =  (config->ssid | 0x40);
 318              		.loc 1 141 0
 319 0158 DFF85081 		ldr	r8, .L40+24
 320 015c 2A46     		mov	r2, r5
 321 015e 4146     		mov	r1, r8
 322 0160 07F10E00 		add	r0, r7, #14
 323 0164 FFF7FEFF 		bl	sprintf
 324              	.LVL20:
 142:../system/src/aprs/digi.c **** 				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE1* na końcu
 325              		.loc 1 142 0
 326 0168 EB79     		ldrb	r3, [r5, #7]	@ zero_extendqisi2
 327 016a 43F04003 		orr	r3, r3, #64
 328 016e 3B75     		strb	r3, [r7, #20]
 143:../system/src/aprs/digi.c **** 				digi_path[3].ssid = 0x40;
 329              		.loc 1 143 0
 330 0170 4D4A     		ldr	r2, .L40+20
 331 0172 4146     		mov	r1, r8
 332 0174 07F11500 		add	r0, r7, #21
 333 0178 FFF7FEFF 		bl	sprintf
 334              	.LVL21:
 144:../system/src/aprs/digi.c **** 				sprintf(digi_path[4].call, "%s", msg->rpt_lst[1].call);	// przepisywanie WIDE2-1
 335              		.loc 1 144 0
 336 017c 4023     		movs	r3, #64
 337 017e FB76     		strb	r3, [r7, #27]
 145:../system/src/aprs/digi.c **** 				digi_path[4].ssid = msg->rpt_lst[1].ssid;
 338              		.loc 1 145 0
 339 0180 3246     		mov	r2, r6
 340 0182 4146     		mov	r1, r8
 341 0184 07F11C00 		add	r0, r7, #28
 342 0188 FFF7FEFF 		bl	sprintf
 343              	.LVL22:
 146:../system/src/aprs/digi.c **** 				retval = DIGI_PACKET_DIGIPEATED;
 344              		.loc 1 146 0
 345 018c E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 346 018e 87F82230 		strb	r3, [r7, #34]
 347              	.LVL23:
 148:../system/src/aprs/digi.c **** 			}
 348              		.loc 1 148 0
 349 0192 474B     		ldr	r3, .L40+28
 350 0194 0522     		movs	r2, #5
 351 0196 1A70     		strb	r2, [r3]
 352 0198 A9E7     		b	.L16
 353              	.LVL24:
 354              	.L36:
 355              	.LBE4:
 150:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-2     */
 356              		.loc 1 150 0 discriminator 2
 357 019a 04F11501 		add	r1, r4, #21
 358 019e 4548     		ldr	r0, .L40+32
 359 01a0 FFF7FEFF 		bl	strcmp
 360              	.LVL25:
 361 01a4 0028     		cmp	r0, #0
 362 01a6 72D1     		bne	.L25
 150:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-2     */
 363              		.loc 1 150 0 is_stmt 0 discriminator 3
 364 01a8 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 365 01aa 012B     		cmp	r3, #1
 366 01ac 01D0     		beq	.L38
  84:../system/src/aprs/digi.c **** 
 367              		.loc 1 84 0 is_stmt 1
 368 01ae 0020     		movs	r0, #0
 369 01b0 62E0     		b	.L12
 370              	.L38:
 150:../system/src/aprs/digi.c **** 				/* Powtarzanie aliasu WIDE1-1 w sciezce typu WIDE1-1,WIDE2-2     */
 371              		.loc 1 150 0 discriminator 4
 372 01b2 E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 373 01b4 022B     		cmp	r3, #2
 374 01b6 01D0     		beq	.L39
  84:../system/src/aprs/digi.c **** 
 375              		.loc 1 84 0
 376 01b8 0020     		movs	r0, #0
 377 01ba 5DE0     		b	.L12
 378              	.L39:
 379              	.LBB5:
 152:../system/src/aprs/digi.c **** 				digi_path[0].ssid = msg->dst.ssid;
 380              		.loc 1 152 0
 381 01bc 384E     		ldr	r6, .L40+12
 382 01be E11D     		adds	r1, r4, #7
 383 01c0 3046     		mov	r0, r6
 384 01c2 FFF7FEFF 		bl	strcpy
 385              	.LVL26:
 153:../system/src/aprs/digi.c **** 				strcpy(digi_path[1].call, msg->src.call);	// znak zrodlowy
 386              		.loc 1 153 0
 387 01c6 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 388 01c8 B371     		strb	r3, [r6, #6]
 154:../system/src/aprs/digi.c **** 				digi_path[1].ssid = msg->src.ssid;
 389              		.loc 1 154 0
 390 01ca 2146     		mov	r1, r4
 391 01cc F01D     		adds	r0, r6, #7
 392 01ce FFF7FEFF 		bl	strcpy
 393              	.LVL27:
 155:../system/src/aprs/digi.c **** 				sprintf(digi_path[2].call, "%s", config->callsign);	// zamiana WIDE1-1 na własny znak digi
 394              		.loc 1 155 0
 395 01d2 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 396 01d4 7373     		strb	r3, [r6, #13]
 156:../system/src/aprs/digi.c **** 				digi_path[2].ssid = (config->ssid | 0x40);
 397              		.loc 1 156 0
 398 01d6 354F     		ldr	r7, .L40+24
 399 01d8 2A46     		mov	r2, r5
 400 01da 3946     		mov	r1, r7
 401 01dc 06F10E00 		add	r0, r6, #14
 402 01e0 FFF7FEFF 		bl	sprintf
 403              	.LVL28:
 157:../system/src/aprs/digi.c **** 				sprintf(digi_path[3].call, "%s", "WIDE1");	// dodawanie WIDE1* na końcu
 404              		.loc 1 157 0
 405 01e4 EB79     		ldrb	r3, [r5, #7]	@ zero_extendqisi2
 406 01e6 43F04003 		orr	r3, r3, #64
 407 01ea 3375     		strb	r3, [r6, #20]
 158:../system/src/aprs/digi.c **** 				digi_path[3].ssid = 0x40;
 408              		.loc 1 158 0
 409 01ec 2E4A     		ldr	r2, .L40+20
 410 01ee 3946     		mov	r1, r7
 411 01f0 06F11500 		add	r0, r6, #21
 412 01f4 FFF7FEFF 		bl	sprintf
 413              	.LVL29:
 159:../system/src/aprs/digi.c **** 				sprintf(digi_path[4].call, "%s", "WIDE2");	// skracanie dalszej czesci do WIDE2-1
 414              		.loc 1 159 0
 415 01f8 4023     		movs	r3, #64
 416 01fa F376     		strb	r3, [r6, #27]
 160:../system/src/aprs/digi.c **** 				digi_path[4].ssid = 1;
 417              		.loc 1 160 0
 418 01fc 2D4A     		ldr	r2, .L40+32
 419 01fe 3946     		mov	r1, r7
 420 0200 06F11C00 		add	r0, r6, #28
 421 0204 FFF7FEFF 		bl	sprintf
 422              	.LVL30:
 161:../system/src/aprs/digi.c **** 				retval = DIGI_PACKET_DIGIPEATED;
 423              		.loc 1 161 0
 424 0208 0123     		movs	r3, #1
 425 020a 86F82230 		strb	r3, [r6, #34]
 426              	.LVL31:
 163:../system/src/aprs/digi.c **** 			}
 427              		.loc 1 163 0
 428 020e 284B     		ldr	r3, .L40+28
 429 0210 0522     		movs	r2, #5
 430 0212 1A70     		strb	r2, [r3]
 431 0214 6BE7     		b	.L16
 432              	.L37:
 433              	.LBE5:
 434              	.LBB6:
 225:../system/src/aprs/digi.c **** 					digi10m++;
 435              		.loc 1 225 0
 436 0216 284A     		ldr	r2, .L40+36
 437 0218 1388     		ldrh	r3, [r2]
 438 021a 0133     		adds	r3, r3, #1
 439 021c 1380     		strh	r3, [r2]	@ movhi
 226:../system/src/aprs/digi.c **** 
 227:../system/src/aprs/digi.c **** 					// delaying retransmission.. well this will block I/O for a while
 228:../system/src/aprs/digi.c **** 					// and it could be refactor to ommit that but for now it needs to stay
 229:../system/src/aprs/digi.c **** 					// as it is.
 230:../system/src/aprs/digi.c **** 					delay_from_preset();
 440              		.loc 1 230 0
 441 021e FFF7FEFF 		bl	delay_from_preset
 442              	.LVL32:
 443              	.L18:
 231:../system/src/aprs/digi.c **** 
 232:../system/src/aprs/digi.c **** 					while(main_ax25.dcd == true);
 444              		.loc 1 232 0 discriminator 1
 445 0222 264B     		ldr	r3, .L40+40
 446 0224 93F81432 		ldrb	r3, [r3, #532]	@ zero_extendqisi2
 447 0228 002B     		cmp	r3, #0
 448 022a FAD1     		bne	.L18
 233:../system/src/aprs/digi.c **** 					ax25_sendVia(&main_ax25, digi_path, digi_call_len, digi_msg, digi_msg_len-1);
 449              		.loc 1 233 0
 450 022c 1D4E     		ldr	r6, .L40+16
 451 022e 204B     		ldr	r3, .L40+28
 452 0230 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 453 0232 1B4F     		ldr	r7, .L40+12
 454 0234 194D     		ldr	r5, .L40+8
 455              	.LVL33:
 456 0236 2B88     		ldrh	r3, [r5]
 457 0238 013B     		subs	r3, r3, #1
 458 023a 9BB2     		uxth	r3, r3
 459 023c 0093     		str	r3, [sp]
 460 023e 3346     		mov	r3, r6
 461 0240 3946     		mov	r1, r7
 462 0242 1E48     		ldr	r0, .L40+40
 463 0244 FFF7FEFF 		bl	ax25_sendVia
 464              	.LVL34:
 234:../system/src/aprs/digi.c **** 					after_tx_lock = 1;
 465              		.loc 1 234 0
 466 0248 0124     		movs	r4, #1
 467              	.LVL35:
 468 024a 134B     		ldr	r3, .L40+4
 469 024c 1C70     		strb	r4, [r3]
 235:../system/src/aprs/digi.c **** 					afsk_txStart(&main_afsk);
 470              		.loc 1 235 0
 471 024e 1C48     		ldr	r0, .L40+44
 472 0250 FFF7FEFF 		bl	afsk_txStart
 473              	.LVL36:
 236:../system/src/aprs/digi.c **** 
 237:../system/src/aprs/digi.c **** 					// clear variables when there are not needed
 238:../system/src/aprs/digi.c **** 					memset(digi_path, 0x00, sizeof(AX25Call) * 7);
 474              		.loc 1 238 0
 475 0254 3122     		movs	r2, #49
 476 0256 0021     		movs	r1, #0
 477 0258 3846     		mov	r0, r7
 478 025a FFF7FEFF 		bl	memset
 479              	.LVL37:
 239:../system/src/aprs/digi.c **** 					memset(digi_msg, 0x00, CONFIG_AX25_FRAME_BUF_LEN);
 480              		.loc 1 239 0
 481 025e 4FF40072 		mov	r2, #512
 482 0262 0021     		movs	r1, #0
 483 0264 3046     		mov	r0, r6
 484 0266 FFF7FEFF 		bl	memset
 485              	.LVL38:
 240:../system/src/aprs/digi.c **** 					digi_msg_len = 0;
 486              		.loc 1 240 0
 487 026a 0023     		movs	r3, #0
 488 026c 2B80     		strh	r3, [r5]	@ movhi
 241:../system/src/aprs/digi.c **** 
 242:../system/src/aprs/digi.c **** 					return retval;
 489              		.loc 1 242 0
 490 026e 2046     		mov	r0, r4
 491 0270 02E0     		b	.L12
 492              	.LVL39:
 493              	.L14:
 494              	.LBE6:
 243:../system/src/aprs/digi.c **** 
 244:../system/src/aprs/digi.c **** 				} // digi_mode == DIGI_ON_SSID_WIDE1 || digi_mode == DIGI_ON_ALL_WIDE1
 245:../system/src/aprs/digi.c **** 			}	// retval == DIGI_PACKET_DIGIPEATED
 246:../system/src/aprs/digi.c **** 		} // msg->rpt_cnt >= 1 && digi_msg_len == 0
 247:../system/src/aprs/digi.c **** 	}
 248:../system/src/aprs/digi.c **** 	else {
 249:../system/src/aprs/digi.c **** 		after_tx_lock = 0;
 495              		.loc 1 249 0
 496 0272 0020     		movs	r0, #0
 497              	.LVL40:
 498 0274 084B     		ldr	r3, .L40+4
 499 0276 1870     		strb	r0, [r3]
 500              	.LVL41:
 501              	.L12:
 250:../system/src/aprs/digi.c **** 	}
 251:../system/src/aprs/digi.c **** #endif
 252:../system/src/aprs/digi.c **** 	return retval;
 253:../system/src/aprs/digi.c **** }
 502              		.loc 1 253 0
 503 0278 02B0     		add	sp, sp, #8
 504              		.cfi_def_cfa_offset 24
 505              		@ sp needed
 506 027a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 507              	.LVL42:
 508              	.L19:
 509              		.cfi_def_cfa_offset 0
 510              		.cfi_restore 4
 511              		.cfi_restore 5
 512              		.cfi_restore 6
 513              		.cfi_restore 7
 514              		.cfi_restore 8
 515              		.cfi_restore 14
  90:../system/src/aprs/digi.c **** 	}
 516              		.loc 1 90 0
 517 027e FF20     		movs	r0, #255
 518              	.LVL43:
 519              		.loc 1 253 0
 520 0280 7047     		bx	lr
 521              	.LVL44:
 522              	.L20:
 523              		.cfi_def_cfa_offset 32
 524              		.cfi_offset 4, -24
 525              		.cfi_offset 5, -20
 526              		.cfi_offset 6, -16
 527              		.cfi_offset 7, -12
 528              		.cfi_offset 8, -8
 529              		.cfi_offset 14, -4
  94:../system/src/aprs/digi.c **** 	}
 530              		.loc 1 94 0
 531 0282 0020     		movs	r0, #0
 532              	.LVL45:
 533 0284 F8E7     		b	.L12
 534              	.LVL46:
 535              	.L21:
 536 0286 0020     		movs	r0, #0
 537              	.LVL47:
 538 0288 F6E7     		b	.L12
 539              	.LVL48:
 540              	.L23:
  84:../system/src/aprs/digi.c **** 
 541              		.loc 1 84 0
 542 028a 0020     		movs	r0, #0
 543 028c F4E7     		b	.L12
 544              	.L25:
 545 028e 0020     		movs	r0, #0
 546 0290 F2E7     		b	.L12
 547              	.L41:
 548 0292 00BF     		.align	2
 549              	.L40:
 550 0294 00000000 		.word	digi_mode
 551 0298 00000000 		.word	after_tx_lock
 552 029c 00000000 		.word	digi_msg_len
 553 02a0 00000000 		.word	digi_path
 554 02a4 00000000 		.word	digi_msg
 555 02a8 00000000 		.word	.LC0
 556 02ac 08000000 		.word	.LC1
 557 02b0 00000000 		.word	.LANCHOR0
 558 02b4 0C000000 		.word	.LC2
 559 02b8 00000000 		.word	digi10m
 560 02bc 00000000 		.word	main_ax25
 561 02c0 00000000 		.word	main_afsk
 562              		.cfi_endproc
 563              	.LFE72:
 565              		.section	.text.digi_check_with_viscous,"ax",%progbits
 566              		.align	1
 567              		.global	digi_check_with_viscous
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 571              		.fpu softvfp
 573              	digi_check_with_viscous:
 574              	.LFB73:
 254:../system/src/aprs/digi.c **** 
 255:../system/src/aprs/digi.c **** uint8_t digi_check_with_viscous(struct AX25Msg *msg) {
 575              		.loc 1 255 0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 0
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              	.LVL49:
 256:../system/src/aprs/digi.c **** 	uint8_t retval = 0;
 257:../system/src/aprs/digi.c **** 
 258:../system/src/aprs/digi.c **** 	// if there is a message waiting in buffer for digipeating
 259:../system/src/aprs/digi.c **** 	if (digi_msg_len > 0) {
 580              		.loc 1 259 0
 581 0000 134B     		ldr	r3, .L50
 582 0002 1B88     		ldrh	r3, [r3]
 583 0004 0BB9     		cbnz	r3, .L48
 260:../system/src/aprs/digi.c **** 		// check the source call
 261:../system/src/aprs/digi.c **** 		if (strncmp(msg->src.call, digi_path[1].call, 6) == 0)  {
 262:../system/src/aprs/digi.c **** 			// if the source call is the same check the SSID
 263:../system/src/aprs/digi.c **** 			if (msg->src.ssid == digi_path[1].ssid) {
 264:../system/src/aprs/digi.c **** 				// this is a message from the same station check the message content
 265:../system/src/aprs/digi.c **** 				if (memcmp(msg->info, digi_msg, msg->len) == 0) {
 266:../system/src/aprs/digi.c **** 					// if the message content is the same it means that current buffer content shall be discarded
 267:../system/src/aprs/digi.c **** 					// and frame shall not be retransmited
 268:../system/src/aprs/digi.c **** 					digi_msg_len = 0;
 269:../system/src/aprs/digi.c **** 					memset(digi_msg, 0x00, CONFIG_AX25_FRAME_BUF_LEN);
 270:../system/src/aprs/digi.c **** 
 271:../system/src/aprs/digi.c **** 					// increase viscous drop counter
 272:../system/src/aprs/digi.c **** 					digidrop10m++;
 273:../system/src/aprs/digi.c **** 				}
 274:../system/src/aprs/digi.c **** 			}
 275:../system/src/aprs/digi.c **** 		}
 276:../system/src/aprs/digi.c **** 	}
 277:../system/src/aprs/digi.c **** 
 278:../system/src/aprs/digi.c **** 	return retval;
 279:../system/src/aprs/digi.c **** }
 584              		.loc 1 279 0
 585 0006 0020     		movs	r0, #0
 586              	.LVL50:
 587 0008 7047     		bx	lr
 588              	.LVL51:
 589              	.L48:
 255:../system/src/aprs/digi.c **** 	uint8_t retval = 0;
 590              		.loc 1 255 0
 591 000a 10B5     		push	{r4, lr}
 592              		.cfi_def_cfa_offset 8
 593              		.cfi_offset 4, -8
 594              		.cfi_offset 14, -4
 595 000c 0446     		mov	r4, r0
 261:../system/src/aprs/digi.c **** 			// if the source call is the same check the SSID
 596              		.loc 1 261 0
 597 000e 0622     		movs	r2, #6
 598 0010 1049     		ldr	r1, .L50+4
 599 0012 FFF7FEFF 		bl	strncmp
 600              	.LVL52:
 601 0016 20B9     		cbnz	r0, .L43
 263:../system/src/aprs/digi.c **** 				// this is a message from the same station check the message content
 602              		.loc 1 263 0
 603 0018 A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 604 001a 0F4B     		ldr	r3, .L50+8
 605 001c 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 606 001e 9A42     		cmp	r2, r3
 607 0020 01D0     		beq	.L49
 608              	.L43:
 609              		.loc 1 279 0
 610 0022 0020     		movs	r0, #0
 611 0024 10BD     		pop	{r4, pc}
 612              	.LVL53:
 613              	.L49:
 265:../system/src/aprs/digi.c **** 					// if the message content is the same it means that current buffer content shall be discarded
 614              		.loc 1 265 0
 615 0026 B4F85020 		ldrh	r2, [r4, #80]
 616 002a 0C49     		ldr	r1, .L50+12
 617 002c E06C     		ldr	r0, [r4, #76]
 618 002e FFF7FEFF 		bl	memcmp
 619              	.LVL54:
 620 0032 0028     		cmp	r0, #0
 621 0034 F5D1     		bne	.L43
 268:../system/src/aprs/digi.c **** 					memset(digi_msg, 0x00, CONFIG_AX25_FRAME_BUF_LEN);
 622              		.loc 1 268 0
 623 0036 0021     		movs	r1, #0
 624 0038 054B     		ldr	r3, .L50
 625 003a 1980     		strh	r1, [r3]	@ movhi
 269:../system/src/aprs/digi.c **** 
 626              		.loc 1 269 0
 627 003c 4FF40072 		mov	r2, #512
 628 0040 0648     		ldr	r0, .L50+12
 629 0042 FFF7FEFF 		bl	memset
 630              	.LVL55:
 272:../system/src/aprs/digi.c **** 				}
 631              		.loc 1 272 0
 632 0046 064A     		ldr	r2, .L50+16
 633 0048 1388     		ldrh	r3, [r2]
 634 004a 0133     		adds	r3, r3, #1
 635 004c 1380     		strh	r3, [r2]	@ movhi
 636 004e E8E7     		b	.L43
 637              	.L51:
 638              		.align	2
 639              	.L50:
 640 0050 00000000 		.word	digi_msg_len
 641 0054 07000000 		.word	digi_path+7
 642 0058 00000000 		.word	digi_path
 643 005c 00000000 		.word	digi_msg
 644 0060 00000000 		.word	digidrop10m
 645              		.cfi_endproc
 646              	.LFE73:
 648              		.section	.text.digi_pool_viscous,"ax",%progbits
 649              		.align	1
 650              		.global	digi_pool_viscous
 651              		.syntax unified
 652              		.thumb
 653              		.thumb_func
 654              		.fpu softvfp
 656              	digi_pool_viscous:
 657              	.LFB74:
 280:../system/src/aprs/digi.c **** 
 281:../system/src/aprs/digi.c **** uint8_t digi_pool_viscous(void) {
 658              		.loc 1 281 0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 662              	.LVL56:
 282:../system/src/aprs/digi.c **** 	uint8_t retval = DIGI_PACKET_DIDNT_DIGIPEATED;
 283:../system/src/aprs/digi.c **** 
 284:../system/src/aprs/digi.c **** 	// proceed only if Viscous mode is enabled
 285:../system/src/aprs/digi.c **** 	if (digi_mode == DIGI_VISCOUS_ALL_WIDE1 || digi_mode == DIGI_VISCOUS_SSID_WIDE1) {
 663              		.loc 1 285 0
 664 0000 244B     		ldr	r3, .L62
 665 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 666 0004 033B     		subs	r3, r3, #3
 667 0006 DBB2     		uxtb	r3, r3
 668 0008 012B     		cmp	r3, #1
 669 000a 01D9     		bls	.L61
 282:../system/src/aprs/digi.c **** 	uint8_t retval = DIGI_PACKET_DIDNT_DIGIPEATED;
 670              		.loc 1 282 0
 671 000c 0020     		movs	r0, #0
 672 000e 7047     		bx	lr
 673              	.L61:
 286:../system/src/aprs/digi.c **** 
 287:../system/src/aprs/digi.c **** 		// if there is any message waiting in viscous delay
 288:../system/src/aprs/digi.c **** 		if (digi_msg_len > 0) {
 674              		.loc 1 288 0
 675 0010 214B     		ldr	r3, .L62+4
 676 0012 1988     		ldrh	r1, [r3]
 677 0014 0029     		cmp	r1, #0
 678 0016 36D0     		beq	.L54
 289:../system/src/aprs/digi.c **** 			digi_viscous_counter_sec++;
 679              		.loc 1 289 0
 680 0018 204A     		ldr	r2, .L62+8
 681 001a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 682 001c 0133     		adds	r3, r3, #1
 683 001e DBB2     		uxtb	r3, r3
 684 0020 1370     		strb	r3, [r2]
 290:../system/src/aprs/digi.c **** 
 291:../system/src/aprs/digi.c **** 			// if the counter reach the delay limit and packet still waits
 292:../system/src/aprs/digi.c **** 			// so it hasn't been cleared by 'digi_check_with_viscous'
 293:../system/src/aprs/digi.c **** 			if (digi_viscous_counter_sec >= digi_viscous_delay_sec) {
 685              		.loc 1 293 0
 686 0022 1F4A     		ldr	r2, .L62+12
 687 0024 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 688 0026 9342     		cmp	r3, r2
 689 0028 31D3     		bcc	.L57
 281:../system/src/aprs/digi.c **** 	uint8_t retval = DIGI_PACKET_DIDNT_DIGIPEATED;
 690              		.loc 1 281 0
 691 002a 70B5     		push	{r4, r5, r6, lr}
 692              		.cfi_def_cfa_offset 16
 693              		.cfi_offset 4, -16
 694              		.cfi_offset 5, -12
 695              		.cfi_offset 6, -8
 696              		.cfi_offset 14, -4
 697 002c 82B0     		sub	sp, sp, #8
 698              		.cfi_def_cfa_offset 24
 699              	.L55:
 294:../system/src/aprs/digi.c **** 
 295:../system/src/aprs/digi.c **** 				// wait when radio channel will became avaliable
 296:../system/src/aprs/digi.c **** 				while(main_ax25.dcd == true);
 700              		.loc 1 296 0 discriminator 1
 701 002e 1D4B     		ldr	r3, .L62+16
 702 0030 93F81432 		ldrb	r3, [r3, #532]	@ zero_extendqisi2
 703 0034 002B     		cmp	r3, #0
 704 0036 FAD1     		bne	.L55
 297:../system/src/aprs/digi.c **** 
 298:../system/src/aprs/digi.c **** 				// put message vaiting in viscous dealy into AX25 buffer in correct, encoded form
 299:../system/src/aprs/digi.c **** 				ax25_sendVia(&main_ax25, digi_path, digi_call_len, digi_msg, digi_msg_len-1);
 705              		.loc 1 299 0
 706 0038 1B4D     		ldr	r5, .L62+20
 707 003a 1C4B     		ldr	r3, .L62+24
 708 003c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 709 003e 1C4E     		ldr	r6, .L62+28
 710 0040 0139     		subs	r1, r1, #1
 711 0042 89B2     		uxth	r1, r1
 712 0044 0091     		str	r1, [sp]
 713 0046 2B46     		mov	r3, r5
 714 0048 3146     		mov	r1, r6
 715 004a 1648     		ldr	r0, .L62+16
 716 004c FFF7FEFF 		bl	ax25_sendVia
 717              	.LVL57:
 300:../system/src/aprs/digi.c **** 				after_tx_lock = 1;
 718              		.loc 1 300 0
 719 0050 0124     		movs	r4, #1
 720 0052 184B     		ldr	r3, .L62+32
 721 0054 1C70     		strb	r4, [r3]
 301:../system/src/aprs/digi.c **** 
 302:../system/src/aprs/digi.c **** 				// start transmission (non blicking call)
 303:../system/src/aprs/digi.c **** 				afsk_txStart(&main_afsk);
 722              		.loc 1 303 0
 723 0056 1848     		ldr	r0, .L62+36
 724 0058 FFF7FEFF 		bl	afsk_txStart
 725              	.LVL58:
 304:../system/src/aprs/digi.c **** 
 305:../system/src/aprs/digi.c **** 				// clear variables when there are not needed
 306:../system/src/aprs/digi.c **** 				memset(digi_path, 0x00, sizeof(AX25Call) * 7);
 726              		.loc 1 306 0
 727 005c 3122     		movs	r2, #49
 728 005e 0021     		movs	r1, #0
 729 0060 3046     		mov	r0, r6
 730 0062 FFF7FEFF 		bl	memset
 731              	.LVL59:
 307:../system/src/aprs/digi.c **** 				memset(digi_msg, 0x00, CONFIG_AX25_FRAME_BUF_LEN);
 732              		.loc 1 307 0
 733 0066 4FF40072 		mov	r2, #512
 734 006a 0021     		movs	r1, #0
 735 006c 2846     		mov	r0, r5
 736 006e FFF7FEFF 		bl	memset
 737              	.LVL60:
 308:../system/src/aprs/digi.c **** 				digi_msg_len = 0;
 738              		.loc 1 308 0
 739 0072 094B     		ldr	r3, .L62+4
 740 0074 0022     		movs	r2, #0
 741 0076 1A80     		strh	r2, [r3]	@ movhi
 309:../system/src/aprs/digi.c **** 
 310:../system/src/aprs/digi.c **** 				digi10m++;
 742              		.loc 1 310 0
 743 0078 104A     		ldr	r2, .L62+40
 744 007a 1388     		ldrh	r3, [r2]
 745 007c 2344     		add	r3, r3, r4
 746 007e 1380     		strh	r3, [r2]	@ movhi
 747              	.LVL61:
 311:../system/src/aprs/digi.c **** 
 312:../system/src/aprs/digi.c **** 				retval = DIGI_PACKET_DIGIPEATED;
 748              		.loc 1 312 0
 749 0080 2046     		mov	r0, r4
 750              	.LVL62:
 313:../system/src/aprs/digi.c **** 			}
 314:../system/src/aprs/digi.c **** 
 315:../system/src/aprs/digi.c **** 		}
 316:../system/src/aprs/digi.c **** 		else {
 317:../system/src/aprs/digi.c **** 			// if there isn't only zero the counter and do nothing
 318:../system/src/aprs/digi.c **** 			digi_viscous_counter_sec = 0;
 319:../system/src/aprs/digi.c **** 		}
 320:../system/src/aprs/digi.c **** 
 321:../system/src/aprs/digi.c **** 	}
 322:../system/src/aprs/digi.c **** 
 323:../system/src/aprs/digi.c **** 	return retval;
 324:../system/src/aprs/digi.c **** }
 751              		.loc 1 324 0
 752 0082 02B0     		add	sp, sp, #8
 753              		.cfi_def_cfa_offset 16
 754              		@ sp needed
 755 0084 70BD     		pop	{r4, r5, r6, pc}
 756              	.LVL63:
 757              	.L54:
 758              		.cfi_def_cfa_offset 0
 759              		.cfi_restore 4
 760              		.cfi_restore 5
 761              		.cfi_restore 6
 762              		.cfi_restore 14
 318:../system/src/aprs/digi.c **** 		}
 763              		.loc 1 318 0
 764 0086 0020     		movs	r0, #0
 765 0088 044B     		ldr	r3, .L62+8
 766 008a 1870     		strb	r0, [r3]
 767 008c 7047     		bx	lr
 768              	.L57:
 282:../system/src/aprs/digi.c **** 
 769              		.loc 1 282 0
 770 008e 0020     		movs	r0, #0
 771              	.LVL64:
 772              		.loc 1 324 0
 773 0090 7047     		bx	lr
 774              	.L63:
 775 0092 00BF     		.align	2
 776              	.L62:
 777 0094 00000000 		.word	digi_mode
 778 0098 00000000 		.word	digi_msg_len
 779 009c 00000000 		.word	digi_viscous_counter_sec
 780 00a0 00000000 		.word	digi_viscous_delay_sec
 781 00a4 00000000 		.word	main_ax25
 782 00a8 00000000 		.word	digi_msg
 783 00ac 00000000 		.word	.LANCHOR0
 784 00b0 00000000 		.word	digi_path
 785 00b4 00000000 		.word	after_tx_lock
 786 00b8 00000000 		.word	main_afsk
 787 00bc 00000000 		.word	digi10m
 788              		.cfi_endproc
 789              	.LFE74:
 791              		.comm	digi_viscous_counter_sec,1,1
 792              		.comm	digi_viscous_delay_sec,1,1
 793              		.comm	digi_mode,1,1
 794              		.global	digi_call_len
 795              		.comm	digi_path,49,4
 796              		.comm	digi_msg_len,2,2
 797              		.comm	digi_msg,512,4
 798              		.section	.bss.digi_call_len,"aw",%nobits
 799              		.set	.LANCHOR0,. + 0
 802              	digi_call_len:
 803 0000 00       		.space	1
 804              		.section	.rodata.digi_process.str1.4,"aMS",%progbits,1
 805              		.align	2
 806              	.LC0:
 807 0000 57494445 		.ascii	"WIDE1\000"
 807      3100
 808 0006 0000     		.space	2
 809              	.LC1:
 810 0008 257300   		.ascii	"%s\000"
 811 000b 00       		.space	1
 812              	.LC2:
 813 000c 57494445 		.ascii	"WIDE2\000"
 813      3200
 814              		.text
 815              	.Letext0:
 816              		.file 2 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 817              		.file 3 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 818              		.file 4 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 819              		.file 5 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 820              		.file 6 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 821              		.file 7 "../system/include/cmsis/core_cm3.h"
 822              		.file 8 "../system/include/cmsis/system_stm32f10x.h"
 823              		.file 9 "../system/include/cmsis/stm32f10x.h"
 824              		.file 10 "../system/include/aprs/cfifo.h"
 825              		.file 11 "../system/include/aprs/afsk.h"
 826              		.file 12 "../system/include/aprs/ax25.h"
 827              		.file 13 "../include/config_data.h"
 828              		.file 14 "../system/include/aprs/digi.h"
 829              		.file 15 "../system/include/drivers/serial.h"
 830              		.file 16 "../include/main.h"
 831              		.file 17 "../include/delay.h"
 832              		.file 18 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 digi.c
     /tmp/cckDlxBK.s:16     .text.digi_init:0000000000000000 $t
     /tmp/cckDlxBK.s:23     .text.digi_init:0000000000000000 digi_init
     /tmp/cckDlxBK.s:86     .text.digi_init:0000000000000048 $d
                            *COM*:0000000000000001 digi_viscous_counter_sec
                            *COM*:0000000000000002 digi_msg_len
                            *COM*:0000000000000001 digi_mode
                            *COM*:0000000000000001 digi_viscous_delay_sec
     /tmp/cckDlxBK.s:94     .text.digi_process:0000000000000000 $t
     /tmp/cckDlxBK.s:101    .text.digi_process:0000000000000000 digi_process
     /tmp/cckDlxBK.s:550    .text.digi_process:0000000000000294 $d
                            *COM*:0000000000000031 digi_path
                            *COM*:0000000000000200 digi_msg
     /tmp/cckDlxBK.s:566    .text.digi_check_with_viscous:0000000000000000 $t
     /tmp/cckDlxBK.s:573    .text.digi_check_with_viscous:0000000000000000 digi_check_with_viscous
     /tmp/cckDlxBK.s:640    .text.digi_check_with_viscous:0000000000000050 $d
     /tmp/cckDlxBK.s:649    .text.digi_pool_viscous:0000000000000000 $t
     /tmp/cckDlxBK.s:656    .text.digi_pool_viscous:0000000000000000 digi_pool_viscous
     /tmp/cckDlxBK.s:777    .text.digi_pool_viscous:0000000000000094 $d
     /tmp/cckDlxBK.s:802    .bss.digi_call_len:0000000000000000 digi_call_len
     /tmp/cckDlxBK.s:803    .bss.digi_call_len:0000000000000000 $d
     /tmp/cckDlxBK.s:805    .rodata.digi_process.str1.4:0000000000000000 $d
                           .group:0000000000000000 wm4.0.879aed89c359f5856fe69c61b3590d34
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.newlib.h.18.5e5ca3429233af402d406a202f1fc1ac
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:0000000000000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.stm32f10x.h.51.c58ea26c5150470d52680f0bbaa7049c
                           .group:0000000000000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:0000000000000000 wm4.core_cm3.h.82.57a0f9dd004efa579f86574376281d2f
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.67d2dcde6a14ff518eedc1d545d89a76
                           .group:0000000000000000 wm4.core_cm3.h.183.ecfd9c316d6f10b73648f6e579b02c8b
                           .group:0000000000000000 wm4.stm32f10x.h.522.a925aafc848b1f088438cf0e9b167b78
                           .group:0000000000000000 wm4.stm32f10x.h.8317.9a8e476d96d33bb2df9a9ad0775bd4a7
                           .group:0000000000000000 wm4.stm32f10x_adc.h.89.9f2b285fa0070185d48a05b61a05798c
                           .group:0000000000000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:0000000000000000 wm4.stm32f10x_can.h.25.e5e43f6bbc8fc7c8aa30ef2bc5610ced
                           .group:0000000000000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:0000000000000000 wm4.stm32f10x_dac.h.25.d946244edf026333094657d55ea894b8
                           .group:0000000000000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:0000000000000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:0000000000000000 wm4.stm32f10x_exti.h.25.f52c69aad7d1994be5b2c4e2b8f4c595
                           .group:0000000000000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:0000000000000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:0000000000000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:0000000000000000 wm4.stm32f10x_i2c.h.25.b124ac2c620f8ebddd92b6d95ca62176
                           .group:0000000000000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:0000000000000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:0000000000000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:0000000000000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:0000000000000000 wm4.stm32f10x_sdio.h.25.fb0db079f5c1412c40f359319f7c40b0
                           .group:0000000000000000 wm4.stm32f10x_spi.h.25.3f6dfa4abe177efb3c6f5a717c06b323
                           .group:0000000000000000 wm4.stm32f10x_tim.h.25.f709106ba77b314e6b070693f89f3c56
                           .group:0000000000000000 wm4.stm32f10x_usart.h.25.2e65e396239d0cc41fd0bf6faa2a32cb
                           .group:0000000000000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:0000000000000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.macros.h.2.7a7a5ac48d4160b7481c806e80b68442
                           .group:0000000000000000 wm4.config.h.2.f5e96167cb26b0ce97c5e7513a95bc8b
                           .group:0000000000000000 wm4.afsk.h.17.cf8f922069680e152e1eddb76cd4cc82
                           .group:0000000000000000 wm4.ax25.h.18.077e42a4af9016476e34900472a8fe18
                           .group:0000000000000000 wm4.config_data.h.9.6026a38cd2f39158a8fd50707ba1bf90
                           .group:0000000000000000 wm4.digi.h.14.769ea2ae98162dd36806ccf4982c3c8a
                           .group:0000000000000000 wm4.serial.h.2.3544b1c529a5f3b4e56f5aba673d9e30
                           .group:0000000000000000 wm4.main.h.8.3d6ad69e5f061008d8c5cc5f5c9dd15a
                           .group:0000000000000000 wm4.station_config.h.9.75b6c5687acc8f60d219d6a552b2bf59

UNDEFINED SYMBOLS
memset
strcmp
strcpy
sprintf
snprintf
delay_from_preset
ax25_sendVia
afsk_txStart
after_tx_lock
digi10m
main_ax25
main_afsk
strncmp
memcmp
digidrop10m
