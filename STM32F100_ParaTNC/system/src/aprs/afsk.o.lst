   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"afsk.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.fifo_isempty,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	fifo_isempty:
  23              	.LFB0:
  24              		.file 1 "../system/src/aprs/afsk.c"
   1:../system/src/aprs/afsk.c **** 
   2:../system/src/aprs/afsk.c **** #include "afsk.h"
   3:../system/src/aprs/afsk.c **** 
   4:../system/src/aprs/afsk.c **** #include <string.h> /* memset */
   5:../system/src/aprs/afsk.c **** #include <math.h>
   6:../system/src/aprs/afsk.c **** #include <stdlib.h>
   7:../system/src/aprs/afsk.c **** 
   8:../system/src/aprs/afsk.c **** #include <dac.h>
   9:../system/src/aprs/afsk.c **** #include <ax25.h>
  10:../system/src/aprs/afsk.c **** 
  11:../system/src/aprs/afsk.c **** 
  12:../system/src/aprs/afsk.c **** #define 	BIT_DIFFER(bitline1, bitline2) (((bitline1) ^ (bitline2)) & 0x01)
  13:../system/src/aprs/afsk.c **** #define 	EDGE_FOUND(bitline)	BIT_DIFFER((bitline), (bitline) >> 1)
  14:../system/src/aprs/afsk.c **** #define 	SWITCH_TONE(inc)  (((inc) == MARK_INC) ? SPACE_INC : MARK_INC)
  15:../system/src/aprs/afsk.c **** 
  16:../system/src/aprs/afsk.c **** #define M_PI 3.1415
  17:../system/src/aprs/afsk.c **** 
  18:../system/src/aprs/afsk.c **** static int16_t data[SAMPLEPERBIT];
  19:../system/src/aprs/afsk.c **** static int16_t corr_mark_i[SAMPLEPERBIT]; /* sin 1200 Hz */
  20:../system/src/aprs/afsk.c **** static int16_t corr_mark_q[SAMPLEPERBIT]; /* cos 1200 Hz */
  21:../system/src/aprs/afsk.c **** static int16_t corr_space_i[SAMPLEPERBIT]; /* sin 2200 Hz */
  22:../system/src/aprs/afsk.c **** static int16_t corr_space_q[SAMPLEPERBIT]; /* cos 2200 Hz */
  23:../system/src/aprs/afsk.c **** 
  24:../system/src/aprs/afsk.c **** 
  25:../system/src/aprs/afsk.c **** static uint8_t ptr=0;
  26:../system/src/aprs/afsk.c **** 
  27:../system/src/aprs/afsk.c **** char PersistRand;
  28:../system/src/aprs/afsk.c **** char DrawCounter;
  29:../system/src/aprs/afsk.c **** 
  30:../system/src/aprs/afsk.c **** extern unsigned short tx10m;
  31:../system/src/aprs/afsk.c **** 
  32:../system/src/aprs/afsk.c **** 
  33:../system/src/aprs/afsk.c **** /**
  34:../system/src/aprs/afsk.c ****  * Sine table for the first quarter of wave.
  35:../system/src/aprs/afsk.c ****  * The rest of the wave is computed from this first quarter.
  36:../system/src/aprs/afsk.c ****  * This table is used to generate the modulated data.
  37:../system/src/aprs/afsk.c ****  */
  38:../system/src/aprs/afsk.c **** static const uint8_t sin_table[] = {
  39:../system/src/aprs/afsk.c **** 
  40:../system/src/aprs/afsk.c **** 	128, 129, 131, 132, 134, 135, 137, 138, 140, 142, 143, 145, 146, 148, 149, 151,
  41:../system/src/aprs/afsk.c **** 	152, 154, 155, 157, 158, 160, 162, 163, 165, 166, 167, 169, 170, 172, 173, 175,
  42:../system/src/aprs/afsk.c **** 	176, 178, 179, 181, 182, 183, 185, 186, 188, 189, 190, 192, 193, 194, 196, 197,
  43:../system/src/aprs/afsk.c **** 	198, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217,
  44:../system/src/aprs/afsk.c **** 	218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  45:../system/src/aprs/afsk.c **** 	234, 234, 235, 236, 237, 238, 238, 239, 240, 241, 241, 242, 243, 243, 244, 245,
  46:../system/src/aprs/afsk.c **** 	245, 246, 246, 247, 248, 248, 249, 249, 250, 250, 250, 251, 251, 252, 252, 252,
  47:../system/src/aprs/afsk.c **** 	253, 253, 253, 253, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255,
  48:../system/src/aprs/afsk.c **** 
  49:../system/src/aprs/afsk.c **** };
  50:../system/src/aprs/afsk.c **** 
  51:../system/src/aprs/afsk.c **** /**************************************************************************************************
  52:../system/src/aprs/afsk.c **** static bool fifo_isempty(const FIFOBuffer *fb) {
  25              		.loc 1 52 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
  53:../system/src/aprs/afsk.c **** /**************************************************************************************************
  54:../system/src/aprs/afsk.c **** 
  55:../system/src/aprs/afsk.c **** 	return fb->head == fb->tail;
  31              		.loc 1 55 0
  32 0000 0268     		ldr	r2, [r0]
  33 0002 4068     		ldr	r0, [r0, #4]
  34              	.LVL1:
  56:../system/src/aprs/afsk.c **** 
  57:../system/src/aprs/afsk.c **** }
  35              		.loc 1 57 0
  36 0004 8242     		cmp	r2, r0
  37 0006 14BF     		ite	ne
  38 0008 0020     		movne	r0, #0
  39 000a 0120     		moveq	r0, #1
  40 000c 7047     		bx	lr
  41              		.cfi_endproc
  42              	.LFE0:
  44              		.section	.text.fifo_isfull,"ax",%progbits
  45              		.align	1
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu softvfp
  51              	fifo_isfull:
  52              	.LFB1:
  58:../system/src/aprs/afsk.c **** 
  59:../system/src/aprs/afsk.c **** 
  60:../system/src/aprs/afsk.c **** /**************************************************************************************************
  61:../system/src/aprs/afsk.c **** static bool fifo_isfull(const FIFOBuffer *fb) {
  53              		.loc 1 61 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.LVL2:
  62:../system/src/aprs/afsk.c **** /**************************************************************************************************
  63:../system/src/aprs/afsk.c **** 
  64:../system/src/aprs/afsk.c **** 	return ((fb->head == fb->begin) && (fb->tail == fb->end)) || (fb->tail == fb->head - 1);
  59              		.loc 1 64 0
  60 0000 0268     		ldr	r2, [r0]
  61 0002 8368     		ldr	r3, [r0, #8]
  62 0004 9A42     		cmp	r2, r3
  63 0006 06D0     		beq	.L7
  64              	.L3:
  65              		.loc 1 64 0 is_stmt 0 discriminator 4
  66 0008 4268     		ldr	r2, [r0, #4]
  67 000a 0368     		ldr	r3, [r0]
  68 000c 013B     		subs	r3, r3, #1
  69 000e 9A42     		cmp	r2, r3
  70 0010 07D0     		beq	.L8
  71              		.loc 1 64 0
  72 0012 0020     		movs	r0, #0
  73              	.LVL3:
  65:../system/src/aprs/afsk.c **** 
  66:../system/src/aprs/afsk.c **** }
  74              		.loc 1 66 0 is_stmt 1
  75 0014 7047     		bx	lr
  76              	.LVL4:
  77              	.L7:
  64:../system/src/aprs/afsk.c **** 
  78              		.loc 1 64 0 discriminator 1
  79 0016 4268     		ldr	r2, [r0, #4]
  80 0018 C368     		ldr	r3, [r0, #12]
  81 001a 9A42     		cmp	r2, r3
  82 001c F4D1     		bne	.L3
  64:../system/src/aprs/afsk.c **** 
  83              		.loc 1 64 0 is_stmt 0
  84 001e 0120     		movs	r0, #1
  85              	.LVL5:
  86 0020 7047     		bx	lr
  87              	.LVL6:
  88              	.L8:
  89 0022 0120     		movs	r0, #1
  90              	.LVL7:
  91 0024 7047     		bx	lr
  92              		.cfi_endproc
  93              	.LFE1:
  95              		.section	.text.fifo_push,"ax",%progbits
  96              		.align	1
  97              		.syntax unified
  98              		.thumb
  99              		.thumb_func
 100              		.fpu softvfp
 102              	fifo_push:
 103              	.LFB2:
  67:../system/src/aprs/afsk.c **** 
  68:../system/src/aprs/afsk.c **** 
  69:../system/src/aprs/afsk.c **** /**************************************************************************************************
  70:../system/src/aprs/afsk.c **** static void fifo_push(FIFOBuffer *fb, uint8_t c) {
 104              		.loc 1 70 0 is_stmt 1
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 109              	.LVL8:
  71:../system/src/aprs/afsk.c **** /**************************************************************************************************
  72:../system/src/aprs/afsk.c **** 
  73:../system/src/aprs/afsk.c **** 	/* Write at tail position */
  74:../system/src/aprs/afsk.c **** 	*(fb->tail) = c;
 110              		.loc 1 74 0
 111 0000 4368     		ldr	r3, [r0, #4]
 112 0002 1970     		strb	r1, [r3]
  75:../system/src/aprs/afsk.c **** 
  76:../system/src/aprs/afsk.c **** 	if (fb->tail == fb->end)
 113              		.loc 1 76 0
 114 0004 4268     		ldr	r2, [r0, #4]
 115 0006 C368     		ldr	r3, [r0, #12]
 116 0008 9A42     		cmp	r2, r3
 117 000a 03D0     		beq	.L12
  77:../system/src/aprs/afsk.c **** 	{
  78:../system/src/aprs/afsk.c **** 		/* wrap tail around */
  79:../system/src/aprs/afsk.c **** 		fb->tail = fb->begin;
  80:../system/src/aprs/afsk.c **** 	}
  81:../system/src/aprs/afsk.c **** 	else
  82:../system/src/aprs/afsk.c **** 	{
  83:../system/src/aprs/afsk.c **** 		/* Move tail forward */
  84:../system/src/aprs/afsk.c **** 		fb->tail++;
 118              		.loc 1 84 0
 119 000c 4368     		ldr	r3, [r0, #4]
 120 000e 0133     		adds	r3, r3, #1
 121 0010 4360     		str	r3, [r0, #4]
  85:../system/src/aprs/afsk.c **** 	}
  86:../system/src/aprs/afsk.c **** 
  87:../system/src/aprs/afsk.c **** }
 122              		.loc 1 87 0
 123 0012 7047     		bx	lr
 124              	.L12:
  79:../system/src/aprs/afsk.c **** 	}
 125              		.loc 1 79 0
 126 0014 8368     		ldr	r3, [r0, #8]
 127 0016 4360     		str	r3, [r0, #4]
 128 0018 7047     		bx	lr
 129              		.cfi_endproc
 130              	.LFE2:
 132              		.section	.text.fifo_pop,"ax",%progbits
 133              		.align	1
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 137              		.fpu softvfp
 139              	fifo_pop:
 140              	.LFB3:
  88:../system/src/aprs/afsk.c **** 
  89:../system/src/aprs/afsk.c **** 
  90:../system/src/aprs/afsk.c **** /**************************************************************************************************
  91:../system/src/aprs/afsk.c **** static uint8_t fifo_pop(FIFOBuffer *fb) {
 141              		.loc 1 91 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 146              	.LVL9:
  92:../system/src/aprs/afsk.c **** /**************************************************************************************************
  93:../system/src/aprs/afsk.c **** 
  94:../system/src/aprs/afsk.c **** 	if (fb->head == fb->end)
 147              		.loc 1 94 0
 148 0000 0268     		ldr	r2, [r0]
 149 0002 C368     		ldr	r3, [r0, #12]
 150 0004 9A42     		cmp	r2, r3
 151 0006 04D0     		beq	.L16
  95:../system/src/aprs/afsk.c **** 	{
  96:../system/src/aprs/afsk.c **** 		/* wrap head around */
  97:../system/src/aprs/afsk.c **** 		fb->head = fb->begin;
  98:../system/src/aprs/afsk.c **** 		return *(fb->end);
  99:../system/src/aprs/afsk.c **** 	}
 100:../system/src/aprs/afsk.c **** 	else
 101:../system/src/aprs/afsk.c **** 	{
 102:../system/src/aprs/afsk.c **** 		/* move head forward */
 103:../system/src/aprs/afsk.c **** 		return *(fb->head++);
 152              		.loc 1 103 0
 153 0008 0368     		ldr	r3, [r0]
 154 000a 5A1C     		adds	r2, r3, #1
 155 000c 0260     		str	r2, [r0]
 156 000e 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 157              	.LVL10:
 104:../system/src/aprs/afsk.c **** 	}
 105:../system/src/aprs/afsk.c **** 
 106:../system/src/aprs/afsk.c **** }
 158              		.loc 1 106 0
 159 0010 7047     		bx	lr
 160              	.LVL11:
 161              	.L16:
  97:../system/src/aprs/afsk.c **** 		return *(fb->end);
 162              		.loc 1 97 0
 163 0012 8268     		ldr	r2, [r0, #8]
 164 0014 0260     		str	r2, [r0]
  98:../system/src/aprs/afsk.c **** 	}
 165              		.loc 1 98 0
 166 0016 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 167              	.LVL12:
 168 0018 7047     		bx	lr
 169              		.cfi_endproc
 170              	.LFE3:
 172              		.section	.text.fifo_flush,"ax",%progbits
 173              		.align	1
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu softvfp
 179              	fifo_flush:
 180              	.LFB4:
 107:../system/src/aprs/afsk.c **** 
 108:../system/src/aprs/afsk.c **** 
 109:../system/src/aprs/afsk.c **** /**************************************************************************************************
 110:../system/src/aprs/afsk.c **** static void fifo_flush(FIFOBuffer *fb) {
 181              		.loc 1 110 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              		@ link register save eliminated.
 186              	.LVL13:
 111:../system/src/aprs/afsk.c **** /**************************************************************************************************
 112:../system/src/aprs/afsk.c **** 
 113:../system/src/aprs/afsk.c **** 	fb->head = fb->tail;
 187              		.loc 1 113 0
 188 0000 4368     		ldr	r3, [r0, #4]
 189 0002 0360     		str	r3, [r0]
 114:../system/src/aprs/afsk.c **** 
 115:../system/src/aprs/afsk.c **** }
 190              		.loc 1 115 0
 191 0004 7047     		bx	lr
 192              		.cfi_endproc
 193              	.LFE4:
 195              		.section	.text.fifo_init,"ax",%progbits
 196              		.align	1
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 200              		.fpu softvfp
 202              	fifo_init:
 203              	.LFB5:
 116:../system/src/aprs/afsk.c **** 
 117:../system/src/aprs/afsk.c **** 
 118:../system/src/aprs/afsk.c **** /**************************************************************************************************
 119:../system/src/aprs/afsk.c **** static void fifo_init(FIFOBuffer *fb, uint8_t *buf, uint16_t size) {
 204              		.loc 1 119 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              		@ link register save eliminated.
 209              	.LVL14:
 120:../system/src/aprs/afsk.c **** /**************************************************************************************************
 121:../system/src/aprs/afsk.c **** 
 122:../system/src/aprs/afsk.c **** 	fb->head = fb->tail = fb->begin = buf;
 210              		.loc 1 122 0
 211 0000 8160     		str	r1, [r0, #8]
 212 0002 4160     		str	r1, [r0, #4]
 213 0004 0160     		str	r1, [r0]
 123:../system/src/aprs/afsk.c **** 	fb->end = buf + size - 1;
 214              		.loc 1 123 0
 215 0006 013A     		subs	r2, r2, #1
 216              	.LVL15:
 217 0008 1144     		add	r1, r1, r2
 218              	.LVL16:
 219 000a C160     		str	r1, [r0, #12]
 124:../system/src/aprs/afsk.c **** 
 125:../system/src/aprs/afsk.c **** }
 220              		.loc 1 125 0
 221 000c 7047     		bx	lr
 222              		.cfi_endproc
 223              	.LFE5:
 225              		.section	.text.sin_sample,"ax",%progbits
 226              		.align	1
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu softvfp
 232              	sin_sample:
 233              	.LFB6:
 126:../system/src/aprs/afsk.c **** 
 127:../system/src/aprs/afsk.c **** /**************************************************************************************************
 128:../system/src/aprs/afsk.c **** static uint8_t sin_sample(uint16_t idx) {
 234              		.loc 1 128 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 239              	.LVL17:
 129:../system/src/aprs/afsk.c **** /**************************************************************************************************
 130:../system/src/aprs/afsk.c **** 
 131:../system/src/aprs/afsk.c **** 	uint8_t data;
 132:../system/src/aprs/afsk.c **** 	uint16_t new_idx = idx % (SIN_LEN / 2);
 240              		.loc 1 132 0
 241 0000 C3B2     		uxtb	r3, r0
 242              	.LVL18:
 133:../system/src/aprs/afsk.c **** 	new_idx = (new_idx >= (SIN_LEN / 4)) ? (SIN_LEN / 2 - new_idx - 1) : new_idx;
 243              		.loc 1 133 0
 244 0002 7F2B     		cmp	r3, #127
 245 0004 02D9     		bls	.L20
 246              		.loc 1 133 0 is_stmt 0 discriminator 1
 247 0006 C3F1FF03 		rsb	r3, r3, #255
 248              	.LVL19:
 249 000a 9BB2     		uxth	r3, r3
 250              	.L20:
 251              	.LVL20:
 134:../system/src/aprs/afsk.c **** 
 135:../system/src/aprs/afsk.c **** 	data = pgm_read8(&sin_table[new_idx]);
 252              		.loc 1 135 0 is_stmt 1 discriminator 4
 253 000c 034A     		ldr	r2, .L22
 254 000e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 255              	.LVL21:
 136:../system/src/aprs/afsk.c **** 
 137:../system/src/aprs/afsk.c **** 	return (idx >= (SIN_LEN / 2)) ? (255 - data) : data;
 256              		.loc 1 137 0 discriminator 4
 257 0010 FF28     		cmp	r0, #255
 258 0012 01D9     		bls	.L21
 259              		.loc 1 137 0 is_stmt 0 discriminator 1
 260 0014 DB43     		mvns	r3, r3
 261              	.LVL22:
 262 0016 DBB2     		uxtb	r3, r3
 263              	.LVL23:
 264              	.L21:
 138:../system/src/aprs/afsk.c **** 
 139:../system/src/aprs/afsk.c **** }
 265              		.loc 1 139 0 is_stmt 1 discriminator 4
 266 0018 1846     		mov	r0, r3
 267              	.LVL24:
 268 001a 7047     		bx	lr
 269              	.L23:
 270              		.align	2
 271              	.L22:
 272 001c 00000000 		.word	.LANCHOR0
 273              		.cfi_endproc
 274              	.LFE6:
 276              		.section	.text.hdlc_parse,"ax",%progbits
 277              		.align	1
 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
 281              		.fpu softvfp
 283              	hdlc_parse:
 284              	.LFB7:
 140:../system/src/aprs/afsk.c **** 
 141:../system/src/aprs/afsk.c **** 
 142:../system/src/aprs/afsk.c **** /**************************************************************************************************
 143:../system/src/aprs/afsk.c **** static bool hdlc_parse(Hdlc *hdlc, bool bit, FIFOBuffer *fifo) {
 285              		.loc 1 143 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              	.LVL25:
 290 0000 70B5     		push	{r4, r5, r6, lr}
 291              		.cfi_def_cfa_offset 16
 292              		.cfi_offset 4, -16
 293              		.cfi_offset 5, -12
 294              		.cfi_offset 6, -8
 295              		.cfi_offset 14, -4
 296 0002 0446     		mov	r4, r0
 297 0004 1546     		mov	r5, r2
 298              	.LVL26:
 144:../system/src/aprs/afsk.c **** /**************************************************************************************************
 145:../system/src/aprs/afsk.c **** 
 146:../system/src/aprs/afsk.c **** 	bool ret = true;
 147:../system/src/aprs/afsk.c **** 
 148:../system/src/aprs/afsk.c **** 	hdlc->demod_bits <<= 1;
 299              		.loc 1 148 0
 300 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 301 0008 5B00     		lsls	r3, r3, #1
 302 000a DBB2     		uxtb	r3, r3
 149:../system/src/aprs/afsk.c **** 	hdlc->demod_bits |= bit ? 1 : 0;
 303              		.loc 1 149 0
 304 000c 49B2     		sxtb	r1, r1
 305 000e 1943     		orrs	r1, r1, r3
 306              	.LVL27:
 307 0010 C9B2     		uxtb	r1, r1
 308 0012 0170     		strb	r1, [r0]
 150:../system/src/aprs/afsk.c **** 
 151:../system/src/aprs/afsk.c **** 	/* HDLC Flag */
 152:../system/src/aprs/afsk.c **** 	if (hdlc->demod_bits == HDLC_FLAG)
 309              		.loc 1 152 0
 310 0014 7E29     		cmp	r1, #126
 311 0016 34D0     		beq	.L41
 153:../system/src/aprs/afsk.c **** 	{
 154:../system/src/aprs/afsk.c **** 		if (!fifo_isfull(fifo))
 155:../system/src/aprs/afsk.c **** 		{
 156:../system/src/aprs/afsk.c **** 			/* modification by sp8ebc */
 157:../system/src/aprs/afsk.c **** 			if(hdlc->s == false && hdlc->raw_dcd == true)
 158:../system/src/aprs/afsk.c **** 			hdlc->raw_dcd = false; 
 159:../system/src/aprs/afsk.c **** 			/***************************/ 
 160:../system/src/aprs/afsk.c **** 			fifo_push(fifo, HDLC_FLAG);
 161:../system/src/aprs/afsk.c **** 			hdlc->rxstart = true;
 162:../system/src/aprs/afsk.c **** 		}
 163:../system/src/aprs/afsk.c **** 		else
 164:../system/src/aprs/afsk.c **** 		{
 165:../system/src/aprs/afsk.c **** 			ret = false;
 166:../system/src/aprs/afsk.c **** 			hdlc->rxstart = false;
 167:../system/src/aprs/afsk.c **** 			fifo_flush(fifo);
 168:../system/src/aprs/afsk.c **** 		}
 169:../system/src/aprs/afsk.c **** 
 170:../system/src/aprs/afsk.c **** 		hdlc->currchar = 0;
 171:../system/src/aprs/afsk.c **** 		hdlc->bit_idx = 0;
 172:../system/src/aprs/afsk.c **** 		hdlc->s = true;	  //
 173:../system/src/aprs/afsk.c **** 		return ret;
 174:../system/src/aprs/afsk.c **** 	}
 175:../system/src/aprs/afsk.c **** 
 176:../system/src/aprs/afsk.c **** 	/* Reset */
 177:../system/src/aprs/afsk.c **** 	if ((hdlc->demod_bits & HDLC_RESET) == HDLC_RESET)
 312              		.loc 1 177 0
 313 0018 01F07F03 		and	r3, r1, #127
 314 001c 7F2B     		cmp	r3, #127
 315 001e 4CD0     		beq	.L42
 178:../system/src/aprs/afsk.c **** 	{
 179:../system/src/aprs/afsk.c **** 		hdlc->rxstart = false;
 180:../system/src/aprs/afsk.c **** 		hdlc->s = false;	//
 181:../system/src/aprs/afsk.c **** 		return ret;
 182:../system/src/aprs/afsk.c **** 	}
 183:../system/src/aprs/afsk.c **** 
 184:../system/src/aprs/afsk.c **** 	if (!hdlc->rxstart) return ret;
 316              		.loc 1 184 0
 317 0020 C678     		ldrb	r6, [r0, #3]	@ zero_extendqisi2
 318 0022 002E     		cmp	r6, #0
 319 0024 67D0     		beq	.L39
 185:../system/src/aprs/afsk.c **** 
 186:../system/src/aprs/afsk.c **** 	/* Stuffed bit */
 187:../system/src/aprs/afsk.c **** 	if ((hdlc->demod_bits & 0x3f) == 0x3e) return ret;
 320              		.loc 1 187 0
 321 0026 01F03F03 		and	r3, r1, #63
 322 002a 3E2B     		cmp	r3, #62
 323 002c 64D0     		beq	.L29
 188:../system/src/aprs/afsk.c **** 
 189:../system/src/aprs/afsk.c **** 	if (hdlc->demod_bits & 0x01) hdlc->currchar |= 0x80;
 324              		.loc 1 189 0
 325 002e 11F0010F 		tst	r1, #1
 326 0032 03D0     		beq	.L31
 327              		.loc 1 189 0 is_stmt 0 discriminator 1
 328 0034 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 329 0036 63F07F03 		orn	r3, r3, #127
 330 003a 8370     		strb	r3, [r0, #2]
 331              	.L31:
 190:../system/src/aprs/afsk.c **** 
 191:../system/src/aprs/afsk.c **** 	if (++hdlc->bit_idx >= 8)
 332              		.loc 1 191 0 is_stmt 1
 333 003c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 334 003e 0133     		adds	r3, r3, #1
 335 0040 DBB2     		uxtb	r3, r3
 336 0042 6370     		strb	r3, [r4, #1]
 337 0044 072B     		cmp	r3, #7
 338 0046 52D9     		bls	.L32
 192:../system/src/aprs/afsk.c **** 	{
 193:../system/src/aprs/afsk.c **** 		if ((hdlc->currchar == HDLC_FLAG || hdlc->currchar == HDLC_RESET || hdlc->currchar == AX25_ESC))
 339              		.loc 1 193 0
 340 0048 A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 341              	.LVL28:
 342 004a A2F17E03 		sub	r3, r2, #126
 343 004e DBB2     		uxtb	r3, r3
 344 0050 012B     		cmp	r3, #1
 345 0052 37D9     		bls	.L33
 346              		.loc 1 193 0 is_stmt 0 discriminator 1
 347 0054 1B2A     		cmp	r2, #27
 348 0056 35D0     		beq	.L33
 349              	.LVL29:
 350              	.L34:
 194:../system/src/aprs/afsk.c **** 		{
 195:../system/src/aprs/afsk.c **** 			if (!fifo_isfull(fifo))
 196:../system/src/aprs/afsk.c **** 			{
 197:../system/src/aprs/afsk.c **** 				fifo_push(fifo, AX25_ESC);
 198:../system/src/aprs/afsk.c **** 			}
 199:../system/src/aprs/afsk.c **** 			else
 200:../system/src/aprs/afsk.c **** 			{
 201:../system/src/aprs/afsk.c **** 				hdlc->rxstart = false;
 202:../system/src/aprs/afsk.c **** 				ret = false;
 203:../system/src/aprs/afsk.c **** 				fifo_flush(fifo);
 204:../system/src/aprs/afsk.c **** 			}
 205:../system/src/aprs/afsk.c **** 		}
 206:../system/src/aprs/afsk.c **** 
 207:../system/src/aprs/afsk.c **** 		if (!fifo_isfull(fifo))
 351              		.loc 1 207 0 is_stmt 1
 352 0058 2846     		mov	r0, r5
 353 005a FFF7FEFF 		bl	fifo_isfull
 354              	.LVL30:
 355 005e 0028     		cmp	r0, #0
 356 0060 3FD1     		bne	.L36
 208:../system/src/aprs/afsk.c **** 		{
 209:../system/src/aprs/afsk.c **** 			fifo_push(fifo, hdlc->currchar);
 357              		.loc 1 209 0
 358 0062 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 359 0064 2846     		mov	r0, r5
 360 0066 FFF7FEFF 		bl	fifo_push
 361              	.LVL31:
 362              	.L37:
 210:../system/src/aprs/afsk.c **** 		}
 211:../system/src/aprs/afsk.c **** 		else
 212:../system/src/aprs/afsk.c **** 		{
 213:../system/src/aprs/afsk.c **** 			hdlc->rxstart = false;
 214:../system/src/aprs/afsk.c **** 			ret = false;
 215:../system/src/aprs/afsk.c **** 			fifo_flush(fifo);
 216:../system/src/aprs/afsk.c **** 		}
 217:../system/src/aprs/afsk.c **** 		hdlc->currchar = 0;
 363              		.loc 1 217 0
 364 006a 0023     		movs	r3, #0
 365 006c A370     		strb	r3, [r4, #2]
 218:../system/src/aprs/afsk.c **** 		hdlc->bit_idx = 0;
 366              		.loc 1 218 0
 367 006e 6370     		strb	r3, [r4, #1]
 219:../system/src/aprs/afsk.c **** 		/*******************************************/
 220:../system/src/aprs/afsk.c **** 		if (hdlc->s == true && hdlc->raw_dcd == false)	   //
 368              		.loc 1 220 0
 369 0070 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 370 0072 1BB1     		cbz	r3, .L38
 371              		.loc 1 220 0 is_stmt 0 discriminator 1
 372 0074 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 373 0076 0BB9     		cbnz	r3, .L38
 221:../system/src/aprs/afsk.c **** 		hdlc->raw_dcd = true;	   //
 374              		.loc 1 221 0 is_stmt 1
 375 0078 0123     		movs	r3, #1
 376 007a 2371     		strb	r3, [r4, #4]
 377              	.L38:
 222:../system/src/aprs/afsk.c **** 		hdlc->s = false;	  //
 378              		.loc 1 222 0
 379 007c 0023     		movs	r3, #0
 380 007e 6371     		strb	r3, [r4, #5]
 381 0080 3AE0     		b	.L29
 382              	.LVL32:
 383              	.L41:
 154:../system/src/aprs/afsk.c **** 		{
 384              		.loc 1 154 0
 385 0082 1046     		mov	r0, r2
 386              	.LVL33:
 387 0084 FFF7FEFF 		bl	fifo_isfull
 388              	.LVL34:
 389 0088 88B9     		cbnz	r0, .L26
 157:../system/src/aprs/afsk.c **** 			hdlc->raw_dcd = false; 
 390              		.loc 1 157 0
 391 008a 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 392 008c 1BB9     		cbnz	r3, .L27
 157:../system/src/aprs/afsk.c **** 			hdlc->raw_dcd = false; 
 393              		.loc 1 157 0 is_stmt 0 discriminator 1
 394 008e 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 395 0090 0BB1     		cbz	r3, .L27
 158:../system/src/aprs/afsk.c **** 			/***************************/ 
 396              		.loc 1 158 0 is_stmt 1
 397 0092 0023     		movs	r3, #0
 398 0094 2371     		strb	r3, [r4, #4]
 399              	.L27:
 160:../system/src/aprs/afsk.c **** 			hdlc->rxstart = true;
 400              		.loc 1 160 0
 401 0096 7E21     		movs	r1, #126
 402 0098 2846     		mov	r0, r5
 403 009a FFF7FEFF 		bl	fifo_push
 404              	.LVL35:
 161:../system/src/aprs/afsk.c **** 		}
 405              		.loc 1 161 0
 406 009e 0126     		movs	r6, #1
 407 00a0 E670     		strb	r6, [r4, #3]
 408              	.LVL36:
 409              	.L28:
 170:../system/src/aprs/afsk.c **** 		hdlc->bit_idx = 0;
 410              		.loc 1 170 0
 411 00a2 0023     		movs	r3, #0
 412 00a4 A370     		strb	r3, [r4, #2]
 171:../system/src/aprs/afsk.c **** 		hdlc->s = true;	  //
 413              		.loc 1 171 0
 414 00a6 6370     		strb	r3, [r4, #1]
 172:../system/src/aprs/afsk.c **** 		return ret;
 415              		.loc 1 172 0
 416 00a8 0123     		movs	r3, #1
 417 00aa 6371     		strb	r3, [r4, #5]
 173:../system/src/aprs/afsk.c **** 	}
 418              		.loc 1 173 0
 419 00ac 24E0     		b	.L29
 420              	.LVL37:
 421              	.L26:
 166:../system/src/aprs/afsk.c **** 			fifo_flush(fifo);
 422              		.loc 1 166 0
 423 00ae 0026     		movs	r6, #0
 424 00b0 E670     		strb	r6, [r4, #3]
 167:../system/src/aprs/afsk.c **** 		}
 425              		.loc 1 167 0
 426 00b2 2846     		mov	r0, r5
 427 00b4 FFF7FEFF 		bl	fifo_flush
 428              	.LVL38:
 429 00b8 F3E7     		b	.L28
 430              	.LVL39:
 431              	.L42:
 179:../system/src/aprs/afsk.c **** 		hdlc->s = false;	//
 432              		.loc 1 179 0
 433 00ba 0023     		movs	r3, #0
 434 00bc C370     		strb	r3, [r0, #3]
 180:../system/src/aprs/afsk.c **** 		return ret;
 435              		.loc 1 180 0
 436 00be 4371     		strb	r3, [r0, #5]
 181:../system/src/aprs/afsk.c **** 	}
 437              		.loc 1 181 0
 438 00c0 0126     		movs	r6, #1
 439 00c2 19E0     		b	.L29
 440              	.LVL40:
 441              	.L33:
 195:../system/src/aprs/afsk.c **** 			{
 442              		.loc 1 195 0
 443 00c4 2846     		mov	r0, r5
 444              	.LVL41:
 445 00c6 FFF7FEFF 		bl	fifo_isfull
 446              	.LVL42:
 447 00ca 20B9     		cbnz	r0, .L35
 197:../system/src/aprs/afsk.c **** 			}
 448              		.loc 1 197 0
 449 00cc 1B21     		movs	r1, #27
 450 00ce 2846     		mov	r0, r5
 451 00d0 FFF7FEFF 		bl	fifo_push
 452              	.LVL43:
 453 00d4 C0E7     		b	.L34
 454              	.L35:
 201:../system/src/aprs/afsk.c **** 				ret = false;
 455              		.loc 1 201 0
 456 00d6 0026     		movs	r6, #0
 457 00d8 E670     		strb	r6, [r4, #3]
 458              	.LVL44:
 203:../system/src/aprs/afsk.c **** 			}
 459              		.loc 1 203 0
 460 00da 2846     		mov	r0, r5
 461 00dc FFF7FEFF 		bl	fifo_flush
 462              	.LVL45:
 463 00e0 BAE7     		b	.L34
 464              	.LVL46:
 465              	.L36:
 213:../system/src/aprs/afsk.c **** 			ret = false;
 466              		.loc 1 213 0
 467 00e2 0026     		movs	r6, #0
 468              	.LVL47:
 469 00e4 E670     		strb	r6, [r4, #3]
 470              	.LVL48:
 215:../system/src/aprs/afsk.c **** 		}
 471              		.loc 1 215 0
 472 00e6 2846     		mov	r0, r5
 473 00e8 FFF7FEFF 		bl	fifo_flush
 474              	.LVL49:
 475 00ec BDE7     		b	.L37
 476              	.LVL50:
 477              	.L32:
 223:../system/src/aprs/afsk.c **** 		/*******************************************/
 224:../system/src/aprs/afsk.c **** 	}
 225:../system/src/aprs/afsk.c **** 	else
 226:../system/src/aprs/afsk.c **** 	{
 227:../system/src/aprs/afsk.c **** 		hdlc->currchar >>= 1;
 478              		.loc 1 227 0
 479 00ee A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 480 00f0 5B08     		lsrs	r3, r3, #1
 481 00f2 A370     		strb	r3, [r4, #2]
 482 00f4 00E0     		b	.L29
 483              	.L39:
 184:../system/src/aprs/afsk.c **** 
 484              		.loc 1 184 0
 485 00f6 0126     		movs	r6, #1
 486              	.LVL51:
 487              	.L29:
 228:../system/src/aprs/afsk.c **** 	}
 229:../system/src/aprs/afsk.c **** 
 230:../system/src/aprs/afsk.c **** 	return ret;
 231:../system/src/aprs/afsk.c **** 
 232:../system/src/aprs/afsk.c **** }
 488              		.loc 1 232 0
 489 00f8 3046     		mov	r0, r6
 490 00fa 70BD     		pop	{r4, r5, r6, pc}
 491              		.cfi_endproc
 492              	.LFE7:
 494              		.section	.text.afsk_demod,"ax",%progbits
 495              		.align	1
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu softvfp
 501              	afsk_demod:
 502              	.LFB8:
 233:../system/src/aprs/afsk.c **** 
 234:../system/src/aprs/afsk.c **** 
 235:../system/src/aprs/afsk.c **** /**************************************************************************************************
 236:../system/src/aprs/afsk.c **** static int afsk_demod(int16_t curr_sample) {
 503              		.loc 1 236 0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
 508              	.LVL52:
 509 0000 F0B4     		push	{r4, r5, r6, r7}
 510              		.cfi_def_cfa_offset 16
 511              		.cfi_offset 4, -16
 512              		.cfi_offset 5, -12
 513              		.cfi_offset 6, -8
 514              		.cfi_offset 7, -4
 515              	.LVL53:
 237:../system/src/aprs/afsk.c **** /**************************************************************************************************
 238:../system/src/aprs/afsk.c **** 
 239:../system/src/aprs/afsk.c **** 	uint8_t i;
 240:../system/src/aprs/afsk.c **** 	int16_t d;
 241:../system/src/aprs/afsk.c **** 	int32_t out_mark_i=0,out_mark_q=0,out_space_i=0,out_space_q=0;
 242:../system/src/aprs/afsk.c **** 
 243:../system/src/aprs/afsk.c **** 	data[ptr]=curr_sample;
 516              		.loc 1 243 0
 517 0002 204A     		ldr	r2, .L47
 518 0004 1678     		ldrb	r6, [r2]	@ zero_extendqisi2
 519 0006 204B     		ldr	r3, .L47+4
 520 0008 23F81600 		strh	r0, [r3, r6, lsl #1]	@ movhi
 244:../system/src/aprs/afsk.c **** 
 245:../system/src/aprs/afsk.c **** 	ptr = (ptr+1)%SAMPLEPERBIT; /* % : Modulo */
 521              		.loc 1 245 0
 522 000c 0136     		adds	r6, r6, #1
 523 000e 7342     		rsbs	r3, r6, #0
 524 0010 06F00706 		and	r6, r6, #7
 525 0014 03F00703 		and	r3, r3, #7
 526 0018 58BF     		it	pl
 527 001a 5E42     		rsbpl	r6, r3, #0
 528 001c F6B2     		uxtb	r6, r6
 529 001e 1670     		strb	r6, [r2]
 530              	.LVL54:
 241:../system/src/aprs/afsk.c **** 
 531              		.loc 1 241 0
 532 0020 0021     		movs	r1, #0
 533 0022 0D46     		mov	r5, r1
 534 0024 0C46     		mov	r4, r1
 535 0026 0846     		mov	r0, r1
 536              	.LVL55:
 246:../system/src/aprs/afsk.c **** 
 247:../system/src/aprs/afsk.c **** 	for(i=0;i<SAMPLEPERBIT;i++)
 537              		.loc 1 247 0
 538 0028 0B46     		mov	r3, r1
 539 002a 1BE0     		b	.L44
 540              	.LVL56:
 541              	.L45:
 248:../system/src/aprs/afsk.c **** 	{
 249:../system/src/aprs/afsk.c **** 
 250:../system/src/aprs/afsk.c **** 		d = data[(ptr+i)%SAMPLEPERBIT];
 542              		.loc 1 250 0 discriminator 3
 543 002c F218     		adds	r2, r6, r3
 544 002e 02F00702 		and	r2, r2, #7
 545 0032 154F     		ldr	r7, .L47+4
 546 0034 37F91220 		ldrsh	r2, [r7, r2, lsl #1]
 547              	.LVL57:
 251:../system/src/aprs/afsk.c **** 		out_mark_i += d*corr_mark_i[i];
 548              		.loc 1 251 0 discriminator 3
 549 0038 144F     		ldr	r7, .L47+8
 550 003a 37F91370 		ldrsh	r7, [r7, r3, lsl #1]
 551 003e 07FB0200 		mla	r0, r7, r2, r0
 552              	.LVL58:
 252:../system/src/aprs/afsk.c **** 		out_mark_q += d*corr_mark_q[i];
 553              		.loc 1 252 0 discriminator 3
 554 0042 134F     		ldr	r7, .L47+12
 555 0044 37F91370 		ldrsh	r7, [r7, r3, lsl #1]
 556 0048 07FB0244 		mla	r4, r7, r2, r4
 557              	.LVL59:
 253:../system/src/aprs/afsk.c **** 		out_space_i += d*corr_space_i[i];
 558              		.loc 1 253 0 discriminator 3
 559 004c 114F     		ldr	r7, .L47+16
 560 004e 37F91370 		ldrsh	r7, [r7, r3, lsl #1]
 561 0052 07FB0255 		mla	r5, r7, r2, r5
 562              	.LVL60:
 254:../system/src/aprs/afsk.c **** 		out_space_q += d*corr_space_q[i];
 563              		.loc 1 254 0 discriminator 3
 564 0056 104F     		ldr	r7, .L47+20
 565 0058 37F91370 		ldrsh	r7, [r7, r3, lsl #1]
 566 005c 07FB0211 		mla	r1, r7, r2, r1
 567              	.LVL61:
 247:../system/src/aprs/afsk.c **** 	{
 568              		.loc 1 247 0 discriminator 3
 569 0060 0133     		adds	r3, r3, #1
 570              	.LVL62:
 571 0062 DBB2     		uxtb	r3, r3
 572              	.LVL63:
 573              	.L44:
 247:../system/src/aprs/afsk.c **** 	{
 574              		.loc 1 247 0 is_stmt 0 discriminator 1
 575 0064 072B     		cmp	r3, #7
 576 0066 E1D9     		bls	.L45
 255:../system/src/aprs/afsk.c **** 	}
 256:../system/src/aprs/afsk.c **** 	
 257:../system/src/aprs/afsk.c **** 	
 258:../system/src/aprs/afsk.c **** 	 
 259:../system/src/aprs/afsk.c **** 	return  (out_space_i>>12)*(out_space_i>>12)+
 577              		.loc 1 259 0 is_stmt 1
 578 0068 2A13     		asrs	r2, r5, #12
 260:../system/src/aprs/afsk.c **** 			(out_space_q>>12)*(out_space_q>>12)-
 579              		.loc 1 260 0
 580 006a 0B13     		asrs	r3, r1, #12
 581              	.LVL64:
 582 006c 03FB03F3 		mul	r3, r3, r3
 259:../system/src/aprs/afsk.c **** 			(out_space_q>>12)*(out_space_q>>12)-
 583              		.loc 1 259 0
 584 0070 02FB0233 		mla	r3, r2, r2, r3
 261:../system/src/aprs/afsk.c **** 			(out_mark_i>>12)*(out_mark_i>>12)-
 585              		.loc 1 261 0
 586 0074 0013     		asrs	r0, r0, #12
 587              	.LVL65:
 260:../system/src/aprs/afsk.c **** 			(out_space_q>>12)*(out_space_q>>12)-
 588              		.loc 1 260 0
 589 0076 00FB1030 		mls	r0, r0, r0, r3
 262:../system/src/aprs/afsk.c **** 			(out_mark_q>>12)*(out_mark_q>>12);			  /// wszedzie bylo 11
 590              		.loc 1 262 0
 591 007a 2413     		asrs	r4, r4, #12
 592              	.LVL66:
 263:../system/src/aprs/afsk.c **** 
 264:../system/src/aprs/afsk.c **** }
 593              		.loc 1 264 0
 594 007c 04FB1400 		mls	r0, r4, r4, r0
 595 0080 F0BC     		pop	{r4, r5, r6, r7}
 596              		.cfi_restore 7
 597              		.cfi_restore 6
 598              		.cfi_restore 5
 599              		.cfi_restore 4
 600              		.cfi_def_cfa_offset 0
 601              	.LVL67:
 602 0082 7047     		bx	lr
 603              	.L48:
 604              		.align	2
 605              	.L47:
 606 0084 00000000 		.word	.LANCHOR1
 607 0088 00000000 		.word	.LANCHOR2
 608 008c 00000000 		.word	.LANCHOR3
 609 0090 00000000 		.word	.LANCHOR4
 610 0094 00000000 		.word	.LANCHOR5
 611 0098 00000000 		.word	.LANCHOR6
 612              		.cfi_endproc
 613              	.LFE8:
 615              		.section	.text.AFSK_ADC_ISR,"ax",%progbits
 616              		.align	1
 617              		.global	AFSK_ADC_ISR
 618              		.syntax unified
 619              		.thumb
 620              		.thumb_func
 621              		.fpu softvfp
 623              	AFSK_ADC_ISR:
 624              	.LFB9:
 265:../system/src/aprs/afsk.c **** 
 266:../system/src/aprs/afsk.c **** 
 267:../system/src/aprs/afsk.c **** /**************************************************************************************************
 268:../system/src/aprs/afsk.c **** void AFSK_ADC_ISR(Afsk *afsk, int16_t curr_sample) {
 625              		.loc 1 268 0
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 0
 628              		@ frame_needed = 0, uses_anonymous_args = 0
 629              	.LVL68:
 630 0000 10B5     		push	{r4, lr}
 631              		.cfi_def_cfa_offset 8
 632              		.cfi_offset 4, -8
 633              		.cfi_offset 14, -4
 634 0002 0446     		mov	r4, r0
 269:../system/src/aprs/afsk.c **** /**************************************************************************************************
 270:../system/src/aprs/afsk.c **** 
 271:../system/src/aprs/afsk.c **** 	uint8_t bits;
 272:../system/src/aprs/afsk.c **** 	afsk->sampled_bits <<= 1;
 635              		.loc 1 272 0
 636 0004 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 637 0006 5B00     		lsls	r3, r3, #1
 638 0008 0373     		strb	r3, [r0, #12]
 273:../system/src/aprs/afsk.c **** 	afsk->sampled_bits |=  (afsk_demod(curr_sample) > 0);
 639              		.loc 1 273 0
 640 000a 0846     		mov	r0, r1
 641              	.LVL69:
 642 000c FFF7FEFF 		bl	afsk_demod
 643              	.LVL70:
 644 0010 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 645 0012 0028     		cmp	r0, #0
 646 0014 D4BF     		ite	le
 647 0016 1846     		movle	r0, r3
 648 0018 43F00100 		orrgt	r0, r3, #1
 649 001c 2073     		strb	r0, [r4, #12]
 274:../system/src/aprs/afsk.c **** 
 275:../system/src/aprs/afsk.c **** 	if (EDGE_FOUND(afsk->sampled_bits))
 650              		.loc 1 275 0
 651 001e 80EA5003 		eor	r3, r0, r0, lsr #1
 652 0022 13F0010F 		tst	r3, #1
 653 0026 05D0     		beq	.L50
 276:../system/src/aprs/afsk.c **** 	{
 277:../system/src/aprs/afsk.c **** 		if (afsk->curr_phase < PHASE_THRES) afsk->curr_phase += PHASE_INC;
 654              		.loc 1 277 0
 655 0028 94F90D30 		ldrsb	r3, [r4, #13]
 656 002c 1F2B     		cmp	r3, #31
 657 002e 33DC     		bgt	.L51
 658              		.loc 1 277 0 is_stmt 0 discriminator 1
 659 0030 0133     		adds	r3, r3, #1
 660 0032 6373     		strb	r3, [r4, #13]
 661              	.L50:
 278:../system/src/aprs/afsk.c **** 		else afsk->curr_phase -= PHASE_INC;
 279:../system/src/aprs/afsk.c **** 	}
 280:../system/src/aprs/afsk.c **** 
 281:../system/src/aprs/afsk.c **** 	afsk->curr_phase += PHASE_BIT;
 662              		.loc 1 281 0 is_stmt 1
 663 0034 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 664 0036 0833     		adds	r3, r3, #8
 665 0038 5BB2     		sxtb	r3, r3
 666 003a 6373     		strb	r3, [r4, #13]
 282:../system/src/aprs/afsk.c **** 
 283:../system/src/aprs/afsk.c **** 	if (afsk->curr_phase >= PHASE_MAX)
 667              		.loc 1 283 0
 668 003c 3F2B     		cmp	r3, #63
 669 003e 2ADD     		ble	.L49
 284:../system/src/aprs/afsk.c **** 	{
 285:../system/src/aprs/afsk.c **** 		afsk->curr_phase %= PHASE_MAX;
 670              		.loc 1 285 0
 671 0040 5A42     		rsbs	r2, r3, #0
 672 0042 03F03F03 		and	r3, r3, #63
 673 0046 02F03F02 		and	r2, r2, #63
 674 004a 58BF     		it	pl
 675 004c 5342     		rsbpl	r3, r2, #0
 676 004e 6373     		strb	r3, [r4, #13]
 286:../system/src/aprs/afsk.c **** 
 287:../system/src/aprs/afsk.c **** 		afsk->found_bits <<= 1;
 677              		.loc 1 287 0
 678 0050 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 679 0052 5B00     		lsls	r3, r3, #1
 680 0054 DBB2     		uxtb	r3, r3
 681 0056 A373     		strb	r3, [r4, #14]
 288:../system/src/aprs/afsk.c **** 
 289:../system/src/aprs/afsk.c **** 		bits = afsk->sampled_bits & 0x07;
 682              		.loc 1 289 0
 683 0058 00F00700 		and	r0, r0, #7
 684              	.LVL71:
 290:../system/src/aprs/afsk.c **** 
 291:../system/src/aprs/afsk.c **** 		if (bits == 0x07 // 111, 3 bits set to 1
 292:../system/src/aprs/afsk.c **** 		 || bits == 0x06 // 110, 2 bits
 293:../system/src/aprs/afsk.c **** 		 || bits == 0x05 // 101, 2 bits
 685              		.loc 1 293 0
 686 005c 421F     		subs	r2, r0, #5
 687 005e D2B2     		uxtb	r2, r2
 291:../system/src/aprs/afsk.c **** 		 || bits == 0x06 // 110, 2 bits
 688              		.loc 1 291 0
 689 0060 022A     		cmp	r2, #2
 690 0062 01D9     		bls	.L53
 294:../system/src/aprs/afsk.c **** 		 || bits == 0x03 // 011, 2 bits
 691              		.loc 1 294 0
 692 0064 0328     		cmp	r0, #3
 693 0066 02D1     		bne	.L54
 694              	.L53:
 295:../system/src/aprs/afsk.c **** 		)
 296:../system/src/aprs/afsk.c **** 
 297:../system/src/aprs/afsk.c **** 		afsk->found_bits |= 1;
 695              		.loc 1 297 0
 696 0068 43F00103 		orr	r3, r3, #1
 697 006c A373     		strb	r3, [r4, #14]
 698              	.L54:
 298:../system/src/aprs/afsk.c **** 		if (!hdlc_parse(&afsk->hdlc, !EDGE_FOUND(afsk->found_bits), &afsk->rx_fifo)) afsk->status |= AFSK
 699              		.loc 1 298 0
 700 006e A17B     		ldrb	r1, [r4, #14]	@ zero_extendqisi2
 701 0070 81EA5101 		eor	r1, r1, r1, lsr #1
 702 0074 81F00101 		eor	r1, r1, #1
 703 0078 04F11002 		add	r2, r4, #16
 704 007c 01F00101 		and	r1, r1, #1
 705 0080 04F58760 		add	r0, r4, #1080
 706              	.LVL72:
 707 0084 FFF7FEFF 		bl	hdlc_parse
 708              	.LVL73:
 709 0088 28B9     		cbnz	r0, .L49
 710              		.loc 1 298 0 is_stmt 0 discriminator 1
 711 008a D4F83434 		ldr	r3, [r4, #1076]
 712 008e 43F00103 		orr	r3, r3, #1
 713 0092 C4F83434 		str	r3, [r4, #1076]
 714              	.L49:
 299:../system/src/aprs/afsk.c **** 
 300:../system/src/aprs/afsk.c **** 	}
 301:../system/src/aprs/afsk.c **** 
 302:../system/src/aprs/afsk.c **** }
 715              		.loc 1 302 0 is_stmt 1
 716 0096 10BD     		pop	{r4, pc}
 717              	.LVL74:
 718              	.L51:
 278:../system/src/aprs/afsk.c **** 	}
 719              		.loc 1 278 0
 720 0098 013B     		subs	r3, r3, #1
 721 009a 6373     		strb	r3, [r4, #13]
 722 009c CAE7     		b	.L50
 723              		.cfi_endproc
 724              	.LFE9:
 726              		.section	.text.afsk_txStart,"ax",%progbits
 727              		.align	1
 728              		.global	afsk_txStart
 729              		.syntax unified
 730              		.thumb
 731              		.thumb_func
 732              		.fpu softvfp
 734              	afsk_txStart:
 735              	.LFB10:
 303:../system/src/aprs/afsk.c **** 
 304:../system/src/aprs/afsk.c **** /**************************************************************************************************
 305:../system/src/aprs/afsk.c **** void afsk_txStart(Afsk *af) {
 736              		.loc 1 305 0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 0
 739              		@ frame_needed = 0, uses_anonymous_args = 0
 740              	.LVL75:
 741 0000 10B5     		push	{r4, lr}
 742              		.cfi_def_cfa_offset 8
 743              		.cfi_offset 4, -8
 744              		.cfi_offset 14, -4
 745 0002 0446     		mov	r4, r0
 306:../system/src/aprs/afsk.c **** /**************************************************************************************************
 307:../system/src/aprs/afsk.c **** 
 308:../system/src/aprs/afsk.c **** 	if (!af->sending)
 746              		.loc 1 308 0
 747 0004 90F83034 		ldrb	r3, [r0, #1072]	@ zero_extendqisi2
 748 0008 1BB1     		cbz	r3, .L59
 749              	.LVL76:
 750              	.L57:
 309:../system/src/aprs/afsk.c **** 	{
 310:../system/src/aprs/afsk.c **** 		tx10m++;
 311:../system/src/aprs/afsk.c **** 		
 312:../system/src/aprs/afsk.c **** 		af->phase_inc = MARK_INC;
 313:../system/src/aprs/afsk.c **** 		af->phase_acc = 0;
 314:../system/src/aprs/afsk.c **** 		af->stuff_cnt = 0;
 315:../system/src/aprs/afsk.c **** 		af->sending = true;
 316:../system/src/aprs/afsk.c **** 		af->preamble_len = DIV_ROUND(CONFIG_AFSK_PREAMBLE_LEN * BITRATE, 8000);
 317:../system/src/aprs/afsk.c **** 		DA_Start();
 318:../system/src/aprs/afsk.c **** 	}
 319:../system/src/aprs/afsk.c **** //	ATOMIC(af->trailer_len  = DIV_ROUND(CONFIG_AFSK_TRAILER_LEN  * BITRATE, 8000));
 320:../system/src/aprs/afsk.c **** 	af->trailer_len  = DIV_ROUND(CONFIG_AFSK_TRAILER_LEN  * BITRATE, 8000);
 751              		.loc 1 320 0
 752 000a 0823     		movs	r3, #8
 753 000c A4F84234 		strh	r3, [r4, #1090]	@ movhi
 321:../system/src/aprs/afsk.c **** 
 322:../system/src/aprs/afsk.c **** }
 754              		.loc 1 322 0
 755 0010 10BD     		pop	{r4, pc}
 756              	.LVL77:
 757              	.L59:
 310:../system/src/aprs/afsk.c **** 		
 758              		.loc 1 310 0
 759 0012 094A     		ldr	r2, .L60
 760 0014 1388     		ldrh	r3, [r2]
 761 0016 0133     		adds	r3, r3, #1
 762 0018 1380     		strh	r3, [r2]	@ movhi
 312:../system/src/aprs/afsk.c **** 		af->phase_acc = 0;
 763              		.loc 1 312 0
 764 001a 4023     		movs	r3, #64
 765 001c 4381     		strh	r3, [r0, #10]	@ movhi
 313:../system/src/aprs/afsk.c **** 		af->stuff_cnt = 0;
 766              		.loc 1 313 0
 767 001e 0023     		movs	r3, #0
 768 0020 0381     		strh	r3, [r0, #8]	@ movhi
 314:../system/src/aprs/afsk.c **** 		af->sending = true;
 769              		.loc 1 314 0
 770 0022 8371     		strb	r3, [r0, #6]
 315:../system/src/aprs/afsk.c **** 		af->preamble_len = DIV_ROUND(CONFIG_AFSK_PREAMBLE_LEN * BITRATE, 8000);
 771              		.loc 1 315 0
 772 0024 0123     		movs	r3, #1
 773 0026 80F83034 		strb	r3, [r0, #1072]
 316:../system/src/aprs/afsk.c **** 		DA_Start();
 774              		.loc 1 316 0
 775 002a 3C23     		movs	r3, #60
 776 002c A0F84034 		strh	r3, [r0, #1088]	@ movhi
 317:../system/src/aprs/afsk.c **** 	}
 777              		.loc 1 317 0
 778 0030 FFF7FEFF 		bl	DA_Start
 779              	.LVL78:
 780 0034 E9E7     		b	.L57
 781              	.L61:
 782 0036 00BF     		.align	2
 783              	.L60:
 784 0038 00000000 		.word	tx10m
 785              		.cfi_endproc
 786              	.LFE10:
 788              		.section	.text.AFSK_DAC_ISR,"ax",%progbits
 789              		.align	1
 790              		.global	AFSK_DAC_ISR
 791              		.syntax unified
 792              		.thumb
 793              		.thumb_func
 794              		.fpu softvfp
 796              	AFSK_DAC_ISR:
 797              	.LFB11:
 323:../system/src/aprs/afsk.c **** 
 324:../system/src/aprs/afsk.c **** /**************************************************************************************************
 325:../system/src/aprs/afsk.c **** uint8_t AFSK_DAC_ISR(Afsk *afsk) {
 798              		.loc 1 325 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 0
 801              		@ frame_needed = 0, uses_anonymous_args = 0
 802              	.LVL79:
 803 0000 70B5     		push	{r4, r5, r6, lr}
 804              		.cfi_def_cfa_offset 16
 805              		.cfi_offset 4, -16
 806              		.cfi_offset 5, -12
 807              		.cfi_offset 6, -8
 808              		.cfi_offset 14, -4
 809 0002 0446     		mov	r4, r0
 326:../system/src/aprs/afsk.c **** /**************************************************************************************************
 327:../system/src/aprs/afsk.c **** 
 328:../system/src/aprs/afsk.c **** 
 329:../system/src/aprs/afsk.c **** 	if (afsk->sample_count == 0)
 810              		.loc 1 329 0
 811 0004 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 812 0006 002B     		cmp	r3, #0
 813 0008 66D1     		bne	.L63
 330:../system/src/aprs/afsk.c **** 	{
 331:../system/src/aprs/afsk.c **** 		if (afsk->tx_bit == 0)
 814              		.loc 1 331 0
 815 000a 0579     		ldrb	r5, [r0, #4]	@ zero_extendqisi2
 816 000c 6DB1     		cbz	r5, .L83
 817              	.LVL80:
 818              	.L64:
 332:../system/src/aprs/afsk.c **** 		{
 333:../system/src/aprs/afsk.c **** 			if (fifo_isempty(&afsk->tx_fifo) && afsk->trailer_len == 0)
 334:../system/src/aprs/afsk.c **** 			{
 335:../system/src/aprs/afsk.c **** 				DA_Stop();
 336:../system/src/aprs/afsk.c **** 				afsk->sending = false;
 337:../system/src/aprs/afsk.c **** 				return 0;
 338:../system/src/aprs/afsk.c **** 			}
 339:../system/src/aprs/afsk.c **** 			else
 340:../system/src/aprs/afsk.c **** 			{
 341:../system/src/aprs/afsk.c **** 				if (!afsk->bit_stuff) afsk->stuff_cnt = 0;
 342:../system/src/aprs/afsk.c **** 
 343:../system/src/aprs/afsk.c **** 				afsk->bit_stuff = true;
 344:../system/src/aprs/afsk.c **** 
 345:../system/src/aprs/afsk.c **** 				if (afsk->preamble_len == 0)
 346:../system/src/aprs/afsk.c **** 				{
 347:../system/src/aprs/afsk.c **** 
 348:../system/src/aprs/afsk.c **** 					if (fifo_isempty(&afsk->tx_fifo))
 349:../system/src/aprs/afsk.c **** 					{
 350:../system/src/aprs/afsk.c **** 						afsk->trailer_len--;
 351:../system/src/aprs/afsk.c **** 						afsk->curr_out = HDLC_FLAG;
 352:../system/src/aprs/afsk.c **** 					}
 353:../system/src/aprs/afsk.c **** 					else
 354:../system/src/aprs/afsk.c **** 					{
 355:../system/src/aprs/afsk.c **** 						afsk->curr_out = fifo_pop(&afsk->tx_fifo);
 356:../system/src/aprs/afsk.c **** 					}
 357:../system/src/aprs/afsk.c **** 				}
 358:../system/src/aprs/afsk.c **** 				else
 359:../system/src/aprs/afsk.c **** 				{
 360:../system/src/aprs/afsk.c **** 					afsk->preamble_len--;
 361:../system/src/aprs/afsk.c **** 					afsk->curr_out = HDLC_FLAG;
 362:../system/src/aprs/afsk.c **** 				}
 363:../system/src/aprs/afsk.c **** 
 364:../system/src/aprs/afsk.c **** 				if (afsk->curr_out == AX25_ESC)
 365:../system/src/aprs/afsk.c **** 				{
 366:../system/src/aprs/afsk.c **** 					if (fifo_isempty(&afsk->tx_fifo))
 367:../system/src/aprs/afsk.c **** 					{
 368:../system/src/aprs/afsk.c **** 						DA_Stop();
 369:../system/src/aprs/afsk.c **** 						afsk->sending = false;
 370:../system/src/aprs/afsk.c **** 						return 0;
 371:../system/src/aprs/afsk.c **** 					}
 372:../system/src/aprs/afsk.c **** 					else
 373:../system/src/aprs/afsk.c **** 					{
 374:../system/src/aprs/afsk.c **** 						afsk->curr_out = fifo_pop(&afsk->tx_fifo);
 375:../system/src/aprs/afsk.c **** 					}
 376:../system/src/aprs/afsk.c **** 				}
 377:../system/src/aprs/afsk.c **** 				else
 378:../system/src/aprs/afsk.c **** 				{
 379:../system/src/aprs/afsk.c **** 					if (afsk->curr_out == HDLC_FLAG || afsk->curr_out == HDLC_RESET)
 380:../system/src/aprs/afsk.c **** 					{
 381:../system/src/aprs/afsk.c **** 						afsk->bit_stuff = false;
 382:../system/src/aprs/afsk.c **** 					}
 383:../system/src/aprs/afsk.c **** 				}
 384:../system/src/aprs/afsk.c **** 			}
 385:../system/src/aprs/afsk.c **** 
 386:../system/src/aprs/afsk.c **** 			afsk->tx_bit = 0x01;
 387:../system/src/aprs/afsk.c **** 		}
 388:../system/src/aprs/afsk.c **** 
 389:../system/src/aprs/afsk.c **** 		if (afsk->bit_stuff && afsk->stuff_cnt >= BIT_STUFF_LEN)
 819              		.loc 1 389 0
 820 000e 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 821 0010 002B     		cmp	r3, #0
 822 0012 55D0     		beq	.L74
 823              		.loc 1 389 0 is_stmt 0 discriminator 1
 824 0014 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 825 0016 042B     		cmp	r3, #4
 826 0018 52D9     		bls	.L74
 390:../system/src/aprs/afsk.c **** 		{
 391:../system/src/aprs/afsk.c **** 			afsk->stuff_cnt = 0;
 827              		.loc 1 391 0 is_stmt 1
 828 001a 0023     		movs	r3, #0
 829 001c A371     		strb	r3, [r4, #6]
 392:../system/src/aprs/afsk.c **** 			afsk->phase_inc = SWITCH_TONE(afsk->phase_inc);
 830              		.loc 1 392 0
 831 001e 6389     		ldrh	r3, [r4, #10]
 832 0020 402B     		cmp	r3, #64
 833 0022 4BD0     		beq	.L84
 834 0024 4023     		movs	r3, #64
 835              	.L75:
 836              		.loc 1 392 0 is_stmt 0 discriminator 4
 837 0026 6381     		strh	r3, [r4, #10]	@ movhi
 838 0028 54E0     		b	.L76
 839              	.LVL81:
 840              	.L83:
 333:../system/src/aprs/afsk.c **** 			{
 841              		.loc 1 333 0 is_stmt 1
 842 002a 00F50876 		add	r6, r0, #544
 843 002e 3046     		mov	r0, r6
 844              	.LVL82:
 845 0030 FFF7FEFF 		bl	fifo_isempty
 846              	.LVL83:
 847 0034 10B1     		cbz	r0, .L65
 333:../system/src/aprs/afsk.c **** 			{
 848              		.loc 1 333 0 is_stmt 0 discriminator 1
 849 0036 B4F84234 		ldrh	r3, [r4, #1090]
 850 003a B3B1     		cbz	r3, .L85
 851              	.L65:
 341:../system/src/aprs/afsk.c **** 
 852              		.loc 1 341 0 is_stmt 1
 853 003c 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 854 003e 03B9     		cbnz	r3, .L67
 341:../system/src/aprs/afsk.c **** 
 855              		.loc 1 341 0 is_stmt 0 discriminator 1
 856 0040 A371     		strb	r3, [r4, #6]
 857              	.L67:
 343:../system/src/aprs/afsk.c **** 
 858              		.loc 1 343 0 is_stmt 1
 859 0042 0123     		movs	r3, #1
 860 0044 6371     		strb	r3, [r4, #5]
 345:../system/src/aprs/afsk.c **** 				{
 861              		.loc 1 345 0
 862 0046 B4F84034 		ldrh	r3, [r4, #1088]
 863 004a A3B1     		cbz	r3, .L86
 360:../system/src/aprs/afsk.c **** 					afsk->curr_out = HDLC_FLAG;
 864              		.loc 1 360 0
 865 004c 013B     		subs	r3, r3, #1
 866 004e A4F84034 		strh	r3, [r4, #1088]	@ movhi
 361:../system/src/aprs/afsk.c **** 				}
 867              		.loc 1 361 0
 868 0052 7E23     		movs	r3, #126
 869 0054 E370     		strb	r3, [r4, #3]
 870              	.L70:
 364:../system/src/aprs/afsk.c **** 				{
 871              		.loc 1 364 0
 872 0056 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 873 0058 1B2B     		cmp	r3, #27
 874 005a 1DD0     		beq	.L87
 379:../system/src/aprs/afsk.c **** 					{
 875              		.loc 1 379 0
 876 005c 7E3B     		subs	r3, r3, #126
 877 005e DBB2     		uxtb	r3, r3
 878 0060 012B     		cmp	r3, #1
 879 0062 28D9     		bls	.L88
 880              	.L73:
 386:../system/src/aprs/afsk.c **** 		}
 881              		.loc 1 386 0
 882 0064 0123     		movs	r3, #1
 883 0066 2371     		strb	r3, [r4, #4]
 884 0068 D1E7     		b	.L64
 885              	.L85:
 335:../system/src/aprs/afsk.c **** 				afsk->sending = false;
 886              		.loc 1 335 0
 887 006a FFF7FEFF 		bl	DA_Stop
 888              	.LVL84:
 336:../system/src/aprs/afsk.c **** 				return 0;
 889              		.loc 1 336 0
 890 006e 0023     		movs	r3, #0
 891 0070 84F83034 		strb	r3, [r4, #1072]
 337:../system/src/aprs/afsk.c **** 			}
 892              		.loc 1 337 0
 893 0074 3CE0     		b	.L66
 894              	.L86:
 348:../system/src/aprs/afsk.c **** 					{
 895              		.loc 1 348 0
 896 0076 3046     		mov	r0, r6
 897 0078 FFF7FEFF 		bl	fifo_isempty
 898              	.LVL85:
 899 007c 38B1     		cbz	r0, .L69
 350:../system/src/aprs/afsk.c **** 						afsk->curr_out = HDLC_FLAG;
 900              		.loc 1 350 0
 901 007e B4F84234 		ldrh	r3, [r4, #1090]
 902 0082 013B     		subs	r3, r3, #1
 903 0084 A4F84234 		strh	r3, [r4, #1090]	@ movhi
 351:../system/src/aprs/afsk.c **** 					}
 904              		.loc 1 351 0
 905 0088 7E23     		movs	r3, #126
 906 008a E370     		strb	r3, [r4, #3]
 907 008c E3E7     		b	.L70
 908              	.L69:
 355:../system/src/aprs/afsk.c **** 					}
 909              		.loc 1 355 0
 910 008e 3046     		mov	r0, r6
 911 0090 FFF7FEFF 		bl	fifo_pop
 912              	.LVL86:
 913 0094 E070     		strb	r0, [r4, #3]
 914 0096 DEE7     		b	.L70
 915              	.L87:
 366:../system/src/aprs/afsk.c **** 					{
 916              		.loc 1 366 0
 917 0098 3046     		mov	r0, r6
 918 009a FFF7FEFF 		bl	fifo_isempty
 919              	.LVL87:
 920 009e 20B9     		cbnz	r0, .L89
 374:../system/src/aprs/afsk.c **** 					}
 921              		.loc 1 374 0
 922 00a0 3046     		mov	r0, r6
 923 00a2 FFF7FEFF 		bl	fifo_pop
 924              	.LVL88:
 925 00a6 E070     		strb	r0, [r4, #3]
 926 00a8 DCE7     		b	.L73
 927              	.L89:
 368:../system/src/aprs/afsk.c **** 						afsk->sending = false;
 928              		.loc 1 368 0
 929 00aa FFF7FEFF 		bl	DA_Stop
 930              	.LVL89:
 369:../system/src/aprs/afsk.c **** 						return 0;
 931              		.loc 1 369 0
 932 00ae 0023     		movs	r3, #0
 933 00b0 84F83034 		strb	r3, [r4, #1072]
 370:../system/src/aprs/afsk.c **** 					}
 934              		.loc 1 370 0
 935 00b4 1CE0     		b	.L66
 936              	.L88:
 381:../system/src/aprs/afsk.c **** 					}
 937              		.loc 1 381 0
 938 00b6 0023     		movs	r3, #0
 939 00b8 6371     		strb	r3, [r4, #5]
 940 00ba D3E7     		b	.L73
 941              	.L84:
 942              		.loc 1 392 0
 943 00bc 7523     		movs	r3, #117
 944 00be B2E7     		b	.L75
 945              	.L74:
 393:../system/src/aprs/afsk.c **** 		}
 394:../system/src/aprs/afsk.c **** 		else
 395:../system/src/aprs/afsk.c **** 		{
 396:../system/src/aprs/afsk.c **** 			if (afsk->curr_out & afsk->tx_bit)
 946              		.loc 1 396 0
 947 00c0 E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 948 00c2 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 949 00c4 1A42     		tst	r2, r3
 950 00c6 15D0     		beq	.L77
 397:../system/src/aprs/afsk.c **** 			{
 398:../system/src/aprs/afsk.c **** 				afsk->stuff_cnt++;
 951              		.loc 1 398 0
 952 00c8 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 953 00ca 0133     		adds	r3, r3, #1
 954 00cc A371     		strb	r3, [r4, #6]
 955              	.L78:
 399:../system/src/aprs/afsk.c **** 			}
 400:../system/src/aprs/afsk.c **** 			else
 401:../system/src/aprs/afsk.c **** 			{
 402:../system/src/aprs/afsk.c **** 				afsk->stuff_cnt = 0;
 403:../system/src/aprs/afsk.c **** 				afsk->phase_inc = SWITCH_TONE(afsk->phase_inc);
 404:../system/src/aprs/afsk.c **** 			}
 405:../system/src/aprs/afsk.c **** 
 406:../system/src/aprs/afsk.c **** 			afsk->tx_bit <<= 1;
 956              		.loc 1 406 0
 957 00ce 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 958 00d0 5B00     		lsls	r3, r3, #1
 959 00d2 2371     		strb	r3, [r4, #4]
 960              	.L76:
 407:../system/src/aprs/afsk.c **** 		}
 408:../system/src/aprs/afsk.c **** 
 409:../system/src/aprs/afsk.c **** 		afsk->sample_count = SAMPLEPERBIT;
 961              		.loc 1 409 0
 962 00d4 0823     		movs	r3, #8
 963 00d6 A370     		strb	r3, [r4, #2]
 964              	.L63:
 410:../system/src/aprs/afsk.c **** 	}
 411:../system/src/aprs/afsk.c **** 
 412:../system/src/aprs/afsk.c **** 	afsk->phase_acc += afsk->phase_inc;
 965              		.loc 1 412 0
 966 00d8 6089     		ldrh	r0, [r4, #10]
 967 00da 2389     		ldrh	r3, [r4, #8]
 968 00dc 1844     		add	r0, r0, r3
 413:../system/src/aprs/afsk.c **** 	afsk->phase_acc %= SIN_LEN;
 969              		.loc 1 413 0
 970 00de C0F30800 		ubfx	r0, r0, #0, #9
 971 00e2 2081     		strh	r0, [r4, #8]	@ movhi
 414:../system/src/aprs/afsk.c **** 
 415:../system/src/aprs/afsk.c **** 	afsk->sample_count--;
 972              		.loc 1 415 0
 973 00e4 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 974 00e6 013B     		subs	r3, r3, #1
 975 00e8 A370     		strb	r3, [r4, #2]
 416:../system/src/aprs/afsk.c **** 
 417:../system/src/aprs/afsk.c **** 	return sin_sample(afsk->phase_acc);
 976              		.loc 1 417 0
 977 00ea FFF7FEFF 		bl	sin_sample
 978              	.LVL90:
 979 00ee 0546     		mov	r5, r0
 980              	.L66:
 418:../system/src/aprs/afsk.c **** 
 419:../system/src/aprs/afsk.c **** }
 981              		.loc 1 419 0
 982 00f0 2846     		mov	r0, r5
 983 00f2 70BD     		pop	{r4, r5, r6, pc}
 984              	.LVL91:
 985              	.L77:
 402:../system/src/aprs/afsk.c **** 				afsk->phase_inc = SWITCH_TONE(afsk->phase_inc);
 986              		.loc 1 402 0
 987 00f4 0023     		movs	r3, #0
 988 00f6 A371     		strb	r3, [r4, #6]
 403:../system/src/aprs/afsk.c **** 			}
 989              		.loc 1 403 0
 990 00f8 6389     		ldrh	r3, [r4, #10]
 991 00fa 402B     		cmp	r3, #64
 992 00fc 02D0     		beq	.L90
 993 00fe 4023     		movs	r3, #64
 994              	.L79:
 403:../system/src/aprs/afsk.c **** 			}
 995              		.loc 1 403 0 is_stmt 0 discriminator 4
 996 0100 6381     		strh	r3, [r4, #10]	@ movhi
 997 0102 E4E7     		b	.L78
 998              	.L90:
 403:../system/src/aprs/afsk.c **** 			}
 999              		.loc 1 403 0
 1000 0104 7523     		movs	r3, #117
 1001 0106 FBE7     		b	.L79
 1002              		.cfi_endproc
 1003              	.LFE11:
 1005              		.global	__aeabi_i2d
 1006              		.global	__aeabi_dmul
 1007              		.global	__aeabi_ddiv
 1008              		.global	__aeabi_d2iz
 1009              		.section	.text.AFSK_Init,"ax",%progbits
 1010              		.align	1
 1011              		.global	AFSK_Init
 1012              		.syntax unified
 1013              		.thumb
 1014              		.thumb_func
 1015              		.fpu softvfp
 1017              	AFSK_Init:
 1018              	.LFB12:
 420:../system/src/aprs/afsk.c **** 
 421:../system/src/aprs/afsk.c **** 
 422:../system/src/aprs/afsk.c **** /**************************************************************************************************
 423:../system/src/aprs/afsk.c **** void AFSK_Init(Afsk *afsk) {
 1019              		.loc 1 423 0 is_stmt 1
 1020              		.cfi_startproc
 1021              		@ args = 0, pretend = 0, frame = 0
 1022              		@ frame_needed = 0, uses_anonymous_args = 0
 1023              	.LVL92:
 1024 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1025              		.cfi_def_cfa_offset 32
 1026              		.cfi_offset 3, -32
 1027              		.cfi_offset 4, -28
 1028              		.cfi_offset 5, -24
 1029              		.cfi_offset 6, -20
 1030              		.cfi_offset 7, -16
 1031              		.cfi_offset 8, -12
 1032              		.cfi_offset 9, -8
 1033              		.cfi_offset 14, -4
 1034 0004 0546     		mov	r5, r0
 424:../system/src/aprs/afsk.c **** /**************************************************************************************************
 425:../system/src/aprs/afsk.c **** 
 426:../system/src/aprs/afsk.c **** 
 427:../system/src/aprs/afsk.c **** 	uint8_t i;
 428:../system/src/aprs/afsk.c **** 
 429:../system/src/aprs/afsk.c **** 	memset(afsk, 0, sizeof(*afsk));
 1035              		.loc 1 429 0
 1036 0006 40F24442 		movw	r2, #1092
 1037 000a 0021     		movs	r1, #0
 1038 000c FFF7FEFF 		bl	memset
 1039              	.LVL93:
 430:../system/src/aprs/afsk.c **** 
 431:../system/src/aprs/afsk.c **** 	fifo_init(&afsk->rx_fifo, afsk->rx_buf, sizeof(afsk->rx_buf));
 1040              		.loc 1 431 0
 1041 0010 4FF40072 		mov	r2, #512
 1042 0014 05F12001 		add	r1, r5, #32
 1043 0018 05F11000 		add	r0, r5, #16
 1044 001c FFF7FEFF 		bl	fifo_init
 1045              	.LVL94:
 432:../system/src/aprs/afsk.c **** 	fifo_init(&afsk->tx_fifo, afsk->tx_buf, sizeof(afsk->tx_buf));
 1046              		.loc 1 432 0
 1047 0020 4FF40072 		mov	r2, #512
 1048 0024 05F50C71 		add	r1, r5, #560
 1049 0028 05F50870 		add	r0, r5, #544
 1050 002c FFF7FEFF 		bl	fifo_init
 1051              	.LVL95:
 433:../system/src/aprs/afsk.c **** 
 434:../system/src/aprs/afsk.c **** 	for (i=0;i<SAMPLEPERBIT;i++)
 1052              		.loc 1 434 0
 1053 0030 0024     		movs	r4, #0
 1054 0032 5BE0     		b	.L92
 1055              	.LVL96:
 1056              	.L93:
 435:../system/src/aprs/afsk.c **** 	{
 436:../system/src/aprs/afsk.c **** 		corr_mark_i[i] = 4095*cos(2*M_PI*i/SAMPLEPERBIT*FREQ_MARK/BITRATE);
 1057              		.loc 1 436 0 discriminator 3
 1058 0034 2046     		mov	r0, r4
 1059 0036 FFF7FEFF 		bl	__aeabi_i2d
 1060              	.LVL97:
 1061 003a 2FA3     		adr	r3, .L95
 1062 003c D3E90023 		ldrd	r2, [r3]
 1063 0040 FFF7FEFF 		bl	__aeabi_dmul
 1064              	.LVL98:
 1065 0044 0022     		movs	r2, #0
 1066 0046 4FF07F53 		mov	r3, #1069547520
 1067 004a FFF7FEFF 		bl	__aeabi_dmul
 1068              	.LVL99:
 1069 004e 0646     		mov	r6, r0
 1070 0050 0F46     		mov	r7, r1
 1071 0052 0022     		movs	r2, #0
 1072 0054 2E4B     		ldr	r3, .L95+24
 1073 0056 FFF7FEFF 		bl	__aeabi_dmul
 1074              	.LVL100:
 1075 005a 0022     		movs	r2, #0
 1076 005c 2C4B     		ldr	r3, .L95+24
 1077 005e FFF7FEFF 		bl	__aeabi_ddiv
 1078              	.LVL101:
 1079 0062 8046     		mov	r8, r0
 1080 0064 8946     		mov	r9, r1
 1081 0066 FFF7FEFF 		bl	cos
 1082              	.LVL102:
 1083 006a 25A3     		adr	r3, .L95+8
 1084 006c D3E90023 		ldrd	r2, [r3]
 1085 0070 FFF7FEFF 		bl	__aeabi_dmul
 1086              	.LVL103:
 1087 0074 FFF7FEFF 		bl	__aeabi_d2iz
 1088              	.LVL104:
 1089 0078 264B     		ldr	r3, .L95+28
 1090 007a 23F81400 		strh	r0, [r3, r4, lsl #1]	@ movhi
 437:../system/src/aprs/afsk.c **** 		corr_mark_q[i] = 4095*sin(2*M_PI*i/SAMPLEPERBIT*FREQ_MARK/BITRATE);
 1091              		.loc 1 437 0 discriminator 3
 1092 007e 4046     		mov	r0, r8
 1093 0080 4946     		mov	r1, r9
 1094 0082 FFF7FEFF 		bl	sin
 1095              	.LVL105:
 1096 0086 1EA3     		adr	r3, .L95+8
 1097 0088 D3E90023 		ldrd	r2, [r3]
 1098 008c FFF7FEFF 		bl	__aeabi_dmul
 1099              	.LVL106:
 1100 0090 FFF7FEFF 		bl	__aeabi_d2iz
 1101              	.LVL107:
 1102 0094 204B     		ldr	r3, .L95+32
 1103 0096 23F81400 		strh	r0, [r3, r4, lsl #1]	@ movhi
 438:../system/src/aprs/afsk.c **** 		corr_space_i[i] = 4095*cos(2*M_PI*i/SAMPLEPERBIT*FREQ_SPACE/BITRATE);
 1104              		.loc 1 438 0 discriminator 3
 1105 009a 1BA3     		adr	r3, .L95+16
 1106 009c D3E90023 		ldrd	r2, [r3]
 1107 00a0 3046     		mov	r0, r6
 1108 00a2 3946     		mov	r1, r7
 1109 00a4 FFF7FEFF 		bl	__aeabi_dmul
 1110              	.LVL108:
 1111 00a8 0022     		movs	r2, #0
 1112 00aa 194B     		ldr	r3, .L95+24
 1113 00ac FFF7FEFF 		bl	__aeabi_ddiv
 1114              	.LVL109:
 1115 00b0 0646     		mov	r6, r0
 1116 00b2 0F46     		mov	r7, r1
 1117 00b4 FFF7FEFF 		bl	cos
 1118              	.LVL110:
 1119 00b8 11A3     		adr	r3, .L95+8
 1120 00ba D3E90023 		ldrd	r2, [r3]
 1121 00be FFF7FEFF 		bl	__aeabi_dmul
 1122              	.LVL111:
 1123 00c2 FFF7FEFF 		bl	__aeabi_d2iz
 1124              	.LVL112:
 1125 00c6 154B     		ldr	r3, .L95+36
 1126 00c8 23F81400 		strh	r0, [r3, r4, lsl #1]	@ movhi
 439:../system/src/aprs/afsk.c **** 		corr_space_q[i] = 4095*sin(2*M_PI*i/SAMPLEPERBIT*FREQ_SPACE/BITRATE);		 /// 2047 wszedzie bylo
 1127              		.loc 1 439 0 discriminator 3
 1128 00cc 3046     		mov	r0, r6
 1129 00ce 3946     		mov	r1, r7
 1130 00d0 FFF7FEFF 		bl	sin
 1131              	.LVL113:
 1132 00d4 0AA3     		adr	r3, .L95+8
 1133 00d6 D3E90023 		ldrd	r2, [r3]
 1134 00da FFF7FEFF 		bl	__aeabi_dmul
 1135              	.LVL114:
 1136 00de FFF7FEFF 		bl	__aeabi_d2iz
 1137              	.LVL115:
 1138 00e2 0F4B     		ldr	r3, .L95+40
 1139 00e4 23F81400 		strh	r0, [r3, r4, lsl #1]	@ movhi
 434:../system/src/aprs/afsk.c **** 	{
 1140              		.loc 1 434 0 discriminator 3
 1141 00e8 0134     		adds	r4, r4, #1
 1142              	.LVL116:
 1143 00ea E4B2     		uxtb	r4, r4
 1144              	.LVL117:
 1145              	.L92:
 434:../system/src/aprs/afsk.c **** 	{
 1146              		.loc 1 434 0 is_stmt 0 discriminator 1
 1147 00ec 072C     		cmp	r4, #7
 1148 00ee A1D9     		bls	.L93
 440:../system/src/aprs/afsk.c **** 	}
 441:../system/src/aprs/afsk.c **** 
 442:../system/src/aprs/afsk.c **** 	afsk->phase_inc = MARK_INC;
 1149              		.loc 1 442 0 is_stmt 1
 1150 00f0 4023     		movs	r3, #64
 1151 00f2 6B81     		strh	r3, [r5, #10]	@ movhi
 443:../system/src/aprs/afsk.c **** 
 444:../system/src/aprs/afsk.c **** }
 1152              		.loc 1 444 0
 1153 00f4 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1154              	.LVL118:
 1155              	.L96:
 1156              		.align	3
 1157              	.L95:
 1158 00f8 6F1283C0 		.word	3229815407
 1159 00fc CA211940 		.word	1075388874
 1160 0100 00000000 		.word	0
 1161 0104 00FEAF40 		.word	1085275648
 1162 0108 00000000 		.word	0
 1163 010c 0030A140 		.word	1084305408
 1164 0110 00C09240 		.word	1083359232
 1165 0114 00000000 		.word	.LANCHOR3
 1166 0118 00000000 		.word	.LANCHOR4
 1167 011c 00000000 		.word	.LANCHOR5
 1168 0120 00000000 		.word	.LANCHOR6
 1169              		.cfi_endproc
 1170              	.LFE12:
 1172              		.comm	DrawCounter,1,1
 1173              		.comm	PersistRand,1,1
 1174              		.section	.bss.corr_mark_i,"aw",%nobits
 1175              		.align	2
 1176              		.set	.LANCHOR3,. + 0
 1179              	corr_mark_i:
 1180 0000 00000000 		.space	16
 1180      00000000 
 1180      00000000 
 1180      00000000 
 1181              		.section	.bss.corr_mark_q,"aw",%nobits
 1182              		.align	2
 1183              		.set	.LANCHOR4,. + 0
 1186              	corr_mark_q:
 1187 0000 00000000 		.space	16
 1187      00000000 
 1187      00000000 
 1187      00000000 
 1188              		.section	.bss.corr_space_i,"aw",%nobits
 1189              		.align	2
 1190              		.set	.LANCHOR5,. + 0
 1193              	corr_space_i:
 1194 0000 00000000 		.space	16
 1194      00000000 
 1194      00000000 
 1194      00000000 
 1195              		.section	.bss.corr_space_q,"aw",%nobits
 1196              		.align	2
 1197              		.set	.LANCHOR6,. + 0
 1200              	corr_space_q:
 1201 0000 00000000 		.space	16
 1201      00000000 
 1201      00000000 
 1201      00000000 
 1202              		.section	.bss.data,"aw",%nobits
 1203              		.align	2
 1204              		.set	.LANCHOR2,. + 0
 1207              	data:
 1208 0000 00000000 		.space	16
 1208      00000000 
 1208      00000000 
 1208      00000000 
 1209              		.section	.bss.ptr,"aw",%nobits
 1210              		.set	.LANCHOR1,. + 0
 1213              	ptr:
 1214 0000 00       		.space	1
 1215              		.section	.rodata.sin_table,"a",%progbits
 1216              		.align	2
 1217              		.set	.LANCHOR0,. + 0
 1220              	sin_table:
 1221 0000 80       		.byte	-128
 1222 0001 81       		.byte	-127
 1223 0002 83       		.byte	-125
 1224 0003 84       		.byte	-124
 1225 0004 86       		.byte	-122
 1226 0005 87       		.byte	-121
 1227 0006 89       		.byte	-119
 1228 0007 8A       		.byte	-118
 1229 0008 8C       		.byte	-116
 1230 0009 8E       		.byte	-114
 1231 000a 8F       		.byte	-113
 1232 000b 91       		.byte	-111
 1233 000c 92       		.byte	-110
 1234 000d 94       		.byte	-108
 1235 000e 95       		.byte	-107
 1236 000f 97       		.byte	-105
 1237 0010 98       		.byte	-104
 1238 0011 9A       		.byte	-102
 1239 0012 9B       		.byte	-101
 1240 0013 9D       		.byte	-99
 1241 0014 9E       		.byte	-98
 1242 0015 A0       		.byte	-96
 1243 0016 A2       		.byte	-94
 1244 0017 A3       		.byte	-93
 1245 0018 A5       		.byte	-91
 1246 0019 A6       		.byte	-90
 1247 001a A7       		.byte	-89
 1248 001b A9       		.byte	-87
 1249 001c AA       		.byte	-86
 1250 001d AC       		.byte	-84
 1251 001e AD       		.byte	-83
 1252 001f AF       		.byte	-81
 1253 0020 B0       		.byte	-80
 1254 0021 B2       		.byte	-78
 1255 0022 B3       		.byte	-77
 1256 0023 B5       		.byte	-75
 1257 0024 B6       		.byte	-74
 1258 0025 B7       		.byte	-73
 1259 0026 B9       		.byte	-71
 1260 0027 BA       		.byte	-70
 1261 0028 BC       		.byte	-68
 1262 0029 BD       		.byte	-67
 1263 002a BE       		.byte	-66
 1264 002b C0       		.byte	-64
 1265 002c C1       		.byte	-63
 1266 002d C2       		.byte	-62
 1267 002e C4       		.byte	-60
 1268 002f C5       		.byte	-59
 1269 0030 C6       		.byte	-58
 1270 0031 C8       		.byte	-56
 1271 0032 C9       		.byte	-55
 1272 0033 CA       		.byte	-54
 1273 0034 CB       		.byte	-53
 1274 0035 CD       		.byte	-51
 1275 0036 CE       		.byte	-50
 1276 0037 CF       		.byte	-49
 1277 0038 D0       		.byte	-48
 1278 0039 D2       		.byte	-46
 1279 003a D3       		.byte	-45
 1280 003b D4       		.byte	-44
 1281 003c D5       		.byte	-43
 1282 003d D6       		.byte	-42
 1283 003e D7       		.byte	-41
 1284 003f D9       		.byte	-39
 1285 0040 DA       		.byte	-38
 1286 0041 DB       		.byte	-37
 1287 0042 DC       		.byte	-36
 1288 0043 DD       		.byte	-35
 1289 0044 DE       		.byte	-34
 1290 0045 DF       		.byte	-33
 1291 0046 E0       		.byte	-32
 1292 0047 E1       		.byte	-31
 1293 0048 E2       		.byte	-30
 1294 0049 E3       		.byte	-29
 1295 004a E4       		.byte	-28
 1296 004b E5       		.byte	-27
 1297 004c E6       		.byte	-26
 1298 004d E7       		.byte	-25
 1299 004e E8       		.byte	-24
 1300 004f E9       		.byte	-23
 1301 0050 EA       		.byte	-22
 1302 0051 EA       		.byte	-22
 1303 0052 EB       		.byte	-21
 1304 0053 EC       		.byte	-20
 1305 0054 ED       		.byte	-19
 1306 0055 EE       		.byte	-18
 1307 0056 EE       		.byte	-18
 1308 0057 EF       		.byte	-17
 1309 0058 F0       		.byte	-16
 1310 0059 F1       		.byte	-15
 1311 005a F1       		.byte	-15
 1312 005b F2       		.byte	-14
 1313 005c F3       		.byte	-13
 1314 005d F3       		.byte	-13
 1315 005e F4       		.byte	-12
 1316 005f F5       		.byte	-11
 1317 0060 F5       		.byte	-11
 1318 0061 F6       		.byte	-10
 1319 0062 F6       		.byte	-10
 1320 0063 F7       		.byte	-9
 1321 0064 F8       		.byte	-8
 1322 0065 F8       		.byte	-8
 1323 0066 F9       		.byte	-7
 1324 0067 F9       		.byte	-7
 1325 0068 FA       		.byte	-6
 1326 0069 FA       		.byte	-6
 1327 006a FA       		.byte	-6
 1328 006b FB       		.byte	-5
 1329 006c FB       		.byte	-5
 1330 006d FC       		.byte	-4
 1331 006e FC       		.byte	-4
 1332 006f FC       		.byte	-4
 1333 0070 FD       		.byte	-3
 1334 0071 FD       		.byte	-3
 1335 0072 FD       		.byte	-3
 1336 0073 FD       		.byte	-3
 1337 0074 FE       		.byte	-2
 1338 0075 FE       		.byte	-2
 1339 0076 FE       		.byte	-2
 1340 0077 FE       		.byte	-2
 1341 0078 FE       		.byte	-2
 1342 0079 FF       		.byte	-1
 1343 007a FF       		.byte	-1
 1344 007b FF       		.byte	-1
 1345 007c FF       		.byte	-1
 1346 007d FF       		.byte	-1
 1347 007e FF       		.byte	-1
 1348 007f FF       		.byte	-1
 1349              		.text
 1350              	.Letext0:
 1351              		.file 2 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 1352              		.file 3 "../system/include/aprs/cfifo.h"
 1353              		.file 4 "../system/include/aprs/afsk.h"
 1354              		.file 5 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 1355              		.file 6 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 1356              		.file 7 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 1357              		.file 8 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 1358              		.file 9 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/math.h"
 1359              		.file 10 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h"
 1360              		.file 11 "../system/include/aprs/ax25.h"
 1361              		.file 12 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/string.h"
 1362              		.file 13 "../system/include/aprs/dac.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 afsk.c
     /tmp/ccMgdwSQ.s:16     .text.fifo_isempty:0000000000000000 $t
     /tmp/ccMgdwSQ.s:22     .text.fifo_isempty:0000000000000000 fifo_isempty
     /tmp/ccMgdwSQ.s:45     .text.fifo_isfull:0000000000000000 $t
     /tmp/ccMgdwSQ.s:51     .text.fifo_isfull:0000000000000000 fifo_isfull
     /tmp/ccMgdwSQ.s:96     .text.fifo_push:0000000000000000 $t
     /tmp/ccMgdwSQ.s:102    .text.fifo_push:0000000000000000 fifo_push
     /tmp/ccMgdwSQ.s:133    .text.fifo_pop:0000000000000000 $t
     /tmp/ccMgdwSQ.s:139    .text.fifo_pop:0000000000000000 fifo_pop
     /tmp/ccMgdwSQ.s:173    .text.fifo_flush:0000000000000000 $t
     /tmp/ccMgdwSQ.s:179    .text.fifo_flush:0000000000000000 fifo_flush
     /tmp/ccMgdwSQ.s:196    .text.fifo_init:0000000000000000 $t
     /tmp/ccMgdwSQ.s:202    .text.fifo_init:0000000000000000 fifo_init
     /tmp/ccMgdwSQ.s:226    .text.sin_sample:0000000000000000 $t
     /tmp/ccMgdwSQ.s:232    .text.sin_sample:0000000000000000 sin_sample
     /tmp/ccMgdwSQ.s:272    .text.sin_sample:000000000000001c $d
     /tmp/ccMgdwSQ.s:277    .text.hdlc_parse:0000000000000000 $t
     /tmp/ccMgdwSQ.s:283    .text.hdlc_parse:0000000000000000 hdlc_parse
     /tmp/ccMgdwSQ.s:495    .text.afsk_demod:0000000000000000 $t
     /tmp/ccMgdwSQ.s:501    .text.afsk_demod:0000000000000000 afsk_demod
     /tmp/ccMgdwSQ.s:606    .text.afsk_demod:0000000000000084 $d
     /tmp/ccMgdwSQ.s:616    .text.AFSK_ADC_ISR:0000000000000000 $t
     /tmp/ccMgdwSQ.s:623    .text.AFSK_ADC_ISR:0000000000000000 AFSK_ADC_ISR
     /tmp/ccMgdwSQ.s:727    .text.afsk_txStart:0000000000000000 $t
     /tmp/ccMgdwSQ.s:734    .text.afsk_txStart:0000000000000000 afsk_txStart
     /tmp/ccMgdwSQ.s:784    .text.afsk_txStart:0000000000000038 $d
     /tmp/ccMgdwSQ.s:789    .text.AFSK_DAC_ISR:0000000000000000 $t
     /tmp/ccMgdwSQ.s:796    .text.AFSK_DAC_ISR:0000000000000000 AFSK_DAC_ISR
     /tmp/ccMgdwSQ.s:1010   .text.AFSK_Init:0000000000000000 $t
     /tmp/ccMgdwSQ.s:1017   .text.AFSK_Init:0000000000000000 AFSK_Init
     /tmp/ccMgdwSQ.s:1158   .text.AFSK_Init:00000000000000f8 $d
                            *COM*:0000000000000001 DrawCounter
                            *COM*:0000000000000001 PersistRand
     /tmp/ccMgdwSQ.s:1175   .bss.corr_mark_i:0000000000000000 $d
     /tmp/ccMgdwSQ.s:1179   .bss.corr_mark_i:0000000000000000 corr_mark_i
     /tmp/ccMgdwSQ.s:1182   .bss.corr_mark_q:0000000000000000 $d
     /tmp/ccMgdwSQ.s:1186   .bss.corr_mark_q:0000000000000000 corr_mark_q
     /tmp/ccMgdwSQ.s:1189   .bss.corr_space_i:0000000000000000 $d
     /tmp/ccMgdwSQ.s:1193   .bss.corr_space_i:0000000000000000 corr_space_i
     /tmp/ccMgdwSQ.s:1196   .bss.corr_space_q:0000000000000000 $d
     /tmp/ccMgdwSQ.s:1200   .bss.corr_space_q:0000000000000000 corr_space_q
     /tmp/ccMgdwSQ.s:1203   .bss.data:0000000000000000 $d
     /tmp/ccMgdwSQ.s:1207   .bss.data:0000000000000000 data
     /tmp/ccMgdwSQ.s:1213   .bss.ptr:0000000000000000 ptr
     /tmp/ccMgdwSQ.s:1214   .bss.ptr:0000000000000000 $d
     /tmp/ccMgdwSQ.s:1216   .rodata.sin_table:0000000000000000 $d
     /tmp/ccMgdwSQ.s:1220   .rodata.sin_table:0000000000000000 sin_table
                           .group:0000000000000000 wm4.0.879aed89c359f5856fe69c61b3590d34
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:0000000000000000 wm4.macros.h.2.7a7a5ac48d4160b7481c806e80b68442
                           .group:0000000000000000 wm4.config.h.2.f5e96167cb26b0ce97c5e7513a95bc8b
                           .group:0000000000000000 wm4.afsk.h.17.cf8f922069680e152e1eddb76cd4cc82
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.newlib.h.18.5e5ca3429233af402d406a202f1fc1ac
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:0000000000000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.math.h.13.adb102f7bd7860b1f241e149d6914a1e
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:0000000000000000 wm4.ax25.h.18.077e42a4af9016476e34900472a8fe18

UNDEFINED SYMBOLS
DA_Start
tx10m
DA_Stop
__aeabi_i2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2iz
memset
cos
sin
