   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f10x_usart.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.USART_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	USART_DeInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	USART_DeInit:
  24              	.LFB63:
  25              		.file 1 "../system/src/stm32f1-stdperiph/stm32f10x_usart.c"
   1:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
   2:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   ******************************************************************************
   3:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @file    stm32f10x_usart.c
   4:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @author  MCD Application Team
   5:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @version V3.5.0
   6:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @date    11-March-2011
   7:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief   This file provides all the USART firmware functions.
   8:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   ******************************************************************************
   9:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @attention
  10:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *
  11:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *
  18:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   ******************************************************************************
  20:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
  21:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  22:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /* Includes ------------------------------------------------------------------*/
  23:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #include "stm32f10x_usart.h"
  24:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #include "stm32f10x_rcc.h"
  25:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  26:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @{
  28:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
  29:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  30:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /** @defgroup USART 
  31:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief USART driver modules
  32:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @{
  33:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
  34:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  35:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /** @defgroup USART_Private_TypesDefinitions
  36:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @{
  37:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
  38:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  39:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
  40:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @}
  41:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
  42:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  43:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /** @defgroup USART_Private_Defines
  44:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @{
  45:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
  46:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  47:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR1_UE_Set                ((uint16_t)0x2000)  /*!< USART Enable Mask */
  48:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR1_UE_Reset              ((uint16_t)0xDFFF)  /*!< USART Disable Mask */
  49:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  50:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR1_WAKE_Mask             ((uint16_t)0xF7FF)  /*!< USART WakeUp Method Mask */
  51:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  52:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR1_RWU_Set               ((uint16_t)0x0002)  /*!< USART mute mode Enable Mask */
  53:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR1_RWU_Reset             ((uint16_t)0xFFFD)  /*!< USART mute mode Enable Mask */
  54:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR1_SBK_Set               ((uint16_t)0x0001)  /*!< USART Break Character send Mask */
  55:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR1_CLEAR_Mask            ((uint16_t)0xE9F3)  /*!< USART CR1 Mask */
  56:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR2_Address_Mask          ((uint16_t)0xFFF0)  /*!< USART address Mask */
  57:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  58:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR2_LINEN_Set              ((uint16_t)0x4000)  /*!< USART LIN Enable Mask */
  59:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR2_LINEN_Reset            ((uint16_t)0xBFFF)  /*!< USART LIN Disable Mask */
  60:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  61:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR2_LBDL_Mask             ((uint16_t)0xFFDF)  /*!< USART LIN Break detection Mask */
  62:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR2_STOP_CLEAR_Mask       ((uint16_t)0xCFFF)  /*!< USART CR2 STOP Bits Mask */
  63:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR2_CLOCK_CLEAR_Mask      ((uint16_t)0xF0FF)  /*!< USART CR2 Clock Mask */
  64:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  65:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR3_SCEN_Set              ((uint16_t)0x0020)  /*!< USART SC Enable Mask */
  66:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR3_SCEN_Reset            ((uint16_t)0xFFDF)  /*!< USART SC Disable Mask */
  67:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  68:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR3_NACK_Set              ((uint16_t)0x0010)  /*!< USART SC NACK Enable Mask */
  69:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR3_NACK_Reset            ((uint16_t)0xFFEF)  /*!< USART SC NACK Disable Mask */
  70:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  71:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR3_HDSEL_Set             ((uint16_t)0x0008)  /*!< USART Half-Duplex Enable Mask */
  72:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR3_HDSEL_Reset           ((uint16_t)0xFFF7)  /*!< USART Half-Duplex Disable Mask */
  73:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  74:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR3_IRLP_Mask             ((uint16_t)0xFFFB)  /*!< USART IrDA LowPower mode Mask */
  75:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR3_CLEAR_Mask            ((uint16_t)0xFCFF)  /*!< USART CR3 Mask */
  76:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  77:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR3_IREN_Set              ((uint16_t)0x0002)  /*!< USART IrDA Enable Mask */
  78:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR3_IREN_Reset            ((uint16_t)0xFFFD)  /*!< USART IrDA Disable Mask */
  79:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define GTPR_LSB_Mask             ((uint16_t)0x00FF)  /*!< Guard Time Register LSB Mask */
  80:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define GTPR_MSB_Mask             ((uint16_t)0xFF00)  /*!< Guard Time Register MSB Mask */
  81:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define IT_Mask                   ((uint16_t)0x001F)  /*!< USART Interrupt Mask */
  82:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  83:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /* USART OverSampling-8 Mask */
  84:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR1_OVER8_Set             ((u16)0x8000)  /* USART OVER8 mode Enable Mask */
  85:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR1_OVER8_Reset           ((u16)0x7FFF)  /* USART OVER8 mode Disable Mask */
  86:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  87:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /* USART One Bit Sampling Mask */
  88:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR3_ONEBITE_Set           ((u16)0x0800)  /* USART ONEBITE mode Enable Mask */
  89:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** #define CR3_ONEBITE_Reset         ((u16)0xF7FF)  /* USART ONEBITE mode Disable Mask */
  90:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  91:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
  92:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @}
  93:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
  94:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  95:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /** @defgroup USART_Private_Macros
  96:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @{
  97:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
  98:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
  99:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 100:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @}
 101:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 102:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 103:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /** @defgroup USART_Private_Variables
 104:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @{
 105:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 106:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 107:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 108:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @}
 109:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 110:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 111:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /** @defgroup USART_Private_FunctionPrototypes
 112:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @{
 113:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 114:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 115:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 116:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @}
 117:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 118:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 119:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /** @defgroup USART_Private_Functions
 120:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @{
 121:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 122:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 123:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 124:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 125:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 126:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values: 
 127:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *      USART1, USART2, USART3, UART4 or UART5.
 128:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 129:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 130:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 131:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
  26              		.loc 1 131 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 08B5     		push	{r3, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
  34              		.cfi_offset 14, -4
 132:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 133:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 134:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 135:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (USARTx == USART1)
  35              		.loc 1 135 0
  36 0002 234B     		ldr	r3, .L13
  37 0004 9842     		cmp	r0, r3
  38 0006 0CD0     		beq	.L8
 136:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 137:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 138:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 139:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 140:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else if (USARTx == USART2)
  39              		.loc 1 140 0
  40 0008 224B     		ldr	r3, .L13+4
  41 000a 9842     		cmp	r0, r3
  42 000c 14D0     		beq	.L9
 141:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 142:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 143:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 144:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 145:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else if (USARTx == USART3)
  43              		.loc 1 145 0
  44 000e 224B     		ldr	r3, .L13+8
  45 0010 9842     		cmp	r0, r3
  46 0012 1CD0     		beq	.L10
 146:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 147:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 148:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 149:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }    
 150:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else if (USARTx == UART4)
  47              		.loc 1 150 0
  48 0014 214B     		ldr	r3, .L13+12
  49 0016 9842     		cmp	r0, r3
  50 0018 24D0     		beq	.L11
 151:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 152:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 153:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 154:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }    
 155:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else
 156:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 157:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     if (USARTx == UART5)
  51              		.loc 1 157 0
  52 001a 214B     		ldr	r3, .L13+16
  53 001c 9842     		cmp	r0, r3
  54 001e 2CD0     		beq	.L12
  55              	.LVL1:
  56              	.L1:
 158:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     { 
 159:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 160:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 161:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     }
 162:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 163:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
  57              		.loc 1 163 0
  58 0020 08BD     		pop	{r3, pc}
  59              	.LVL2:
  60              	.L8:
 137:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  61              		.loc 1 137 0
  62 0022 0121     		movs	r1, #1
  63 0024 4FF48040 		mov	r0, #16384
  64              	.LVL3:
  65 0028 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  66              	.LVL4:
 138:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
  67              		.loc 1 138 0
  68 002c 0021     		movs	r1, #0
  69 002e 4FF48040 		mov	r0, #16384
  70 0032 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  71              	.LVL5:
  72 0036 F3E7     		b	.L1
  73              	.LVL6:
  74              	.L9:
 142:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  75              		.loc 1 142 0
  76 0038 0121     		movs	r1, #1
  77 003a 4FF40030 		mov	r0, #131072
  78              	.LVL7:
  79 003e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  80              	.LVL8:
 143:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
  81              		.loc 1 143 0
  82 0042 0021     		movs	r1, #0
  83 0044 4FF40030 		mov	r0, #131072
  84 0048 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  85              	.LVL9:
  86 004c E8E7     		b	.L1
  87              	.LVL10:
  88              	.L10:
 147:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  89              		.loc 1 147 0
  90 004e 0121     		movs	r1, #1
  91 0050 4FF48020 		mov	r0, #262144
  92              	.LVL11:
  93 0054 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  94              	.LVL12:
 148:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }    
  95              		.loc 1 148 0
  96 0058 0021     		movs	r1, #0
  97 005a 4FF48020 		mov	r0, #262144
  98 005e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  99              	.LVL13:
 100 0062 DDE7     		b	.L1
 101              	.LVL14:
 102              	.L11:
 152:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 103              		.loc 1 152 0
 104 0064 0121     		movs	r1, #1
 105 0066 4FF40020 		mov	r0, #524288
 106              	.LVL15:
 107 006a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 108              	.LVL16:
 153:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }    
 109              		.loc 1 153 0
 110 006e 0021     		movs	r1, #0
 111 0070 4FF40020 		mov	r0, #524288
 112 0074 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 113              	.LVL17:
 114 0078 D2E7     		b	.L1
 115              	.LVL18:
 116              	.L12:
 159:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 117              		.loc 1 159 0
 118 007a 0121     		movs	r1, #1
 119 007c 4FF48010 		mov	r0, #1048576
 120              	.LVL19:
 121 0080 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 122              	.LVL20:
 160:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     }
 123              		.loc 1 160 0
 124 0084 0021     		movs	r1, #0
 125 0086 4FF48010 		mov	r0, #1048576
 126 008a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 127              	.LVL21:
 128              		.loc 1 163 0
 129 008e C7E7     		b	.L1
 130              	.L14:
 131              		.align	2
 132              	.L13:
 133 0090 00380140 		.word	1073821696
 134 0094 00440040 		.word	1073759232
 135 0098 00480040 		.word	1073760256
 136 009c 004C0040 		.word	1073761280
 137 00a0 00500040 		.word	1073762304
 138              		.cfi_endproc
 139              	.LFE63:
 141              		.section	.text.USART_Init,"ax",%progbits
 142              		.align	1
 143              		.global	USART_Init
 144              		.syntax unified
 145              		.thumb
 146              		.thumb_func
 147              		.fpu softvfp
 149              	USART_Init:
 150              	.LFB64:
 164:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 165:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 166:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 167:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *         parameters in the USART_InitStruct .
 168:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 169:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 170:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 171:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 172:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *         that contains the configuration information for the specified USART 
 173:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *         peripheral.
 174:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 175:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 176:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 177:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 151              		.loc 1 177 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 24
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              	.LVL22:
 156 0000 30B5     		push	{r4, r5, lr}
 157              		.cfi_def_cfa_offset 12
 158              		.cfi_offset 4, -12
 159              		.cfi_offset 5, -8
 160              		.cfi_offset 14, -4
 161 0002 87B0     		sub	sp, sp, #28
 162              		.cfi_def_cfa_offset 40
 163 0004 0446     		mov	r4, r0
 164 0006 0D46     		mov	r5, r1
 165              	.LVL23:
 178:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 179:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   uint32_t integerdivider = 0x00;
 180:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   uint32_t fractionaldivider = 0x00;
 181:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   uint32_t usartxbase = 0;
 182:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 183:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 184:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 185:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 186:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 187:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 188:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 189:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 190:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 191:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* The hardware flow control is available only for USART1, USART2 and USART3 */
 192:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 193:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 194:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
 195:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 196:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 197:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   usartxbase = (uint32_t)USARTx;
 198:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 199:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 200:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   tmpreg = USARTx->CR2;
 166              		.loc 1 200 0
 167 0008 038A     		ldrh	r3, [r0, #16]
 168 000a 9BB2     		uxth	r3, r3
 169              	.LVL24:
 201:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Clear STOP[13:12] bits */
 202:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   tmpreg &= CR2_STOP_CLEAR_Mask;
 203:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
 204:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Set STOP[13:12] bits according to USART_StopBits value */
 205:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 170              		.loc 1 205 0
 171 000c CA88     		ldrh	r2, [r1, #6]
 172 000e 23F44053 		bic	r3, r3, #12288
 173              	.LVL25:
 174 0012 1343     		orrs	r3, r3, r2
 175              	.LVL26:
 206:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 207:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Write to USART CR2 */
 208:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 176              		.loc 1 208 0
 177 0014 0382     		strh	r3, [r0, #16]	@ movhi
 209:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 210:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 211:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   tmpreg = USARTx->CR1;
 178              		.loc 1 211 0
 179 0016 8389     		ldrh	r3, [r0, #12]
 180              	.LVL27:
 181 0018 9BB2     		uxth	r3, r3
 182              	.LVL28:
 212:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 213:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   tmpreg &= CR1_CLEAR_Mask;
 214:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Configure the USART Word Length, Parity and mode ----------------------- */
 215:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Set the M bits according to USART_WordLength value */
 216:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Set PCE and PS bits according to USART_Parity value */
 217:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Set TE and RE bits according to USART_Mode value */
 218:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 183              		.loc 1 218 0
 184 001a 8988     		ldrh	r1, [r1, #4]
 185              	.LVL29:
 186 001c 2889     		ldrh	r0, [r5, #8]
 187              	.LVL30:
 219:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****             USART_InitStruct->USART_Mode;
 188              		.loc 1 219 0
 189 001e 6A89     		ldrh	r2, [r5, #10]
 218:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****             USART_InitStruct->USART_Mode;
 190              		.loc 1 218 0
 191 0020 0143     		orrs	r1, r1, r0
 192 0022 0A43     		orrs	r2, r2, r1
 193 0024 23F4B053 		bic	r3, r3, #5632
 194              	.LVL31:
 195 0028 23F00C03 		bic	r3, r3, #12
 196 002c 1343     		orrs	r3, r3, r2
 197              	.LVL32:
 220:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Write to USART CR1 */
 221:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 198              		.loc 1 221 0
 199 002e A381     		strh	r3, [r4, #12]	@ movhi
 222:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 223:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 224:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   tmpreg = USARTx->CR3;
 200              		.loc 1 224 0
 201 0030 A38A     		ldrh	r3, [r4, #20]
 202              	.LVL33:
 203 0032 9BB2     		uxth	r3, r3
 204              	.LVL34:
 225:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Clear CTSE and RTSE bits */
 226:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   tmpreg &= CR3_CLEAR_Mask;
 227:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Configure the USART HFC -------------------------------------------------*/
 228:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 229:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 205              		.loc 1 229 0
 206 0034 AA89     		ldrh	r2, [r5, #12]
 207 0036 23F44073 		bic	r3, r3, #768
 208              	.LVL35:
 209 003a 1343     		orrs	r3, r3, r2
 210              	.LVL36:
 230:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Write to USART CR3 */
 231:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 211              		.loc 1 231 0
 212 003c A382     		strh	r3, [r4, #20]	@ movhi
 232:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 233:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 234:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Configure the USART Baud Rate -------------------------------------------*/
 235:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 213              		.loc 1 235 0
 214 003e 01A8     		add	r0, sp, #4
 215 0040 FFF7FEFF 		bl	RCC_GetClocksFreq
 216              	.LVL37:
 236:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (usartxbase == USART1_BASE)
 217              		.loc 1 236 0
 218 0044 1E4B     		ldr	r3, .L26
 219 0046 9C42     		cmp	r4, r3
 220 0048 24D0     		beq	.L23
 237:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 238:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 239:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 240:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else
 241:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 242:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 221              		.loc 1 242 0
 222 004a 039B     		ldr	r3, [sp, #12]
 223              	.LVL38:
 224              	.L17:
 243:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 244:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 245:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Determine the integer part */
 246:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 225              		.loc 1 246 0
 226 004c A289     		ldrh	r2, [r4, #12]
 227 004e 12F4004F 		tst	r2, #32768
 228 0052 21D1     		bne	.L24
 247:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 248:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 249:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 250:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 251:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
 252:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 253:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 254:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 229              		.loc 1 254 0
 230 0054 03EB8303 		add	r3, r3, r3, lsl #2
 231              	.LVL39:
 232 0058 03EB8303 		add	r3, r3, r3, lsl #2
 233 005c 2968     		ldr	r1, [r5]
 234 005e 8900     		lsls	r1, r1, #2
 235 0060 B3FBF1F1 		udiv	r1, r3, r1
 236              	.LVL40:
 237              	.L19:
 255:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 256:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 238              		.loc 1 256 0
 239 0064 174B     		ldr	r3, .L26+4
 240 0066 A3FB0123 		umull	r2, r3, r3, r1
 241 006a 5809     		lsrs	r0, r3, #5
 242 006c 0501     		lsls	r5, r0, #4
 243              	.LVL41:
 257:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 258:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Determine the fractional part */
 259:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 244              		.loc 1 259 0
 245 006e 6423     		movs	r3, #100
 246 0070 00FB1313 		mls	r3, r0, r3, r1
 247              	.LVL42:
 260:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 261:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Implement the fractional part in the register */
 262:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 248              		.loc 1 262 0
 249 0074 A289     		ldrh	r2, [r4, #12]
 250 0076 12F4004F 		tst	r2, #32768
 251 007a 16D1     		bne	.L25
 263:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 264:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 265:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 266:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
 267:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 268:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 252              		.loc 1 268 0
 253 007c 1B01     		lsls	r3, r3, #4
 254              	.LVL43:
 255 007e 3233     		adds	r3, r3, #50
 256 0080 104A     		ldr	r2, .L26+4
 257 0082 A2FB0323 		umull	r2, r3, r2, r3
 258 0086 C3F34313 		ubfx	r3, r3, #5, #4
 259 008a 2B43     		orrs	r3, r3, r5
 260              	.LVL44:
 261              	.L21:
 269:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 270:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 271:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Write to USART BRR */
 272:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 262              		.loc 1 272 0
 263 008c 9BB2     		uxth	r3, r3
 264              	.LVL45:
 265 008e 2381     		strh	r3, [r4, #8]	@ movhi
 273:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 266              		.loc 1 273 0
 267 0090 07B0     		add	sp, sp, #28
 268              		.cfi_remember_state
 269              		.cfi_def_cfa_offset 12
 270              		@ sp needed
 271 0092 30BD     		pop	{r4, r5, pc}
 272              	.LVL46:
 273              	.L23:
 274              		.cfi_restore_state
 238:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 275              		.loc 1 238 0
 276 0094 049B     		ldr	r3, [sp, #16]
 277              	.LVL47:
 278 0096 D9E7     		b	.L17
 279              	.L24:
 249:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 280              		.loc 1 249 0
 281 0098 03EB8303 		add	r3, r3, r3, lsl #2
 282              	.LVL48:
 283 009c 03EB8303 		add	r3, r3, r3, lsl #2
 284 00a0 2968     		ldr	r1, [r5]
 285 00a2 4900     		lsls	r1, r1, #1
 286 00a4 B3FBF1F1 		udiv	r1, r3, r1
 287              	.LVL49:
 288 00a8 DCE7     		b	.L19
 289              	.LVL50:
 290              	.L25:
 264:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 291              		.loc 1 264 0
 292 00aa DA00     		lsls	r2, r3, #3
 293 00ac 3232     		adds	r2, r2, #50
 294 00ae 054B     		ldr	r3, .L26+4
 295              	.LVL51:
 296 00b0 A3FB0232 		umull	r3, r2, r3, r2
 297 00b4 C2F34212 		ubfx	r2, r2, #5, #3
 298 00b8 42EA0503 		orr	r3, r2, r5
 299              	.LVL52:
 300 00bc E6E7     		b	.L21
 301              	.L27:
 302 00be 00BF     		.align	2
 303              	.L26:
 304 00c0 00380140 		.word	1073821696
 305 00c4 1F85EB51 		.word	1374389535
 306              		.cfi_endproc
 307              	.LFE64:
 309              		.section	.text.USART_StructInit,"ax",%progbits
 310              		.align	1
 311              		.global	USART_StructInit
 312              		.syntax unified
 313              		.thumb
 314              		.thumb_func
 315              		.fpu softvfp
 317              	USART_StructInit:
 318              	.LFB65:
 274:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 275:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 276:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 277:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 278:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *         which will be initialized.
 279:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 280:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 281:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 282:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 319              		.loc 1 282 0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 0
 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323              		@ link register save eliminated.
 324              	.LVL53:
 283:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* USART_InitStruct members default value */
 284:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 325              		.loc 1 284 0
 326 0000 4FF41653 		mov	r3, #9600
 327 0004 0360     		str	r3, [r0]
 285:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 328              		.loc 1 285 0
 329 0006 0023     		movs	r3, #0
 330 0008 8380     		strh	r3, [r0, #4]	@ movhi
 286:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 331              		.loc 1 286 0
 332 000a C380     		strh	r3, [r0, #6]	@ movhi
 287:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 333              		.loc 1 287 0
 334 000c 0381     		strh	r3, [r0, #8]	@ movhi
 288:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 335              		.loc 1 288 0
 336 000e 0C22     		movs	r2, #12
 337 0010 4281     		strh	r2, [r0, #10]	@ movhi
 289:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 338              		.loc 1 289 0
 339 0012 8381     		strh	r3, [r0, #12]	@ movhi
 290:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 340              		.loc 1 290 0
 341 0014 7047     		bx	lr
 342              		.cfi_endproc
 343              	.LFE65:
 345              		.section	.text.USART_ClockInit,"ax",%progbits
 346              		.align	1
 347              		.global	USART_ClockInit
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 351              		.fpu softvfp
 353              	USART_ClockInit:
 354              	.LFB66:
 291:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 292:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 293:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 294:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *          specified parameters in the USART_ClockInitStruct .
 295:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 to select the USART peripheral.
 296:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
 297:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *         structure that contains the configuration information for the specified 
 298:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *         USART peripheral.  
 299:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
 300:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 301:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 302:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 303:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 355              		.loc 1 303 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 0
 358              		@ frame_needed = 0, uses_anonymous_args = 0
 359              		@ link register save eliminated.
 360              	.LVL54:
 361 0000 70B4     		push	{r4, r5, r6}
 362              		.cfi_def_cfa_offset 12
 363              		.cfi_offset 4, -12
 364              		.cfi_offset 5, -8
 365              		.cfi_offset 6, -4
 366              	.LVL55:
 304:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   uint32_t tmpreg = 0x00;
 305:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 306:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 307:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 308:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 309:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 310:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 311:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 312:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 313:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   tmpreg = USARTx->CR2;
 367              		.loc 1 313 0
 368 0002 028A     		ldrh	r2, [r0, #16]
 369 0004 92B2     		uxth	r2, r2
 370              	.LVL56:
 314:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 315:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   tmpreg &= CR2_CLOCK_CLEAR_Mask;
 316:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 317:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 318:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 319:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 320:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 321:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 371              		.loc 1 321 0
 372 0006 0D88     		ldrh	r5, [r1]
 373 0008 4E88     		ldrh	r6, [r1, #2]
 322:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 374              		.loc 1 322 0
 375 000a 8C88     		ldrh	r4, [r1, #4]
 376 000c CB88     		ldrh	r3, [r1, #6]
 377 000e 45EA0601 		orr	r1, r5, r6
 378              	.LVL57:
 379 0012 2143     		orrs	r1, r1, r4
 380 0014 0B43     		orrs	r3, r3, r1
 381 0016 22F47062 		bic	r2, r2, #3840
 382              	.LVL58:
 383 001a 1343     		orrs	r3, r3, r2
 384              	.LVL59:
 323:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Write to USART CR2 */
 324:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 385              		.loc 1 324 0
 386 001c 0382     		strh	r3, [r0, #16]	@ movhi
 325:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 387              		.loc 1 325 0
 388 001e 70BC     		pop	{r4, r5, r6}
 389              		.cfi_restore 6
 390              		.cfi_restore 5
 391              		.cfi_restore 4
 392              		.cfi_def_cfa_offset 0
 393 0020 7047     		bx	lr
 394              		.cfi_endproc
 395              	.LFE66:
 397              		.section	.text.USART_ClockStructInit,"ax",%progbits
 398              		.align	1
 399              		.global	USART_ClockStructInit
 400              		.syntax unified
 401              		.thumb
 402              		.thumb_func
 403              		.fpu softvfp
 405              	USART_ClockStructInit:
 406              	.LFB67:
 326:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 327:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 328:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 329:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
 330:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *         structure which will be initialized.
 331:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 332:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 333:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 334:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 407              		.loc 1 334 0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 411              		@ link register save eliminated.
 412              	.LVL60:
 335:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* USART_ClockInitStruct members default value */
 336:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 413              		.loc 1 336 0
 414 0000 0023     		movs	r3, #0
 415 0002 0380     		strh	r3, [r0]	@ movhi
 337:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 416              		.loc 1 337 0
 417 0004 4380     		strh	r3, [r0, #2]	@ movhi
 338:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 418              		.loc 1 338 0
 419 0006 8380     		strh	r3, [r0, #4]	@ movhi
 339:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 420              		.loc 1 339 0
 421 0008 C380     		strh	r3, [r0, #6]	@ movhi
 340:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 422              		.loc 1 340 0
 423 000a 7047     		bx	lr
 424              		.cfi_endproc
 425              	.LFE67:
 427              		.section	.text.USART_Cmd,"ax",%progbits
 428              		.align	1
 429              		.global	USART_Cmd
 430              		.syntax unified
 431              		.thumb
 432              		.thumb_func
 433              		.fpu softvfp
 435              	USART_Cmd:
 436              	.LFB68:
 341:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 342:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 343:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 344:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 345:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *         This parameter can be one of the following values:
 346:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *           USART1, USART2, USART3, UART4 or UART5.
 347:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 348:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *         This parameter can be: ENABLE or DISABLE.
 349:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 350:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 351:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 352:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 437              		.loc 1 352 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441              		@ link register save eliminated.
 442              	.LVL61:
 353:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 354:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 355:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 356:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 357:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (NewState != DISABLE)
 443              		.loc 1 357 0
 444 0000 31B9     		cbnz	r1, .L35
 358:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 359:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 360:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR1 |= CR1_UE_Set;
 361:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 362:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else
 363:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 364:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 365:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR1 &= CR1_UE_Reset;
 445              		.loc 1 365 0
 446 0002 8389     		ldrh	r3, [r0, #12]
 447 0004 9BB2     		uxth	r3, r3
 448 0006 23F40053 		bic	r3, r3, #8192
 449 000a 9BB2     		uxth	r3, r3
 450 000c 8381     		strh	r3, [r0, #12]	@ movhi
 366:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 367:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 451              		.loc 1 367 0
 452 000e 7047     		bx	lr
 453              	.L35:
 360:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 454              		.loc 1 360 0
 455 0010 8389     		ldrh	r3, [r0, #12]
 456 0012 43F40053 		orr	r3, r3, #8192
 457 0016 8381     		strh	r3, [r0, #12]	@ movhi
 458 0018 7047     		bx	lr
 459              		.cfi_endproc
 460              	.LFE68:
 462              		.section	.text.USART_ITConfig,"ax",%progbits
 463              		.align	1
 464              		.global	USART_ITConfig
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu softvfp
 470              	USART_ITConfig:
 471              	.LFB69:
 368:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 369:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 370:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
 371:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 372:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 373:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 374:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
 375:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 376:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
 377:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_LBD:  LIN Break detection interrupt
 378:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_TXE:  Transmit Data Register empty interrupt
 379:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_TC:   Transmission complete interrupt
 380:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_RXNE: Receive Data register not empty interrupt
 381:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_IDLE: Idle line detection interrupt
 382:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_PE:   Parity Error interrupt
 383:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
 384:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
 385:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 386:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 387:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 388:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
 389:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 472              		.loc 1 389 0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 0
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              		@ link register save eliminated.
 477              	.LVL62:
 478 0000 10B4     		push	{r4}
 479              		.cfi_def_cfa_offset 4
 480              		.cfi_offset 4, -4
 481              	.LVL63:
 390:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 391:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   uint32_t usartxbase = 0x00;
 392:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 393:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 394:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
 395:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 396:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
 397:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (USART_IT == USART_IT_CTS)
 398:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 399:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
 400:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }   
 401:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 402:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   usartxbase = (uint32_t)USARTx;
 403:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 404:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Get the USART register index */
 405:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 482              		.loc 1 405 0
 483 0002 C1F34214 		ubfx	r4, r1, #5, #3
 484              	.LVL64:
 406:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 407:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Get the interrupt position */
 408:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   itpos = USART_IT & IT_Mask;
 485              		.loc 1 408 0
 486 0006 01F01F01 		and	r1, r1, #31
 487              	.LVL65:
 409:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 488              		.loc 1 409 0
 489 000a 0123     		movs	r3, #1
 490 000c 03FA01F1 		lsl	r1, r3, r1
 491              	.LVL66:
 410:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     
 411:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 492              		.loc 1 411 0
 493 0010 9C42     		cmp	r4, r3
 494 0012 09D0     		beq	.L43
 412:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 413:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     usartxbase += 0x0C;
 414:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 415:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 495              		.loc 1 415 0
 496 0014 022C     		cmp	r4, #2
 497 0016 09D0     		beq	.L44
 416:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 417:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     usartxbase += 0x10;
 418:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 419:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else /* The IT is in CR3 register */
 420:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 421:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     usartxbase += 0x14; 
 498              		.loc 1 421 0
 499 0018 1430     		adds	r0, r0, #20
 500              	.LVL67:
 501              	.L38:
 422:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 423:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (NewState != DISABLE)
 502              		.loc 1 423 0
 503 001a 4AB9     		cbnz	r2, .L45
 424:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 425:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 426:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 427:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else
 428:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 429:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 504              		.loc 1 429 0
 505 001c 0368     		ldr	r3, [r0]
 506 001e 23EA0101 		bic	r1, r3, r1
 507              	.LVL68:
 508 0022 0160     		str	r1, [r0]
 509              	.L36:
 430:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 431:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 510              		.loc 1 431 0
 511 0024 10BC     		pop	{r4}
 512              		.cfi_remember_state
 513              		.cfi_restore 4
 514              		.cfi_def_cfa_offset 0
 515              	.LVL69:
 516 0026 7047     		bx	lr
 517              	.LVL70:
 518              	.L43:
 519              		.cfi_restore_state
 413:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 520              		.loc 1 413 0
 521 0028 0C30     		adds	r0, r0, #12
 522              	.LVL71:
 523 002a F6E7     		b	.L38
 524              	.LVL72:
 525              	.L44:
 417:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 526              		.loc 1 417 0
 527 002c 1030     		adds	r0, r0, #16
 528              	.LVL73:
 529 002e F4E7     		b	.L38
 530              	.LVL74:
 531              	.L45:
 425:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 532              		.loc 1 425 0
 533 0030 0368     		ldr	r3, [r0]
 534 0032 1943     		orrs	r1, r1, r3
 535              	.LVL75:
 536 0034 0160     		str	r1, [r0]
 537 0036 F5E7     		b	.L36
 538              		.cfi_endproc
 539              	.LFE69:
 541              		.section	.text.USART_DMACmd,"ax",%progbits
 542              		.align	1
 543              		.global	USART_DMACmd
 544              		.syntax unified
 545              		.thumb
 546              		.thumb_func
 547              		.fpu softvfp
 549              	USART_DMACmd:
 550              	.LFB70:
 432:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 433:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 434:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Enables or disables the USART�s DMA interface.
 435:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 436:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 437:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 438:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
 439:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be any combination of the following values:
 440:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_DMAReq_Tx: USART DMA transmit request
 441:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_DMAReq_Rx: USART DMA receive request
 442:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  NewState: new state of the DMA Request sources.
 443:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 444:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @note The DMA mode is not available for UART5 except in the STM32
 445:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *       High density value line devices(STM32F10X_HD_VL).  
 446:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 447:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 448:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
 449:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 551              		.loc 1 449 0
 552              		.cfi_startproc
 553              		@ args = 0, pretend = 0, frame = 0
 554              		@ frame_needed = 0, uses_anonymous_args = 0
 555              		@ link register save eliminated.
 556              	.LVL76:
 450:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 451:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 452:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
 453:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 454:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (NewState != DISABLE)
 557              		.loc 1 454 0
 558 0000 22B9     		cbnz	r2, .L49
 455:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 456:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
 457:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****        DMAR bits in the USART CR3 register */
 458:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 459:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 460:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else
 461:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 462:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
 463:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****        DMAR bits in the USART CR3 register */
 464:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 559              		.loc 1 464 0
 560 0002 838A     		ldrh	r3, [r0, #20]
 561 0004 23EA0101 		bic	r1, r3, r1
 562              	.LVL77:
 563 0008 8182     		strh	r1, [r0, #20]	@ movhi
 465:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 466:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 564              		.loc 1 466 0
 565 000a 7047     		bx	lr
 566              	.LVL78:
 567              	.L49:
 458:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 568              		.loc 1 458 0
 569 000c 838A     		ldrh	r3, [r0, #20]
 570 000e 1943     		orrs	r1, r1, r3
 571              	.LVL79:
 572 0010 8182     		strh	r1, [r0, #20]	@ movhi
 573 0012 7047     		bx	lr
 574              		.cfi_endproc
 575              	.LFE70:
 577              		.section	.text.USART_SetAddress,"ax",%progbits
 578              		.align	1
 579              		.global	USART_SetAddress
 580              		.syntax unified
 581              		.thumb
 582              		.thumb_func
 583              		.fpu softvfp
 585              	USART_SetAddress:
 586              	.LFB71:
 467:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 468:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 469:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Sets the address of the USART node.
 470:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 471:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 472:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 473:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 474:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 475:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 476:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 477:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 587              		.loc 1 477 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 0
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 591              		@ link register save eliminated.
 592              	.LVL80:
 478:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 479:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 480:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 481:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     
 482:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Clear the USART address */
 483:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->CR2 &= CR2_Address_Mask;
 593              		.loc 1 483 0
 594 0000 038A     		ldrh	r3, [r0, #16]
 595 0002 9BB2     		uxth	r3, r3
 596 0004 23F00F03 		bic	r3, r3, #15
 597 0008 9BB2     		uxth	r3, r3
 598 000a 0382     		strh	r3, [r0, #16]	@ movhi
 484:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 485:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   // [ILG]
 486:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #if defined ( __GNUC__ )
 487:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #pragma GCC diagnostic push
 488:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #pragma GCC diagnostic ignored "-Wconversion"
 489:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #endif
 490:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 491:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Set the USART address node */
 492:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->CR2 |= USART_Address;
 599              		.loc 1 492 0
 600 000c 038A     		ldrh	r3, [r0, #16]
 601 000e 1943     		orrs	r1, r1, r3
 602              	.LVL81:
 603 0010 0182     		strh	r1, [r0, #16]	@ movhi
 493:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 494:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   // [ILG]
 495:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #if defined ( __GNUC__ )
 496:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #pragma GCC diagnostic pop
 497:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #endif
 498:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 604              		.loc 1 498 0
 605 0012 7047     		bx	lr
 606              		.cfi_endproc
 607              	.LFE71:
 609              		.section	.text.USART_WakeUpConfig,"ax",%progbits
 610              		.align	1
 611              		.global	USART_WakeUpConfig
 612              		.syntax unified
 613              		.thumb
 614              		.thumb_func
 615              		.fpu softvfp
 617              	USART_WakeUpConfig:
 618              	.LFB72:
 499:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 500:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 501:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Selects the USART WakeUp method.
 502:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 503:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 504:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 505:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 506:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 507:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 508:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 509:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 510:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 511:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 512:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 619              		.loc 1 512 0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 623              		@ link register save eliminated.
 624              	.LVL82:
 513:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 514:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 515:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 516:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 517:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->CR1 &= CR1_WAKE_Mask;
 625              		.loc 1 517 0
 626 0000 8389     		ldrh	r3, [r0, #12]
 627 0002 9BB2     		uxth	r3, r3
 628 0004 23F40063 		bic	r3, r3, #2048
 629 0008 9BB2     		uxth	r3, r3
 630 000a 8381     		strh	r3, [r0, #12]	@ movhi
 518:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 631              		.loc 1 518 0
 632 000c 8389     		ldrh	r3, [r0, #12]
 633 000e 1943     		orrs	r1, r1, r3
 634              	.LVL83:
 635 0010 8181     		strh	r1, [r0, #12]	@ movhi
 519:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 636              		.loc 1 519 0
 637 0012 7047     		bx	lr
 638              		.cfi_endproc
 639              	.LFE72:
 641              		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 642              		.align	1
 643              		.global	USART_ReceiverWakeUpCmd
 644              		.syntax unified
 645              		.thumb
 646              		.thumb_func
 647              		.fpu softvfp
 649              	USART_ReceiverWakeUpCmd:
 650              	.LFB73:
 520:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 521:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 522:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 523:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 524:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 525:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 526:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  NewState: new state of the USART mute mode.
 527:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 528:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 529:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 530:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 531:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 651              		.loc 1 531 0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 0
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655              		@ link register save eliminated.
 656              	.LVL84:
 532:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 533:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 534:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 535:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 536:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (NewState != DISABLE)
 657              		.loc 1 536 0
 658 0000 31B9     		cbnz	r1, .L55
 537:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 538:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 539:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR1 |= CR1_RWU_Set;
 540:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 541:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else
 542:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 543:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 544:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR1 &= CR1_RWU_Reset;
 659              		.loc 1 544 0
 660 0002 8389     		ldrh	r3, [r0, #12]
 661 0004 9BB2     		uxth	r3, r3
 662 0006 23F00203 		bic	r3, r3, #2
 663 000a 9BB2     		uxth	r3, r3
 664 000c 8381     		strh	r3, [r0, #12]	@ movhi
 545:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 546:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 665              		.loc 1 546 0
 666 000e 7047     		bx	lr
 667              	.L55:
 539:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 668              		.loc 1 539 0
 669 0010 8389     		ldrh	r3, [r0, #12]
 670 0012 43F00203 		orr	r3, r3, #2
 671 0016 8381     		strh	r3, [r0, #12]	@ movhi
 672 0018 7047     		bx	lr
 673              		.cfi_endproc
 674              	.LFE73:
 676              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 677              		.align	1
 678              		.global	USART_LINBreakDetectLengthConfig
 679              		.syntax unified
 680              		.thumb
 681              		.thumb_func
 682              		.fpu softvfp
 684              	USART_LINBreakDetectLengthConfig:
 685              	.LFB74:
 547:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 548:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 549:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 550:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 551:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 552:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 553:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 554:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 555:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 556:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 557:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 558:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 559:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 560:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 686              		.loc 1 560 0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 0
 689              		@ frame_needed = 0, uses_anonymous_args = 0
 690              		@ link register save eliminated.
 691              	.LVL85:
 561:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 562:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 563:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 564:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 565:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->CR2 &= CR2_LBDL_Mask;
 692              		.loc 1 565 0
 693 0000 038A     		ldrh	r3, [r0, #16]
 694 0002 9BB2     		uxth	r3, r3
 695 0004 23F02003 		bic	r3, r3, #32
 696 0008 9BB2     		uxth	r3, r3
 697 000a 0382     		strh	r3, [r0, #16]	@ movhi
 566:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 698              		.loc 1 566 0
 699 000c 038A     		ldrh	r3, [r0, #16]
 700 000e 1943     		orrs	r1, r1, r3
 701              	.LVL86:
 702 0010 0182     		strh	r1, [r0, #16]	@ movhi
 567:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 703              		.loc 1 567 0
 704 0012 7047     		bx	lr
 705              		.cfi_endproc
 706              	.LFE74:
 708              		.section	.text.USART_LINCmd,"ax",%progbits
 709              		.align	1
 710              		.global	USART_LINCmd
 711              		.syntax unified
 712              		.thumb
 713              		.thumb_func
 714              		.fpu softvfp
 716              	USART_LINCmd:
 717              	.LFB75:
 568:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 569:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 570:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Enables or disables the USART�s LIN mode.
 571:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 572:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 573:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 574:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 575:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 576:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 577:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 578:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 579:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 718              		.loc 1 579 0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              		@ link register save eliminated.
 723              	.LVL87:
 580:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 581:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 582:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 583:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 584:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (NewState != DISABLE)
 724              		.loc 1 584 0
 725 0000 31B9     		cbnz	r1, .L60
 585:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 586:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 587:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR2 |= CR2_LINEN_Set;
 588:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 589:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else
 590:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 591:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 592:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR2 &= CR2_LINEN_Reset;
 726              		.loc 1 592 0
 727 0002 038A     		ldrh	r3, [r0, #16]
 728 0004 9BB2     		uxth	r3, r3
 729 0006 23F48043 		bic	r3, r3, #16384
 730 000a 9BB2     		uxth	r3, r3
 731 000c 0382     		strh	r3, [r0, #16]	@ movhi
 593:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 594:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 732              		.loc 1 594 0
 733 000e 7047     		bx	lr
 734              	.L60:
 587:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 735              		.loc 1 587 0
 736 0010 038A     		ldrh	r3, [r0, #16]
 737 0012 43F48043 		orr	r3, r3, #16384
 738 0016 0382     		strh	r3, [r0, #16]	@ movhi
 739 0018 7047     		bx	lr
 740              		.cfi_endproc
 741              	.LFE75:
 743              		.section	.text.USART_SendData,"ax",%progbits
 744              		.align	1
 745              		.global	USART_SendData
 746              		.syntax unified
 747              		.thumb
 748              		.thumb_func
 749              		.fpu softvfp
 751              	USART_SendData:
 752              	.LFB76:
 595:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 596:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 597:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 598:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 599:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 600:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 601:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  Data: the data to transmit.
 602:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 603:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 604:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 605:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 753              		.loc 1 605 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 0
 756              		@ frame_needed = 0, uses_anonymous_args = 0
 757              		@ link register save eliminated.
 758              	.LVL88:
 606:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 607:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 608:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 609:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     
 610:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Transmit Data */
 611:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 759              		.loc 1 611 0
 760 0000 C1F30801 		ubfx	r1, r1, #0, #9
 761              	.LVL89:
 762 0004 8180     		strh	r1, [r0, #4]	@ movhi
 612:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 763              		.loc 1 612 0
 764 0006 7047     		bx	lr
 765              		.cfi_endproc
 766              	.LFE76:
 768              		.section	.text.USART_ReceiveData,"ax",%progbits
 769              		.align	1
 770              		.global	USART_ReceiveData
 771              		.syntax unified
 772              		.thumb
 773              		.thumb_func
 774              		.fpu softvfp
 776              	USART_ReceiveData:
 777              	.LFB77:
 613:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 614:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 615:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 616:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 617:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 618:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 619:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval The received data.
 620:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 621:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 622:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 778              		.loc 1 622 0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 0
 781              		@ frame_needed = 0, uses_anonymous_args = 0
 782              		@ link register save eliminated.
 783              	.LVL90:
 623:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 624:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 625:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 626:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Receive Data */
 627:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 784              		.loc 1 627 0
 785 0000 8088     		ldrh	r0, [r0, #4]
 786              	.LVL91:
 628:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 787              		.loc 1 628 0
 788 0002 C0F30800 		ubfx	r0, r0, #0, #9
 789 0006 7047     		bx	lr
 790              		.cfi_endproc
 791              	.LFE77:
 793              		.section	.text.USART_SendBreak,"ax",%progbits
 794              		.align	1
 795              		.global	USART_SendBreak
 796              		.syntax unified
 797              		.thumb
 798              		.thumb_func
 799              		.fpu softvfp
 801              	USART_SendBreak:
 802              	.LFB78:
 629:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 630:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 631:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Transmits break characters.
 632:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 633:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 634:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 635:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 636:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 637:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 638:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 803              		.loc 1 638 0
 804              		.cfi_startproc
 805              		@ args = 0, pretend = 0, frame = 0
 806              		@ frame_needed = 0, uses_anonymous_args = 0
 807              		@ link register save eliminated.
 808              	.LVL92:
 639:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 640:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 641:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 642:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Send break characters */
 643:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->CR1 |= CR1_SBK_Set;
 809              		.loc 1 643 0
 810 0000 8389     		ldrh	r3, [r0, #12]
 811 0002 43F00103 		orr	r3, r3, #1
 812 0006 8381     		strh	r3, [r0, #12]	@ movhi
 644:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 813              		.loc 1 644 0
 814 0008 7047     		bx	lr
 815              		.cfi_endproc
 816              	.LFE78:
 818              		.section	.text.USART_SetGuardTime,"ax",%progbits
 819              		.align	1
 820              		.global	USART_SetGuardTime
 821              		.syntax unified
 822              		.thumb
 823              		.thumb_func
 824              		.fpu softvfp
 826              	USART_SetGuardTime:
 827              	.LFB79:
 645:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 646:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 647:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Sets the specified USART guard time.
 648:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: where x can be 1, 2 or 3 to select the USART peripheral.
 649:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_GuardTime: specifies the guard time.
 650:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @note The guard time bits are not available for UART4 and UART5.   
 651:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 652:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 653:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 654:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {    
 828              		.loc 1 654 0
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 0
 831              		@ frame_needed = 0, uses_anonymous_args = 0
 832              		@ link register save eliminated.
 833              	.LVL93:
 655:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 656:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 657:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 658:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Clear the USART Guard time */
 659:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->GTPR &= GTPR_LSB_Mask;
 834              		.loc 1 659 0
 835 0000 038B     		ldrh	r3, [r0, #24]
 836 0002 DBB2     		uxtb	r3, r3
 837 0004 0383     		strh	r3, [r0, #24]	@ movhi
 660:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Set the USART guard time */
 661:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 838              		.loc 1 661 0
 839 0006 038B     		ldrh	r3, [r0, #24]
 840 0008 43EA0121 		orr	r1, r3, r1, lsl #8
 841              	.LVL94:
 842 000c 0183     		strh	r1, [r0, #24]	@ movhi
 662:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 843              		.loc 1 662 0
 844 000e 7047     		bx	lr
 845              		.cfi_endproc
 846              	.LFE79:
 848              		.section	.text.USART_SetPrescaler,"ax",%progbits
 849              		.align	1
 850              		.global	USART_SetPrescaler
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 854              		.fpu softvfp
 856              	USART_SetPrescaler:
 857              	.LFB80:
 663:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 664:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 665:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Sets the system clock prescaler.
 666:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 667:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 668:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 669:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock.  
 670:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.
 671:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 672:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 673:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 674:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** { 
 858              		.loc 1 674 0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 0
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862              		@ link register save eliminated.
 863              	.LVL95:
 675:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 676:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 677:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 678:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Clear the USART prescaler */
 679:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->GTPR &= GTPR_MSB_Mask;
 864              		.loc 1 679 0
 865 0000 038B     		ldrh	r3, [r0, #24]
 866 0002 03F47F43 		and	r3, r3, #65280
 867 0006 0383     		strh	r3, [r0, #24]	@ movhi
 680:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 681:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   // [ILG]
 682:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #if defined ( __GNUC__ )
 683:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #pragma GCC diagnostic push
 684:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #pragma GCC diagnostic ignored "-Wconversion"
 685:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #endif
 686:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 687:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Set the USART prescaler */
 688:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 868              		.loc 1 688 0
 869 0008 038B     		ldrh	r3, [r0, #24]
 870 000a 1943     		orrs	r1, r1, r3
 871              	.LVL96:
 872 000c 0183     		strh	r1, [r0, #24]	@ movhi
 689:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 690:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   // [ILG]
 691:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #if defined ( __GNUC__ )
 692:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #pragma GCC diagnostic pop
 693:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #endif
 694:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 873              		.loc 1 694 0
 874 000e 7047     		bx	lr
 875              		.cfi_endproc
 876              	.LFE80:
 878              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 879              		.align	1
 880              		.global	USART_SmartCardCmd
 881              		.syntax unified
 882              		.thumb
 883              		.thumb_func
 884              		.fpu softvfp
 886              	USART_SmartCardCmd:
 887              	.LFB81:
 695:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 696:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 697:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Enables or disables the USART�s Smart Card mode.
 698:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: where x can be 1, 2 or 3 to select the USART peripheral.
 699:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 700:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.     
 701:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @note The Smart Card mode is not available for UART4 and UART5. 
 702:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 703:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 704:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 705:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 888              		.loc 1 705 0
 889              		.cfi_startproc
 890              		@ args = 0, pretend = 0, frame = 0
 891              		@ frame_needed = 0, uses_anonymous_args = 0
 892              		@ link register save eliminated.
 893              	.LVL97:
 706:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 707:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 708:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 709:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (NewState != DISABLE)
 894              		.loc 1 709 0
 895 0000 31B9     		cbnz	r1, .L69
 710:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 711:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 712:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR3 |= CR3_SCEN_Set;
 713:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 714:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else
 715:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 716:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 717:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR3 &= CR3_SCEN_Reset;
 896              		.loc 1 717 0
 897 0002 838A     		ldrh	r3, [r0, #20]
 898 0004 9BB2     		uxth	r3, r3
 899 0006 23F02003 		bic	r3, r3, #32
 900 000a 9BB2     		uxth	r3, r3
 901 000c 8382     		strh	r3, [r0, #20]	@ movhi
 718:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 719:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 902              		.loc 1 719 0
 903 000e 7047     		bx	lr
 904              	.L69:
 712:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 905              		.loc 1 712 0
 906 0010 838A     		ldrh	r3, [r0, #20]
 907 0012 43F02003 		orr	r3, r3, #32
 908 0016 8382     		strh	r3, [r0, #20]	@ movhi
 909 0018 7047     		bx	lr
 910              		.cfi_endproc
 911              	.LFE81:
 913              		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 914              		.align	1
 915              		.global	USART_SmartCardNACKCmd
 916              		.syntax unified
 917              		.thumb
 918              		.thumb_func
 919              		.fpu softvfp
 921              	USART_SmartCardNACKCmd:
 922              	.LFB82:
 720:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 721:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 722:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Enables or disables NACK transmission.
 723:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: where x can be 1, 2 or 3 to select the USART peripheral. 
 724:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  NewState: new state of the NACK transmission.
 725:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.  
 726:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @note The Smart Card mode is not available for UART4 and UART5.
 727:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 728:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 729:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 730:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 923              		.loc 1 730 0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 0
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 927              		@ link register save eliminated.
 928              	.LVL98:
 731:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 732:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));  
 733:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 734:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (NewState != DISABLE)
 929              		.loc 1 734 0
 930 0000 31B9     		cbnz	r1, .L73
 735:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 736:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 737:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR3 |= CR3_NACK_Set;
 738:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 739:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else
 740:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 741:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 742:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR3 &= CR3_NACK_Reset;
 931              		.loc 1 742 0
 932 0002 838A     		ldrh	r3, [r0, #20]
 933 0004 9BB2     		uxth	r3, r3
 934 0006 23F01003 		bic	r3, r3, #16
 935 000a 9BB2     		uxth	r3, r3
 936 000c 8382     		strh	r3, [r0, #20]	@ movhi
 743:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 744:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 937              		.loc 1 744 0
 938 000e 7047     		bx	lr
 939              	.L73:
 737:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 940              		.loc 1 737 0
 941 0010 838A     		ldrh	r3, [r0, #20]
 942 0012 43F01003 		orr	r3, r3, #16
 943 0016 8382     		strh	r3, [r0, #20]	@ movhi
 944 0018 7047     		bx	lr
 945              		.cfi_endproc
 946              	.LFE82:
 948              		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 949              		.align	1
 950              		.global	USART_HalfDuplexCmd
 951              		.syntax unified
 952              		.thumb
 953              		.thumb_func
 954              		.fpu softvfp
 956              	USART_HalfDuplexCmd:
 957              	.LFB83:
 745:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 746:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 747:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Enables or disables the USART�s Half Duplex communication.
 748:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 749:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 750:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 751:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  NewState: new state of the USART Communication.
 752:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 753:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 754:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 755:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 756:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 958              		.loc 1 756 0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 962              		@ link register save eliminated.
 963              	.LVL99:
 757:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 758:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 759:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 760:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 761:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (NewState != DISABLE)
 964              		.loc 1 761 0
 965 0000 31B9     		cbnz	r1, .L77
 762:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 763:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 764:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR3 |= CR3_HDSEL_Set;
 765:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 766:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else
 767:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 768:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 769:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR3 &= CR3_HDSEL_Reset;
 966              		.loc 1 769 0
 967 0002 838A     		ldrh	r3, [r0, #20]
 968 0004 9BB2     		uxth	r3, r3
 969 0006 23F00803 		bic	r3, r3, #8
 970 000a 9BB2     		uxth	r3, r3
 971 000c 8382     		strh	r3, [r0, #20]	@ movhi
 770:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 771:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 972              		.loc 1 771 0
 973 000e 7047     		bx	lr
 974              	.L77:
 764:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 975              		.loc 1 764 0
 976 0010 838A     		ldrh	r3, [r0, #20]
 977 0012 43F00803 		orr	r3, r3, #8
 978 0016 8382     		strh	r3, [r0, #20]	@ movhi
 979 0018 7047     		bx	lr
 980              		.cfi_endproc
 981              	.LFE83:
 983              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 984              		.align	1
 985              		.global	USART_OverSampling8Cmd
 986              		.syntax unified
 987              		.thumb
 988              		.thumb_func
 989              		.fpu softvfp
 991              	USART_OverSampling8Cmd:
 992              	.LFB84:
 772:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 773:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 774:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 775:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 776:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral.
 777:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 778:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 779:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 780:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 781:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @note
 782:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     This function has to be called before calling USART_Init()
 783:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     function in order to have correct baudrate Divider value.   
 784:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 785:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 786:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 787:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 993              		.loc 1 787 0
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 0
 996              		@ frame_needed = 0, uses_anonymous_args = 0
 997              		@ link register save eliminated.
 998              	.LVL100:
 788:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 789:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 790:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 791:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 792:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (NewState != DISABLE)
 999              		.loc 1 792 0
 1000 0000 21B9     		cbnz	r1, .L81
 793:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 794:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 795:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR1 |= CR1_OVER8_Set;
 796:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 797:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else
 798:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 799:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 800:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR1 &= CR1_OVER8_Reset;
 1001              		.loc 1 800 0
 1002 0002 8389     		ldrh	r3, [r0, #12]
 1003 0004 C3F30E03 		ubfx	r3, r3, #0, #15
 1004 0008 8381     		strh	r3, [r0, #12]	@ movhi
 801:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 802:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 1005              		.loc 1 802 0
 1006 000a 7047     		bx	lr
 1007              	.L81:
 795:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 1008              		.loc 1 795 0
 1009 000c 8389     		ldrh	r3, [r0, #12]
 1010 000e 43F40043 		orr	r3, r3, #32768
 1011 0012 8381     		strh	r3, [r0, #12]	@ movhi
 1012 0014 7047     		bx	lr
 1013              		.cfi_endproc
 1014              	.LFE84:
 1016              		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 1017              		.align	1
 1018              		.global	USART_OneBitMethodCmd
 1019              		.syntax unified
 1020              		.thumb
 1021              		.thumb_func
 1022              		.fpu softvfp
 1024              	USART_OneBitMethodCmd:
 1025              	.LFB85:
 803:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 804:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 805:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 806:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral.
 807:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 808:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 809:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 810:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 811:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 812:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 813:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 814:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 1026              		.loc 1 814 0
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 0
 1029              		@ frame_needed = 0, uses_anonymous_args = 0
 1030              		@ link register save eliminated.
 1031              	.LVL101:
 815:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 816:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 817:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 818:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 819:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1032              		.loc 1 819 0
 1033 0000 31B9     		cbnz	r1, .L85
 820:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 821:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 822:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR3 |= CR3_ONEBITE_Set;
 823:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 824:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else
 825:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 826:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
 827:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR3 &= CR3_ONEBITE_Reset;
 1034              		.loc 1 827 0
 1035 0002 838A     		ldrh	r3, [r0, #20]
 1036 0004 9BB2     		uxth	r3, r3
 1037 0006 23F40063 		bic	r3, r3, #2048
 1038 000a 9BB2     		uxth	r3, r3
 1039 000c 8382     		strh	r3, [r0, #20]	@ movhi
 828:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 829:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 1040              		.loc 1 829 0
 1041 000e 7047     		bx	lr
 1042              	.L85:
 822:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 1043              		.loc 1 822 0
 1044 0010 838A     		ldrh	r3, [r0, #20]
 1045 0012 43F40063 		orr	r3, r3, #2048
 1046 0016 8382     		strh	r3, [r0, #20]	@ movhi
 1047 0018 7047     		bx	lr
 1048              		.cfi_endproc
 1049              	.LFE85:
 1051              		.section	.text.USART_IrDAConfig,"ax",%progbits
 1052              		.align	1
 1053              		.global	USART_IrDAConfig
 1054              		.syntax unified
 1055              		.thumb
 1056              		.thumb_func
 1057              		.fpu softvfp
 1059              	USART_IrDAConfig:
 1060              	.LFB86:
 830:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 831:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 832:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Configures the USART's IrDA interface.
 833:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 834:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 835:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 836:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
 837:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 838:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IrDAMode_LowPower
 839:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IrDAMode_Normal
 840:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 841:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 842:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
 843:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 1061              		.loc 1 843 0
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 0
 1064              		@ frame_needed = 0, uses_anonymous_args = 0
 1065              		@ link register save eliminated.
 1066              	.LVL102:
 844:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 845:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 846:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
 847:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     
 848:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->CR3 &= CR3_IRLP_Mask;
 1067              		.loc 1 848 0
 1068 0000 838A     		ldrh	r3, [r0, #20]
 1069 0002 9BB2     		uxth	r3, r3
 1070 0004 23F00403 		bic	r3, r3, #4
 1071 0008 9BB2     		uxth	r3, r3
 1072 000a 8382     		strh	r3, [r0, #20]	@ movhi
 849:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1073              		.loc 1 849 0
 1074 000c 838A     		ldrh	r3, [r0, #20]
 1075 000e 1943     		orrs	r1, r1, r3
 1076              	.LVL103:
 1077 0010 8182     		strh	r1, [r0, #20]	@ movhi
 850:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 1078              		.loc 1 850 0
 1079 0012 7047     		bx	lr
 1080              		.cfi_endproc
 1081              	.LFE86:
 1083              		.section	.text.USART_IrDACmd,"ax",%progbits
 1084              		.align	1
 1085              		.global	USART_IrDACmd
 1086              		.syntax unified
 1087              		.thumb
 1088              		.thumb_func
 1089              		.fpu softvfp
 1091              	USART_IrDACmd:
 1092              	.LFB87:
 851:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 852:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 853:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
 854:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 855:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 856:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 857:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  NewState: new state of the IrDA mode.
 858:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 859:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 860:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 861:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
 862:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 1093              		.loc 1 862 0
 1094              		.cfi_startproc
 1095              		@ args = 0, pretend = 0, frame = 0
 1096              		@ frame_needed = 0, uses_anonymous_args = 0
 1097              		@ link register save eliminated.
 1098              	.LVL104:
 863:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 864:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 865:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 866:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     
 867:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1099              		.loc 1 867 0
 1100 0000 31B9     		cbnz	r1, .L90
 868:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 869:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
 870:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR3 |= CR3_IREN_Set;
 871:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 872:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else
 873:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 874:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
 875:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     USARTx->CR3 &= CR3_IREN_Reset;
 1101              		.loc 1 875 0
 1102 0002 838A     		ldrh	r3, [r0, #20]
 1103 0004 9BB2     		uxth	r3, r3
 1104 0006 23F00203 		bic	r3, r3, #2
 1105 000a 9BB2     		uxth	r3, r3
 1106 000c 8382     		strh	r3, [r0, #20]	@ movhi
 876:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 877:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 1107              		.loc 1 877 0
 1108 000e 7047     		bx	lr
 1109              	.L90:
 870:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 1110              		.loc 1 870 0
 1111 0010 838A     		ldrh	r3, [r0, #20]
 1112 0012 43F00203 		orr	r3, r3, #2
 1113 0016 8382     		strh	r3, [r0, #20]	@ movhi
 1114 0018 7047     		bx	lr
 1115              		.cfi_endproc
 1116              	.LFE87:
 1118              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1119              		.align	1
 1120              		.global	USART_GetFlagStatus
 1121              		.syntax unified
 1122              		.thumb
 1123              		.thumb_func
 1124              		.fpu softvfp
 1126              	USART_GetFlagStatus:
 1127              	.LFB88:
 878:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 879:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 880:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
 881:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 882:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 883:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 884:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
 885:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 886:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
 887:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_FLAG_LBD:  LIN Break detection flag
 888:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_FLAG_TXE:  Transmit data register empty flag
 889:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_FLAG_TC:   Transmission Complete flag
 890:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_FLAG_RXNE: Receive data register not empty flag
 891:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_FLAG_IDLE: Idle Line detection flag
 892:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_FLAG_ORE:  OverRun Error flag
 893:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_FLAG_NE:   Noise Error flag
 894:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_FLAG_FE:   Framing Error flag
 895:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_FLAG_PE:   Parity Error flag
 896:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
 897:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 898:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
 899:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 1128              		.loc 1 899 0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 0
 1131              		@ frame_needed = 0, uses_anonymous_args = 0
 1132              		@ link register save eliminated.
 1133              	.LVL105:
 900:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   FlagStatus bitstatus = RESET;
 901:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 902:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 903:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
 904:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
 905:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
 906:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 907:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
 908:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }  
 909:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 910:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1134              		.loc 1 910 0
 1135 0000 0388     		ldrh	r3, [r0]
 1136 0002 1942     		tst	r1, r3
 1137 0004 01D1     		bne	.L94
 911:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 912:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     bitstatus = SET;
 913:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 914:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else
 915:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 916:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     bitstatus = RESET;
 1138              		.loc 1 916 0
 1139 0006 0020     		movs	r0, #0
 1140              	.LVL106:
 917:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 918:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   return bitstatus;
 919:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 1141              		.loc 1 919 0
 1142 0008 7047     		bx	lr
 1143              	.LVL107:
 1144              	.L94:
 912:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 1145              		.loc 1 912 0
 1146 000a 0120     		movs	r0, #1
 1147              	.LVL108:
 1148 000c 7047     		bx	lr
 1149              		.cfi_endproc
 1150              	.LFE88:
 1152              		.section	.text.USART_ClearFlag,"ax",%progbits
 1153              		.align	1
 1154              		.global	USART_ClearFlag
 1155              		.syntax unified
 1156              		.thumb
 1157              		.thumb_func
 1158              		.fpu softvfp
 1160              	USART_ClearFlag:
 1161              	.LFB89:
 920:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 921:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 922:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Clears the USARTx's pending flags.
 923:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 924:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 925:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 926:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
 927:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be any combination of the following values:
 928:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
 929:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_FLAG_LBD:  LIN Break detection flag.
 930:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_FLAG_TC:   Transmission Complete flag.
 931:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_FLAG_RXNE: Receive data register not empty flag.
 932:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   
 933:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @note
 934:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   - PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
 935:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     error) and IDLE (Idle line detected) flags are cleared by software 
 936:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
 937:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     followed by a read operation to USART_DR register (USART_ReceiveData()).
 938:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   - RXNE flag can be also cleared by a read to the USART_DR register 
 939:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     (USART_ReceiveData()).
 940:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   - TC flag can be also cleared by software sequence: a read operation to 
 941:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     USART_SR register (USART_GetFlagStatus()) followed by a write operation
 942:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     to USART_DR register (USART_SendData()).
 943:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   - TXE flag is cleared only by a write to the USART_DR register 
 944:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     (USART_SendData()).
 945:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
 946:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 947:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
 948:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 1162              		.loc 1 948 0
 1163              		.cfi_startproc
 1164              		@ args = 0, pretend = 0, frame = 0
 1165              		@ frame_needed = 0, uses_anonymous_args = 0
 1166              		@ link register save eliminated.
 1167              	.LVL109:
 949:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 950:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 951:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
 952:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
 953:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
 954:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 955:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
 956:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   } 
 957:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****    
 958:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1168              		.loc 1 958 0
 1169 0000 C943     		mvns	r1, r1
 1170              	.LVL110:
 1171 0002 89B2     		uxth	r1, r1
 1172 0004 0180     		strh	r1, [r0]	@ movhi
 959:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 1173              		.loc 1 959 0
 1174 0006 7047     		bx	lr
 1175              		.cfi_endproc
 1176              	.LFE89:
 1178              		.section	.text.USART_GetITStatus,"ax",%progbits
 1179              		.align	1
 1180              		.global	USART_GetITStatus
 1181              		.syntax unified
 1182              		.thumb
 1183              		.thumb_func
 1184              		.fpu softvfp
 1186              	USART_GetITStatus:
 1187              	.LFB90:
 960:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
 961:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
 962:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
 963:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 964:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 965:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 966:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
 967:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 968:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
 969:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_LBD:  LIN Break detection interrupt
 970:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_TXE:  Tansmit Data Register empty interrupt
 971:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_TC:   Transmission complete interrupt
 972:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_RXNE: Receive Data register not empty interrupt
 973:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_IDLE: Idle line detection interrupt
 974:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_ORE:  OverRun Error interrupt
 975:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_NE:   Noise Error interrupt
 976:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_FE:   Framing Error interrupt
 977:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_PE:   Parity Error interrupt
 978:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
 979:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
 980:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
 981:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 1188              		.loc 1 981 0
 1189              		.cfi_startproc
 1190              		@ args = 0, pretend = 0, frame = 0
 1191              		@ frame_needed = 0, uses_anonymous_args = 0
 1192              		@ link register save eliminated.
 1193              	.LVL111:
 1194 0000 10B4     		push	{r4}
 1195              		.cfi_def_cfa_offset 4
 1196              		.cfi_offset 4, -4
 1197              	.LVL112:
 982:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 983:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   ITStatus bitstatus = RESET;
 984:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
 985:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 986:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT));
 987:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
 988:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (USART_IT == USART_IT_CTS)
 989:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
 990:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
 991:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }   
 992:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 993:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Get the USART register index */
 994:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1198              		.loc 1 994 0
 1199 0002 C1F34212 		ubfx	r2, r1, #5, #3
 1200              	.LVL113:
 995:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Get the interrupt position */
 996:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   itmask = USART_IT & IT_Mask;
 1201              		.loc 1 996 0
 1202 0006 01F01F04 		and	r4, r1, #31
 1203              	.LVL114:
 997:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1204              		.loc 1 997 0
 1205 000a 0123     		movs	r3, #1
 1206 000c A340     		lsls	r3, r3, r4
 1207              	.LVL115:
 998:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
 999:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1208              		.loc 1 999 0
 1209 000e 012A     		cmp	r2, #1
 1210 0010 0DD0     		beq	.L104
1000:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
1001:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     itmask &= USARTx->CR1;
1002:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
1003:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1211              		.loc 1 1003 0
 1212 0012 022A     		cmp	r2, #2
 1213 0014 0ED0     		beq	.L105
1004:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
1005:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     itmask &= USARTx->CR2;
1006:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
1007:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else /* The IT  is in CR3 register */
1008:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
1009:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     itmask &= USARTx->CR3;
 1214              		.loc 1 1009 0
 1215 0016 828A     		ldrh	r2, [r0, #20]
 1216              	.LVL116:
 1217 0018 1340     		ands	r3, r3, r2
 1218              	.LVL117:
 1219              	.L98:
1010:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
1011:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
1012:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   bitpos = USART_IT >> 0x08;
 1220              		.loc 1 1012 0
 1221 001a 090A     		lsrs	r1, r1, #8
 1222              	.LVL118:
1013:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1223              		.loc 1 1013 0
 1224 001c 0122     		movs	r2, #1
 1225 001e 02FA01F1 		lsl	r1, r2, r1
 1226              	.LVL119:
1014:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   bitpos &= USARTx->SR;
 1227              		.loc 1 1014 0
 1228 0022 0288     		ldrh	r2, [r0]
 1229 0024 1140     		ands	r1, r1, r2
 1230              	.LVL120:
1015:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1231              		.loc 1 1015 0
 1232 0026 43B1     		cbz	r3, .L101
 1233              		.loc 1 1015 0 is_stmt 0 discriminator 1
 1234 0028 51B9     		cbnz	r1, .L102
1016:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
1017:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     bitstatus = SET;
1018:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
1019:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   else
1020:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
1021:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     bitstatus = RESET;
 1235              		.loc 1 1021 0 is_stmt 1
 1236 002a 0020     		movs	r0, #0
 1237              	.LVL121:
 1238 002c 06E0     		b	.L100
 1239              	.LVL122:
 1240              	.L104:
1001:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 1241              		.loc 1 1001 0
 1242 002e 8289     		ldrh	r2, [r0, #12]
 1243              	.LVL123:
 1244 0030 1340     		ands	r3, r3, r2
 1245              	.LVL124:
 1246 0032 F2E7     		b	.L98
 1247              	.LVL125:
 1248              	.L105:
1005:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 1249              		.loc 1 1005 0
 1250 0034 028A     		ldrh	r2, [r0, #16]
 1251              	.LVL126:
 1252 0036 1340     		ands	r3, r3, r2
 1253              	.LVL127:
 1254 0038 EFE7     		b	.L98
 1255              	.LVL128:
 1256              	.L101:
 1257              		.loc 1 1021 0
 1258 003a 0020     		movs	r0, #0
 1259              	.LVL129:
 1260              	.L100:
1022:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
1023:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
1024:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   return bitstatus;  
1025:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 1261              		.loc 1 1025 0
 1262 003c 10BC     		pop	{r4}
 1263              		.cfi_remember_state
 1264              		.cfi_restore 4
 1265              		.cfi_def_cfa_offset 0
 1266 003e 7047     		bx	lr
 1267              	.LVL130:
 1268              	.L102:
 1269              		.cfi_restore_state
1017:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }
 1270              		.loc 1 1017 0
 1271 0040 0120     		movs	r0, #1
 1272              	.LVL131:
 1273 0042 FBE7     		b	.L100
 1274              		.cfi_endproc
 1275              	.LFE90:
 1277              		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 1278              		.align	1
 1279              		.global	USART_ClearITPendingBit
 1280              		.syntax unified
 1281              		.thumb
 1282              		.thumb_func
 1283              		.fpu softvfp
 1285              	USART_ClearITPendingBit:
 1286              	.LFB91:
1026:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
1027:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** /**
1028:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1029:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
1030:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
1031:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
1032:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1033:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
1034:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1035:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_LBD:  LIN Break detection interrupt
1036:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_TC:   Transmission complete interrupt. 
1037:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1038:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   
1039:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @note
1040:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   - PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1041:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     error) and IDLE (Idle line detected) pending bits are cleared by 
1042:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     software sequence: a read operation to USART_SR register 
1043:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     (USART_GetITStatus()) followed by a read operation to USART_DR register 
1044:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     (USART_ReceiveData()).
1045:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   - RXNE pending bit can be also cleared by a read to the USART_DR register 
1046:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     (USART_ReceiveData()).
1047:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   - TC pending bit can be also cleared by software sequence: a read 
1048:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     operation to USART_SR register (USART_GetITStatus()) followed by a write 
1049:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     operation to USART_DR register (USART_SendData()).
1050:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *   - TXE pending bit is cleared only by a write to the USART_DR register 
1051:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   *     (USART_SendData()).
1052:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   * @retval None
1053:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   */
1054:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1055:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** {
 1287              		.loc 1 1055 0
 1288              		.cfi_startproc
 1289              		@ args = 0, pretend = 0, frame = 0
 1290              		@ frame_needed = 0, uses_anonymous_args = 0
 1291              		@ link register save eliminated.
 1292              	.LVL132:
1056:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
1057:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* Check the parameters */
1058:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1059:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT));
1060:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1061:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   if (USART_IT == USART_IT_CTS)
1062:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   {
1063:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
1064:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   }   
1065:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   
1066:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   bitpos = USART_IT >> 0x08;
 1293              		.loc 1 1066 0
 1294 0000 090A     		lsrs	r1, r1, #8
 1295              	.LVL133:
1067:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
1068:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   // [ILG]
1069:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #if defined ( __GNUC__ )
1070:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #pragma GCC diagnostic push
1071:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #pragma GCC diagnostic ignored "-Wconversion"
1072:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #endif
1073:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 1296              		.loc 1 1073 0
 1297 0002 0123     		movs	r3, #1
 1298 0004 8B40     		lsls	r3, r3, r1
 1299 0006 9BB2     		uxth	r3, r3
 1300              	.LVL134:
1074:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   // [ILG]
1075:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #if defined ( __GNUC__ )
1076:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #pragma GCC diagnostic pop
1077:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   #endif
1078:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** 
1079:../system/src/stm32f1-stdperiph/stm32f10x_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 1301              		.loc 1 1079 0
 1302 0008 DB43     		mvns	r3, r3
 1303              	.LVL135:
 1304 000a 9BB2     		uxth	r3, r3
 1305              	.LVL136:
 1306 000c 0380     		strh	r3, [r0]	@ movhi
1080:../system/src/stm32f1-stdperiph/stm32f10x_usart.c **** }
 1307              		.loc 1 1080 0
 1308 000e 7047     		bx	lr
 1309              		.cfi_endproc
 1310              	.LFE91:
 1312              		.text
 1313              	.Letext0:
 1314              		.file 2 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 1315              		.file 3 "../system/include/cmsis/core_cm3.h"
 1316              		.file 4 "../system/include/cmsis/system_stm32f10x.h"
 1317              		.file 5 "../system/include/cmsis/stm32f10x.h"
 1318              		.file 6 "../system/include/stm32f1-stdperiph/stm32f10x_rcc.h"
 1319              		.file 7 "../system/include/stm32f1-stdperiph/stm32f10x_usart.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f10x_usart.c
     /tmp/ccOXFUJy.s:16     .text.USART_DeInit:0000000000000000 $t
     /tmp/ccOXFUJy.s:23     .text.USART_DeInit:0000000000000000 USART_DeInit
     /tmp/ccOXFUJy.s:133    .text.USART_DeInit:0000000000000090 $d
     /tmp/ccOXFUJy.s:142    .text.USART_Init:0000000000000000 $t
     /tmp/ccOXFUJy.s:149    .text.USART_Init:0000000000000000 USART_Init
     /tmp/ccOXFUJy.s:304    .text.USART_Init:00000000000000c0 $d
     /tmp/ccOXFUJy.s:310    .text.USART_StructInit:0000000000000000 $t
     /tmp/ccOXFUJy.s:317    .text.USART_StructInit:0000000000000000 USART_StructInit
     /tmp/ccOXFUJy.s:346    .text.USART_ClockInit:0000000000000000 $t
     /tmp/ccOXFUJy.s:353    .text.USART_ClockInit:0000000000000000 USART_ClockInit
     /tmp/ccOXFUJy.s:398    .text.USART_ClockStructInit:0000000000000000 $t
     /tmp/ccOXFUJy.s:405    .text.USART_ClockStructInit:0000000000000000 USART_ClockStructInit
     /tmp/ccOXFUJy.s:428    .text.USART_Cmd:0000000000000000 $t
     /tmp/ccOXFUJy.s:435    .text.USART_Cmd:0000000000000000 USART_Cmd
     /tmp/ccOXFUJy.s:463    .text.USART_ITConfig:0000000000000000 $t
     /tmp/ccOXFUJy.s:470    .text.USART_ITConfig:0000000000000000 USART_ITConfig
     /tmp/ccOXFUJy.s:542    .text.USART_DMACmd:0000000000000000 $t
     /tmp/ccOXFUJy.s:549    .text.USART_DMACmd:0000000000000000 USART_DMACmd
     /tmp/ccOXFUJy.s:578    .text.USART_SetAddress:0000000000000000 $t
     /tmp/ccOXFUJy.s:585    .text.USART_SetAddress:0000000000000000 USART_SetAddress
     /tmp/ccOXFUJy.s:610    .text.USART_WakeUpConfig:0000000000000000 $t
     /tmp/ccOXFUJy.s:617    .text.USART_WakeUpConfig:0000000000000000 USART_WakeUpConfig
     /tmp/ccOXFUJy.s:642    .text.USART_ReceiverWakeUpCmd:0000000000000000 $t
     /tmp/ccOXFUJy.s:649    .text.USART_ReceiverWakeUpCmd:0000000000000000 USART_ReceiverWakeUpCmd
     /tmp/ccOXFUJy.s:677    .text.USART_LINBreakDetectLengthConfig:0000000000000000 $t
     /tmp/ccOXFUJy.s:684    .text.USART_LINBreakDetectLengthConfig:0000000000000000 USART_LINBreakDetectLengthConfig
     /tmp/ccOXFUJy.s:709    .text.USART_LINCmd:0000000000000000 $t
     /tmp/ccOXFUJy.s:716    .text.USART_LINCmd:0000000000000000 USART_LINCmd
     /tmp/ccOXFUJy.s:744    .text.USART_SendData:0000000000000000 $t
     /tmp/ccOXFUJy.s:751    .text.USART_SendData:0000000000000000 USART_SendData
     /tmp/ccOXFUJy.s:769    .text.USART_ReceiveData:0000000000000000 $t
     /tmp/ccOXFUJy.s:776    .text.USART_ReceiveData:0000000000000000 USART_ReceiveData
     /tmp/ccOXFUJy.s:794    .text.USART_SendBreak:0000000000000000 $t
     /tmp/ccOXFUJy.s:801    .text.USART_SendBreak:0000000000000000 USART_SendBreak
     /tmp/ccOXFUJy.s:819    .text.USART_SetGuardTime:0000000000000000 $t
     /tmp/ccOXFUJy.s:826    .text.USART_SetGuardTime:0000000000000000 USART_SetGuardTime
     /tmp/ccOXFUJy.s:849    .text.USART_SetPrescaler:0000000000000000 $t
     /tmp/ccOXFUJy.s:856    .text.USART_SetPrescaler:0000000000000000 USART_SetPrescaler
     /tmp/ccOXFUJy.s:879    .text.USART_SmartCardCmd:0000000000000000 $t
     /tmp/ccOXFUJy.s:886    .text.USART_SmartCardCmd:0000000000000000 USART_SmartCardCmd
     /tmp/ccOXFUJy.s:914    .text.USART_SmartCardNACKCmd:0000000000000000 $t
     /tmp/ccOXFUJy.s:921    .text.USART_SmartCardNACKCmd:0000000000000000 USART_SmartCardNACKCmd
     /tmp/ccOXFUJy.s:949    .text.USART_HalfDuplexCmd:0000000000000000 $t
     /tmp/ccOXFUJy.s:956    .text.USART_HalfDuplexCmd:0000000000000000 USART_HalfDuplexCmd
     /tmp/ccOXFUJy.s:984    .text.USART_OverSampling8Cmd:0000000000000000 $t
     /tmp/ccOXFUJy.s:991    .text.USART_OverSampling8Cmd:0000000000000000 USART_OverSampling8Cmd
     /tmp/ccOXFUJy.s:1017   .text.USART_OneBitMethodCmd:0000000000000000 $t
     /tmp/ccOXFUJy.s:1024   .text.USART_OneBitMethodCmd:0000000000000000 USART_OneBitMethodCmd
     /tmp/ccOXFUJy.s:1052   .text.USART_IrDAConfig:0000000000000000 $t
     /tmp/ccOXFUJy.s:1059   .text.USART_IrDAConfig:0000000000000000 USART_IrDAConfig
     /tmp/ccOXFUJy.s:1084   .text.USART_IrDACmd:0000000000000000 $t
     /tmp/ccOXFUJy.s:1091   .text.USART_IrDACmd:0000000000000000 USART_IrDACmd
     /tmp/ccOXFUJy.s:1119   .text.USART_GetFlagStatus:0000000000000000 $t
     /tmp/ccOXFUJy.s:1126   .text.USART_GetFlagStatus:0000000000000000 USART_GetFlagStatus
     /tmp/ccOXFUJy.s:1153   .text.USART_ClearFlag:0000000000000000 $t
     /tmp/ccOXFUJy.s:1160   .text.USART_ClearFlag:0000000000000000 USART_ClearFlag
     /tmp/ccOXFUJy.s:1179   .text.USART_GetITStatus:0000000000000000 $t
     /tmp/ccOXFUJy.s:1186   .text.USART_GetITStatus:0000000000000000 USART_GetITStatus
     /tmp/ccOXFUJy.s:1278   .text.USART_ClearITPendingBit:0000000000000000 $t
     /tmp/ccOXFUJy.s:1285   .text.USART_ClearITPendingBit:0000000000000000 USART_ClearITPendingBit
                           .group:0000000000000000 wm4.0.879aed89c359f5856fe69c61b3590d34
                           .group:0000000000000000 wm4.stm32f10x.h.51.c58ea26c5150470d52680f0bbaa7049c
                           .group:0000000000000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:0000000000000000 wm4.core_cm3.h.82.57a0f9dd004efa579f86574376281d2f
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.67d2dcde6a14ff518eedc1d545d89a76
                           .group:0000000000000000 wm4.core_cm3.h.183.ecfd9c316d6f10b73648f6e579b02c8b
                           .group:0000000000000000 wm4.stm32f10x.h.522.a925aafc848b1f088438cf0e9b167b78
                           .group:0000000000000000 wm4.stm32f10x_adc.h.89.9f2b285fa0070185d48a05b61a05798c
                           .group:0000000000000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:0000000000000000 wm4.stm32f10x_can.h.25.e5e43f6bbc8fc7c8aa30ef2bc5610ced
                           .group:0000000000000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:0000000000000000 wm4.stm32f10x_dac.h.25.d946244edf026333094657d55ea894b8
                           .group:0000000000000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:0000000000000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:0000000000000000 wm4.stm32f10x_exti.h.25.f52c69aad7d1994be5b2c4e2b8f4c595
                           .group:0000000000000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:0000000000000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:0000000000000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:0000000000000000 wm4.stm32f10x_i2c.h.25.b124ac2c620f8ebddd92b6d95ca62176
                           .group:0000000000000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:0000000000000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:0000000000000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:0000000000000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:0000000000000000 wm4.stm32f10x_sdio.h.25.fb0db079f5c1412c40f359319f7c40b0
                           .group:0000000000000000 wm4.stm32f10x_spi.h.25.3f6dfa4abe177efb3c6f5a717c06b323
                           .group:0000000000000000 wm4.stm32f10x_tim.h.25.f709106ba77b314e6b070693f89f3c56
                           .group:0000000000000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:0000000000000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:0000000000000000 wm4.stm32f10x.h.8317.9a8e476d96d33bb2df9a9ad0775bd4a7
                           .group:0000000000000000 wm4.stm32f10x_usart.h.113.e10308865d210b1acbce2287304c6636

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
