   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f10x_rcc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.RCC_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	RCC_DeInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	RCC_DeInit:
  24              	.LFB63:
  25              		.file 1 "../system/src/stm32f1-stdperiph/stm32f10x_rcc.c"
   1:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
   2:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   ******************************************************************************
   3:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @file    stm32f10x_rcc.c
   4:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @author  MCD Application Team
   5:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @version V3.5.0
   6:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @date    11-March-2011
   7:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief   This file provides all the RCC firmware functions.
   8:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   ******************************************************************************
   9:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @attention
  10:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *
  11:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *
  18:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   ******************************************************************************
  20:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
  21:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  22:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Includes ------------------------------------------------------------------*/
  23:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #include "stm32f10x_rcc.h"
  24:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  25:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  26:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
  27:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
  28:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  29:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @defgroup RCC 
  30:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief RCC driver modules
  31:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
  32:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */ 
  33:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  34:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @defgroup RCC_Private_TypesDefinitions
  35:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
  36:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
  37:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  38:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
  39:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @}
  40:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
  41:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  42:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Defines
  43:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
  44:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
  45:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  46:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  47:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  48:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  49:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* --- CR Register ---*/
  50:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  51:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Alias word address of HSION bit */
  52:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  53:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define HSION_BitNumber           0x00
  54:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  55:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  56:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Alias word address of PLLON bit */
  57:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define PLLON_BitNumber           0x18
  58:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  59:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  60:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
  61:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  /* Alias word address of PLL2ON bit */
  62:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define PLL2ON_BitNumber          0x1A
  63:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CR_PLL2ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL2ON_BitNumber * 4))
  64:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  65:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  /* Alias word address of PLL3ON bit */
  66:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define PLL3ON_BitNumber          0x1C
  67:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CR_PLL3ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL3ON_BitNumber * 4))
  68:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  69:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  70:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Alias word address of CSSON bit */
  71:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CSSON_BitNumber           0x13
  72:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  73:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  74:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* --- CFGR Register ---*/
  75:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  76:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Alias word address of USBPRE bit */
  77:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x04)
  78:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  79:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
  80:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define USBPRE_BitNumber          0x16
  81:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR_USBPRE_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (USBPRE_BitNumber * 4))
  82:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #else
  83:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define OTGFSPRE_BitNumber        0x16
  84:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR_OTGFSPRE_BB          (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (OTGFSPRE_BitNumber * 4))
  85:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  86:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  87:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* --- BDCR Register ---*/
  88:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  89:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Alias word address of RTCEN bit */
  90:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x20)
  91:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define RTCEN_BitNumber           0x0F
  92:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  93:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  94:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Alias word address of BDRST bit */
  95:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define BDRST_BitNumber           0x10
  96:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
  97:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
  98:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* --- CSR Register ---*/
  99:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 100:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* Alias word address of LSION bit */
 101:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x24)
 102:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define LSION_BitNumber           0x00
 103:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 104:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 105:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 106:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* --- CFGR2 Register ---*/
 107:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 108:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  /* Alias word address of I2S2SRC bit */
 109:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_OFFSET              (RCC_OFFSET + 0x2C)
 110:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define I2S2SRC_BitNumber         0x11
 111:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_I2S2SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S2SRC_BitNumber * 4))
 112:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 113:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  /* Alias word address of I2S3SRC bit */
 114:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define I2S3SRC_BitNumber         0x12
 115:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_I2S3SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S3SRC_BitNumber * 4))
 116:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 117:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 118:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 119:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 120:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* CR register bit mask */
 121:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_HSEBYP_Reset           ((uint32_t)0xFFFBFFFF)
 122:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_HSEBYP_Set             ((uint32_t)0x00040000)
 123:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_HSEON_Reset            ((uint32_t)0xFFFEFFFF)
 124:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_HSEON_Set              ((uint32_t)0x00010000)
 125:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CR_HSITRIM_Mask           ((uint32_t)0xFFFFFF07)
 126:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 127:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* CFGR register bit mask */
 128:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 129:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC2FFFF)
 130:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #else
 131:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC0FFFF)
 132:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 133:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 134:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_PLLMull_Mask         ((uint32_t)0x003C0000)
 135:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_PLLSRC_Mask          ((uint32_t)0x00010000)
 136:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_PLLXTPRE_Mask        ((uint32_t)0x00020000)
 137:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_SWS_Mask             ((uint32_t)0x0000000C)
 138:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_SW_Mask              ((uint32_t)0xFFFFFFFC)
 139:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_HPRE_Reset_Mask      ((uint32_t)0xFFFFFF0F)
 140:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_HPRE_Set_Mask        ((uint32_t)0x000000F0)
 141:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_PPRE1_Reset_Mask     ((uint32_t)0xFFFFF8FF)
 142:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_PPRE1_Set_Mask       ((uint32_t)0x00000700)
 143:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_PPRE2_Reset_Mask     ((uint32_t)0xFFFFC7FF)
 144:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_PPRE2_Set_Mask       ((uint32_t)0x00003800)
 145:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Reset_Mask    ((uint32_t)0xFFFF3FFF)
 146:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Set_Mask      ((uint32_t)0x0000C000)
 147:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 148:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* CSR register bit mask */
 149:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CSR_RMVF_Set              ((uint32_t)0x01000000)
 150:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 151:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 152:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* CFGR2 register bit mask */
 153:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1SRC         ((uint32_t)0x00010000)
 154:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1            ((uint32_t)0x0000000F)
 155:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif
 156:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 157:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_PREDIV2            ((uint32_t)0x000000F0)
 158:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_PLL2MUL            ((uint32_t)0x00000F00)
 159:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #define CFGR2_PLL3MUL            ((uint32_t)0x0000F000)
 160:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 161:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 162:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* RCC Flag Mask */
 163:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define FLAG_Mask                 ((uint8_t)0x1F)
 164:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 165:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 166:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x40021009)
 167:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 168:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 169:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)0x4002100A)
 170:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 171:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* CFGR register byte 4 (Bits[31:24]) base address */
 172:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define CFGR_BYTE4_ADDRESS        ((uint32_t)0x40021007)
 173:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 174:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /* BDCR register base address */
 175:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 176:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 177:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 178:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @}
 179:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */ 
 180:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 181:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Macros
 182:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
 183:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */ 
 184:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 185:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 186:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @}
 187:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */ 
 188:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 189:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Variables
 190:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
 191:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */ 
 192:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 193:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 194:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** static __I uint8_t ADCPrescTable[4] = {2, 4, 6, 8};
 195:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 196:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 197:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @}
 198:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 199:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 200:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @defgroup RCC_Private_FunctionPrototypes
 201:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
 202:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 203:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 204:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 205:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @}
 206:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 207:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 208:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Functions
 209:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @{
 210:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 211:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 212:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 213:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 214:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  None
 215:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 216:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 217:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_DeInit(void)
 218:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
  26              		.loc 1 218 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 219:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set HSION bit */
 220:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  31              		.loc 1 220 0
  32 0000 0E4B     		ldr	r3, .L2
  33 0002 1A68     		ldr	r2, [r3]
  34 0004 42F00102 		orr	r2, r2, #1
  35 0008 1A60     		str	r2, [r3]
 221:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 222:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 223:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 224:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
  36              		.loc 1 224 0
  37 000a 5968     		ldr	r1, [r3, #4]
  38 000c 0C4A     		ldr	r2, .L2+4
  39 000e 0A40     		ands	r2, r2, r1
  40 0010 5A60     		str	r2, [r3, #4]
 225:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #else
 226:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 227:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */   
 228:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   
 229:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 230:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  41              		.loc 1 230 0
  42 0012 1A68     		ldr	r2, [r3]
  43 0014 22F08472 		bic	r2, r2, #17301504
  44 0018 22F48032 		bic	r2, r2, #65536
  45 001c 1A60     		str	r2, [r3]
 231:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 232:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 233:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  46              		.loc 1 233 0
  47 001e 1A68     		ldr	r2, [r3]
  48 0020 22F48022 		bic	r2, r2, #262144
  49 0024 1A60     		str	r2, [r3]
 234:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 235:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 236:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
  50              		.loc 1 236 0
  51 0026 5A68     		ldr	r2, [r3, #4]
  52 0028 22F4FE02 		bic	r2, r2, #8323072
  53 002c 5A60     		str	r2, [r3, #4]
 237:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 238:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 239:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset PLL2ON and PLL3ON bits */
 240:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 241:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 242:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 243:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CIR = 0x00FF0000;
 244:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 245:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 246:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;
 247:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 248:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 249:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
  54              		.loc 1 249 0
  55 002e 4FF41F02 		mov	r2, #10420224
  56 0032 9A60     		str	r2, [r3, #8]
 250:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 251:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 252:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;      
  57              		.loc 1 252 0
  58 0034 0022     		movs	r2, #0
  59 0036 DA62     		str	r2, [r3, #44]
 253:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #else
 254:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 255:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 256:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 257:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 258:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
  60              		.loc 1 258 0
  61 0038 7047     		bx	lr
  62              	.L3:
  63 003a 00BF     		.align	2
  64              	.L2:
  65 003c 00100240 		.word	1073876992
  66 0040 0000FFF8 		.word	-117506048
  67              		.cfi_endproc
  68              	.LFE63:
  70              		.section	.text.RCC_HSEConfig,"ax",%progbits
  71              		.align	1
  72              		.global	RCC_HSEConfig
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  76              		.fpu softvfp
  78              	RCC_HSEConfig:
  79              	.LFB64:
 259:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 260:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 261:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 262:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   HSE can not be stopped if it is used directly or through the PLL as system clock.
 263:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 264:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 265:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HSE_OFF: HSE oscillator OFF
 266:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HSE_ON: HSE oscillator ON
 267:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 268:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 269:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 270:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_HSEConfig(uint32_t RCC_HSE)
 271:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
  80              		.loc 1 271 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85              	.LVL0:
 272:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 273:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 274:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 275:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset HSEON bit */
 276:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEON_Reset;
  86              		.loc 1 276 0
  87 0000 0D4B     		ldr	r3, .L8
  88 0002 1A68     		ldr	r2, [r3]
  89 0004 22F48032 		bic	r2, r2, #65536
  90 0008 1A60     		str	r2, [r3]
 277:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 278:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEBYP_Reset;
  91              		.loc 1 278 0
  92 000a 1A68     		ldr	r2, [r3]
  93 000c 22F48022 		bic	r2, r2, #262144
  94 0010 1A60     		str	r2, [r3]
 279:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
 280:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   switch(RCC_HSE)
  95              		.loc 1 280 0
  96 0012 B0F5803F 		cmp	r0, #65536
  97 0016 03D0     		beq	.L6
  98 0018 B0F5802F 		cmp	r0, #262144
  99 001c 06D0     		beq	.L7
 100 001e 7047     		bx	lr
 101              	.L6:
 281:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 282:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case RCC_HSE_ON:
 283:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       /* Set HSEON bit */
 284:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 102              		.loc 1 284 0
 103 0020 054A     		ldr	r2, .L8
 104 0022 1368     		ldr	r3, [r2]
 105 0024 43F48033 		orr	r3, r3, #65536
 106 0028 1360     		str	r3, [r2]
 285:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 107              		.loc 1 285 0
 108 002a 7047     		bx	lr
 109              	.L7:
 286:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 287:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case RCC_HSE_Bypass:
 288:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       /* Set HSEBYP and HSEON bits */
 289:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 110              		.loc 1 289 0
 111 002c 024A     		ldr	r2, .L8
 112 002e 1368     		ldr	r3, [r2]
 113 0030 43F4A023 		orr	r3, r3, #327680
 114 0034 1360     		str	r3, [r2]
 290:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 291:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 292:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     default:
 293:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 294:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 295:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 115              		.loc 1 295 0
 116 0036 7047     		bx	lr
 117              	.L9:
 118              		.align	2
 119              	.L8:
 120 0038 00100240 		.word	1073876992
 121              		.cfi_endproc
 122              	.LFE64:
 124              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 125              		.align	1
 126              		.global	RCC_AdjustHSICalibrationValue
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu softvfp
 132              	RCC_AdjustHSICalibrationValue:
 133              	.LFB66:
 296:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 297:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 298:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Waits for HSE start-up.
 299:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  None
 300:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval An ErrorStatus enumuration value:
 301:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * - SUCCESS: HSE oscillator is stable and ready to use
 302:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * - ERROR: HSE oscillator not yet ready
 303:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 304:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 305:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 306:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 307:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 308:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   FlagStatus HSEStatus = RESET;
 309:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   
 310:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 311:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   do
 312:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 313:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 314:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     StartUpCounter++;  
 315:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 316:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   
 317:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 318:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 319:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     status = SUCCESS;
 320:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 321:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
 322:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 323:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     status = ERROR;
 324:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }  
 325:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   return (status);
 326:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 327:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 328:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 329:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 330:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 331:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter must be a number between 0 and 0x1F.
 332:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 333:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 334:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 335:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 134              		.loc 1 335 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              		@ link register save eliminated.
 139              	.LVL1:
 336:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 337:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 338:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 339:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CR;
 140              		.loc 1 339 0
 141 0000 034A     		ldr	r2, .L11
 142 0002 1368     		ldr	r3, [r2]
 143              	.LVL2:
 340:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 341:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= CR_HSITRIM_Mask;
 144              		.loc 1 341 0
 145 0004 23F0F803 		bic	r3, r3, #248
 146              	.LVL3:
 342:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 343:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 147              		.loc 1 343 0
 148 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 149              	.LVL4:
 344:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 345:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CR = tmpreg;
 150              		.loc 1 345 0
 151 000c 1060     		str	r0, [r2]
 346:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 152              		.loc 1 346 0
 153 000e 7047     		bx	lr
 154              	.L12:
 155              		.align	2
 156              	.L11:
 157 0010 00100240 		.word	1073876992
 158              		.cfi_endproc
 159              	.LFE66:
 161              		.section	.text.RCC_HSICmd,"ax",%progbits
 162              		.align	1
 163              		.global	RCC_HSICmd
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 167              		.fpu softvfp
 169              	RCC_HSICmd:
 170              	.LFB67:
 347:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 348:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 349:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 350:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
 351:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
 352:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 353:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 354:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 355:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 171              		.loc 1 355 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              		@ link register save eliminated.
 176              	.LVL5:
 356:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 357:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 358:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 177              		.loc 1 358 0
 178 0000 014B     		ldr	r3, .L14
 179 0002 1860     		str	r0, [r3]
 359:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 180              		.loc 1 359 0
 181 0004 7047     		bx	lr
 182              	.L15:
 183 0006 00BF     		.align	2
 184              	.L14:
 185 0008 00004242 		.word	1111621632
 186              		.cfi_endproc
 187              	.LFE67:
 189              		.section	.text.RCC_PLLConfig,"ax",%progbits
 190              		.align	1
 191              		.global	RCC_PLLConfig
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 195              		.fpu softvfp
 197              	RCC_PLLConfig:
 198              	.LFB68:
 360:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 361:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 362:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 363:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 364:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 365:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices or @b STM32_Value_line_devices, 
 366:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   this parameter can be one of the following values:
 367:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 368:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 369:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:
 370:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 371:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div1: HSE oscillator clock selected as PLL clock entry
 372:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div2: HSE oscillator clock divided by 2 selected as PLL clock entry 
 373:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor.
 374:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_
 375:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
 376:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 377:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 378:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 379:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 199              		.loc 1 379 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              		@ link register save eliminated.
 204              	.LVL6:
 380:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 381:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 382:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 383:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 384:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 385:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 386:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 205              		.loc 1 386 0
 206 0000 034A     		ldr	r2, .L17
 207 0002 5368     		ldr	r3, [r2, #4]
 208              	.LVL7:
 387:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 388:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= CFGR_PLL_Mask;
 209              		.loc 1 388 0
 210 0004 23F47413 		bic	r3, r3, #3997696
 211              	.LVL8:
 389:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set the PLL configuration bits */
 390:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_PLLSource | RCC_PLLMul;
 212              		.loc 1 390 0
 213 0008 0143     		orrs	r1, r1, r0
 214              	.LVL9:
 215 000a 1943     		orrs	r1, r1, r3
 216              	.LVL10:
 391:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 392:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 217              		.loc 1 392 0
 218 000c 5160     		str	r1, [r2, #4]
 393:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 219              		.loc 1 393 0
 220 000e 7047     		bx	lr
 221              	.L18:
 222              		.align	2
 223              	.L17:
 224 0010 00100240 		.word	1073876992
 225              		.cfi_endproc
 226              	.LFE68:
 228              		.section	.text.RCC_PLLCmd,"ax",%progbits
 229              		.align	1
 230              		.global	RCC_PLLCmd
 231              		.syntax unified
 232              		.thumb
 233              		.thumb_func
 234              		.fpu softvfp
 236              	RCC_PLLCmd:
 237              	.LFB69:
 394:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 395:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 396:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL.
 397:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock.
 398:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
 399:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 400:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 401:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 402:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 238              		.loc 1 402 0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              		@ link register save eliminated.
 243              	.LVL11:
 403:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 404:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 405:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 406:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 244              		.loc 1 406 0
 245 0000 014B     		ldr	r3, .L20
 246 0002 1860     		str	r0, [r3]
 407:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 247              		.loc 1 407 0
 248 0004 7047     		bx	lr
 249              	.L21:
 250 0006 00BF     		.align	2
 251              	.L20:
 252 0008 60004242 		.word	1111621728
 253              		.cfi_endproc
 254              	.LFE69:
 256              		.section	.text.RCC_PREDIV1Config,"ax",%progbits
 257              		.align	1
 258              		.global	RCC_PREDIV1Config
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
 262              		.fpu softvfp
 264              	RCC_PREDIV1Config:
 265              	.LFB70:
 408:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 409:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 410:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 411:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 412:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note 
 413:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL is disabled.
 414:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line and Value line 
 415:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     devices.
 416:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Source: specifies the PREDIV1 clock source.
 417:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 418:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_HSE: HSE selected as PREDIV1 clock
 419:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_PLL2: PLL2 selected as PREDIV1 clock
 420:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note 
 421:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Value_line_devices this parameter is always RCC_PREDIV1_Source_HSE  
 422:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 423:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 424:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 425:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 426:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
 427:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 266              		.loc 1 427 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 0, uses_anonymous_args = 0
 270              		@ link register save eliminated.
 271              	.LVL12:
 428:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 429:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   
 430:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 431:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
 432:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 433:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 434:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 272              		.loc 1 434 0
 273 0000 044A     		ldr	r2, .L23
 274 0002 D36A     		ldr	r3, [r2, #44]
 275              	.LVL13:
 435:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
 436:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 276              		.loc 1 436 0
 277 0004 23F48033 		bic	r3, r3, #65536
 278              	.LVL14:
 279 0008 23F00F03 		bic	r3, r3, #15
 280              	.LVL15:
 437:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set the PREDIV1 clock source and division factor */
 438:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 281              		.loc 1 438 0
 282 000c 0143     		orrs	r1, r1, r0
 283              	.LVL16:
 284 000e 0B43     		orrs	r3, r3, r1
 285              	.LVL17:
 439:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 440:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 286              		.loc 1 440 0
 287 0010 D362     		str	r3, [r2, #44]
 441:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 288              		.loc 1 441 0
 289 0012 7047     		bx	lr
 290              	.L24:
 291              		.align	2
 292              	.L23:
 293 0014 00100240 		.word	1073876992
 294              		.cfi_endproc
 295              	.LFE70:
 297              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 298              		.align	1
 299              		.global	RCC_SYSCLKConfig
 300              		.syntax unified
 301              		.thumb
 302              		.thumb_func
 303              		.fpu softvfp
 305              	RCC_SYSCLKConfig:
 306              	.LFB71:
 442:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif
 443:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 444:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 445:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 446:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV2 division factor.
 447:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note 
 448:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function must be used only when both PLL2 and PLL3 are disabled.
 449:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 450:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
 451:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
 452:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 453:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 454:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
 455:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 456:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 457:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 458:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 459:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));
 460:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 461:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 462:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear PREDIV2[3:0] bits */
 463:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PREDIV2;
 464:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set the PREDIV2 division factor */
 465:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV2_Div;
 466:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 467:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 468:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 469:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 470:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 471:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the PLL2 multiplication factor.
 472:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note
 473:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL2 is disabled.
 474:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 475:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
 476:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
 477:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 478:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 479:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
 480:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 481:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 482:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 483:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 484:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));
 485:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 486:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 487:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear PLL2Mul[3:0] bits */
 488:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL2MUL;
 489:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set the PLL2 configuration bits */
 490:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL2Mul;
 491:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 492:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 493:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 494:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 495:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 496:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 497:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL2.
 498:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note 
 499:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - The PLL2 can not be disabled if it is used indirectly as system clock
 500:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     (i.e. it is used as PLL clock entry that is used as System clock).
 501:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 502:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
 503:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 504:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 505:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PLL2Cmd(FunctionalState NewState)
 506:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 507:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 508:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 509:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 510:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
 511:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 512:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 513:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 514:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 515:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the PLL3 multiplication factor.
 516:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note 
 517:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL3 is disabled.
 518:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 519:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
 520:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
 521:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 522:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 523:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
 524:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 525:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 526:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 527:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 528:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));
 529:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 530:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 531:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear PLL3Mul[3:0] bits */
 532:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL3MUL;
 533:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set the PLL3 configuration bits */
 534:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL3Mul;
 535:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 536:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 537:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 538:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 539:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 540:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 541:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL3.
 542:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 543:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
 544:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 545:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 546:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PLL3Cmd(FunctionalState NewState)
 547:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 548:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 549:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 550:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 551:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
 552:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 553:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 554:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 555:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 556:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 557:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 558:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 559:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSI: HSI selected as system clock
 560:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
 561:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
 562:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 563:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 564:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 565:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 307              		.loc 1 565 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 312              	.LVL18:
 566:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 567:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 568:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 569:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 313              		.loc 1 569 0
 314 0000 034A     		ldr	r2, .L26
 315 0002 5368     		ldr	r3, [r2, #4]
 316              	.LVL19:
 570:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear SW[1:0] bits */
 571:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= CFGR_SW_Mask;
 317              		.loc 1 571 0
 318 0004 23F00303 		bic	r3, r3, #3
 319              	.LVL20:
 572:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 573:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 320              		.loc 1 573 0
 321 0008 1843     		orrs	r0, r0, r3
 322              	.LVL21:
 574:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 575:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 323              		.loc 1 575 0
 324 000a 5060     		str	r0, [r2, #4]
 576:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 325              		.loc 1 576 0
 326 000c 7047     		bx	lr
 327              	.L27:
 328 000e 00BF     		.align	2
 329              	.L26:
 330 0010 00100240 		.word	1073876992
 331              		.cfi_endproc
 332              	.LFE71:
 334              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 335              		.align	1
 336              		.global	RCC_GetSYSCLKSource
 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 340              		.fpu softvfp
 342              	RCC_GetSYSCLKSource:
 343              	.LFB72:
 577:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 578:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 579:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Returns the clock source used as system clock.
 580:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  None
 581:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval The clock source used as system clock. The returned value can
 582:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   be one of the following:
 583:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     - 0x00: HSI used as system clock
 584:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     - 0x04: HSE used as system clock
 585:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     - 0x08: PLL used as system clock
 586:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 587:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 588:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 344              		.loc 1 588 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 0
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348              		@ link register save eliminated.
 589:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 349              		.loc 1 589 0
 350 0000 024B     		ldr	r3, .L29
 351 0002 5868     		ldr	r0, [r3, #4]
 590:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 352              		.loc 1 590 0
 353 0004 00F00C00 		and	r0, r0, #12
 354 0008 7047     		bx	lr
 355              	.L30:
 356 000a 00BF     		.align	2
 357              	.L29:
 358 000c 00100240 		.word	1073876992
 359              		.cfi_endproc
 360              	.LFE72:
 362              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 363              		.align	1
 364              		.global	RCC_HCLKConfig
 365              		.syntax unified
 366              		.thumb
 367              		.thumb_func
 368              		.fpu softvfp
 370              	RCC_HCLKConfig:
 371              	.LFB73:
 591:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 592:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 593:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 594:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 595:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   the system clock (SYSCLK).
 596:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 597:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 598:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 599:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 600:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 601:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 602:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 603:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 604:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 605:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 606:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 607:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 608:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 609:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 372              		.loc 1 609 0
 373              		.cfi_startproc
 374              		@ args = 0, pretend = 0, frame = 0
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 376              		@ link register save eliminated.
 377              	.LVL22:
 610:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 611:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 612:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 613:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 378              		.loc 1 613 0
 379 0000 034A     		ldr	r2, .L32
 380 0002 5368     		ldr	r3, [r2, #4]
 381              	.LVL23:
 614:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear HPRE[3:0] bits */
 615:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= CFGR_HPRE_Reset_Mask;
 382              		.loc 1 615 0
 383 0004 23F0F003 		bic	r3, r3, #240
 384              	.LVL24:
 616:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 617:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLK;
 385              		.loc 1 617 0
 386 0008 1843     		orrs	r0, r0, r3
 387              	.LVL25:
 618:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 619:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 388              		.loc 1 619 0
 389 000a 5060     		str	r0, [r2, #4]
 620:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 390              		.loc 1 620 0
 391 000c 7047     		bx	lr
 392              	.L33:
 393 000e 00BF     		.align	2
 394              	.L32:
 395 0010 00100240 		.word	1073876992
 396              		.cfi_endproc
 397              	.LFE73:
 399              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 400              		.align	1
 401              		.global	RCC_PCLK1Config
 402              		.syntax unified
 403              		.thumb
 404              		.thumb_func
 405              		.fpu softvfp
 407              	RCC_PCLK1Config:
 408              	.LFB74:
 621:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 622:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 623:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 624:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 625:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 626:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 627:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB1 clock = HCLK
 628:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB1 clock = HCLK/2
 629:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB1 clock = HCLK/4
 630:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
 631:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 632:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 633:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 634:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 635:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 409              		.loc 1 635 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413              		@ link register save eliminated.
 414              	.LVL26:
 636:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 637:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 638:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 639:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 415              		.loc 1 639 0
 416 0000 034A     		ldr	r2, .L35
 417 0002 5368     		ldr	r3, [r2, #4]
 418              	.LVL27:
 640:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear PPRE1[2:0] bits */
 641:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE1_Reset_Mask;
 419              		.loc 1 641 0
 420 0004 23F4E063 		bic	r3, r3, #1792
 421              	.LVL28:
 642:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 643:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK;
 422              		.loc 1 643 0
 423 0008 1843     		orrs	r0, r0, r3
 424              	.LVL29:
 644:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 645:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 425              		.loc 1 645 0
 426 000a 5060     		str	r0, [r2, #4]
 646:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 427              		.loc 1 646 0
 428 000c 7047     		bx	lr
 429              	.L36:
 430 000e 00BF     		.align	2
 431              	.L35:
 432 0010 00100240 		.word	1073876992
 433              		.cfi_endproc
 434              	.LFE74:
 436              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 437              		.align	1
 438              		.global	RCC_PCLK2Config
 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 442              		.fpu softvfp
 444              	RCC_PCLK2Config:
 445              	.LFB75:
 647:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 648:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 649:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 650:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 651:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 652:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 653:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB2 clock = HCLK
 654:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB2 clock = HCLK/2
 655:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB2 clock = HCLK/4
 656:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
 657:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 658:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 659:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 660:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 661:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 446              		.loc 1 661 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450              		@ link register save eliminated.
 451              	.LVL30:
 662:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 663:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 664:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 665:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 452              		.loc 1 665 0
 453 0000 034A     		ldr	r2, .L38
 454 0002 5368     		ldr	r3, [r2, #4]
 455              	.LVL31:
 666:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear PPRE2[2:0] bits */
 667:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE2_Reset_Mask;
 456              		.loc 1 667 0
 457 0004 23F46053 		bic	r3, r3, #14336
 458              	.LVL32:
 668:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 669:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 459              		.loc 1 669 0
 460 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 461              	.LVL33:
 670:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 671:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 462              		.loc 1 671 0
 463 000c 5060     		str	r0, [r2, #4]
 672:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 464              		.loc 1 672 0
 465 000e 7047     		bx	lr
 466              	.L39:
 467              		.align	2
 468              	.L38:
 469 0010 00100240 		.word	1073876992
 470              		.cfi_endproc
 471              	.LFE75:
 473              		.section	.text.RCC_ITConfig,"ax",%progbits
 474              		.align	1
 475              		.global	RCC_ITConfig
 476              		.syntax unified
 477              		.thumb
 478              		.thumb_func
 479              		.fpu softvfp
 481              	RCC_ITConfig:
 482              	.LFB76:
 673:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 674:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 675:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
 676:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
 677:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * 
 678:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
 679:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   of the following values        
 680:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 681:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 682:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 683:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 684:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 685:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt
 686:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt
 687:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * 
 688:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
 689:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   following values        
 690:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 691:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 692:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 693:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 694:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 695:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *       
 696:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
 697:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
 698:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 699:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 700:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
 701:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 483              		.loc 1 701 0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 487              		@ link register save eliminated.
 488              	.LVL34:
 702:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 703:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 704:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 705:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 489              		.loc 1 705 0
 490 0000 29B9     		cbnz	r1, .L43
 706:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 707:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
 708:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 709:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 710:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
 711:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 712:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
 713:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 491              		.loc 1 713 0
 492 0002 054A     		ldr	r2, .L44
 493 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 494 0006 23EA0000 		bic	r0, r3, r0
 495              	.LVL35:
 496 000a 1070     		strb	r0, [r2]
 714:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 715:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 497              		.loc 1 715 0
 498 000c 7047     		bx	lr
 499              	.LVL36:
 500              	.L43:
 708:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 501              		.loc 1 708 0
 502 000e 024A     		ldr	r2, .L44
 503 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 504 0012 1843     		orrs	r0, r0, r3
 505              	.LVL37:
 506 0014 1070     		strb	r0, [r2]
 507 0016 7047     		bx	lr
 508              	.L45:
 509              		.align	2
 510              	.L44:
 511 0018 09100240 		.word	1073877001
 512              		.cfi_endproc
 513              	.LFE76:
 515              		.section	.text.RCC_USBCLKConfig,"ax",%progbits
 516              		.align	1
 517              		.global	RCC_USBCLKConfig
 518              		.syntax unified
 519              		.thumb
 520              		.thumb_func
 521              		.fpu softvfp
 523              	RCC_USBCLKConfig:
 524              	.LFB77:
 716:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 717:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 718:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 719:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 720:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_USBCLKSource: specifies the USB clock source. This clock is 
 721:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   derived from the PLL output.
 722:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 723:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_1Div5: PLL clock divided by 1,5 selected as USB 
 724:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *                                     clock source
 725:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
 726:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 727:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 728:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
 729:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 525              		.loc 1 729 0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 0, uses_anonymous_args = 0
 529              		@ link register save eliminated.
 530              	.LVL38:
 730:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 731:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
 732:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 733:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 531              		.loc 1 733 0
 532 0000 014B     		ldr	r3, .L47
 533 0002 1860     		str	r0, [r3]
 734:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 534              		.loc 1 734 0
 535 0004 7047     		bx	lr
 536              	.L48:
 537 0006 00BF     		.align	2
 538              	.L47:
 539 0008 D8004242 		.word	1111621848
 540              		.cfi_endproc
 541              	.LFE77:
 543              		.section	.text.RCC_ADCCLKConfig,"ax",%progbits
 544              		.align	1
 545              		.global	RCC_ADCCLKConfig
 546              		.syntax unified
 547              		.thumb
 548              		.thumb_func
 549              		.fpu softvfp
 551              	RCC_ADCCLKConfig:
 552              	.LFB78:
 735:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #else
 736:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 737:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the USB OTG FS clock (OTGFSCLK).
 738:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This function applies only to STM32 Connectivity line devices.
 739:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_OTGFSCLKSource: specifies the USB OTG FS clock source.
 740:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This clock is derived from the PLL output.
 741:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 742:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clo
 743:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clo
 744:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 745:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 746:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
 747:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 748:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 749:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));
 750:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 751:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
 752:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 753:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 754:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 755:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 756:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 757:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_PCLK2: defines the ADC clock divider. This clock is derived from 
 758:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   the APB2 clock (PCLK2).
 759:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 760:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div2: ADC clock = PCLK2/2
 761:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div4: ADC clock = PCLK2/4
 762:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
 763:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
 764:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 765:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 766:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
 767:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 553              		.loc 1 767 0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 0
 556              		@ frame_needed = 0, uses_anonymous_args = 0
 557              		@ link register save eliminated.
 558              	.LVL39:
 768:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 769:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 770:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
 771:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 559              		.loc 1 771 0
 560 0000 034A     		ldr	r2, .L50
 561 0002 5368     		ldr	r3, [r2, #4]
 562              	.LVL40:
 772:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Clear ADCPRE[1:0] bits */
 773:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg &= CFGR_ADCPRE_Reset_Mask;
 563              		.loc 1 773 0
 564 0004 23F44043 		bic	r3, r3, #49152
 565              	.LVL41:
 774:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
 775:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmpreg |= RCC_PCLK2;
 566              		.loc 1 775 0
 567 0008 1843     		orrs	r0, r0, r3
 568              	.LVL42:
 776:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Store the new value */
 777:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 569              		.loc 1 777 0
 570 000a 5060     		str	r0, [r2, #4]
 778:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 571              		.loc 1 778 0
 572 000c 7047     		bx	lr
 573              	.L51:
 574 000e 00BF     		.align	2
 575              	.L50:
 576 0010 00100240 		.word	1073876992
 577              		.cfi_endproc
 578              	.LFE78:
 580              		.section	.text.RCC_LSEConfig,"ax",%progbits
 581              		.align	1
 582              		.global	RCC_LSEConfig
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 586              		.fpu softvfp
 588              	RCC_LSEConfig:
 589              	.LFB79:
 779:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 780:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 781:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 782:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the I2S2 clock source(I2S2CLK).
 783:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note
 784:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S2 APB clock.
 785:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 786:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_I2S2CLKSource: specifies the I2S2 clock source.
 787:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 788:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
 789:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
 790:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 791:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 792:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
 793:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 794:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 795:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));
 796:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 797:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
 798:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 799:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 800:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 801:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the I2S3 clock source(I2S2CLK).
 802:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note
 803:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S3 APB clock.
 804:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 805:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_I2S3CLKSource: specifies the I2S3 clock source.
 806:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 807:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
 808:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
 809:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 810:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 811:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
 812:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 813:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 814:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));
 815:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 816:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
 817:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 818:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 819:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 820:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 821:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 822:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 823:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 824:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_LSE_OFF: LSE oscillator OFF
 825:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_LSE_ON: LSE oscillator ON
 826:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 827:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 828:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 829:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 830:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 590              		.loc 1 830 0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
 594              		@ link register save eliminated.
 595              	.LVL43:
 831:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 832:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 833:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 834:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset LSEON bit */
 835:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 596              		.loc 1 835 0
 597 0000 084B     		ldr	r3, .L56
 598 0002 0022     		movs	r2, #0
 599 0004 1A70     		strb	r2, [r3]
 836:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Reset LSEBYP bit */
 837:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 600              		.loc 1 837 0
 601 0006 1A70     		strb	r2, [r3]
 838:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 839:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   switch(RCC_LSE)
 602              		.loc 1 839 0
 603 0008 0128     		cmp	r0, #1
 604 000a 02D0     		beq	.L54
 605 000c 0428     		cmp	r0, #4
 606 000e 04D0     		beq	.L55
 607 0010 7047     		bx	lr
 608              	.L54:
 840:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 841:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case RCC_LSE_ON:
 842:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       /* Set LSEON bit */
 843:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 609              		.loc 1 843 0
 610 0012 044B     		ldr	r3, .L56
 611 0014 0122     		movs	r2, #1
 612 0016 1A70     		strb	r2, [r3]
 844:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 613              		.loc 1 844 0
 614 0018 7047     		bx	lr
 615              	.L55:
 845:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 846:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case RCC_LSE_Bypass:
 847:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       /* Set LSEBYP and LSEON bits */
 848:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 616              		.loc 1 848 0
 617 001a 024B     		ldr	r3, .L56
 618 001c 0522     		movs	r2, #5
 619 001e 1A70     		strb	r2, [r3]
 849:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;            
 850:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 851:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     default:
 852:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;      
 853:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 854:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 620              		.loc 1 854 0
 621 0020 7047     		bx	lr
 622              	.L57:
 623 0022 00BF     		.align	2
 624              	.L56:
 625 0024 20100240 		.word	1073877024
 626              		.cfi_endproc
 627              	.LFE79:
 629              		.section	.text.RCC_LSICmd,"ax",%progbits
 630              		.align	1
 631              		.global	RCC_LSICmd
 632              		.syntax unified
 633              		.thumb
 634              		.thumb_func
 635              		.fpu softvfp
 637              	RCC_LSICmd:
 638              	.LFB80:
 855:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 856:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 857:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 858:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 859:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
 860:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 861:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 862:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 863:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 639              		.loc 1 863 0
 640              		.cfi_startproc
 641              		@ args = 0, pretend = 0, frame = 0
 642              		@ frame_needed = 0, uses_anonymous_args = 0
 643              		@ link register save eliminated.
 644              	.LVL44:
 864:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 865:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 866:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 645              		.loc 1 866 0
 646 0000 014B     		ldr	r3, .L59
 647 0002 1860     		str	r0, [r3]
 867:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 648              		.loc 1 867 0
 649 0004 7047     		bx	lr
 650              	.L60:
 651 0006 00BF     		.align	2
 652              	.L59:
 653 0008 80044242 		.word	1111622784
 654              		.cfi_endproc
 655              	.LFE80:
 657              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 658              		.align	1
 659              		.global	RCC_RTCCLKConfig
 660              		.syntax unified
 661              		.thumb
 662              		.thumb_func
 663              		.fpu softvfp
 665              	RCC_RTCCLKConfig:
 666              	.LFB81:
 868:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 869:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 870:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 871:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   Once the RTC clock is selected it can't be changed unless the Backup domain is reset.
 872:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 873:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 874:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 875:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 876:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
 877:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 878:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 879:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 880:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 667              		.loc 1 880 0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 0
 670              		@ frame_needed = 0, uses_anonymous_args = 0
 671              		@ link register save eliminated.
 672              	.LVL45:
 881:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 882:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 883:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Select the RTC clock source */
 884:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 673              		.loc 1 884 0
 674 0000 024A     		ldr	r2, .L62
 675 0002 136A     		ldr	r3, [r2, #32]
 676 0004 1843     		orrs	r0, r0, r3
 677              	.LVL46:
 678 0006 1062     		str	r0, [r2, #32]
 885:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 679              		.loc 1 885 0
 680 0008 7047     		bx	lr
 681              	.L63:
 682 000a 00BF     		.align	2
 683              	.L62:
 684 000c 00100240 		.word	1073876992
 685              		.cfi_endproc
 686              	.LFE81:
 688              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 689              		.align	1
 690              		.global	RCC_RTCCLKCmd
 691              		.syntax unified
 692              		.thumb
 693              		.thumb_func
 694              		.fpu softvfp
 696              	RCC_RTCCLKCmd:
 697              	.LFB82:
 886:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 887:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 888:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the RTC clock.
 889:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKCo
 890:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
 891:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 892:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 893:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
 894:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 698              		.loc 1 894 0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
 703              	.LVL47:
 895:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
 896:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 897:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 704              		.loc 1 897 0
 705 0000 014B     		ldr	r3, .L65
 706 0002 1860     		str	r0, [r3]
 898:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 707              		.loc 1 898 0
 708 0004 7047     		bx	lr
 709              	.L66:
 710 0006 00BF     		.align	2
 711              	.L65:
 712 0008 3C044242 		.word	1111622716
 713              		.cfi_endproc
 714              	.LFE82:
 716              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 717              		.align	1
 718              		.global	RCC_GetClocksFreq
 719              		.syntax unified
 720              		.thumb
 721              		.thumb_func
 722              		.fpu softvfp
 724              	RCC_GetClocksFreq:
 725              	.LFB83:
 899:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 900:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
 901:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks.
 902:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 903:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *         the clocks frequencies.
 904:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   The result of this function could be not correct when using 
 905:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *         fractional value for HSE crystal.  
 906:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
 907:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
 908:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 909:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 726              		.loc 1 909 0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 0
 729              		@ frame_needed = 0, uses_anonymous_args = 0
 730              		@ link register save eliminated.
 731              	.LVL48:
 732 0000 10B4     		push	{r4}
 733              		.cfi_def_cfa_offset 4
 734              		.cfi_offset 4, -4
 735              	.LVL49:
 910:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 911:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 912:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef  STM32F10X_CL
 913:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 914:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 915:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 916:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 917:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t prediv1factor = 0;
 918:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif
 919:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     
 920:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 921:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_SWS_Mask;
 736              		.loc 1 921 0
 737 0002 274B     		ldr	r3, .L77
 738 0004 5B68     		ldr	r3, [r3, #4]
 739 0006 03F00C03 		and	r3, r3, #12
 740              	.LVL50:
 922:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   
 923:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   switch (tmp)
 741              		.loc 1 923 0
 742 000a 042B     		cmp	r3, #4
 743 000c 2BD0     		beq	.L69
 744 000e 082B     		cmp	r3, #8
 745 0010 2CD0     		beq	.L70
 746 0012 13B1     		cbz	r3, .L76
 924:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 925:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case 0x00:  /* HSI used as system clock */
 926:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 927:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 928:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case 0x04:  /* HSE used as system clock */
 929:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 930:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 931:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 932:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 933:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 934:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 935:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 936:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 937:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifndef STM32F10X_CL      
 938:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 939:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 940:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 941:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 942:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 943:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       }
 944:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       else
 945:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       {
 946:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 947:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 948:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 949:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 950:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #else
 951:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         /* HSE selected as PLL clock entry */
 952:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 953:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 954:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 955:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         }
 956:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         else
 957:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         {
 958:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 959:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         }
 960:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #endif
 961:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       }
 962:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #else
 963:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       pllmull = pllmull >> 18;
 964:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 965:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       if (pllmull != 0x0D)
 966:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       {
 967:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****          pllmull += 2;
 968:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       }
 969:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       else
 970:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 971:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         pllmull = 13 / 2; 
 972:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       }
 973:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****             
 974:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 975:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 976:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 977:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       }
 978:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       else
 979:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       {/* PREDIV1 selected as PLL clock entry */
 980:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         
 981:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         /* Get PREDIV1 clock source and division factor */
 982:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 983:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 984:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         
 985:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         if (prediv1source == 0)
 986:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         { /* HSE oscillator clock selected as PREDIV1 clock entry */
 987:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 988:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         }
 989:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         else
 990:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 991:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           
 992:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 993:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 994:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 995:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor)
 996:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****         }
 997:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       }
 998:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 999:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
1000:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1001:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     default:
1002:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 747              		.loc 1 1002 0
 748 0014 234B     		ldr	r3, .L77+4
 749              	.LVL51:
 750 0016 0360     		str	r3, [r0]
1003:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 751              		.loc 1 1003 0
 752 0018 01E0     		b	.L72
 753              	.LVL52:
 754              	.L76:
 926:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 755              		.loc 1 926 0
 756 001a 224B     		ldr	r3, .L77+4
 757              	.LVL53:
 758 001c 0360     		str	r3, [r0]
 759              	.LVL54:
 760              	.L72:
1004:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1005:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1006:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
1007:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Get HCLK prescaler */
1008:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 761              		.loc 1 1008 0
 762 001e 2049     		ldr	r1, .L77
 763 0020 4B68     		ldr	r3, [r1, #4]
 764              	.LVL55:
1009:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = tmp >> 4;
 765              		.loc 1 1009 0
 766 0022 C3F30313 		ubfx	r3, r3, #4, #4
 767              	.LVL56:
1010:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 768              		.loc 1 1010 0
 769 0026 204C     		ldr	r4, .L77+8
 770 0028 E35C     		ldrb	r3, [r4, r3]	@ zero_extendqisi2
 771              	.LVL57:
 772 002a DAB2     		uxtb	r2, r3
 773              	.LVL58:
1011:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* HCLK clock frequency */
1012:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 774              		.loc 1 1012 0
 775 002c 0368     		ldr	r3, [r0]
 776 002e D340     		lsrs	r3, r3, r2
 777 0030 4360     		str	r3, [r0, #4]
1013:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Get PCLK1 prescaler */
1014:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 778              		.loc 1 1014 0
 779 0032 4A68     		ldr	r2, [r1, #4]
 780              	.LVL59:
1015:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = tmp >> 8;
 781              		.loc 1 1015 0
 782 0034 C2F30222 		ubfx	r2, r2, #8, #3
 783              	.LVL60:
1016:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 784              		.loc 1 1016 0
 785 0038 A25C     		ldrb	r2, [r4, r2]	@ zero_extendqisi2
 786              	.LVL61:
 787 003a D2B2     		uxtb	r2, r2
 788              	.LVL62:
1017:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* PCLK1 clock frequency */
1018:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 789              		.loc 1 1018 0
 790 003c 23FA02F2 		lsr	r2, r3, r2
 791              	.LVL63:
 792 0040 8260     		str	r2, [r0, #8]
1019:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Get PCLK2 prescaler */
1020:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 793              		.loc 1 1020 0
 794 0042 4A68     		ldr	r2, [r1, #4]
 795              	.LVL64:
1021:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = tmp >> 11;
 796              		.loc 1 1021 0
 797 0044 C2F3C222 		ubfx	r2, r2, #11, #3
 798              	.LVL65:
1022:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 799              		.loc 1 1022 0
 800 0048 A25C     		ldrb	r2, [r4, r2]	@ zero_extendqisi2
 801              	.LVL66:
 802 004a D2B2     		uxtb	r2, r2
 803              	.LVL67:
1023:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* PCLK2 clock frequency */
1024:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 804              		.loc 1 1024 0
 805 004c D340     		lsrs	r3, r3, r2
 806 004e C360     		str	r3, [r0, #12]
1025:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Get ADCCLK prescaler */
1026:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 807              		.loc 1 1026 0
 808 0050 4A68     		ldr	r2, [r1, #4]
 809              	.LVL68:
1027:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = tmp >> 14;
 810              		.loc 1 1027 0
 811 0052 C2F38132 		ubfx	r2, r2, #14, #2
 812              	.LVL69:
1028:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   presc = ADCPrescTable[tmp];
 813              		.loc 1 1028 0
 814 0056 1549     		ldr	r1, .L77+12
 815 0058 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 816              	.LVL70:
 817 005a D2B2     		uxtb	r2, r2
 818              	.LVL71:
1029:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* ADCCLK clock frequency */
1030:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 819              		.loc 1 1030 0
 820 005c B3FBF2F3 		udiv	r3, r3, r2
 821 0060 0361     		str	r3, [r0, #16]
1031:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 822              		.loc 1 1031 0
 823 0062 10BC     		pop	{r4}
 824              		.cfi_remember_state
 825              		.cfi_restore 4
 826              		.cfi_def_cfa_offset 0
 827 0064 7047     		bx	lr
 828              	.LVL72:
 829              	.L69:
 830              		.cfi_restore_state
 929:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       break;
 831              		.loc 1 929 0
 832 0066 0F4B     		ldr	r3, .L77+4
 833              	.LVL73:
 834 0068 0360     		str	r3, [r0]
 930:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 835              		.loc 1 930 0
 836 006a D8E7     		b	.L72
 837              	.LVL74:
 838              	.L70:
 934:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 839              		.loc 1 934 0
 840 006c 0C4A     		ldr	r2, .L77
 841 006e 5368     		ldr	r3, [r2, #4]
 842              	.LVL75:
 935:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 843              		.loc 1 935 0
 844 0070 5268     		ldr	r2, [r2, #4]
 845              	.LVL76:
 938:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       
 846              		.loc 1 938 0
 847 0072 C3F38343 		ubfx	r3, r3, #18, #4
 848              	.LVL77:
 849 0076 0233     		adds	r3, r3, #2
 850              	.LVL78:
 940:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 851              		.loc 1 940 0
 852 0078 12F4803F 		tst	r2, #65536
 853 007c 04D1     		bne	.L73
 942:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****       }
 854              		.loc 1 942 0
 855 007e 0C4A     		ldr	r2, .L77+16
 856              	.LVL79:
 857 0080 02FB03F3 		mul	r3, r2, r3
 858              	.LVL80:
 859 0084 0360     		str	r3, [r0]
 860 0086 CAE7     		b	.L72
 861              	.LVL81:
 862              	.L73:
 947:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 863              		.loc 1 947 0
 864 0088 054A     		ldr	r2, .L77
 865              	.LVL82:
 866 008a D26A     		ldr	r2, [r2, #44]
 867 008c 02F00F02 		and	r2, r2, #15
 868 0090 0132     		adds	r2, r2, #1
 869              	.LVL83:
 949:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****  #else
 870              		.loc 1 949 0
 871 0092 0449     		ldr	r1, .L77+4
 872 0094 B1FBF2F2 		udiv	r2, r1, r2
 873              	.LVL84:
 874 0098 03FB02F3 		mul	r3, r3, r2
 875              	.LVL85:
 876 009c 0360     		str	r3, [r0]
 877 009e BEE7     		b	.L72
 878              	.L78:
 879              		.align	2
 880              	.L77:
 881 00a0 00100240 		.word	1073876992
 882 00a4 00127A00 		.word	8000000
 883 00a8 00000000 		.word	.LANCHOR0
 884 00ac 00000000 		.word	.LANCHOR1
 885 00b0 00093D00 		.word	4000000
 886              		.cfi_endproc
 887              	.LFE83:
 889              		.section	.text.RCC_AHBPeriphClockCmd,"ax",%progbits
 890              		.align	1
 891              		.global	RCC_AHBPeriphClockCmd
 892              		.syntax unified
 893              		.thumb
 894              		.thumb_func
 895              		.fpu softvfp
 897              	RCC_AHBPeriphClockCmd:
 898              	.LFB84:
1032:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1033:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1034:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1035:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1036:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1037:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1038:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   of the following values:        
1039:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1040:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1041:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1042:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1043:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1044:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS    
1045:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC   
1046:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Tx
1047:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Rx
1048:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * 
1049:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
1050:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   following values:        
1051:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1052:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1053:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1054:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1055:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1056:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FSMC
1057:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SDIO
1058:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1059:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note SRAM and FLITF clock can be disabled only during sleep mode.
1060:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1061:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1062:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1063:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1064:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1065:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 899              		.loc 1 1065 0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 0
 902              		@ frame_needed = 0, uses_anonymous_args = 0
 903              		@ link register save eliminated.
 904              	.LVL86:
1066:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1067:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
1068:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1069:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1070:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 905              		.loc 1 1070 0
 906 0000 29B9     		cbnz	r1, .L82
1071:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1072:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
1073:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1074:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1075:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1076:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
 907              		.loc 1 1076 0
 908 0002 054A     		ldr	r2, .L83
 909 0004 5369     		ldr	r3, [r2, #20]
 910 0006 23EA0000 		bic	r0, r3, r0
 911              	.LVL87:
 912 000a 5061     		str	r0, [r2, #20]
1077:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1078:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 913              		.loc 1 1078 0
 914 000c 7047     		bx	lr
 915              	.LVL88:
 916              	.L82:
1072:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 917              		.loc 1 1072 0
 918 000e 024A     		ldr	r2, .L83
 919 0010 5369     		ldr	r3, [r2, #20]
 920 0012 1843     		orrs	r0, r0, r3
 921              	.LVL89:
 922 0014 5061     		str	r0, [r2, #20]
 923 0016 7047     		bx	lr
 924              	.L84:
 925              		.align	2
 926              	.L83:
 927 0018 00100240 		.word	1073876992
 928              		.cfi_endproc
 929              	.LFE84:
 931              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 932              		.align	1
 933              		.global	RCC_APB2PeriphClockCmd
 934              		.syntax unified
 935              		.thumb
 936              		.thumb_func
 937              		.fpu softvfp
 939              	RCC_APB2PeriphClockCmd:
 940              	.LFB85:
1079:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1080:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1081:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1082:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1083:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1084:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1085:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1086:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1087:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1088:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1089:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1090:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     
1091:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1092:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1093:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1094:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1095:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1096:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 941              		.loc 1 1096 0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 0
 944              		@ frame_needed = 0, uses_anonymous_args = 0
 945              		@ link register save eliminated.
 946              	.LVL90:
1097:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1098:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1099:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1100:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 947              		.loc 1 1100 0
 948 0000 29B9     		cbnz	r1, .L88
1101:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1102:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
1103:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1104:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1105:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1106:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 949              		.loc 1 1106 0
 950 0002 054A     		ldr	r2, .L89
 951 0004 9369     		ldr	r3, [r2, #24]
 952 0006 23EA0000 		bic	r0, r3, r0
 953              	.LVL91:
 954 000a 9061     		str	r0, [r2, #24]
1107:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1108:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 955              		.loc 1 1108 0
 956 000c 7047     		bx	lr
 957              	.LVL92:
 958              	.L88:
1102:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 959              		.loc 1 1102 0
 960 000e 024A     		ldr	r2, .L89
 961 0010 9369     		ldr	r3, [r2, #24]
 962 0012 1843     		orrs	r0, r0, r3
 963              	.LVL93:
 964 0014 9061     		str	r0, [r2, #24]
 965 0016 7047     		bx	lr
 966              	.L90:
 967              		.align	2
 968              	.L89:
 969 0018 00100240 		.word	1073876992
 970              		.cfi_endproc
 971              	.LFE85:
 973              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 974              		.align	1
 975              		.global	RCC_APB1PeriphClockCmd
 976              		.syntax unified
 977              		.thumb
 978              		.thumb_func
 979              		.fpu softvfp
 981              	RCC_APB1PeriphClockCmd:
 982              	.LFB86:
1109:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1110:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1111:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1112:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1113:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1114:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1115:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1116:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1117:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1118:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1119:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1120:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1121:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14
1122:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1123:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1124:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1125:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1126:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1127:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 983              		.loc 1 1127 0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 0
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 987              		@ link register save eliminated.
 988              	.LVL94:
1128:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1129:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1130:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1131:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 989              		.loc 1 1131 0
 990 0000 29B9     		cbnz	r1, .L94
1132:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1133:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
1134:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1135:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1136:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1137:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 991              		.loc 1 1137 0
 992 0002 054A     		ldr	r2, .L95
 993 0004 D369     		ldr	r3, [r2, #28]
 994 0006 23EA0000 		bic	r0, r3, r0
 995              	.LVL95:
 996 000a D061     		str	r0, [r2, #28]
1138:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1139:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 997              		.loc 1 1139 0
 998 000c 7047     		bx	lr
 999              	.LVL96:
 1000              	.L94:
1133:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1001              		.loc 1 1133 0
 1002 000e 024A     		ldr	r2, .L95
 1003 0010 D369     		ldr	r3, [r2, #28]
 1004 0012 1843     		orrs	r0, r0, r3
 1005              	.LVL97:
 1006 0014 D061     		str	r0, [r2, #28]
 1007 0016 7047     		bx	lr
 1008              	.L96:
 1009              		.align	2
 1010              	.L95:
 1011 0018 00100240 		.word	1073876992
 1012              		.cfi_endproc
 1013              	.LFE86:
 1015              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1016              		.align	1
 1017              		.global	RCC_APB2PeriphResetCmd
 1018              		.syntax unified
 1019              		.thumb
 1020              		.thumb_func
 1021              		.fpu softvfp
 1023              	RCC_APB2PeriphResetCmd:
 1024              	.LFB87:
1140:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1141:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
1142:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1143:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1144:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
1145:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1146:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1147:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS 
1148:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC
1149:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1150:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1151:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1152:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1153:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1154:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
1155:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1156:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
1157:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1158:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1159:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
1160:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1161:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
1162:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1163:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1164:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1165:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
1166:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1167:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
1168:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1169:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1170:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1171:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1172:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1173:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1174:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1175:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1176:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1177:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1178:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1179:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1180:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11  
1181:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1182:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1183:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1184:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1185:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1186:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1025              		.loc 1 1186 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 1029              		@ link register save eliminated.
 1030              	.LVL98:
1187:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1188:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1189:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1190:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1031              		.loc 1 1190 0
 1032 0000 29B9     		cbnz	r1, .L100
1191:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1192:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
1193:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1194:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1195:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1196:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1033              		.loc 1 1196 0
 1034 0002 054A     		ldr	r2, .L101
 1035 0004 D368     		ldr	r3, [r2, #12]
 1036 0006 23EA0000 		bic	r0, r3, r0
 1037              	.LVL99:
 1038 000a D060     		str	r0, [r2, #12]
1197:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1198:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1039              		.loc 1 1198 0
 1040 000c 7047     		bx	lr
 1041              	.LVL100:
 1042              	.L100:
1192:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1043              		.loc 1 1192 0
 1044 000e 024A     		ldr	r2, .L101
 1045 0010 D368     		ldr	r3, [r2, #12]
 1046 0012 1843     		orrs	r0, r0, r3
 1047              	.LVL101:
 1048 0014 D060     		str	r0, [r2, #12]
 1049 0016 7047     		bx	lr
 1050              	.L102:
 1051              		.align	2
 1052              	.L101:
 1053 0018 00100240 		.word	1073876992
 1054              		.cfi_endproc
 1055              	.LFE87:
 1057              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1058              		.align	1
 1059              		.global	RCC_APB1PeriphResetCmd
 1060              		.syntax unified
 1061              		.thumb
 1062              		.thumb_func
 1063              		.fpu softvfp
 1065              	RCC_APB1PeriphResetCmd:
 1066              	.LFB88:
1199:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1200:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1201:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1202:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1203:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1204:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1205:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1206:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1207:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1208:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1209:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1210:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1211:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14  
1212:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1213:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1214:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1215:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1216:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1217:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1067              		.loc 1 1217 0
 1068              		.cfi_startproc
 1069              		@ args = 0, pretend = 0, frame = 0
 1070              		@ frame_needed = 0, uses_anonymous_args = 0
 1071              		@ link register save eliminated.
 1072              	.LVL102:
1218:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1219:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1220:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1221:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1073              		.loc 1 1221 0
 1074 0000 29B9     		cbnz	r1, .L106
1222:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1223:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
1224:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1225:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1226:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1227:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1075              		.loc 1 1227 0
 1076 0002 054A     		ldr	r2, .L107
 1077 0004 1369     		ldr	r3, [r2, #16]
 1078 0006 23EA0000 		bic	r0, r3, r0
 1079              	.LVL103:
 1080 000a 1061     		str	r0, [r2, #16]
1228:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1229:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1081              		.loc 1 1229 0
 1082 000c 7047     		bx	lr
 1083              	.LVL104:
 1084              	.L106:
1223:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1085              		.loc 1 1223 0
 1086 000e 024A     		ldr	r2, .L107
 1087 0010 1369     		ldr	r3, [r2, #16]
 1088 0012 1843     		orrs	r0, r0, r3
 1089              	.LVL105:
 1090 0014 1061     		str	r0, [r2, #16]
 1091 0016 7047     		bx	lr
 1092              	.L108:
 1093              		.align	2
 1094              	.L107:
 1095 0018 00100240 		.word	1073876992
 1096              		.cfi_endproc
 1097              	.LFE88:
 1099              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1100              		.align	1
 1101              		.global	RCC_BackupResetCmd
 1102              		.syntax unified
 1103              		.thumb
 1104              		.thumb_func
 1105              		.fpu softvfp
 1107              	RCC_BackupResetCmd:
 1108              	.LFB89:
1230:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1231:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1232:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1233:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1234:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1235:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1236:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1237:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1238:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1109              		.loc 1 1238 0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 0
 1112              		@ frame_needed = 0, uses_anonymous_args = 0
 1113              		@ link register save eliminated.
 1114              	.LVL106:
1239:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1240:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1241:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1115              		.loc 1 1241 0
 1116 0000 014B     		ldr	r3, .L110
 1117 0002 1860     		str	r0, [r3]
1242:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1118              		.loc 1 1242 0
 1119 0004 7047     		bx	lr
 1120              	.L111:
 1121 0006 00BF     		.align	2
 1122              	.L110:
 1123 0008 40044242 		.word	1111622720
 1124              		.cfi_endproc
 1125              	.LFE89:
 1127              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 1128              		.align	1
 1129              		.global	RCC_ClockSecuritySystemCmd
 1130              		.syntax unified
 1131              		.thumb
 1132              		.thumb_func
 1133              		.fpu softvfp
 1135              	RCC_ClockSecuritySystemCmd:
 1136              	.LFB90:
1243:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1244:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1245:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Enables or disables the Clock Security System.
1246:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  NewState: new state of the Clock Security System..
1247:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1248:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1249:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1250:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
1251:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1137              		.loc 1 1251 0
 1138              		.cfi_startproc
 1139              		@ args = 0, pretend = 0, frame = 0
 1140              		@ frame_needed = 0, uses_anonymous_args = 0
 1141              		@ link register save eliminated.
 1142              	.LVL107:
1252:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1253:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1254:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 1143              		.loc 1 1254 0
 1144 0000 014B     		ldr	r3, .L113
 1145 0002 1860     		str	r0, [r3]
1255:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1146              		.loc 1 1255 0
 1147 0004 7047     		bx	lr
 1148              	.L114:
 1149 0006 00BF     		.align	2
 1150              	.L113:
 1151 0008 4C004242 		.word	1111621708
 1152              		.cfi_endproc
 1153              	.LFE90:
 1155              		.section	.text.RCC_MCOConfig,"ax",%progbits
 1156              		.align	1
 1157              		.global	RCC_MCOConfig
 1158              		.syntax unified
 1159              		.thumb
 1160              		.thumb_func
 1161              		.fpu softvfp
 1163              	RCC_MCOConfig:
 1164              	.LFB91:
1256:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1257:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1258:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
1259:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_MCO: specifies the clock source to output.
1260:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1261:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1262:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   following values:       
1263:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1264:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1265:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1266:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1267:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1268:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL2CLK: PLL2 clock selected                     
1269:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK_Div2: PLL3 clock divided by 2 selected   
1270:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_XT1: External 3-25 MHz oscillator clock selected  
1271:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK: PLL3 clock selected 
1272:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * 
1273:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For  @b other_STM32_devices, this parameter can be one of the following values:        
1274:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1275:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1276:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1277:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1278:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1279:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1280:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1281:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1282:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCO)
1283:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1165              		.loc 1 1283 0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 0
 1168              		@ frame_needed = 0, uses_anonymous_args = 0
 1169              		@ link register save eliminated.
 1170              	.LVL108:
1284:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1285:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCO));
1286:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1287:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Perform Byte access to MCO bits to select the MCO source */
1288:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 1171              		.loc 1 1288 0
 1172 0000 014B     		ldr	r3, .L116
 1173 0002 1870     		strb	r0, [r3]
1289:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1174              		.loc 1 1289 0
 1175 0004 7047     		bx	lr
 1176              	.L117:
 1177 0006 00BF     		.align	2
 1178              	.L116:
 1179 0008 07100240 		.word	1073876999
 1180              		.cfi_endproc
 1181              	.LFE91:
 1183              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1184              		.align	1
 1185              		.global	RCC_GetFlagStatus
 1186              		.syntax unified
 1187              		.thumb
 1188              		.thumb_func
 1189              		.fpu softvfp
 1191              	RCC_GetFlagStatus:
 1192              	.LFB92:
1290:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1291:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1292:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1293:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1294:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1295:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1296:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   following values:
1297:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1298:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1299:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1300:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL2RDY: PLL2 clock ready      
1301:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL3RDY: PLL3 clock ready                           
1302:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1303:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1304:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1305:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1306:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1307:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1308:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1309:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1310:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * 
1311:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1312:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1313:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1314:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1315:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1316:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1317:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1318:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1319:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1320:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1321:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1322:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1323:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1324:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1325:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1326:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1327:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1193              		.loc 1 1327 0
 1194              		.cfi_startproc
 1195              		@ args = 0, pretend = 0, frame = 0
 1196              		@ frame_needed = 0, uses_anonymous_args = 0
 1197              		@ link register save eliminated.
 1198              	.LVL109:
1328:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t tmp = 0;
1329:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   uint32_t statusreg = 0;
1330:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   FlagStatus bitstatus = RESET;
1331:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1332:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1333:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1334:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Get the RCC register index */
1335:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = RCC_FLAG >> 5;
 1199              		.loc 1 1335 0
 1200 0000 4309     		lsrs	r3, r0, #5
 1201              	.LVL110:
1336:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1202              		.loc 1 1336 0
 1203 0002 012B     		cmp	r3, #1
 1204 0004 0CD0     		beq	.L124
1337:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1338:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     statusreg = RCC->CR;
1339:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1340:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1205              		.loc 1 1340 0
 1206 0006 022B     		cmp	r3, #2
 1207 0008 0DD0     		beq	.L125
1341:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1342:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     statusreg = RCC->BDCR;
1343:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1344:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else                       /* The flag to check is in CSR register */
1345:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1346:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     statusreg = RCC->CSR;
 1208              		.loc 1 1346 0
 1209 000a 094B     		ldr	r3, .L127
 1210              	.LVL111:
 1211 000c 5B6A     		ldr	r3, [r3, #36]
 1212              	.LVL112:
 1213              	.L120:
1347:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1348:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1349:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Get the flag position */
1350:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   tmp = RCC_FLAG & FLAG_Mask;
 1214              		.loc 1 1350 0
 1215 000e 00F01F00 		and	r0, r0, #31
 1216              	.LVL113:
1351:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1217              		.loc 1 1351 0
 1218 0012 23FA00F0 		lsr	r0, r3, r0
 1219              	.LVL114:
 1220 0016 10F0010F 		tst	r0, #1
 1221 001a 07D1     		bne	.L126
1352:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1353:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     bitstatus = SET;
1354:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1355:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1356:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1357:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     bitstatus = RESET;
 1222              		.loc 1 1357 0
 1223 001c 0020     		movs	r0, #0
 1224              	.LVL115:
1358:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1359:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1360:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Return the flag status */
1361:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   return bitstatus;
1362:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1225              		.loc 1 1362 0
 1226 001e 7047     		bx	lr
 1227              	.LVL116:
 1228              	.L124:
1338:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1229              		.loc 1 1338 0
 1230 0020 034B     		ldr	r3, .L127
 1231              	.LVL117:
 1232 0022 1B68     		ldr	r3, [r3]
 1233              	.LVL118:
 1234 0024 F3E7     		b	.L120
 1235              	.LVL119:
 1236              	.L125:
1342:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1237              		.loc 1 1342 0
 1238 0026 024B     		ldr	r3, .L127
 1239              	.LVL120:
 1240 0028 1B6A     		ldr	r3, [r3, #32]
 1241              	.LVL121:
 1242 002a F0E7     		b	.L120
 1243              	.LVL122:
 1244              	.L126:
1353:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1245              		.loc 1 1353 0
 1246 002c 0120     		movs	r0, #1
 1247 002e 7047     		bx	lr
 1248              	.L128:
 1249              		.align	2
 1250              	.L127:
 1251 0030 00100240 		.word	1073876992
 1252              		.cfi_endproc
 1253              	.LFE92:
 1255              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 1256              		.align	1
 1257              		.global	RCC_WaitForHSEStartUp
 1258              		.syntax unified
 1259              		.thumb
 1260              		.thumb_func
 1261              		.fpu softvfp
 1263              	RCC_WaitForHSEStartUp:
 1264              	.LFB65:
 305:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 1265              		.loc 1 305 0
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 8
 1268              		@ frame_needed = 0, uses_anonymous_args = 0
 1269 0000 00B5     		push	{lr}
 1270              		.cfi_def_cfa_offset 4
 1271              		.cfi_offset 14, -4
 1272 0002 83B0     		sub	sp, sp, #12
 1273              		.cfi_def_cfa_offset 16
 306:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 1274              		.loc 1 306 0
 1275 0004 0023     		movs	r3, #0
 1276 0006 0193     		str	r3, [sp, #4]
 1277              	.LVL123:
 1278              	.L131:
 313:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     StartUpCounter++;  
 1279              		.loc 1 313 0 discriminator 2
 1280 0008 3120     		movs	r0, #49
 1281 000a FFF7FEFF 		bl	RCC_GetFlagStatus
 1282              	.LVL124:
 314:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 1283              		.loc 1 314 0 discriminator 2
 1284 000e 019B     		ldr	r3, [sp, #4]
 1285 0010 0133     		adds	r3, r3, #1
 1286 0012 0193     		str	r3, [sp, #4]
 315:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   
 1287              		.loc 1 315 0 discriminator 2
 1288 0014 019B     		ldr	r3, [sp, #4]
 1289 0016 B3F5A06F 		cmp	r3, #1280
 1290 001a 01D0     		beq	.L130
 315:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   
 1291              		.loc 1 315 0 is_stmt 0 discriminator 1
 1292 001c 0028     		cmp	r0, #0
 1293 001e F3D0     		beq	.L131
 1294              	.L130:
 317:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
 1295              		.loc 1 317 0 is_stmt 1
 1296 0020 3120     		movs	r0, #49
 1297              	.LVL125:
 1298 0022 FFF7FEFF 		bl	RCC_GetFlagStatus
 1299              	.LVL126:
 1300 0026 18B9     		cbnz	r0, .L135
 323:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }  
 1301              		.loc 1 323 0
 1302 0028 0020     		movs	r0, #0
 1303              	.L132:
 1304              	.LVL127:
 326:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
 1305              		.loc 1 326 0
 1306 002a 03B0     		add	sp, sp, #12
 1307              		.cfi_remember_state
 1308              		.cfi_def_cfa_offset 4
 1309              		@ sp needed
 1310 002c 5DF804FB 		ldr	pc, [sp], #4
 1311              	.LVL128:
 1312              	.L135:
 1313              		.cfi_restore_state
 319:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1314              		.loc 1 319 0
 1315 0030 0120     		movs	r0, #1
 1316 0032 FAE7     		b	.L132
 1317              		.cfi_endproc
 1318              	.LFE65:
 1320              		.section	.text.RCC_ClearFlag,"ax",%progbits
 1321              		.align	1
 1322              		.global	RCC_ClearFlag
 1323              		.syntax unified
 1324              		.thumb
 1325              		.thumb_func
 1326              		.fpu softvfp
 1328              	RCC_ClearFlag:
 1329              	.LFB93:
1363:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1364:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1365:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Clears the RCC reset flags.
1366:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @note   The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,
1367:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1368:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  None
1369:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1370:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1371:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_ClearFlag(void)
1372:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1330              		.loc 1 1372 0
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 0
 1333              		@ frame_needed = 0, uses_anonymous_args = 0
 1334              		@ link register save eliminated.
1373:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1374:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   RCC->CSR |= CSR_RMVF_Set;
 1335              		.loc 1 1374 0
 1336 0000 024A     		ldr	r2, .L137
 1337 0002 536A     		ldr	r3, [r2, #36]
 1338 0004 43F08073 		orr	r3, r3, #16777216
 1339 0008 5362     		str	r3, [r2, #36]
1375:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1340              		.loc 1 1375 0
 1341 000a 7047     		bx	lr
 1342              	.L138:
 1343              		.align	2
 1344              	.L137:
 1345 000c 00100240 		.word	1073876992
 1346              		.cfi_endproc
 1347              	.LFE93:
 1349              		.section	.text.RCC_GetITStatus,"ax",%progbits
 1350              		.align	1
 1351              		.global	RCC_GetITStatus
 1352              		.syntax unified
 1353              		.thumb
 1354              		.thumb_func
 1355              		.fpu softvfp
 1357              	RCC_GetITStatus:
 1358              	.LFB94:
1376:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1377:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1378:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1379:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1380:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1381:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1382:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   following values:
1383:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1384:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1385:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1386:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1387:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1388:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1389:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1390:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1391:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * 
1392:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1393:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1394:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1395:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1396:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1397:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1398:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1399:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1400:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1401:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1402:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1403:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1359              		.loc 1 1403 0
 1360              		.cfi_startproc
 1361              		@ args = 0, pretend = 0, frame = 0
 1362              		@ frame_needed = 0, uses_anonymous_args = 0
 1363              		@ link register save eliminated.
 1364              	.LVL129:
1404:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   ITStatus bitstatus = RESET;
1405:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1406:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1407:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1408:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the status of the specified RCC interrupt */
1409:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 1365              		.loc 1 1409 0
 1366 0000 034B     		ldr	r3, .L143
 1367 0002 9B68     		ldr	r3, [r3, #8]
 1368 0004 1842     		tst	r0, r3
 1369 0006 01D1     		bne	.L142
1410:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1411:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     bitstatus = SET;
1412:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1413:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   else
1414:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   {
1415:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****     bitstatus = RESET;
 1370              		.loc 1 1415 0
 1371 0008 0020     		movs	r0, #0
 1372              	.LVL130:
1416:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
1417:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1418:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Return the RCC_IT status */
1419:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   return  bitstatus;
1420:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1373              		.loc 1 1420 0
 1374 000a 7047     		bx	lr
 1375              	.LVL131:
 1376              	.L142:
1411:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   }
 1377              		.loc 1 1411 0
 1378 000c 0120     		movs	r0, #1
 1379              	.LVL132:
 1380 000e 7047     		bx	lr
 1381              	.L144:
 1382              		.align	2
 1383              	.L143:
 1384 0010 00100240 		.word	1073876992
 1385              		.cfi_endproc
 1386              	.LFE94:
 1388              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 1389              		.align	1
 1390              		.global	RCC_ClearITPendingBit
 1391              		.syntax unified
 1392              		.thumb
 1393              		.thumb_func
 1394              		.fpu softvfp
 1396              	RCC_ClearITPendingBit:
 1397              	.LFB95:
1421:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1422:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** /**
1423:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1424:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1425:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1426:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1427:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   of the following values:
1428:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1429:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1430:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1431:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1432:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1433:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1434:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1435:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1436:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * 
1437:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the
1438:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   following values:        
1439:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1440:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1441:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1442:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1443:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1444:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *   
1445:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1446:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   * @retval None
1447:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   */
1448:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1449:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** {
 1398              		.loc 1 1449 0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 0
 1401              		@ frame_needed = 0, uses_anonymous_args = 0
 1402              		@ link register save eliminated.
 1403              	.LVL133:
1450:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Check the parameters */
1451:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1452:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** 
1453:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1454:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****      pending bits */
1455:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 1404              		.loc 1 1455 0
 1405 0000 014B     		ldr	r3, .L146
 1406 0002 1870     		strb	r0, [r3]
1456:../system/src/stm32f1-stdperiph/stm32f10x_rcc.c **** }
 1407              		.loc 1 1456 0
 1408 0004 7047     		bx	lr
 1409              	.L147:
 1410 0006 00BF     		.align	2
 1411              	.L146:
 1412 0008 0A100240 		.word	1073877002
 1413              		.cfi_endproc
 1414              	.LFE95:
 1416              		.section	.data.ADCPrescTable,"aw",%progbits
 1417              		.align	2
 1418              		.set	.LANCHOR1,. + 0
 1421              	ADCPrescTable:
 1422 0000 02       		.byte	2
 1423 0001 04       		.byte	4
 1424 0002 06       		.byte	6
 1425 0003 08       		.byte	8
 1426              		.section	.data.APBAHBPrescTable,"aw",%progbits
 1427              		.align	2
 1428              		.set	.LANCHOR0,. + 0
 1431              	APBAHBPrescTable:
 1432 0000 00       		.byte	0
 1433 0001 00       		.byte	0
 1434 0002 00       		.byte	0
 1435 0003 00       		.byte	0
 1436 0004 01       		.byte	1
 1437 0005 02       		.byte	2
 1438 0006 03       		.byte	3
 1439 0007 04       		.byte	4
 1440 0008 01       		.byte	1
 1441 0009 02       		.byte	2
 1442 000a 03       		.byte	3
 1443 000b 04       		.byte	4
 1444 000c 06       		.byte	6
 1445 000d 07       		.byte	7
 1446 000e 08       		.byte	8
 1447 000f 09       		.byte	9
 1448              		.text
 1449              	.Letext0:
 1450              		.file 2 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 1451              		.file 3 "../system/include/cmsis/core_cm3.h"
 1452              		.file 4 "../system/include/cmsis/system_stm32f10x.h"
 1453              		.file 5 "../system/include/cmsis/stm32f10x.h"
 1454              		.file 6 "../system/include/stm32f1-stdperiph/stm32f10x_rcc.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f10x_rcc.c
     /tmp/ccf2Q8Sk.s:16     .text.RCC_DeInit:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:23     .text.RCC_DeInit:0000000000000000 RCC_DeInit
     /tmp/ccf2Q8Sk.s:65     .text.RCC_DeInit:000000000000003c $d
     /tmp/ccf2Q8Sk.s:71     .text.RCC_HSEConfig:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:78     .text.RCC_HSEConfig:0000000000000000 RCC_HSEConfig
     /tmp/ccf2Q8Sk.s:120    .text.RCC_HSEConfig:0000000000000038 $d
     /tmp/ccf2Q8Sk.s:125    .text.RCC_AdjustHSICalibrationValue:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:132    .text.RCC_AdjustHSICalibrationValue:0000000000000000 RCC_AdjustHSICalibrationValue
     /tmp/ccf2Q8Sk.s:157    .text.RCC_AdjustHSICalibrationValue:0000000000000010 $d
     /tmp/ccf2Q8Sk.s:162    .text.RCC_HSICmd:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:169    .text.RCC_HSICmd:0000000000000000 RCC_HSICmd
     /tmp/ccf2Q8Sk.s:185    .text.RCC_HSICmd:0000000000000008 $d
     /tmp/ccf2Q8Sk.s:190    .text.RCC_PLLConfig:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:197    .text.RCC_PLLConfig:0000000000000000 RCC_PLLConfig
     /tmp/ccf2Q8Sk.s:224    .text.RCC_PLLConfig:0000000000000010 $d
     /tmp/ccf2Q8Sk.s:229    .text.RCC_PLLCmd:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:236    .text.RCC_PLLCmd:0000000000000000 RCC_PLLCmd
     /tmp/ccf2Q8Sk.s:252    .text.RCC_PLLCmd:0000000000000008 $d
     /tmp/ccf2Q8Sk.s:257    .text.RCC_PREDIV1Config:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:264    .text.RCC_PREDIV1Config:0000000000000000 RCC_PREDIV1Config
     /tmp/ccf2Q8Sk.s:293    .text.RCC_PREDIV1Config:0000000000000014 $d
     /tmp/ccf2Q8Sk.s:298    .text.RCC_SYSCLKConfig:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:305    .text.RCC_SYSCLKConfig:0000000000000000 RCC_SYSCLKConfig
     /tmp/ccf2Q8Sk.s:330    .text.RCC_SYSCLKConfig:0000000000000010 $d
     /tmp/ccf2Q8Sk.s:335    .text.RCC_GetSYSCLKSource:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:342    .text.RCC_GetSYSCLKSource:0000000000000000 RCC_GetSYSCLKSource
     /tmp/ccf2Q8Sk.s:358    .text.RCC_GetSYSCLKSource:000000000000000c $d
     /tmp/ccf2Q8Sk.s:363    .text.RCC_HCLKConfig:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:370    .text.RCC_HCLKConfig:0000000000000000 RCC_HCLKConfig
     /tmp/ccf2Q8Sk.s:395    .text.RCC_HCLKConfig:0000000000000010 $d
     /tmp/ccf2Q8Sk.s:400    .text.RCC_PCLK1Config:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:407    .text.RCC_PCLK1Config:0000000000000000 RCC_PCLK1Config
     /tmp/ccf2Q8Sk.s:432    .text.RCC_PCLK1Config:0000000000000010 $d
     /tmp/ccf2Q8Sk.s:437    .text.RCC_PCLK2Config:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:444    .text.RCC_PCLK2Config:0000000000000000 RCC_PCLK2Config
     /tmp/ccf2Q8Sk.s:469    .text.RCC_PCLK2Config:0000000000000010 $d
     /tmp/ccf2Q8Sk.s:474    .text.RCC_ITConfig:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:481    .text.RCC_ITConfig:0000000000000000 RCC_ITConfig
     /tmp/ccf2Q8Sk.s:511    .text.RCC_ITConfig:0000000000000018 $d
     /tmp/ccf2Q8Sk.s:516    .text.RCC_USBCLKConfig:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:523    .text.RCC_USBCLKConfig:0000000000000000 RCC_USBCLKConfig
     /tmp/ccf2Q8Sk.s:539    .text.RCC_USBCLKConfig:0000000000000008 $d
     /tmp/ccf2Q8Sk.s:544    .text.RCC_ADCCLKConfig:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:551    .text.RCC_ADCCLKConfig:0000000000000000 RCC_ADCCLKConfig
     /tmp/ccf2Q8Sk.s:576    .text.RCC_ADCCLKConfig:0000000000000010 $d
     /tmp/ccf2Q8Sk.s:581    .text.RCC_LSEConfig:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:588    .text.RCC_LSEConfig:0000000000000000 RCC_LSEConfig
     /tmp/ccf2Q8Sk.s:625    .text.RCC_LSEConfig:0000000000000024 $d
     /tmp/ccf2Q8Sk.s:630    .text.RCC_LSICmd:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:637    .text.RCC_LSICmd:0000000000000000 RCC_LSICmd
     /tmp/ccf2Q8Sk.s:653    .text.RCC_LSICmd:0000000000000008 $d
     /tmp/ccf2Q8Sk.s:658    .text.RCC_RTCCLKConfig:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:665    .text.RCC_RTCCLKConfig:0000000000000000 RCC_RTCCLKConfig
     /tmp/ccf2Q8Sk.s:684    .text.RCC_RTCCLKConfig:000000000000000c $d
     /tmp/ccf2Q8Sk.s:689    .text.RCC_RTCCLKCmd:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:696    .text.RCC_RTCCLKCmd:0000000000000000 RCC_RTCCLKCmd
     /tmp/ccf2Q8Sk.s:712    .text.RCC_RTCCLKCmd:0000000000000008 $d
     /tmp/ccf2Q8Sk.s:717    .text.RCC_GetClocksFreq:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:724    .text.RCC_GetClocksFreq:0000000000000000 RCC_GetClocksFreq
     /tmp/ccf2Q8Sk.s:881    .text.RCC_GetClocksFreq:00000000000000a0 $d
     /tmp/ccf2Q8Sk.s:890    .text.RCC_AHBPeriphClockCmd:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:897    .text.RCC_AHBPeriphClockCmd:0000000000000000 RCC_AHBPeriphClockCmd
     /tmp/ccf2Q8Sk.s:927    .text.RCC_AHBPeriphClockCmd:0000000000000018 $d
     /tmp/ccf2Q8Sk.s:932    .text.RCC_APB2PeriphClockCmd:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:939    .text.RCC_APB2PeriphClockCmd:0000000000000000 RCC_APB2PeriphClockCmd
     /tmp/ccf2Q8Sk.s:969    .text.RCC_APB2PeriphClockCmd:0000000000000018 $d
     /tmp/ccf2Q8Sk.s:974    .text.RCC_APB1PeriphClockCmd:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:981    .text.RCC_APB1PeriphClockCmd:0000000000000000 RCC_APB1PeriphClockCmd
     /tmp/ccf2Q8Sk.s:1011   .text.RCC_APB1PeriphClockCmd:0000000000000018 $d
     /tmp/ccf2Q8Sk.s:1016   .text.RCC_APB2PeriphResetCmd:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:1023   .text.RCC_APB2PeriphResetCmd:0000000000000000 RCC_APB2PeriphResetCmd
     /tmp/ccf2Q8Sk.s:1053   .text.RCC_APB2PeriphResetCmd:0000000000000018 $d
     /tmp/ccf2Q8Sk.s:1058   .text.RCC_APB1PeriphResetCmd:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:1065   .text.RCC_APB1PeriphResetCmd:0000000000000000 RCC_APB1PeriphResetCmd
     /tmp/ccf2Q8Sk.s:1095   .text.RCC_APB1PeriphResetCmd:0000000000000018 $d
     /tmp/ccf2Q8Sk.s:1100   .text.RCC_BackupResetCmd:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:1107   .text.RCC_BackupResetCmd:0000000000000000 RCC_BackupResetCmd
     /tmp/ccf2Q8Sk.s:1123   .text.RCC_BackupResetCmd:0000000000000008 $d
     /tmp/ccf2Q8Sk.s:1128   .text.RCC_ClockSecuritySystemCmd:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:1135   .text.RCC_ClockSecuritySystemCmd:0000000000000000 RCC_ClockSecuritySystemCmd
     /tmp/ccf2Q8Sk.s:1151   .text.RCC_ClockSecuritySystemCmd:0000000000000008 $d
     /tmp/ccf2Q8Sk.s:1156   .text.RCC_MCOConfig:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:1163   .text.RCC_MCOConfig:0000000000000000 RCC_MCOConfig
     /tmp/ccf2Q8Sk.s:1179   .text.RCC_MCOConfig:0000000000000008 $d
     /tmp/ccf2Q8Sk.s:1184   .text.RCC_GetFlagStatus:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:1191   .text.RCC_GetFlagStatus:0000000000000000 RCC_GetFlagStatus
     /tmp/ccf2Q8Sk.s:1251   .text.RCC_GetFlagStatus:0000000000000030 $d
     /tmp/ccf2Q8Sk.s:1256   .text.RCC_WaitForHSEStartUp:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:1263   .text.RCC_WaitForHSEStartUp:0000000000000000 RCC_WaitForHSEStartUp
     /tmp/ccf2Q8Sk.s:1321   .text.RCC_ClearFlag:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:1328   .text.RCC_ClearFlag:0000000000000000 RCC_ClearFlag
     /tmp/ccf2Q8Sk.s:1345   .text.RCC_ClearFlag:000000000000000c $d
     /tmp/ccf2Q8Sk.s:1350   .text.RCC_GetITStatus:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:1357   .text.RCC_GetITStatus:0000000000000000 RCC_GetITStatus
     /tmp/ccf2Q8Sk.s:1384   .text.RCC_GetITStatus:0000000000000010 $d
     /tmp/ccf2Q8Sk.s:1389   .text.RCC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccf2Q8Sk.s:1396   .text.RCC_ClearITPendingBit:0000000000000000 RCC_ClearITPendingBit
     /tmp/ccf2Q8Sk.s:1412   .text.RCC_ClearITPendingBit:0000000000000008 $d
     /tmp/ccf2Q8Sk.s:1417   .data.ADCPrescTable:0000000000000000 $d
     /tmp/ccf2Q8Sk.s:1421   .data.ADCPrescTable:0000000000000000 ADCPrescTable
     /tmp/ccf2Q8Sk.s:1427   .data.APBAHBPrescTable:0000000000000000 $d
     /tmp/ccf2Q8Sk.s:1431   .data.APBAHBPrescTable:0000000000000000 APBAHBPrescTable
                           .group:0000000000000000 wm4.0.879aed89c359f5856fe69c61b3590d34
                           .group:0000000000000000 wm4.stm32f10x.h.51.c58ea26c5150470d52680f0bbaa7049c
                           .group:0000000000000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:0000000000000000 wm4.core_cm3.h.82.57a0f9dd004efa579f86574376281d2f
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.67d2dcde6a14ff518eedc1d545d89a76
                           .group:0000000000000000 wm4.core_cm3.h.183.ecfd9c316d6f10b73648f6e579b02c8b
                           .group:0000000000000000 wm4.stm32f10x.h.522.a925aafc848b1f088438cf0e9b167b78
                           .group:0000000000000000 wm4.stm32f10x_adc.h.89.9f2b285fa0070185d48a05b61a05798c
                           .group:0000000000000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:0000000000000000 wm4.stm32f10x_can.h.25.e5e43f6bbc8fc7c8aa30ef2bc5610ced
                           .group:0000000000000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:0000000000000000 wm4.stm32f10x_dac.h.25.d946244edf026333094657d55ea894b8
                           .group:0000000000000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:0000000000000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:0000000000000000 wm4.stm32f10x_exti.h.25.f52c69aad7d1994be5b2c4e2b8f4c595
                           .group:0000000000000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:0000000000000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:0000000000000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:0000000000000000 wm4.stm32f10x_i2c.h.25.b124ac2c620f8ebddd92b6d95ca62176
                           .group:0000000000000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:0000000000000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:0000000000000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:0000000000000000 wm4.stm32f10x_sdio.h.25.fb0db079f5c1412c40f359319f7c40b0
                           .group:0000000000000000 wm4.stm32f10x_spi.h.25.3f6dfa4abe177efb3c6f5a717c06b323
                           .group:0000000000000000 wm4.stm32f10x_tim.h.25.f709106ba77b314e6b070693f89f3c56
                           .group:0000000000000000 wm4.stm32f10x_usart.h.25.2e65e396239d0cc41fd0bf6faa2a32cb
                           .group:0000000000000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:0000000000000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:0000000000000000 wm4.stm32f10x.h.8317.9a8e476d96d33bb2df9a9ad0775bd4a7
                           .group:0000000000000000 wm4.stm32f10x_rcc.h.67.b2ac3f177eed824c6a7f550d9877061e

NO UNDEFINED SYMBOLS
