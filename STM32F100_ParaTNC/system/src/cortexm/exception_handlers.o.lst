   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"exception_handlers.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NVIC_SystemReset,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	NVIC_SystemReset:
  23              	.LFB58:
  24              		.file 1 "../system/include/cmsis/core_cm3.h"
   1:../system/include/cmsis/core_cm3.h **** /**************************************************************************//**
   2:../system/include/cmsis/core_cm3.h ****  * @file     core_cm3.h
   3:../system/include/cmsis/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:../system/include/cmsis/core_cm3.h ****  * @version  V4.30
   5:../system/include/cmsis/core_cm3.h ****  * @date     20. October 2015
   6:../system/include/cmsis/core_cm3.h ****  ******************************************************************************/
   7:../system/include/cmsis/core_cm3.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:../system/include/cmsis/core_cm3.h **** 
   9:../system/include/cmsis/core_cm3.h ****    All rights reserved.
  10:../system/include/cmsis/core_cm3.h ****    Redistribution and use in source and binary forms, with or without
  11:../system/include/cmsis/core_cm3.h ****    modification, are permitted provided that the following conditions are met:
  12:../system/include/cmsis/core_cm3.h ****    - Redistributions of source code must retain the above copyright
  13:../system/include/cmsis/core_cm3.h ****      notice, this list of conditions and the following disclaimer.
  14:../system/include/cmsis/core_cm3.h ****    - Redistributions in binary form must reproduce the above copyright
  15:../system/include/cmsis/core_cm3.h ****      notice, this list of conditions and the following disclaimer in the
  16:../system/include/cmsis/core_cm3.h ****      documentation and/or other materials provided with the distribution.
  17:../system/include/cmsis/core_cm3.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:../system/include/cmsis/core_cm3.h ****      to endorse or promote products derived from this software without
  19:../system/include/cmsis/core_cm3.h ****      specific prior written permission.
  20:../system/include/cmsis/core_cm3.h ****    *
  21:../system/include/cmsis/core_cm3.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:../system/include/cmsis/core_cm3.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:../system/include/cmsis/core_cm3.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:../system/include/cmsis/core_cm3.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:../system/include/cmsis/core_cm3.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:../system/include/cmsis/core_cm3.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:../system/include/cmsis/core_cm3.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:../system/include/cmsis/core_cm3.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:../system/include/cmsis/core_cm3.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:../system/include/cmsis/core_cm3.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:../system/include/cmsis/core_cm3.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:../system/include/cmsis/core_cm3.h ****    ---------------------------------------------------------------------------*/
  33:../system/include/cmsis/core_cm3.h **** 
  34:../system/include/cmsis/core_cm3.h **** 
  35:../system/include/cmsis/core_cm3.h **** #if   defined ( __ICCARM__ )
  36:../system/include/cmsis/core_cm3.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:../system/include/cmsis/core_cm3.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:../system/include/cmsis/core_cm3.h ****   #pragma clang system_header   /* treat file as system include file */
  39:../system/include/cmsis/core_cm3.h **** #endif
  40:../system/include/cmsis/core_cm3.h **** 
  41:../system/include/cmsis/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  42:../system/include/cmsis/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  43:../system/include/cmsis/core_cm3.h **** 
  44:../system/include/cmsis/core_cm3.h **** // [ILG]
  45:../system/include/cmsis/core_cm3.h **** #if defined ( __GNUC__ )
  46:../system/include/cmsis/core_cm3.h **** #pragma GCC diagnostic push
  47:../system/include/cmsis/core_cm3.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  48:../system/include/cmsis/core_cm3.h **** #pragma GCC diagnostic ignored "-Wconversion"
  49:../system/include/cmsis/core_cm3.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  50:../system/include/cmsis/core_cm3.h **** #endif
  51:../system/include/cmsis/core_cm3.h **** 
  52:../system/include/cmsis/core_cm3.h **** #include <stdint.h>
  53:../system/include/cmsis/core_cm3.h **** 
  54:../system/include/cmsis/core_cm3.h **** #ifdef __cplusplus
  55:../system/include/cmsis/core_cm3.h ****  extern "C" {
  56:../system/include/cmsis/core_cm3.h **** #endif
  57:../system/include/cmsis/core_cm3.h **** 
  58:../system/include/cmsis/core_cm3.h **** /**
  59:../system/include/cmsis/core_cm3.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  60:../system/include/cmsis/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  61:../system/include/cmsis/core_cm3.h **** 
  62:../system/include/cmsis/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  63:../system/include/cmsis/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  64:../system/include/cmsis/core_cm3.h **** 
  65:../system/include/cmsis/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  66:../system/include/cmsis/core_cm3.h ****      Unions are used for effective representation of core registers.
  67:../system/include/cmsis/core_cm3.h **** 
  68:../system/include/cmsis/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  69:../system/include/cmsis/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  70:../system/include/cmsis/core_cm3.h ****  */
  71:../system/include/cmsis/core_cm3.h **** 
  72:../system/include/cmsis/core_cm3.h **** 
  73:../system/include/cmsis/core_cm3.h **** /*******************************************************************************
  74:../system/include/cmsis/core_cm3.h ****  *                 CMSIS definitions
  75:../system/include/cmsis/core_cm3.h ****  ******************************************************************************/
  76:../system/include/cmsis/core_cm3.h **** /**
  77:../system/include/cmsis/core_cm3.h ****   \ingroup Cortex_M3
  78:../system/include/cmsis/core_cm3.h ****   @{
  79:../system/include/cmsis/core_cm3.h ****  */
  80:../system/include/cmsis/core_cm3.h **** 
  81:../system/include/cmsis/core_cm3.h **** /*  CMSIS CM3 definitions */
  82:../system/include/cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  83:../system/include/cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  84:../system/include/cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16U) | \
  85:../system/include/cmsis/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  86:../system/include/cmsis/core_cm3.h **** 
  87:../system/include/cmsis/core_cm3.h **** #define __CORTEX_M                (0x03U)                                      /*!< Cortex-M Core *
  88:../system/include/cmsis/core_cm3.h **** 
  89:../system/include/cmsis/core_cm3.h **** 
  90:../system/include/cmsis/core_cm3.h **** #if   defined ( __CC_ARM )
  91:../system/include/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  92:../system/include/cmsis/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  93:../system/include/cmsis/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  94:../system/include/cmsis/core_cm3.h **** 
  95:../system/include/cmsis/core_cm3.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  96:../system/include/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  97:../system/include/cmsis/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  98:../system/include/cmsis/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  99:../system/include/cmsis/core_cm3.h **** 
 100:../system/include/cmsis/core_cm3.h **** #elif defined ( __GNUC__ )
 101:../system/include/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 102:../system/include/cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 103:../system/include/cmsis/core_cm3.h ****   #define __STATIC_INLINE  static inline
 104:../system/include/cmsis/core_cm3.h **** 
 105:../system/include/cmsis/core_cm3.h **** #elif defined ( __ICCARM__ )
 106:../system/include/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
 107:../system/include/cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 108:../system/include/cmsis/core_cm3.h ****   #define __STATIC_INLINE  static inline
 109:../system/include/cmsis/core_cm3.h **** 
 110:../system/include/cmsis/core_cm3.h **** #elif defined ( __TMS470__ )
 111:../system/include/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 112:../system/include/cmsis/core_cm3.h ****   #define __STATIC_INLINE  static inline
 113:../system/include/cmsis/core_cm3.h **** 
 114:../system/include/cmsis/core_cm3.h **** #elif defined ( __TASKING__ )
 115:../system/include/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 116:../system/include/cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 117:../system/include/cmsis/core_cm3.h ****   #define __STATIC_INLINE  static inline
 118:../system/include/cmsis/core_cm3.h **** 
 119:../system/include/cmsis/core_cm3.h **** #elif defined ( __CSMC__ )
 120:../system/include/cmsis/core_cm3.h ****   #define __packed
 121:../system/include/cmsis/core_cm3.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 122:../system/include/cmsis/core_cm3.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 123:../system/include/cmsis/core_cm3.h ****   #define __STATIC_INLINE  static inline
 124:../system/include/cmsis/core_cm3.h **** 
 125:../system/include/cmsis/core_cm3.h **** #else
 126:../system/include/cmsis/core_cm3.h ****   #error Unknown compiler
 127:../system/include/cmsis/core_cm3.h **** #endif
 128:../system/include/cmsis/core_cm3.h **** 
 129:../system/include/cmsis/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not.
 130:../system/include/cmsis/core_cm3.h ****     This core does not support an FPU at all
 131:../system/include/cmsis/core_cm3.h **** */
 132:../system/include/cmsis/core_cm3.h **** #define __FPU_USED       0U
 133:../system/include/cmsis/core_cm3.h **** 
 134:../system/include/cmsis/core_cm3.h **** #if defined ( __CC_ARM )
 135:../system/include/cmsis/core_cm3.h ****   #if defined __TARGET_FPU_VFP
 136:../system/include/cmsis/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 137:../system/include/cmsis/core_cm3.h ****   #endif
 138:../system/include/cmsis/core_cm3.h **** 
 139:../system/include/cmsis/core_cm3.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 140:../system/include/cmsis/core_cm3.h ****   #if defined __ARM_PCS_VFP
 141:../system/include/cmsis/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 142:../system/include/cmsis/core_cm3.h ****   #endif
 143:../system/include/cmsis/core_cm3.h **** 
 144:../system/include/cmsis/core_cm3.h **** #elif defined ( __GNUC__ )
 145:../system/include/cmsis/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 146:../system/include/cmsis/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 147:../system/include/cmsis/core_cm3.h ****   #endif
 148:../system/include/cmsis/core_cm3.h **** 
 149:../system/include/cmsis/core_cm3.h **** #elif defined ( __ICCARM__ )
 150:../system/include/cmsis/core_cm3.h ****   #if defined __ARMVFP__
 151:../system/include/cmsis/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 152:../system/include/cmsis/core_cm3.h ****   #endif
 153:../system/include/cmsis/core_cm3.h **** 
 154:../system/include/cmsis/core_cm3.h **** #elif defined ( __TMS470__ )
 155:../system/include/cmsis/core_cm3.h ****   #if defined __TI_VFP_SUPPORT__
 156:../system/include/cmsis/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 157:../system/include/cmsis/core_cm3.h ****   #endif
 158:../system/include/cmsis/core_cm3.h **** 
 159:../system/include/cmsis/core_cm3.h **** #elif defined ( __TASKING__ )
 160:../system/include/cmsis/core_cm3.h ****   #if defined __FPU_VFP__
 161:../system/include/cmsis/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 162:../system/include/cmsis/core_cm3.h ****   #endif
 163:../system/include/cmsis/core_cm3.h **** 
 164:../system/include/cmsis/core_cm3.h **** #elif defined ( __CSMC__ )
 165:../system/include/cmsis/core_cm3.h ****   #if ( __CSMC__ & 0x400U)
 166:../system/include/cmsis/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 167:../system/include/cmsis/core_cm3.h ****   #endif
 168:../system/include/cmsis/core_cm3.h **** 
 169:../system/include/cmsis/core_cm3.h **** #endif
 170:../system/include/cmsis/core_cm3.h **** 
 171:../system/include/cmsis/core_cm3.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 172:../system/include/cmsis/core_cm3.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 173:../system/include/cmsis/core_cm3.h **** 
 174:../system/include/cmsis/core_cm3.h **** #ifdef __cplusplus
 175:../system/include/cmsis/core_cm3.h **** }
 176:../system/include/cmsis/core_cm3.h **** #endif
 177:../system/include/cmsis/core_cm3.h **** 
 178:../system/include/cmsis/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 179:../system/include/cmsis/core_cm3.h **** 
 180:../system/include/cmsis/core_cm3.h **** #ifndef __CMSIS_GENERIC
 181:../system/include/cmsis/core_cm3.h **** 
 182:../system/include/cmsis/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 183:../system/include/cmsis/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 184:../system/include/cmsis/core_cm3.h **** 
 185:../system/include/cmsis/core_cm3.h **** #ifdef __cplusplus
 186:../system/include/cmsis/core_cm3.h ****  extern "C" {
 187:../system/include/cmsis/core_cm3.h **** #endif
 188:../system/include/cmsis/core_cm3.h **** 
 189:../system/include/cmsis/core_cm3.h **** /* check device defines and use defaults */
 190:../system/include/cmsis/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 191:../system/include/cmsis/core_cm3.h ****   #ifndef __CM3_REV
 192:../system/include/cmsis/core_cm3.h ****     #define __CM3_REV               0x0200U
 193:../system/include/cmsis/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 194:../system/include/cmsis/core_cm3.h ****   #endif
 195:../system/include/cmsis/core_cm3.h **** 
 196:../system/include/cmsis/core_cm3.h ****   #ifndef __MPU_PRESENT
 197:../system/include/cmsis/core_cm3.h ****     #define __MPU_PRESENT             0U
 198:../system/include/cmsis/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 199:../system/include/cmsis/core_cm3.h ****   #endif
 200:../system/include/cmsis/core_cm3.h **** 
 201:../system/include/cmsis/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 202:../system/include/cmsis/core_cm3.h ****     #define __NVIC_PRIO_BITS          4U
 203:../system/include/cmsis/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 204:../system/include/cmsis/core_cm3.h ****   #endif
 205:../system/include/cmsis/core_cm3.h **** 
 206:../system/include/cmsis/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 207:../system/include/cmsis/core_cm3.h ****     #define __Vendor_SysTickConfig    0U
 208:../system/include/cmsis/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 209:../system/include/cmsis/core_cm3.h ****   #endif
 210:../system/include/cmsis/core_cm3.h **** #endif
 211:../system/include/cmsis/core_cm3.h **** 
 212:../system/include/cmsis/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 213:../system/include/cmsis/core_cm3.h **** /**
 214:../system/include/cmsis/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 215:../system/include/cmsis/core_cm3.h **** 
 216:../system/include/cmsis/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 217:../system/include/cmsis/core_cm3.h ****     \li to specify the access to peripheral variables.
 218:../system/include/cmsis/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 219:../system/include/cmsis/core_cm3.h **** */
 220:../system/include/cmsis/core_cm3.h **** #ifdef __cplusplus
 221:../system/include/cmsis/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 222:../system/include/cmsis/core_cm3.h **** #else
 223:../system/include/cmsis/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 224:../system/include/cmsis/core_cm3.h **** #endif
 225:../system/include/cmsis/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 226:../system/include/cmsis/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 227:../system/include/cmsis/core_cm3.h **** 
 228:../system/include/cmsis/core_cm3.h **** /* following defines should be used for structure members */
 229:../system/include/cmsis/core_cm3.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 230:../system/include/cmsis/core_cm3.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 231:../system/include/cmsis/core_cm3.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 232:../system/include/cmsis/core_cm3.h **** 
 233:../system/include/cmsis/core_cm3.h **** /*@} end of group Cortex_M3 */
 234:../system/include/cmsis/core_cm3.h **** 
 235:../system/include/cmsis/core_cm3.h **** 
 236:../system/include/cmsis/core_cm3.h **** 
 237:../system/include/cmsis/core_cm3.h **** /*******************************************************************************
 238:../system/include/cmsis/core_cm3.h ****  *                 Register Abstraction
 239:../system/include/cmsis/core_cm3.h ****   Core Register contain:
 240:../system/include/cmsis/core_cm3.h ****   - Core Register
 241:../system/include/cmsis/core_cm3.h ****   - Core NVIC Register
 242:../system/include/cmsis/core_cm3.h ****   - Core SCB Register
 243:../system/include/cmsis/core_cm3.h ****   - Core SysTick Register
 244:../system/include/cmsis/core_cm3.h ****   - Core Debug Register
 245:../system/include/cmsis/core_cm3.h ****   - Core MPU Register
 246:../system/include/cmsis/core_cm3.h ****  ******************************************************************************/
 247:../system/include/cmsis/core_cm3.h **** /**
 248:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 249:../system/include/cmsis/core_cm3.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 250:../system/include/cmsis/core_cm3.h **** */
 251:../system/include/cmsis/core_cm3.h **** 
 252:../system/include/cmsis/core_cm3.h **** /**
 253:../system/include/cmsis/core_cm3.h ****   \ingroup    CMSIS_core_register
 254:../system/include/cmsis/core_cm3.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 255:../system/include/cmsis/core_cm3.h ****   \brief      Core Register type definitions.
 256:../system/include/cmsis/core_cm3.h ****   @{
 257:../system/include/cmsis/core_cm3.h ****  */
 258:../system/include/cmsis/core_cm3.h **** 
 259:../system/include/cmsis/core_cm3.h **** /**
 260:../system/include/cmsis/core_cm3.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 261:../system/include/cmsis/core_cm3.h ****  */
 262:../system/include/cmsis/core_cm3.h **** typedef union
 263:../system/include/cmsis/core_cm3.h **** {
 264:../system/include/cmsis/core_cm3.h ****   struct
 265:../system/include/cmsis/core_cm3.h ****   {
 266:../system/include/cmsis/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved */
 267:../system/include/cmsis/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 268:../system/include/cmsis/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 269:../system/include/cmsis/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 270:../system/include/cmsis/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 271:../system/include/cmsis/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 272:../system/include/cmsis/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 273:../system/include/cmsis/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 274:../system/include/cmsis/core_cm3.h **** } APSR_Type;
 275:../system/include/cmsis/core_cm3.h **** 
 276:../system/include/cmsis/core_cm3.h **** /* APSR Register Definitions */
 277:../system/include/cmsis/core_cm3.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 278:../system/include/cmsis/core_cm3.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 279:../system/include/cmsis/core_cm3.h **** 
 280:../system/include/cmsis/core_cm3.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 281:../system/include/cmsis/core_cm3.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 282:../system/include/cmsis/core_cm3.h **** 
 283:../system/include/cmsis/core_cm3.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 284:../system/include/cmsis/core_cm3.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 285:../system/include/cmsis/core_cm3.h **** 
 286:../system/include/cmsis/core_cm3.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 287:../system/include/cmsis/core_cm3.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 288:../system/include/cmsis/core_cm3.h **** 
 289:../system/include/cmsis/core_cm3.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 290:../system/include/cmsis/core_cm3.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 291:../system/include/cmsis/core_cm3.h **** 
 292:../system/include/cmsis/core_cm3.h **** 
 293:../system/include/cmsis/core_cm3.h **** /**
 294:../system/include/cmsis/core_cm3.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 295:../system/include/cmsis/core_cm3.h ****  */
 296:../system/include/cmsis/core_cm3.h **** typedef union
 297:../system/include/cmsis/core_cm3.h **** {
 298:../system/include/cmsis/core_cm3.h ****   struct
 299:../system/include/cmsis/core_cm3.h ****   {
 300:../system/include/cmsis/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 301:../system/include/cmsis/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 302:../system/include/cmsis/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 303:../system/include/cmsis/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 304:../system/include/cmsis/core_cm3.h **** } IPSR_Type;
 305:../system/include/cmsis/core_cm3.h **** 
 306:../system/include/cmsis/core_cm3.h **** /* IPSR Register Definitions */
 307:../system/include/cmsis/core_cm3.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 308:../system/include/cmsis/core_cm3.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 309:../system/include/cmsis/core_cm3.h **** 
 310:../system/include/cmsis/core_cm3.h **** 
 311:../system/include/cmsis/core_cm3.h **** /**
 312:../system/include/cmsis/core_cm3.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 313:../system/include/cmsis/core_cm3.h ****  */
 314:../system/include/cmsis/core_cm3.h **** typedef union
 315:../system/include/cmsis/core_cm3.h **** {
 316:../system/include/cmsis/core_cm3.h ****   struct
 317:../system/include/cmsis/core_cm3.h ****   {
 318:../system/include/cmsis/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 319:../system/include/cmsis/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 320:../system/include/cmsis/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 321:../system/include/cmsis/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 322:../system/include/cmsis/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 323:../system/include/cmsis/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 324:../system/include/cmsis/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 325:../system/include/cmsis/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 326:../system/include/cmsis/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 327:../system/include/cmsis/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 328:../system/include/cmsis/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 329:../system/include/cmsis/core_cm3.h **** } xPSR_Type;
 330:../system/include/cmsis/core_cm3.h **** 
 331:../system/include/cmsis/core_cm3.h **** /* xPSR Register Definitions */
 332:../system/include/cmsis/core_cm3.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 333:../system/include/cmsis/core_cm3.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 334:../system/include/cmsis/core_cm3.h **** 
 335:../system/include/cmsis/core_cm3.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 336:../system/include/cmsis/core_cm3.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 337:../system/include/cmsis/core_cm3.h **** 
 338:../system/include/cmsis/core_cm3.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 339:../system/include/cmsis/core_cm3.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 340:../system/include/cmsis/core_cm3.h **** 
 341:../system/include/cmsis/core_cm3.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 342:../system/include/cmsis/core_cm3.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 343:../system/include/cmsis/core_cm3.h **** 
 344:../system/include/cmsis/core_cm3.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 345:../system/include/cmsis/core_cm3.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 346:../system/include/cmsis/core_cm3.h **** 
 347:../system/include/cmsis/core_cm3.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 348:../system/include/cmsis/core_cm3.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 349:../system/include/cmsis/core_cm3.h **** 
 350:../system/include/cmsis/core_cm3.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 351:../system/include/cmsis/core_cm3.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 352:../system/include/cmsis/core_cm3.h **** 
 353:../system/include/cmsis/core_cm3.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 354:../system/include/cmsis/core_cm3.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 355:../system/include/cmsis/core_cm3.h **** 
 356:../system/include/cmsis/core_cm3.h **** 
 357:../system/include/cmsis/core_cm3.h **** /**
 358:../system/include/cmsis/core_cm3.h ****   \brief  Union type to access the Control Registers (CONTROL).
 359:../system/include/cmsis/core_cm3.h ****  */
 360:../system/include/cmsis/core_cm3.h **** typedef union
 361:../system/include/cmsis/core_cm3.h **** {
 362:../system/include/cmsis/core_cm3.h ****   struct
 363:../system/include/cmsis/core_cm3.h ****   {
 364:../system/include/cmsis/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 365:../system/include/cmsis/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 366:../system/include/cmsis/core_cm3.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 367:../system/include/cmsis/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 368:../system/include/cmsis/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 369:../system/include/cmsis/core_cm3.h **** } CONTROL_Type;
 370:../system/include/cmsis/core_cm3.h **** 
 371:../system/include/cmsis/core_cm3.h **** /* CONTROL Register Definitions */
 372:../system/include/cmsis/core_cm3.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 373:../system/include/cmsis/core_cm3.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 374:../system/include/cmsis/core_cm3.h **** 
 375:../system/include/cmsis/core_cm3.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 376:../system/include/cmsis/core_cm3.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 377:../system/include/cmsis/core_cm3.h **** 
 378:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_CORE */
 379:../system/include/cmsis/core_cm3.h **** 
 380:../system/include/cmsis/core_cm3.h **** 
 381:../system/include/cmsis/core_cm3.h **** /**
 382:../system/include/cmsis/core_cm3.h ****   \ingroup    CMSIS_core_register
 383:../system/include/cmsis/core_cm3.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 384:../system/include/cmsis/core_cm3.h ****   \brief      Type definitions for the NVIC Registers
 385:../system/include/cmsis/core_cm3.h ****   @{
 386:../system/include/cmsis/core_cm3.h ****  */
 387:../system/include/cmsis/core_cm3.h **** 
 388:../system/include/cmsis/core_cm3.h **** /**
 389:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 390:../system/include/cmsis/core_cm3.h ****  */
 391:../system/include/cmsis/core_cm3.h **** typedef struct
 392:../system/include/cmsis/core_cm3.h **** {
 393:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 394:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED0[24U];
 395:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 396:../system/include/cmsis/core_cm3.h ****         uint32_t RSERVED1[24U];
 397:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 398:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED2[24U];
 399:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 400:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED3[24U];
 401:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 402:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED4[56U];
 403:../system/include/cmsis/core_cm3.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 404:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED5[644U];
 405:../system/include/cmsis/core_cm3.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 406:../system/include/cmsis/core_cm3.h **** }  NVIC_Type;
 407:../system/include/cmsis/core_cm3.h **** 
 408:../system/include/cmsis/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 409:../system/include/cmsis/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 410:../system/include/cmsis/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 411:../system/include/cmsis/core_cm3.h **** 
 412:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 413:../system/include/cmsis/core_cm3.h **** 
 414:../system/include/cmsis/core_cm3.h **** 
 415:../system/include/cmsis/core_cm3.h **** /**
 416:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
 417:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 418:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the System Control Block Registers
 419:../system/include/cmsis/core_cm3.h ****   @{
 420:../system/include/cmsis/core_cm3.h ****  */
 421:../system/include/cmsis/core_cm3.h **** 
 422:../system/include/cmsis/core_cm3.h **** /**
 423:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the System Control Block (SCB).
 424:../system/include/cmsis/core_cm3.h ****  */
 425:../system/include/cmsis/core_cm3.h **** typedef struct
 426:../system/include/cmsis/core_cm3.h **** {
 427:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 428:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 429:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 430:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 431:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 432:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 433:../system/include/cmsis/core_cm3.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 434:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 435:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 436:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 437:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 438:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 439:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 440:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 441:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 442:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 443:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 444:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 445:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 446:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED0[5U];
 447:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 448:../system/include/cmsis/core_cm3.h **** } SCB_Type;
 449:../system/include/cmsis/core_cm3.h **** 
 450:../system/include/cmsis/core_cm3.h **** /* SCB CPUID Register Definitions */
 451:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 452:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 453:../system/include/cmsis/core_cm3.h **** 
 454:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 455:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 456:../system/include/cmsis/core_cm3.h **** 
 457:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 458:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 459:../system/include/cmsis/core_cm3.h **** 
 460:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 461:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 462:../system/include/cmsis/core_cm3.h **** 
 463:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 464:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 465:../system/include/cmsis/core_cm3.h **** 
 466:../system/include/cmsis/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 467:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 468:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 469:../system/include/cmsis/core_cm3.h **** 
 470:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 471:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 472:../system/include/cmsis/core_cm3.h **** 
 473:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 474:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 475:../system/include/cmsis/core_cm3.h **** 
 476:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 477:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 478:../system/include/cmsis/core_cm3.h **** 
 479:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 480:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 481:../system/include/cmsis/core_cm3.h **** 
 482:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 483:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 484:../system/include/cmsis/core_cm3.h **** 
 485:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 486:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 487:../system/include/cmsis/core_cm3.h **** 
 488:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 489:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 490:../system/include/cmsis/core_cm3.h **** 
 491:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 492:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 493:../system/include/cmsis/core_cm3.h **** 
 494:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 495:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 496:../system/include/cmsis/core_cm3.h **** 
 497:../system/include/cmsis/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 498:../system/include/cmsis/core_cm3.h **** #if (__CM3_REV < 0x0201U)                   /* core r2p1 */
 499:../system/include/cmsis/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29U                                            /*!< SCB 
 500:../system/include/cmsis/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 501:../system/include/cmsis/core_cm3.h **** 
 502:../system/include/cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 503:../system/include/cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 504:../system/include/cmsis/core_cm3.h **** #else
 505:../system/include/cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 506:../system/include/cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 507:../system/include/cmsis/core_cm3.h **** #endif
 508:../system/include/cmsis/core_cm3.h **** 
 509:../system/include/cmsis/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 510:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 511:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 512:../system/include/cmsis/core_cm3.h **** 
 513:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 514:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 515:../system/include/cmsis/core_cm3.h **** 
 516:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 517:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 518:../system/include/cmsis/core_cm3.h **** 
 519:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 520:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 521:../system/include/cmsis/core_cm3.h **** 
 522:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 523:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 524:../system/include/cmsis/core_cm3.h **** 
 525:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 526:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 527:../system/include/cmsis/core_cm3.h **** 
 528:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 529:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 530:../system/include/cmsis/core_cm3.h **** 
 531:../system/include/cmsis/core_cm3.h **** /* SCB System Control Register Definitions */
 532:../system/include/cmsis/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 533:../system/include/cmsis/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 534:../system/include/cmsis/core_cm3.h **** 
 535:../system/include/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 536:../system/include/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 537:../system/include/cmsis/core_cm3.h **** 
 538:../system/include/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 539:../system/include/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 540:../system/include/cmsis/core_cm3.h **** 
 541:../system/include/cmsis/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 542:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 543:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 544:../system/include/cmsis/core_cm3.h **** 
 545:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 546:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 547:../system/include/cmsis/core_cm3.h **** 
 548:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 549:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 550:../system/include/cmsis/core_cm3.h **** 
 551:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 552:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 553:../system/include/cmsis/core_cm3.h **** 
 554:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 555:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 556:../system/include/cmsis/core_cm3.h **** 
 557:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 558:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 559:../system/include/cmsis/core_cm3.h **** 
 560:../system/include/cmsis/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 561:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 562:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 563:../system/include/cmsis/core_cm3.h **** 
 564:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 565:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 566:../system/include/cmsis/core_cm3.h **** 
 567:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 568:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 569:../system/include/cmsis/core_cm3.h **** 
 570:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 571:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 572:../system/include/cmsis/core_cm3.h **** 
 573:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 574:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 575:../system/include/cmsis/core_cm3.h **** 
 576:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 577:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 578:../system/include/cmsis/core_cm3.h **** 
 579:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 580:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 581:../system/include/cmsis/core_cm3.h **** 
 582:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 583:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 584:../system/include/cmsis/core_cm3.h **** 
 585:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 586:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 587:../system/include/cmsis/core_cm3.h **** 
 588:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 589:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 590:../system/include/cmsis/core_cm3.h **** 
 591:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 592:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 593:../system/include/cmsis/core_cm3.h **** 
 594:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 595:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 596:../system/include/cmsis/core_cm3.h **** 
 597:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 598:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 599:../system/include/cmsis/core_cm3.h **** 
 600:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 601:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 602:../system/include/cmsis/core_cm3.h **** 
 603:../system/include/cmsis/core_cm3.h **** /* SCB Configurable Fault Status Register Definitions */
 604:../system/include/cmsis/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 605:../system/include/cmsis/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 606:../system/include/cmsis/core_cm3.h **** 
 607:../system/include/cmsis/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 608:../system/include/cmsis/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 609:../system/include/cmsis/core_cm3.h **** 
 610:../system/include/cmsis/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 611:../system/include/cmsis/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 612:../system/include/cmsis/core_cm3.h **** 
 613:../system/include/cmsis/core_cm3.h **** /* SCB Hard Fault Status Register Definitions */
 614:../system/include/cmsis/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 615:../system/include/cmsis/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 616:../system/include/cmsis/core_cm3.h **** 
 617:../system/include/cmsis/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 618:../system/include/cmsis/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 619:../system/include/cmsis/core_cm3.h **** 
 620:../system/include/cmsis/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 621:../system/include/cmsis/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 622:../system/include/cmsis/core_cm3.h **** 
 623:../system/include/cmsis/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 624:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 625:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 626:../system/include/cmsis/core_cm3.h **** 
 627:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 628:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 629:../system/include/cmsis/core_cm3.h **** 
 630:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 631:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 632:../system/include/cmsis/core_cm3.h **** 
 633:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 634:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 635:../system/include/cmsis/core_cm3.h **** 
 636:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 637:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 638:../system/include/cmsis/core_cm3.h **** 
 639:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_SCB */
 640:../system/include/cmsis/core_cm3.h **** 
 641:../system/include/cmsis/core_cm3.h **** 
 642:../system/include/cmsis/core_cm3.h **** /**
 643:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
 644:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 645:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 646:../system/include/cmsis/core_cm3.h ****   @{
 647:../system/include/cmsis/core_cm3.h ****  */
 648:../system/include/cmsis/core_cm3.h **** 
 649:../system/include/cmsis/core_cm3.h **** /**
 650:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 651:../system/include/cmsis/core_cm3.h ****  */
 652:../system/include/cmsis/core_cm3.h **** typedef struct
 653:../system/include/cmsis/core_cm3.h **** {
 654:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED0[1U];
 655:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 656:../system/include/cmsis/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200U))
 657:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 658:../system/include/cmsis/core_cm3.h **** #else
 659:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED1[1U];
 660:../system/include/cmsis/core_cm3.h **** #endif
 661:../system/include/cmsis/core_cm3.h **** } SCnSCB_Type;
 662:../system/include/cmsis/core_cm3.h **** 
 663:../system/include/cmsis/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 664:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 665:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 666:../system/include/cmsis/core_cm3.h **** 
 667:../system/include/cmsis/core_cm3.h **** /* Auxiliary Control Register Definitions */
 668:../system/include/cmsis/core_cm3.h **** 
 669:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 670:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 671:../system/include/cmsis/core_cm3.h **** 
 672:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 673:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 674:../system/include/cmsis/core_cm3.h **** 
 675:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 676:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 677:../system/include/cmsis/core_cm3.h **** 
 678:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 679:../system/include/cmsis/core_cm3.h **** 
 680:../system/include/cmsis/core_cm3.h **** 
 681:../system/include/cmsis/core_cm3.h **** /**
 682:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
 683:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 684:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the System Timer Registers.
 685:../system/include/cmsis/core_cm3.h ****   @{
 686:../system/include/cmsis/core_cm3.h ****  */
 687:../system/include/cmsis/core_cm3.h **** 
 688:../system/include/cmsis/core_cm3.h **** /**
 689:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the System Timer (SysTick).
 690:../system/include/cmsis/core_cm3.h ****  */
 691:../system/include/cmsis/core_cm3.h **** typedef struct
 692:../system/include/cmsis/core_cm3.h **** {
 693:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 694:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 695:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 696:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 697:../system/include/cmsis/core_cm3.h **** } SysTick_Type;
 698:../system/include/cmsis/core_cm3.h **** 
 699:../system/include/cmsis/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 700:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 701:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 702:../system/include/cmsis/core_cm3.h **** 
 703:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 704:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 705:../system/include/cmsis/core_cm3.h **** 
 706:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 707:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 708:../system/include/cmsis/core_cm3.h **** 
 709:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 710:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 711:../system/include/cmsis/core_cm3.h **** 
 712:../system/include/cmsis/core_cm3.h **** /* SysTick Reload Register Definitions */
 713:../system/include/cmsis/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 714:../system/include/cmsis/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 715:../system/include/cmsis/core_cm3.h **** 
 716:../system/include/cmsis/core_cm3.h **** /* SysTick Current Register Definitions */
 717:../system/include/cmsis/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 718:../system/include/cmsis/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 719:../system/include/cmsis/core_cm3.h **** 
 720:../system/include/cmsis/core_cm3.h **** /* SysTick Calibration Register Definitions */
 721:../system/include/cmsis/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 722:../system/include/cmsis/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 723:../system/include/cmsis/core_cm3.h **** 
 724:../system/include/cmsis/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 725:../system/include/cmsis/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 726:../system/include/cmsis/core_cm3.h **** 
 727:../system/include/cmsis/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 728:../system/include/cmsis/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 729:../system/include/cmsis/core_cm3.h **** 
 730:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 731:../system/include/cmsis/core_cm3.h **** 
 732:../system/include/cmsis/core_cm3.h **** 
 733:../system/include/cmsis/core_cm3.h **** /**
 734:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
 735:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 736:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 737:../system/include/cmsis/core_cm3.h ****   @{
 738:../system/include/cmsis/core_cm3.h ****  */
 739:../system/include/cmsis/core_cm3.h **** 
 740:../system/include/cmsis/core_cm3.h **** /**
 741:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 742:../system/include/cmsis/core_cm3.h ****  */
 743:../system/include/cmsis/core_cm3.h **** typedef struct
 744:../system/include/cmsis/core_cm3.h **** {
 745:../system/include/cmsis/core_cm3.h ****   __OM  union
 746:../system/include/cmsis/core_cm3.h ****   {
 747:../system/include/cmsis/core_cm3.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 748:../system/include/cmsis/core_cm3.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 749:../system/include/cmsis/core_cm3.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 750:../system/include/cmsis/core_cm3.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 751:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED0[864U];
 752:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 753:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED1[15U];
 754:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 755:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED2[15U];
 756:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 757:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED3[29U];
 758:../system/include/cmsis/core_cm3.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 759:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 760:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 761:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED4[43U];
 762:../system/include/cmsis/core_cm3.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 763:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 764:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED5[6U];
 765:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 766:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 767:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 768:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 769:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 770:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 771:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 772:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 773:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 774:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 775:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 776:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 777:../system/include/cmsis/core_cm3.h **** } ITM_Type;
 778:../system/include/cmsis/core_cm3.h **** 
 779:../system/include/cmsis/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 780:../system/include/cmsis/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 781:../system/include/cmsis/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 782:../system/include/cmsis/core_cm3.h **** 
 783:../system/include/cmsis/core_cm3.h **** /* ITM Trace Control Register Definitions */
 784:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 785:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 786:../system/include/cmsis/core_cm3.h **** 
 787:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 788:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 789:../system/include/cmsis/core_cm3.h **** 
 790:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 791:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 792:../system/include/cmsis/core_cm3.h **** 
 793:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 794:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 795:../system/include/cmsis/core_cm3.h **** 
 796:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 797:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 798:../system/include/cmsis/core_cm3.h **** 
 799:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 800:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 801:../system/include/cmsis/core_cm3.h **** 
 802:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 803:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 804:../system/include/cmsis/core_cm3.h **** 
 805:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 806:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 807:../system/include/cmsis/core_cm3.h **** 
 808:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 809:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 810:../system/include/cmsis/core_cm3.h **** 
 811:../system/include/cmsis/core_cm3.h **** /* ITM Integration Write Register Definitions */
 812:../system/include/cmsis/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 813:../system/include/cmsis/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 814:../system/include/cmsis/core_cm3.h **** 
 815:../system/include/cmsis/core_cm3.h **** /* ITM Integration Read Register Definitions */
 816:../system/include/cmsis/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 817:../system/include/cmsis/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 818:../system/include/cmsis/core_cm3.h **** 
 819:../system/include/cmsis/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 820:../system/include/cmsis/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 821:../system/include/cmsis/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 822:../system/include/cmsis/core_cm3.h **** 
 823:../system/include/cmsis/core_cm3.h **** /* ITM Lock Status Register Definitions */
 824:../system/include/cmsis/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 825:../system/include/cmsis/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 826:../system/include/cmsis/core_cm3.h **** 
 827:../system/include/cmsis/core_cm3.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 828:../system/include/cmsis/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 829:../system/include/cmsis/core_cm3.h **** 
 830:../system/include/cmsis/core_cm3.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 831:../system/include/cmsis/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 832:../system/include/cmsis/core_cm3.h **** 
 833:../system/include/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 834:../system/include/cmsis/core_cm3.h **** 
 835:../system/include/cmsis/core_cm3.h **** 
 836:../system/include/cmsis/core_cm3.h **** /**
 837:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
 838:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 839:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 840:../system/include/cmsis/core_cm3.h ****   @{
 841:../system/include/cmsis/core_cm3.h ****  */
 842:../system/include/cmsis/core_cm3.h **** 
 843:../system/include/cmsis/core_cm3.h **** /**
 844:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 845:../system/include/cmsis/core_cm3.h ****  */
 846:../system/include/cmsis/core_cm3.h **** typedef struct
 847:../system/include/cmsis/core_cm3.h **** {
 848:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 849:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 850:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 851:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 852:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 853:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 854:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 855:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 856:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 857:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 858:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 859:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED0[1U];
 860:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 861:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 862:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 863:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED1[1U];
 864:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 865:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 866:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 867:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED2[1U];
 868:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 869:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 870:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 871:../system/include/cmsis/core_cm3.h **** } DWT_Type;
 872:../system/include/cmsis/core_cm3.h **** 
 873:../system/include/cmsis/core_cm3.h **** /* DWT Control Register Definitions */
 874:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 875:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 876:../system/include/cmsis/core_cm3.h **** 
 877:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 878:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 879:../system/include/cmsis/core_cm3.h **** 
 880:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 881:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 882:../system/include/cmsis/core_cm3.h **** 
 883:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 884:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 885:../system/include/cmsis/core_cm3.h **** 
 886:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 887:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 888:../system/include/cmsis/core_cm3.h **** 
 889:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 890:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 891:../system/include/cmsis/core_cm3.h **** 
 892:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 893:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 894:../system/include/cmsis/core_cm3.h **** 
 895:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 896:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 897:../system/include/cmsis/core_cm3.h **** 
 898:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 899:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 900:../system/include/cmsis/core_cm3.h **** 
 901:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 902:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 903:../system/include/cmsis/core_cm3.h **** 
 904:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 905:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 906:../system/include/cmsis/core_cm3.h **** 
 907:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 908:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 909:../system/include/cmsis/core_cm3.h **** 
 910:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 911:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 912:../system/include/cmsis/core_cm3.h **** 
 913:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 914:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 915:../system/include/cmsis/core_cm3.h **** 
 916:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 917:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 918:../system/include/cmsis/core_cm3.h **** 
 919:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 920:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 921:../system/include/cmsis/core_cm3.h **** 
 922:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 923:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 924:../system/include/cmsis/core_cm3.h **** 
 925:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 926:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 927:../system/include/cmsis/core_cm3.h **** 
 928:../system/include/cmsis/core_cm3.h **** /* DWT CPI Count Register Definitions */
 929:../system/include/cmsis/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 930:../system/include/cmsis/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 931:../system/include/cmsis/core_cm3.h **** 
 932:../system/include/cmsis/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 933:../system/include/cmsis/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 934:../system/include/cmsis/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 935:../system/include/cmsis/core_cm3.h **** 
 936:../system/include/cmsis/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 937:../system/include/cmsis/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 938:../system/include/cmsis/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 939:../system/include/cmsis/core_cm3.h **** 
 940:../system/include/cmsis/core_cm3.h **** /* DWT LSU Count Register Definitions */
 941:../system/include/cmsis/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 942:../system/include/cmsis/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 943:../system/include/cmsis/core_cm3.h **** 
 944:../system/include/cmsis/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 945:../system/include/cmsis/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 946:../system/include/cmsis/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
 947:../system/include/cmsis/core_cm3.h **** 
 948:../system/include/cmsis/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 949:../system/include/cmsis/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
 950:../system/include/cmsis/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
 951:../system/include/cmsis/core_cm3.h **** 
 952:../system/include/cmsis/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 953:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
 954:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 955:../system/include/cmsis/core_cm3.h **** 
 956:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
 957:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 958:../system/include/cmsis/core_cm3.h **** 
 959:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
 960:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 961:../system/include/cmsis/core_cm3.h **** 
 962:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
 963:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 964:../system/include/cmsis/core_cm3.h **** 
 965:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
 966:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 967:../system/include/cmsis/core_cm3.h **** 
 968:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
 969:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 970:../system/include/cmsis/core_cm3.h **** 
 971:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
 972:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 973:../system/include/cmsis/core_cm3.h **** 
 974:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
 975:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 976:../system/include/cmsis/core_cm3.h **** 
 977:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
 978:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
 979:../system/include/cmsis/core_cm3.h **** 
 980:../system/include/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 981:../system/include/cmsis/core_cm3.h **** 
 982:../system/include/cmsis/core_cm3.h **** 
 983:../system/include/cmsis/core_cm3.h **** /**
 984:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
 985:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 986:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
 987:../system/include/cmsis/core_cm3.h ****   @{
 988:../system/include/cmsis/core_cm3.h ****  */
 989:../system/include/cmsis/core_cm3.h **** 
 990:../system/include/cmsis/core_cm3.h **** /**
 991:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
 992:../system/include/cmsis/core_cm3.h ****  */
 993:../system/include/cmsis/core_cm3.h **** typedef struct
 994:../system/include/cmsis/core_cm3.h **** {
 995:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 996:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 997:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED0[2U];
 998:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 999:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED1[55U];
1000:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1001:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED2[131U];
1002:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1003:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1004:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1005:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED3[759U];
1006:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1007:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1008:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1009:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED4[1U];
1010:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1011:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1012:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1013:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED5[39U];
1014:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1015:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1016:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED7[8U];
1017:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1018:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1019:../system/include/cmsis/core_cm3.h **** } TPI_Type;
1020:../system/include/cmsis/core_cm3.h **** 
1021:../system/include/cmsis/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1022:../system/include/cmsis/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1023:../system/include/cmsis/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1024:../system/include/cmsis/core_cm3.h **** 
1025:../system/include/cmsis/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
1026:../system/include/cmsis/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1027:../system/include/cmsis/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1028:../system/include/cmsis/core_cm3.h **** 
1029:../system/include/cmsis/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
1030:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1031:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1032:../system/include/cmsis/core_cm3.h **** 
1033:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1034:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1035:../system/include/cmsis/core_cm3.h **** 
1036:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1037:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1038:../system/include/cmsis/core_cm3.h **** 
1039:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1040:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1041:../system/include/cmsis/core_cm3.h **** 
1042:../system/include/cmsis/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
1043:../system/include/cmsis/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1044:../system/include/cmsis/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1045:../system/include/cmsis/core_cm3.h **** 
1046:../system/include/cmsis/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1047:../system/include/cmsis/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1048:../system/include/cmsis/core_cm3.h **** 
1049:../system/include/cmsis/core_cm3.h **** /* TPI TRIGGER Register Definitions */
1050:../system/include/cmsis/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1051:../system/include/cmsis/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1052:../system/include/cmsis/core_cm3.h **** 
1053:../system/include/cmsis/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1054:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1055:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1056:../system/include/cmsis/core_cm3.h **** 
1057:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1058:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1059:../system/include/cmsis/core_cm3.h **** 
1060:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1061:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1062:../system/include/cmsis/core_cm3.h **** 
1063:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1064:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1065:../system/include/cmsis/core_cm3.h **** 
1066:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1067:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1068:../system/include/cmsis/core_cm3.h **** 
1069:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1070:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1071:../system/include/cmsis/core_cm3.h **** 
1072:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1073:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1074:../system/include/cmsis/core_cm3.h **** 
1075:../system/include/cmsis/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
1076:../system/include/cmsis/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1077:../system/include/cmsis/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1078:../system/include/cmsis/core_cm3.h **** 
1079:../system/include/cmsis/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1080:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1081:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1082:../system/include/cmsis/core_cm3.h **** 
1083:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1084:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1085:../system/include/cmsis/core_cm3.h **** 
1086:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1087:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1088:../system/include/cmsis/core_cm3.h **** 
1089:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1090:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1091:../system/include/cmsis/core_cm3.h **** 
1092:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1093:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1094:../system/include/cmsis/core_cm3.h **** 
1095:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1096:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1097:../system/include/cmsis/core_cm3.h **** 
1098:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1099:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1100:../system/include/cmsis/core_cm3.h **** 
1101:../system/include/cmsis/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
1102:../system/include/cmsis/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1103:../system/include/cmsis/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1104:../system/include/cmsis/core_cm3.h **** 
1105:../system/include/cmsis/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
1106:../system/include/cmsis/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1107:../system/include/cmsis/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1108:../system/include/cmsis/core_cm3.h **** 
1109:../system/include/cmsis/core_cm3.h **** /* TPI DEVID Register Definitions */
1110:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1111:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1112:../system/include/cmsis/core_cm3.h **** 
1113:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1114:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1115:../system/include/cmsis/core_cm3.h **** 
1116:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1117:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1118:../system/include/cmsis/core_cm3.h **** 
1119:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1120:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1121:../system/include/cmsis/core_cm3.h **** 
1122:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1123:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1124:../system/include/cmsis/core_cm3.h **** 
1125:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1126:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1127:../system/include/cmsis/core_cm3.h **** 
1128:../system/include/cmsis/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1129:../system/include/cmsis/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1130:../system/include/cmsis/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1131:../system/include/cmsis/core_cm3.h **** 
1132:../system/include/cmsis/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1133:../system/include/cmsis/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1134:../system/include/cmsis/core_cm3.h **** 
1135:../system/include/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1136:../system/include/cmsis/core_cm3.h **** 
1137:../system/include/cmsis/core_cm3.h **** 
1138:../system/include/cmsis/core_cm3.h **** #if (__MPU_PRESENT == 1U)
1139:../system/include/cmsis/core_cm3.h **** /**
1140:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
1141:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1142:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1143:../system/include/cmsis/core_cm3.h ****   @{
1144:../system/include/cmsis/core_cm3.h ****  */
1145:../system/include/cmsis/core_cm3.h **** 
1146:../system/include/cmsis/core_cm3.h **** /**
1147:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1148:../system/include/cmsis/core_cm3.h ****  */
1149:../system/include/cmsis/core_cm3.h **** typedef struct
1150:../system/include/cmsis/core_cm3.h **** {
1151:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1152:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1153:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1154:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1155:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1156:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1157:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1158:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1159:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1160:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1161:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1162:../system/include/cmsis/core_cm3.h **** } MPU_Type;
1163:../system/include/cmsis/core_cm3.h **** 
1164:../system/include/cmsis/core_cm3.h **** /* MPU Type Register Definitions */
1165:../system/include/cmsis/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1166:../system/include/cmsis/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1167:../system/include/cmsis/core_cm3.h **** 
1168:../system/include/cmsis/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1169:../system/include/cmsis/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1170:../system/include/cmsis/core_cm3.h **** 
1171:../system/include/cmsis/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1172:../system/include/cmsis/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1173:../system/include/cmsis/core_cm3.h **** 
1174:../system/include/cmsis/core_cm3.h **** /* MPU Control Register Definitions */
1175:../system/include/cmsis/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1176:../system/include/cmsis/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1177:../system/include/cmsis/core_cm3.h **** 
1178:../system/include/cmsis/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1179:../system/include/cmsis/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1180:../system/include/cmsis/core_cm3.h **** 
1181:../system/include/cmsis/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1182:../system/include/cmsis/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1183:../system/include/cmsis/core_cm3.h **** 
1184:../system/include/cmsis/core_cm3.h **** /* MPU Region Number Register Definitions */
1185:../system/include/cmsis/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1186:../system/include/cmsis/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1187:../system/include/cmsis/core_cm3.h **** 
1188:../system/include/cmsis/core_cm3.h **** /* MPU Region Base Address Register Definitions */
1189:../system/include/cmsis/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1190:../system/include/cmsis/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1191:../system/include/cmsis/core_cm3.h **** 
1192:../system/include/cmsis/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1193:../system/include/cmsis/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1194:../system/include/cmsis/core_cm3.h **** 
1195:../system/include/cmsis/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1196:../system/include/cmsis/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1197:../system/include/cmsis/core_cm3.h **** 
1198:../system/include/cmsis/core_cm3.h **** /* MPU Region Attribute and Size Register Definitions */
1199:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1200:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1201:../system/include/cmsis/core_cm3.h **** 
1202:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1203:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1204:../system/include/cmsis/core_cm3.h **** 
1205:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1206:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1207:../system/include/cmsis/core_cm3.h **** 
1208:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1209:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1210:../system/include/cmsis/core_cm3.h **** 
1211:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1212:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1213:../system/include/cmsis/core_cm3.h **** 
1214:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1215:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1216:../system/include/cmsis/core_cm3.h **** 
1217:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1218:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1219:../system/include/cmsis/core_cm3.h **** 
1220:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1221:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1222:../system/include/cmsis/core_cm3.h **** 
1223:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1224:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1225:../system/include/cmsis/core_cm3.h **** 
1226:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1227:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1228:../system/include/cmsis/core_cm3.h **** 
1229:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_MPU */
1230:../system/include/cmsis/core_cm3.h **** #endif
1231:../system/include/cmsis/core_cm3.h **** 
1232:../system/include/cmsis/core_cm3.h **** 
1233:../system/include/cmsis/core_cm3.h **** /**
1234:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
1235:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1236:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the Core Debug Registers
1237:../system/include/cmsis/core_cm3.h ****   @{
1238:../system/include/cmsis/core_cm3.h ****  */
1239:../system/include/cmsis/core_cm3.h **** 
1240:../system/include/cmsis/core_cm3.h **** /**
1241:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1242:../system/include/cmsis/core_cm3.h ****  */
1243:../system/include/cmsis/core_cm3.h **** typedef struct
1244:../system/include/cmsis/core_cm3.h **** {
1245:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1246:../system/include/cmsis/core_cm3.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1247:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1248:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1249:../system/include/cmsis/core_cm3.h **** } CoreDebug_Type;
1250:../system/include/cmsis/core_cm3.h **** 
1251:../system/include/cmsis/core_cm3.h **** /* Debug Halting Control and Status Register Definitions */
1252:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1253:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1254:../system/include/cmsis/core_cm3.h **** 
1255:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1256:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1257:../system/include/cmsis/core_cm3.h **** 
1258:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1259:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1260:../system/include/cmsis/core_cm3.h **** 
1261:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1262:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1263:../system/include/cmsis/core_cm3.h **** 
1264:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1265:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1266:../system/include/cmsis/core_cm3.h **** 
1267:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1268:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1269:../system/include/cmsis/core_cm3.h **** 
1270:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1271:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1272:../system/include/cmsis/core_cm3.h **** 
1273:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1274:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1275:../system/include/cmsis/core_cm3.h **** 
1276:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1277:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1278:../system/include/cmsis/core_cm3.h **** 
1279:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1280:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1281:../system/include/cmsis/core_cm3.h **** 
1282:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1283:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1284:../system/include/cmsis/core_cm3.h **** 
1285:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1286:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1287:../system/include/cmsis/core_cm3.h **** 
1288:../system/include/cmsis/core_cm3.h **** /* Debug Core Register Selector Register Definitions */
1289:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1290:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1291:../system/include/cmsis/core_cm3.h **** 
1292:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1293:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1294:../system/include/cmsis/core_cm3.h **** 
1295:../system/include/cmsis/core_cm3.h **** /* Debug Exception and Monitor Control Register Definitions */
1296:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1297:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1298:../system/include/cmsis/core_cm3.h **** 
1299:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1300:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1301:../system/include/cmsis/core_cm3.h **** 
1302:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1303:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1304:../system/include/cmsis/core_cm3.h **** 
1305:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1306:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1307:../system/include/cmsis/core_cm3.h **** 
1308:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1309:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1310:../system/include/cmsis/core_cm3.h **** 
1311:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1312:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1313:../system/include/cmsis/core_cm3.h **** 
1314:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1315:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1316:../system/include/cmsis/core_cm3.h **** 
1317:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1318:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1319:../system/include/cmsis/core_cm3.h **** 
1320:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1321:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1322:../system/include/cmsis/core_cm3.h **** 
1323:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1324:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1325:../system/include/cmsis/core_cm3.h **** 
1326:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1327:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1328:../system/include/cmsis/core_cm3.h **** 
1329:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1330:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1331:../system/include/cmsis/core_cm3.h **** 
1332:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1333:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1334:../system/include/cmsis/core_cm3.h **** 
1335:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1336:../system/include/cmsis/core_cm3.h **** 
1337:../system/include/cmsis/core_cm3.h **** 
1338:../system/include/cmsis/core_cm3.h **** /**
1339:../system/include/cmsis/core_cm3.h ****   \ingroup    CMSIS_core_register
1340:../system/include/cmsis/core_cm3.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1341:../system/include/cmsis/core_cm3.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1342:../system/include/cmsis/core_cm3.h ****   @{
1343:../system/include/cmsis/core_cm3.h ****  */
1344:../system/include/cmsis/core_cm3.h **** 
1345:../system/include/cmsis/core_cm3.h **** /**
1346:../system/include/cmsis/core_cm3.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1347:../system/include/cmsis/core_cm3.h ****   \param[in] field  Name of the register bit field.
1348:../system/include/cmsis/core_cm3.h ****   \param[in] value  Value of the bit field.
1349:../system/include/cmsis/core_cm3.h ****   \return           Masked and shifted value.
1350:../system/include/cmsis/core_cm3.h **** */
1351:../system/include/cmsis/core_cm3.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1352:../system/include/cmsis/core_cm3.h **** 
1353:../system/include/cmsis/core_cm3.h **** /**
1354:../system/include/cmsis/core_cm3.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1355:../system/include/cmsis/core_cm3.h ****   \param[in] field  Name of the register bit field.
1356:../system/include/cmsis/core_cm3.h ****   \param[in] value  Value of register.
1357:../system/include/cmsis/core_cm3.h ****   \return           Masked and shifted bit field value.
1358:../system/include/cmsis/core_cm3.h **** */
1359:../system/include/cmsis/core_cm3.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1360:../system/include/cmsis/core_cm3.h **** 
1361:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_core_bitfield */
1362:../system/include/cmsis/core_cm3.h **** 
1363:../system/include/cmsis/core_cm3.h **** 
1364:../system/include/cmsis/core_cm3.h **** /**
1365:../system/include/cmsis/core_cm3.h ****   \ingroup    CMSIS_core_register
1366:../system/include/cmsis/core_cm3.h ****   \defgroup   CMSIS_core_base     Core Definitions
1367:../system/include/cmsis/core_cm3.h ****   \brief      Definitions for base addresses, unions, and structures.
1368:../system/include/cmsis/core_cm3.h ****   @{
1369:../system/include/cmsis/core_cm3.h ****  */
1370:../system/include/cmsis/core_cm3.h **** 
1371:../system/include/cmsis/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1372:../system/include/cmsis/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1373:../system/include/cmsis/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1374:../system/include/cmsis/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1375:../system/include/cmsis/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1376:../system/include/cmsis/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1377:../system/include/cmsis/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1378:../system/include/cmsis/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1379:../system/include/cmsis/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1380:../system/include/cmsis/core_cm3.h **** 
1381:../system/include/cmsis/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1382:../system/include/cmsis/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1383:../system/include/cmsis/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1384:../system/include/cmsis/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1385:../system/include/cmsis/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1386:../system/include/cmsis/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1387:../system/include/cmsis/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1388:../system/include/cmsis/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1389:../system/include/cmsis/core_cm3.h **** 
1390:../system/include/cmsis/core_cm3.h **** #if (__MPU_PRESENT == 1U)
1391:../system/include/cmsis/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1392:../system/include/cmsis/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1393:../system/include/cmsis/core_cm3.h **** #endif
1394:../system/include/cmsis/core_cm3.h **** 
1395:../system/include/cmsis/core_cm3.h **** /*@} */
1396:../system/include/cmsis/core_cm3.h **** 
1397:../system/include/cmsis/core_cm3.h **** 
1398:../system/include/cmsis/core_cm3.h **** 
1399:../system/include/cmsis/core_cm3.h **** /*******************************************************************************
1400:../system/include/cmsis/core_cm3.h ****  *                Hardware Abstraction Layer
1401:../system/include/cmsis/core_cm3.h ****   Core Function Interface contains:
1402:../system/include/cmsis/core_cm3.h ****   - Core NVIC Functions
1403:../system/include/cmsis/core_cm3.h ****   - Core SysTick Functions
1404:../system/include/cmsis/core_cm3.h ****   - Core Debug Functions
1405:../system/include/cmsis/core_cm3.h ****   - Core Register Access Functions
1406:../system/include/cmsis/core_cm3.h ****  ******************************************************************************/
1407:../system/include/cmsis/core_cm3.h **** /**
1408:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1409:../system/include/cmsis/core_cm3.h **** */
1410:../system/include/cmsis/core_cm3.h **** 
1411:../system/include/cmsis/core_cm3.h **** 
1412:../system/include/cmsis/core_cm3.h **** 
1413:../system/include/cmsis/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1414:../system/include/cmsis/core_cm3.h **** /**
1415:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1416:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1417:../system/include/cmsis/core_cm3.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1418:../system/include/cmsis/core_cm3.h ****   @{
1419:../system/include/cmsis/core_cm3.h ****  */
1420:../system/include/cmsis/core_cm3.h **** 
1421:../system/include/cmsis/core_cm3.h **** /**
1422:../system/include/cmsis/core_cm3.h ****   \brief   Set Priority Grouping
1423:../system/include/cmsis/core_cm3.h ****   \details Sets the priority grouping field using the required unlock sequence.
1424:../system/include/cmsis/core_cm3.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1425:../system/include/cmsis/core_cm3.h ****            Only values from 0..7 are used.
1426:../system/include/cmsis/core_cm3.h ****            In case of a conflict between priority grouping and available
1427:../system/include/cmsis/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1428:../system/include/cmsis/core_cm3.h ****   \param [in]      PriorityGroup  Priority grouping field.
1429:../system/include/cmsis/core_cm3.h ****  */
1430:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1431:../system/include/cmsis/core_cm3.h **** {
1432:../system/include/cmsis/core_cm3.h ****   uint32_t reg_value;
1433:../system/include/cmsis/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1434:../system/include/cmsis/core_cm3.h **** 
1435:../system/include/cmsis/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1436:../system/include/cmsis/core_cm3.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1437:../system/include/cmsis/core_cm3.h ****   reg_value  =  (reg_value                                   |
1438:../system/include/cmsis/core_cm3.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1439:../system/include/cmsis/core_cm3.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1440:../system/include/cmsis/core_cm3.h ****   SCB->AIRCR =  reg_value;
1441:../system/include/cmsis/core_cm3.h **** }
1442:../system/include/cmsis/core_cm3.h **** 
1443:../system/include/cmsis/core_cm3.h **** 
1444:../system/include/cmsis/core_cm3.h **** /**
1445:../system/include/cmsis/core_cm3.h ****   \brief   Get Priority Grouping
1446:../system/include/cmsis/core_cm3.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1447:../system/include/cmsis/core_cm3.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1448:../system/include/cmsis/core_cm3.h ****  */
1449:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1450:../system/include/cmsis/core_cm3.h **** {
1451:../system/include/cmsis/core_cm3.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1452:../system/include/cmsis/core_cm3.h **** }
1453:../system/include/cmsis/core_cm3.h **** 
1454:../system/include/cmsis/core_cm3.h **** 
1455:../system/include/cmsis/core_cm3.h **** /**
1456:../system/include/cmsis/core_cm3.h ****   \brief   Enable External Interrupt
1457:../system/include/cmsis/core_cm3.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1458:../system/include/cmsis/core_cm3.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1459:../system/include/cmsis/core_cm3.h ****  */
1460:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1461:../system/include/cmsis/core_cm3.h **** {
1462:../system/include/cmsis/core_cm3.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1463:../system/include/cmsis/core_cm3.h **** }
1464:../system/include/cmsis/core_cm3.h **** 
1465:../system/include/cmsis/core_cm3.h **** 
1466:../system/include/cmsis/core_cm3.h **** /**
1467:../system/include/cmsis/core_cm3.h ****   \brief   Disable External Interrupt
1468:../system/include/cmsis/core_cm3.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1469:../system/include/cmsis/core_cm3.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1470:../system/include/cmsis/core_cm3.h ****  */
1471:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1472:../system/include/cmsis/core_cm3.h **** {
1473:../system/include/cmsis/core_cm3.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1474:../system/include/cmsis/core_cm3.h **** }
1475:../system/include/cmsis/core_cm3.h **** 
1476:../system/include/cmsis/core_cm3.h **** 
1477:../system/include/cmsis/core_cm3.h **** /**
1478:../system/include/cmsis/core_cm3.h ****   \brief   Get Pending Interrupt
1479:../system/include/cmsis/core_cm3.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
1480:../system/include/cmsis/core_cm3.h ****   \param [in]      IRQn  Interrupt number.
1481:../system/include/cmsis/core_cm3.h ****   \return             0  Interrupt status is not pending.
1482:../system/include/cmsis/core_cm3.h ****   \return             1  Interrupt status is pending.
1483:../system/include/cmsis/core_cm3.h ****  */
1484:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1485:../system/include/cmsis/core_cm3.h **** {
1486:../system/include/cmsis/core_cm3.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1487:../system/include/cmsis/core_cm3.h **** }
1488:../system/include/cmsis/core_cm3.h **** 
1489:../system/include/cmsis/core_cm3.h **** 
1490:../system/include/cmsis/core_cm3.h **** /**
1491:../system/include/cmsis/core_cm3.h ****   \brief   Set Pending Interrupt
1492:../system/include/cmsis/core_cm3.h ****   \details Sets the pending bit of an external interrupt.
1493:../system/include/cmsis/core_cm3.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
1494:../system/include/cmsis/core_cm3.h ****  */
1495:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1496:../system/include/cmsis/core_cm3.h **** {
1497:../system/include/cmsis/core_cm3.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1498:../system/include/cmsis/core_cm3.h **** }
1499:../system/include/cmsis/core_cm3.h **** 
1500:../system/include/cmsis/core_cm3.h **** 
1501:../system/include/cmsis/core_cm3.h **** /**
1502:../system/include/cmsis/core_cm3.h ****   \brief   Clear Pending Interrupt
1503:../system/include/cmsis/core_cm3.h ****   \details Clears the pending bit of an external interrupt.
1504:../system/include/cmsis/core_cm3.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1505:../system/include/cmsis/core_cm3.h ****  */
1506:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1507:../system/include/cmsis/core_cm3.h **** {
1508:../system/include/cmsis/core_cm3.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1509:../system/include/cmsis/core_cm3.h **** }
1510:../system/include/cmsis/core_cm3.h **** 
1511:../system/include/cmsis/core_cm3.h **** 
1512:../system/include/cmsis/core_cm3.h **** /**
1513:../system/include/cmsis/core_cm3.h ****   \brief   Get Active Interrupt
1514:../system/include/cmsis/core_cm3.h ****   \details Reads the active register in NVIC and returns the active bit.
1515:../system/include/cmsis/core_cm3.h ****   \param [in]      IRQn  Interrupt number.
1516:../system/include/cmsis/core_cm3.h ****   \return             0  Interrupt status is not active.
1517:../system/include/cmsis/core_cm3.h ****   \return             1  Interrupt status is active.
1518:../system/include/cmsis/core_cm3.h ****  */
1519:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1520:../system/include/cmsis/core_cm3.h **** {
1521:../system/include/cmsis/core_cm3.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1522:../system/include/cmsis/core_cm3.h **** }
1523:../system/include/cmsis/core_cm3.h **** 
1524:../system/include/cmsis/core_cm3.h **** 
1525:../system/include/cmsis/core_cm3.h **** /**
1526:../system/include/cmsis/core_cm3.h ****   \brief   Set Interrupt Priority
1527:../system/include/cmsis/core_cm3.h ****   \details Sets the priority of an interrupt.
1528:../system/include/cmsis/core_cm3.h ****   \note    The priority cannot be set for every core interrupt.
1529:../system/include/cmsis/core_cm3.h ****   \param [in]      IRQn  Interrupt number.
1530:../system/include/cmsis/core_cm3.h ****   \param [in]  priority  Priority to set.
1531:../system/include/cmsis/core_cm3.h ****  */
1532:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1533:../system/include/cmsis/core_cm3.h **** {
1534:../system/include/cmsis/core_cm3.h ****   if ((int32_t)(IRQn) < 0)
1535:../system/include/cmsis/core_cm3.h ****   {
1536:../system/include/cmsis/core_cm3.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1537:../system/include/cmsis/core_cm3.h ****   }
1538:../system/include/cmsis/core_cm3.h ****   else
1539:../system/include/cmsis/core_cm3.h ****   {
1540:../system/include/cmsis/core_cm3.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1541:../system/include/cmsis/core_cm3.h ****   }
1542:../system/include/cmsis/core_cm3.h **** }
1543:../system/include/cmsis/core_cm3.h **** 
1544:../system/include/cmsis/core_cm3.h **** 
1545:../system/include/cmsis/core_cm3.h **** /**
1546:../system/include/cmsis/core_cm3.h ****   \brief   Get Interrupt Priority
1547:../system/include/cmsis/core_cm3.h ****   \details Reads the priority of an interrupt.
1548:../system/include/cmsis/core_cm3.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
1549:../system/include/cmsis/core_cm3.h ****            or negative to specify an internal (core) interrupt.
1550:../system/include/cmsis/core_cm3.h ****   \param [in]   IRQn  Interrupt number.
1551:../system/include/cmsis/core_cm3.h ****   \return             Interrupt Priority.
1552:../system/include/cmsis/core_cm3.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1553:../system/include/cmsis/core_cm3.h ****  */
1554:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1555:../system/include/cmsis/core_cm3.h **** {
1556:../system/include/cmsis/core_cm3.h **** 
1557:../system/include/cmsis/core_cm3.h ****   if ((int32_t)(IRQn) < 0)
1558:../system/include/cmsis/core_cm3.h ****   {
1559:../system/include/cmsis/core_cm3.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS))
1560:../system/include/cmsis/core_cm3.h ****   }
1561:../system/include/cmsis/core_cm3.h ****   else
1562:../system/include/cmsis/core_cm3.h ****   {
1563:../system/include/cmsis/core_cm3.h ****     return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS))
1564:../system/include/cmsis/core_cm3.h ****   }
1565:../system/include/cmsis/core_cm3.h **** }
1566:../system/include/cmsis/core_cm3.h **** 
1567:../system/include/cmsis/core_cm3.h **** 
1568:../system/include/cmsis/core_cm3.h **** /**
1569:../system/include/cmsis/core_cm3.h ****   \brief   Encode Priority
1570:../system/include/cmsis/core_cm3.h ****   \details Encodes the priority for an interrupt with the given priority group,
1571:../system/include/cmsis/core_cm3.h ****            preemptive priority value, and subpriority value.
1572:../system/include/cmsis/core_cm3.h ****            In case of a conflict between priority grouping and available
1573:../system/include/cmsis/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1574:../system/include/cmsis/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1575:../system/include/cmsis/core_cm3.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1576:../system/include/cmsis/core_cm3.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1577:../system/include/cmsis/core_cm3.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1578:../system/include/cmsis/core_cm3.h ****  */
1579:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1580:../system/include/cmsis/core_cm3.h **** {
1581:../system/include/cmsis/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1582:../system/include/cmsis/core_cm3.h ****   uint32_t PreemptPriorityBits;
1583:../system/include/cmsis/core_cm3.h ****   uint32_t SubPriorityBits;
1584:../system/include/cmsis/core_cm3.h **** 
1585:../system/include/cmsis/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1586:../system/include/cmsis/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1587:../system/include/cmsis/core_cm3.h **** 
1588:../system/include/cmsis/core_cm3.h ****   return (
1589:../system/include/cmsis/core_cm3.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
1590:../system/include/cmsis/core_cm3.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1591:../system/include/cmsis/core_cm3.h ****          );
1592:../system/include/cmsis/core_cm3.h **** }
1593:../system/include/cmsis/core_cm3.h **** 
1594:../system/include/cmsis/core_cm3.h **** 
1595:../system/include/cmsis/core_cm3.h **** /**
1596:../system/include/cmsis/core_cm3.h ****   \brief   Decode Priority
1597:../system/include/cmsis/core_cm3.h ****   \details Decodes an interrupt priority value with a given priority group to
1598:../system/include/cmsis/core_cm3.h ****            preemptive priority value and subpriority value.
1599:../system/include/cmsis/core_cm3.h ****            In case of a conflict between priority grouping and available
1600:../system/include/cmsis/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1601:../system/include/cmsis/core_cm3.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1602:../system/include/cmsis/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1603:../system/include/cmsis/core_cm3.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1604:../system/include/cmsis/core_cm3.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1605:../system/include/cmsis/core_cm3.h ****  */
1606:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1607:../system/include/cmsis/core_cm3.h **** {
1608:../system/include/cmsis/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1609:../system/include/cmsis/core_cm3.h ****   uint32_t PreemptPriorityBits;
1610:../system/include/cmsis/core_cm3.h ****   uint32_t SubPriorityBits;
1611:../system/include/cmsis/core_cm3.h **** 
1612:../system/include/cmsis/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1613:../system/include/cmsis/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1614:../system/include/cmsis/core_cm3.h **** 
1615:../system/include/cmsis/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1616:../system/include/cmsis/core_cm3.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1617:../system/include/cmsis/core_cm3.h **** }
1618:../system/include/cmsis/core_cm3.h **** 
1619:../system/include/cmsis/core_cm3.h **** 
1620:../system/include/cmsis/core_cm3.h **** /**
1621:../system/include/cmsis/core_cm3.h ****   \brief   System Reset
1622:../system/include/cmsis/core_cm3.h ****   \details Initiates a system reset request to reset the MCU.
1623:../system/include/cmsis/core_cm3.h ****  */
1624:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_SystemReset(void)
1625:../system/include/cmsis/core_cm3.h **** {
  25              		.loc 1 1625 0
  26              		.cfi_startproc
  27              		@ Volatile: function does not return.
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LBB8:
  32              	.LBB9:
  33              		.file 2 "../system/include/cmsis/cmsis_gcc.h"
   1:../system/include/cmsis/cmsis_gcc.h **** /**************************************************************************//**
   2:../system/include/cmsis/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../system/include/cmsis/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:../system/include/cmsis/cmsis_gcc.h ****  * @version  V4.30
   5:../system/include/cmsis/cmsis_gcc.h ****  * @date     20. October 2015
   6:../system/include/cmsis/cmsis_gcc.h ****  ******************************************************************************/
   7:../system/include/cmsis/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:../system/include/cmsis/cmsis_gcc.h **** 
   9:../system/include/cmsis/cmsis_gcc.h ****    All rights reserved.
  10:../system/include/cmsis/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:../system/include/cmsis/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:../system/include/cmsis/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:../system/include/cmsis/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:../system/include/cmsis/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:../system/include/cmsis/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:../system/include/cmsis/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:../system/include/cmsis/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:../system/include/cmsis/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:../system/include/cmsis/cmsis_gcc.h ****      specific prior written permission.
  20:../system/include/cmsis/cmsis_gcc.h ****    *
  21:../system/include/cmsis/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:../system/include/cmsis/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:../system/include/cmsis/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:../system/include/cmsis/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:../system/include/cmsis/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:../system/include/cmsis/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:../system/include/cmsis/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:../system/include/cmsis/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:../system/include/cmsis/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:../system/include/cmsis/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:../system/include/cmsis/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:../system/include/cmsis/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:../system/include/cmsis/cmsis_gcc.h **** 
  34:../system/include/cmsis/cmsis_gcc.h **** 
  35:../system/include/cmsis/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:../system/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:../system/include/cmsis/cmsis_gcc.h **** 
  38:../system/include/cmsis/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:../system/include/cmsis/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:../system/include/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:../system/include/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:../system/include/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:../system/include/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:../system/include/cmsis/cmsis_gcc.h **** #endif
  45:../system/include/cmsis/cmsis_gcc.h **** 
  46:../system/include/cmsis/cmsis_gcc.h **** 
  47:../system/include/cmsis/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:../system/include/cmsis/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:../system/include/cmsis/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:../system/include/cmsis/cmsis_gcc.h ****   @{
  51:../system/include/cmsis/cmsis_gcc.h ****  */
  52:../system/include/cmsis/cmsis_gcc.h **** 
  53:../system/include/cmsis/cmsis_gcc.h **** /**
  54:../system/include/cmsis/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:../system/include/cmsis/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:../system/include/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:../system/include/cmsis/cmsis_gcc.h ****  */
  58:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:../system/include/cmsis/cmsis_gcc.h **** {
  60:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:../system/include/cmsis/cmsis_gcc.h **** }
  62:../system/include/cmsis/cmsis_gcc.h **** 
  63:../system/include/cmsis/cmsis_gcc.h **** 
  64:../system/include/cmsis/cmsis_gcc.h **** /**
  65:../system/include/cmsis/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:../system/include/cmsis/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:../system/include/cmsis/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:../system/include/cmsis/cmsis_gcc.h ****  */
  69:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:../system/include/cmsis/cmsis_gcc.h **** {
  71:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:../system/include/cmsis/cmsis_gcc.h **** }
  73:../system/include/cmsis/cmsis_gcc.h **** 
  74:../system/include/cmsis/cmsis_gcc.h **** 
  75:../system/include/cmsis/cmsis_gcc.h **** /**
  76:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get Control Register
  77:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:../system/include/cmsis/cmsis_gcc.h ****   \return               Control Register value
  79:../system/include/cmsis/cmsis_gcc.h ****  */
  80:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:../system/include/cmsis/cmsis_gcc.h **** {
  82:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
  83:../system/include/cmsis/cmsis_gcc.h **** 
  84:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:../system/include/cmsis/cmsis_gcc.h ****   return(result);
  86:../system/include/cmsis/cmsis_gcc.h **** }
  87:../system/include/cmsis/cmsis_gcc.h **** 
  88:../system/include/cmsis/cmsis_gcc.h **** 
  89:../system/include/cmsis/cmsis_gcc.h **** /**
  90:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set Control Register
  91:../system/include/cmsis/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:../system/include/cmsis/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:../system/include/cmsis/cmsis_gcc.h ****  */
  94:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:../system/include/cmsis/cmsis_gcc.h **** {
  96:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:../system/include/cmsis/cmsis_gcc.h **** }
  98:../system/include/cmsis/cmsis_gcc.h **** 
  99:../system/include/cmsis/cmsis_gcc.h **** 
 100:../system/include/cmsis/cmsis_gcc.h **** /**
 101:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:../system/include/cmsis/cmsis_gcc.h ****   \return               IPSR Register value
 104:../system/include/cmsis/cmsis_gcc.h ****  */
 105:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:../system/include/cmsis/cmsis_gcc.h **** {
 107:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 108:../system/include/cmsis/cmsis_gcc.h **** 
 109:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 111:../system/include/cmsis/cmsis_gcc.h **** }
 112:../system/include/cmsis/cmsis_gcc.h **** 
 113:../system/include/cmsis/cmsis_gcc.h **** 
 114:../system/include/cmsis/cmsis_gcc.h **** /**
 115:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get APSR Register
 116:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:../system/include/cmsis/cmsis_gcc.h ****   \return               APSR Register value
 118:../system/include/cmsis/cmsis_gcc.h ****  */
 119:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:../system/include/cmsis/cmsis_gcc.h **** {
 121:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 122:../system/include/cmsis/cmsis_gcc.h **** 
 123:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 125:../system/include/cmsis/cmsis_gcc.h **** }
 126:../system/include/cmsis/cmsis_gcc.h **** 
 127:../system/include/cmsis/cmsis_gcc.h **** 
 128:../system/include/cmsis/cmsis_gcc.h **** /**
 129:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:../system/include/cmsis/cmsis_gcc.h **** 
 132:../system/include/cmsis/cmsis_gcc.h ****     \return               xPSR Register value
 133:../system/include/cmsis/cmsis_gcc.h ****  */
 134:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:../system/include/cmsis/cmsis_gcc.h **** {
 136:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 137:../system/include/cmsis/cmsis_gcc.h **** 
 138:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 140:../system/include/cmsis/cmsis_gcc.h **** }
 141:../system/include/cmsis/cmsis_gcc.h **** 
 142:../system/include/cmsis/cmsis_gcc.h **** 
 143:../system/include/cmsis/cmsis_gcc.h **** /**
 144:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:../system/include/cmsis/cmsis_gcc.h ****   \return               PSP Register value
 147:../system/include/cmsis/cmsis_gcc.h ****  */
 148:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:../system/include/cmsis/cmsis_gcc.h **** {
 150:../system/include/cmsis/cmsis_gcc.h ****   register uint32_t result;
 151:../system/include/cmsis/cmsis_gcc.h **** 
 152:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 154:../system/include/cmsis/cmsis_gcc.h **** }
 155:../system/include/cmsis/cmsis_gcc.h **** 
 156:../system/include/cmsis/cmsis_gcc.h **** 
 157:../system/include/cmsis/cmsis_gcc.h **** /**
 158:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:../system/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:../system/include/cmsis/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:../system/include/cmsis/cmsis_gcc.h ****  */
 162:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:../system/include/cmsis/cmsis_gcc.h **** {
 164:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:../system/include/cmsis/cmsis_gcc.h **** }
 166:../system/include/cmsis/cmsis_gcc.h **** 
 167:../system/include/cmsis/cmsis_gcc.h **** 
 168:../system/include/cmsis/cmsis_gcc.h **** /**
 169:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:../system/include/cmsis/cmsis_gcc.h ****   \return               MSP Register value
 172:../system/include/cmsis/cmsis_gcc.h ****  */
 173:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:../system/include/cmsis/cmsis_gcc.h **** {
 175:../system/include/cmsis/cmsis_gcc.h ****   register uint32_t result;
 176:../system/include/cmsis/cmsis_gcc.h **** 
 177:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 179:../system/include/cmsis/cmsis_gcc.h **** }
 180:../system/include/cmsis/cmsis_gcc.h **** 
 181:../system/include/cmsis/cmsis_gcc.h **** 
 182:../system/include/cmsis/cmsis_gcc.h **** /**
 183:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:../system/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:../system/include/cmsis/cmsis_gcc.h **** 
 186:../system/include/cmsis/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:../system/include/cmsis/cmsis_gcc.h ****  */
 188:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:../system/include/cmsis/cmsis_gcc.h **** {
 190:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:../system/include/cmsis/cmsis_gcc.h **** }
 192:../system/include/cmsis/cmsis_gcc.h **** 
 193:../system/include/cmsis/cmsis_gcc.h **** 
 194:../system/include/cmsis/cmsis_gcc.h **** /**
 195:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:../system/include/cmsis/cmsis_gcc.h ****   \return               Priority Mask value
 198:../system/include/cmsis/cmsis_gcc.h ****  */
 199:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:../system/include/cmsis/cmsis_gcc.h **** {
 201:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 202:../system/include/cmsis/cmsis_gcc.h **** 
 203:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 205:../system/include/cmsis/cmsis_gcc.h **** }
 206:../system/include/cmsis/cmsis_gcc.h **** 
 207:../system/include/cmsis/cmsis_gcc.h **** 
 208:../system/include/cmsis/cmsis_gcc.h **** /**
 209:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:../system/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:../system/include/cmsis/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:../system/include/cmsis/cmsis_gcc.h ****  */
 213:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:../system/include/cmsis/cmsis_gcc.h **** {
 215:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:../system/include/cmsis/cmsis_gcc.h **** }
 217:../system/include/cmsis/cmsis_gcc.h **** 
 218:../system/include/cmsis/cmsis_gcc.h **** 
 219:../system/include/cmsis/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:../system/include/cmsis/cmsis_gcc.h **** 
 221:../system/include/cmsis/cmsis_gcc.h **** /**
 222:../system/include/cmsis/cmsis_gcc.h ****   \brief   Enable FIQ
 223:../system/include/cmsis/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:../system/include/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:../system/include/cmsis/cmsis_gcc.h ****  */
 226:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:../system/include/cmsis/cmsis_gcc.h **** {
 228:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:../system/include/cmsis/cmsis_gcc.h **** }
 230:../system/include/cmsis/cmsis_gcc.h **** 
 231:../system/include/cmsis/cmsis_gcc.h **** 
 232:../system/include/cmsis/cmsis_gcc.h **** /**
 233:../system/include/cmsis/cmsis_gcc.h ****   \brief   Disable FIQ
 234:../system/include/cmsis/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:../system/include/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:../system/include/cmsis/cmsis_gcc.h ****  */
 237:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:../system/include/cmsis/cmsis_gcc.h **** {
 239:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:../system/include/cmsis/cmsis_gcc.h **** }
 241:../system/include/cmsis/cmsis_gcc.h **** 
 242:../system/include/cmsis/cmsis_gcc.h **** 
 243:../system/include/cmsis/cmsis_gcc.h **** /**
 244:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get Base Priority
 245:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:../system/include/cmsis/cmsis_gcc.h ****   \return               Base Priority register value
 247:../system/include/cmsis/cmsis_gcc.h ****  */
 248:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:../system/include/cmsis/cmsis_gcc.h **** {
 250:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 251:../system/include/cmsis/cmsis_gcc.h **** 
 252:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 254:../system/include/cmsis/cmsis_gcc.h **** }
 255:../system/include/cmsis/cmsis_gcc.h **** 
 256:../system/include/cmsis/cmsis_gcc.h **** 
 257:../system/include/cmsis/cmsis_gcc.h **** /**
 258:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set Base Priority
 259:../system/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:../system/include/cmsis/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:../system/include/cmsis/cmsis_gcc.h ****  */
 262:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:../system/include/cmsis/cmsis_gcc.h **** {
 264:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:../system/include/cmsis/cmsis_gcc.h **** }
 266:../system/include/cmsis/cmsis_gcc.h **** 
 267:../system/include/cmsis/cmsis_gcc.h **** 
 268:../system/include/cmsis/cmsis_gcc.h **** /**
 269:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:../system/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:../system/include/cmsis/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:../system/include/cmsis/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:../system/include/cmsis/cmsis_gcc.h ****  */
 274:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:../system/include/cmsis/cmsis_gcc.h **** {
 276:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:../system/include/cmsis/cmsis_gcc.h **** }
 278:../system/include/cmsis/cmsis_gcc.h **** 
 279:../system/include/cmsis/cmsis_gcc.h **** 
 280:../system/include/cmsis/cmsis_gcc.h **** /**
 281:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:../system/include/cmsis/cmsis_gcc.h ****   \return               Fault Mask register value
 284:../system/include/cmsis/cmsis_gcc.h ****  */
 285:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:../system/include/cmsis/cmsis_gcc.h **** {
 287:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 288:../system/include/cmsis/cmsis_gcc.h **** 
 289:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 291:../system/include/cmsis/cmsis_gcc.h **** }
 292:../system/include/cmsis/cmsis_gcc.h **** 
 293:../system/include/cmsis/cmsis_gcc.h **** 
 294:../system/include/cmsis/cmsis_gcc.h **** /**
 295:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:../system/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:../system/include/cmsis/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:../system/include/cmsis/cmsis_gcc.h ****  */
 299:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:../system/include/cmsis/cmsis_gcc.h **** {
 301:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:../system/include/cmsis/cmsis_gcc.h **** }
 303:../system/include/cmsis/cmsis_gcc.h **** 
 304:../system/include/cmsis/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:../system/include/cmsis/cmsis_gcc.h **** 
 306:../system/include/cmsis/cmsis_gcc.h **** 
 307:../system/include/cmsis/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:../system/include/cmsis/cmsis_gcc.h **** 
 309:../system/include/cmsis/cmsis_gcc.h **** /**
 310:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get FPSCR
 311:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:../system/include/cmsis/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:../system/include/cmsis/cmsis_gcc.h ****  */
 314:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:../system/include/cmsis/cmsis_gcc.h **** {
 316:../system/include/cmsis/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 318:../system/include/cmsis/cmsis_gcc.h **** 
 319:../system/include/cmsis/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("");
 321:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("");
 323:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 324:../system/include/cmsis/cmsis_gcc.h **** #else
 325:../system/include/cmsis/cmsis_gcc.h ****    return(0);
 326:../system/include/cmsis/cmsis_gcc.h **** #endif
 327:../system/include/cmsis/cmsis_gcc.h **** }
 328:../system/include/cmsis/cmsis_gcc.h **** 
 329:../system/include/cmsis/cmsis_gcc.h **** 
 330:../system/include/cmsis/cmsis_gcc.h **** /**
 331:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set FPSCR
 332:../system/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:../system/include/cmsis/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:../system/include/cmsis/cmsis_gcc.h ****  */
 335:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:../system/include/cmsis/cmsis_gcc.h **** {
 337:../system/include/cmsis/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:../system/include/cmsis/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("");
 340:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("");
 342:../system/include/cmsis/cmsis_gcc.h **** #endif
 343:../system/include/cmsis/cmsis_gcc.h **** }
 344:../system/include/cmsis/cmsis_gcc.h **** 
 345:../system/include/cmsis/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:../system/include/cmsis/cmsis_gcc.h **** 
 347:../system/include/cmsis/cmsis_gcc.h **** 
 348:../system/include/cmsis/cmsis_gcc.h **** 
 349:../system/include/cmsis/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:../system/include/cmsis/cmsis_gcc.h **** 
 351:../system/include/cmsis/cmsis_gcc.h **** 
 352:../system/include/cmsis/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:../system/include/cmsis/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:../system/include/cmsis/cmsis_gcc.h ****   Access to dedicated instructions
 355:../system/include/cmsis/cmsis_gcc.h ****   @{
 356:../system/include/cmsis/cmsis_gcc.h **** */
 357:../system/include/cmsis/cmsis_gcc.h **** 
 358:../system/include/cmsis/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:../system/include/cmsis/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:../system/include/cmsis/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:../system/include/cmsis/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:../system/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:../system/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:../system/include/cmsis/cmsis_gcc.h **** #else
 365:../system/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:../system/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:../system/include/cmsis/cmsis_gcc.h **** #endif
 368:../system/include/cmsis/cmsis_gcc.h **** 
 369:../system/include/cmsis/cmsis_gcc.h **** /**
 370:../system/include/cmsis/cmsis_gcc.h ****   \brief   No Operation
 371:../system/include/cmsis/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:../system/include/cmsis/cmsis_gcc.h ****  */
 373:../system/include/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:../system/include/cmsis/cmsis_gcc.h **** {
 375:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:../system/include/cmsis/cmsis_gcc.h **** }
 377:../system/include/cmsis/cmsis_gcc.h **** 
 378:../system/include/cmsis/cmsis_gcc.h **** 
 379:../system/include/cmsis/cmsis_gcc.h **** /**
 380:../system/include/cmsis/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:../system/include/cmsis/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:../system/include/cmsis/cmsis_gcc.h ****  */
 383:../system/include/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:../system/include/cmsis/cmsis_gcc.h **** {
 385:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:../system/include/cmsis/cmsis_gcc.h **** }
 387:../system/include/cmsis/cmsis_gcc.h **** 
 388:../system/include/cmsis/cmsis_gcc.h **** 
 389:../system/include/cmsis/cmsis_gcc.h **** /**
 390:../system/include/cmsis/cmsis_gcc.h ****   \brief   Wait For Event
 391:../system/include/cmsis/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:../system/include/cmsis/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:../system/include/cmsis/cmsis_gcc.h ****  */
 394:../system/include/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:../system/include/cmsis/cmsis_gcc.h **** {
 396:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:../system/include/cmsis/cmsis_gcc.h **** }
 398:../system/include/cmsis/cmsis_gcc.h **** 
 399:../system/include/cmsis/cmsis_gcc.h **** 
 400:../system/include/cmsis/cmsis_gcc.h **** /**
 401:../system/include/cmsis/cmsis_gcc.h ****   \brief   Send Event
 402:../system/include/cmsis/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:../system/include/cmsis/cmsis_gcc.h ****  */
 404:../system/include/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:../system/include/cmsis/cmsis_gcc.h **** {
 406:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:../system/include/cmsis/cmsis_gcc.h **** }
 408:../system/include/cmsis/cmsis_gcc.h **** 
 409:../system/include/cmsis/cmsis_gcc.h **** 
 410:../system/include/cmsis/cmsis_gcc.h **** /**
 411:../system/include/cmsis/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:../system/include/cmsis/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:../system/include/cmsis/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:../system/include/cmsis/cmsis_gcc.h ****            after the instruction has been completed.
 415:../system/include/cmsis/cmsis_gcc.h ****  */
 416:../system/include/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:../system/include/cmsis/cmsis_gcc.h **** {
 418:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:../system/include/cmsis/cmsis_gcc.h **** }
 420:../system/include/cmsis/cmsis_gcc.h **** 
 421:../system/include/cmsis/cmsis_gcc.h **** 
 422:../system/include/cmsis/cmsis_gcc.h **** /**
 423:../system/include/cmsis/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:../system/include/cmsis/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:../system/include/cmsis/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:../system/include/cmsis/cmsis_gcc.h ****  */
 427:../system/include/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:../system/include/cmsis/cmsis_gcc.h **** {
 429:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  34              		.loc 2 429 0
  35              		.syntax unified
  36              	@ 429 "../system/include/cmsis/cmsis_gcc.h" 1
  37 0000 BFF34F8F 		dsb 0xF
  38              	@ 0 "" 2
  39              		.thumb
  40              		.syntax unified
  41              	.LBE9:
  42              	.LBE8:
1626:../system/include/cmsis/core_cm3.h ****   __DSB();                                                          /* Ensure all outstanding memor
1627:../system/include/cmsis/core_cm3.h ****                                                                        buffered write are completed
1628:../system/include/cmsis/core_cm3.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
1629:../system/include/cmsis/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  43              		.loc 1 1629 0
  44 0004 0549     		ldr	r1, .L3
  45 0006 CA68     		ldr	r2, [r1, #12]
  46 0008 02F4E062 		and	r2, r2, #1792
1628:../system/include/cmsis/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  47              		.loc 1 1628 0
  48 000c 044B     		ldr	r3, .L3+4
  49 000e 1343     		orrs	r3, r3, r2
  50 0010 CB60     		str	r3, [r1, #12]
  51              	.LBB10:
  52              	.LBB11:
  53              		.loc 2 429 0
  54              		.syntax unified
  55              	@ 429 "../system/include/cmsis/cmsis_gcc.h" 1
  56 0012 BFF34F8F 		dsb 0xF
  57              	@ 0 "" 2
  58              		.thumb
  59              		.syntax unified
  60              	.L2:
  61              	.LBE11:
  62              	.LBE10:
  63              	.LBB12:
  64              	.LBB13:
 375:../system/include/cmsis/cmsis_gcc.h **** }
  65              		.loc 2 375 0 discriminator 1
  66              		.syntax unified
  67              	@ 375 "../system/include/cmsis/cmsis_gcc.h" 1
  68 0016 00BF     		nop
  69              	@ 0 "" 2
  70              		.thumb
  71              		.syntax unified
  72 0018 FDE7     		b	.L2
  73              	.L4:
  74 001a 00BF     		.align	2
  75              	.L3:
  76 001c 00ED00E0 		.word	-536810240
  77 0020 0400FA05 		.word	100270084
  78              	.LBE13:
  79              	.LBE12:
  80              		.cfi_endproc
  81              	.LFE58:
  83              		.section	.after_vectors,"ax",%progbits
  84              		.align	1
  85              		.global	Reset_Handler
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  89              		.fpu softvfp
  91              	Reset_Handler:
  92              	.LFB65:
  93              		.file 3 "../system/src/cortexm/exception_handlers.c"
   1:../system/src/cortexm/exception_handlers.c **** //
   2:../system/src/cortexm/exception_handlers.c **** // This file is part of the µOS++ III distribution.
   3:../system/src/cortexm/exception_handlers.c **** // Copyright (c) 2014 Liviu Ionescu.
   4:../system/src/cortexm/exception_handlers.c **** //
   5:../system/src/cortexm/exception_handlers.c **** 
   6:../system/src/cortexm/exception_handlers.c **** // ----------------------------------------------------------------------------
   7:../system/src/cortexm/exception_handlers.c **** 
   8:../system/src/cortexm/exception_handlers.c **** #include "cortexm/ExceptionHandlers.h"
   9:../system/src/cortexm/exception_handlers.c **** #include "cmsis_device.h"
  10:../system/src/cortexm/exception_handlers.c **** #include "arm/semihosting.h"
  11:../system/src/cortexm/exception_handlers.c **** #include "diag/Trace.h"
  12:../system/src/cortexm/exception_handlers.c **** #include <string.h>
  13:../system/src/cortexm/exception_handlers.c **** 
  14:../system/src/cortexm/exception_handlers.c **** // ----------------------------------------------------------------------------
  15:../system/src/cortexm/exception_handlers.c **** 
  16:../system/src/cortexm/exception_handlers.c **** extern void
  17:../system/src/cortexm/exception_handlers.c **** __attribute__((noreturn,weak))
  18:../system/src/cortexm/exception_handlers.c **** _start (void);
  19:../system/src/cortexm/exception_handlers.c **** 
  20:../system/src/cortexm/exception_handlers.c **** // ----------------------------------------------------------------------------
  21:../system/src/cortexm/exception_handlers.c **** // Default exception handlers. Override the ones here by defining your own
  22:../system/src/cortexm/exception_handlers.c **** // handler routines in your application code.
  23:../system/src/cortexm/exception_handlers.c **** // ----------------------------------------------------------------------------
  24:../system/src/cortexm/exception_handlers.c **** 
  25:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
  26:../system/src/cortexm/exception_handlers.c **** 
  27:../system/src/cortexm/exception_handlers.c **** // The DEBUG version is not naked, but has a proper stack frame,
  28:../system/src/cortexm/exception_handlers.c **** // to allow setting breakpoints at Reset_Handler.
  29:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),noreturn))
  30:../system/src/cortexm/exception_handlers.c **** Reset_Handler (void)
  31:../system/src/cortexm/exception_handlers.c **** {
  94              		.loc 3 31 0
  95              		.cfi_startproc
  96              		@ Volatile: function does not return.
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99 0000 08B5     		push	{r3, lr}
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 3, -8
 102              		.cfi_offset 14, -4
  32:../system/src/cortexm/exception_handlers.c ****   _start ();
 103              		.loc 3 32 0
 104 0002 FFF7FEFF 		bl	_start
 105              	.LVL0:
 106              		.cfi_endproc
 107              	.LFE65:
 109              		.align	1
 110              		.weak	NMI_Handler
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 114              		.fpu softvfp
 116              	NMI_Handler:
 117              	.LFB66:
  33:../system/src/cortexm/exception_handlers.c **** }
  34:../system/src/cortexm/exception_handlers.c **** 
  35:../system/src/cortexm/exception_handlers.c **** #else
  36:../system/src/cortexm/exception_handlers.c **** 
  37:../system/src/cortexm/exception_handlers.c **** // The Release version is optimised to a quick branch to _start.
  38:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),naked))
  39:../system/src/cortexm/exception_handlers.c **** Reset_Handler(void)
  40:../system/src/cortexm/exception_handlers.c ****   {
  41:../system/src/cortexm/exception_handlers.c ****     asm volatile
  42:../system/src/cortexm/exception_handlers.c ****     (
  43:../system/src/cortexm/exception_handlers.c ****         " ldr     r0,=_start \n"
  44:../system/src/cortexm/exception_handlers.c ****         " bx      r0"
  45:../system/src/cortexm/exception_handlers.c ****         :
  46:../system/src/cortexm/exception_handlers.c ****         :
  47:../system/src/cortexm/exception_handlers.c ****         :
  48:../system/src/cortexm/exception_handlers.c ****     );
  49:../system/src/cortexm/exception_handlers.c ****   }
  50:../system/src/cortexm/exception_handlers.c **** 
  51:../system/src/cortexm/exception_handlers.c **** #endif
  52:../system/src/cortexm/exception_handlers.c **** 
  53:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak))
  54:../system/src/cortexm/exception_handlers.c **** NMI_Handler (void)
  55:../system/src/cortexm/exception_handlers.c **** {
 118              		.loc 3 55 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		@ link register save eliminated.
  56:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
  57:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 123              		.loc 3 57 0
 124              		.syntax unified
 125              	@ 57 "../system/src/cortexm/exception_handlers.c" 1
 126 0006 00BE     		bkpt 0
 127              	@ 0 "" 2
 128              		.thumb
 129              		.syntax unified
 130              	.L8:
 131 0008 FEE7     		b	.L8
 132              		.cfi_endproc
 133              	.LFE66:
 135              		.section	.text.dumpExceptionStack,"ax",%progbits
 136              		.align	1
 137              		.global	dumpExceptionStack
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 141              		.fpu softvfp
 143              	dumpExceptionStack:
 144              	.LFB67:
  58:../system/src/cortexm/exception_handlers.c **** #endif
  59:../system/src/cortexm/exception_handlers.c ****   while (1)
  60:../system/src/cortexm/exception_handlers.c ****     {
  61:../system/src/cortexm/exception_handlers.c ****     }
  62:../system/src/cortexm/exception_handlers.c **** }
  63:../system/src/cortexm/exception_handlers.c **** 
  64:../system/src/cortexm/exception_handlers.c **** // ----------------------------------------------------------------------------
  65:../system/src/cortexm/exception_handlers.c **** 
  66:../system/src/cortexm/exception_handlers.c **** #if defined(TRACE)
  67:../system/src/cortexm/exception_handlers.c **** 
  68:../system/src/cortexm/exception_handlers.c **** #if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
  69:../system/src/cortexm/exception_handlers.c **** 
  70:../system/src/cortexm/exception_handlers.c **** // The values of BFAR and MMFAR stay unchanged if the BFARVALID or
  71:../system/src/cortexm/exception_handlers.c **** // MMARVALID is set. However, if a new fault occurs during the
  72:../system/src/cortexm/exception_handlers.c **** // execution of this fault handler, the value of the BFAR and MMFAR
  73:../system/src/cortexm/exception_handlers.c **** // could potentially be erased. In order to ensure the fault addresses
  74:../system/src/cortexm/exception_handlers.c **** // accessed are valid, the following procedure should be used:
  75:../system/src/cortexm/exception_handlers.c **** // 1. Read BFAR/MMFAR.
  76:../system/src/cortexm/exception_handlers.c **** // 2. Read CFSR to get BFARVALID or MMARVALID. If the value is 0, the
  77:../system/src/cortexm/exception_handlers.c **** //    value of BFAR or MMFAR accessed can be invalid and can be discarded.
  78:../system/src/cortexm/exception_handlers.c **** // 3. Optionally clear BFARVALID or MMARVALID.
  79:../system/src/cortexm/exception_handlers.c **** // (See Joseph Yiu's book).
  80:../system/src/cortexm/exception_handlers.c **** 
  81:../system/src/cortexm/exception_handlers.c **** void
  82:../system/src/cortexm/exception_handlers.c **** dumpExceptionStack (ExceptionStackFrame* frame,
  83:../system/src/cortexm/exception_handlers.c ****                 uint32_t cfsr, uint32_t mmfar, uint32_t bfar,
  84:../system/src/cortexm/exception_handlers.c ****                                         uint32_t lr)
  85:../system/src/cortexm/exception_handlers.c **** {
 145              		.loc 3 85 0
 146              		.cfi_startproc
 147              		@ args = 4, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              	.LVL1:
 150 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 151              		.cfi_def_cfa_offset 24
 152              		.cfi_offset 3, -24
 153              		.cfi_offset 4, -20
 154              		.cfi_offset 5, -16
 155              		.cfi_offset 6, -12
 156              		.cfi_offset 7, -8
 157              		.cfi_offset 14, -4
 158 0002 0446     		mov	r4, r0
 159 0004 0D46     		mov	r5, r1
 160 0006 1746     		mov	r7, r2
 161 0008 1E46     		mov	r6, r3
  86:../system/src/cortexm/exception_handlers.c ****   trace_printf ("Stack frame:\n");
 162              		.loc 3 86 0
 163 000a 2748     		ldr	r0, .L15
 164              	.LVL2:
 165 000c FFF7FEFF 		bl	trace_printf
 166              	.LVL3:
  87:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R0 =  %08X\n", frame->r0);
 167              		.loc 3 87 0
 168 0010 2168     		ldr	r1, [r4]
 169 0012 2648     		ldr	r0, .L15+4
 170 0014 FFF7FEFF 		bl	trace_printf
 171              	.LVL4:
  88:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R1 =  %08X\n", frame->r1);
 172              		.loc 3 88 0
 173 0018 6168     		ldr	r1, [r4, #4]
 174 001a 2548     		ldr	r0, .L15+8
 175 001c FFF7FEFF 		bl	trace_printf
 176              	.LVL5:
  89:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R2 =  %08X\n", frame->r2);
 177              		.loc 3 89 0
 178 0020 A168     		ldr	r1, [r4, #8]
 179 0022 2448     		ldr	r0, .L15+12
 180 0024 FFF7FEFF 		bl	trace_printf
 181              	.LVL6:
  90:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R3 =  %08X\n", frame->r3);
 182              		.loc 3 90 0
 183 0028 E168     		ldr	r1, [r4, #12]
 184 002a 2348     		ldr	r0, .L15+16
 185 002c FFF7FEFF 		bl	trace_printf
 186              	.LVL7:
  91:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R12 = %08X\n", frame->r12);
 187              		.loc 3 91 0
 188 0030 2169     		ldr	r1, [r4, #16]
 189 0032 2248     		ldr	r0, .L15+20
 190 0034 FFF7FEFF 		bl	trace_printf
 191              	.LVL8:
  92:../system/src/cortexm/exception_handlers.c ****   trace_printf (" LR =  %08X\n", frame->lr);
 192              		.loc 3 92 0
 193 0038 6169     		ldr	r1, [r4, #20]
 194 003a 2148     		ldr	r0, .L15+24
 195 003c FFF7FEFF 		bl	trace_printf
 196              	.LVL9:
  93:../system/src/cortexm/exception_handlers.c ****   trace_printf (" PC =  %08X\n", frame->pc);
 197              		.loc 3 93 0
 198 0040 A169     		ldr	r1, [r4, #24]
 199 0042 2048     		ldr	r0, .L15+28
 200 0044 FFF7FEFF 		bl	trace_printf
 201              	.LVL10:
  94:../system/src/cortexm/exception_handlers.c ****   trace_printf (" PSR = %08X\n", frame->psr);
 202              		.loc 3 94 0
 203 0048 E169     		ldr	r1, [r4, #28]
 204 004a 1F48     		ldr	r0, .L15+32
 205 004c FFF7FEFF 		bl	trace_printf
 206              	.LVL11:
  95:../system/src/cortexm/exception_handlers.c ****   trace_printf ("FSR/FAR:\n");
 207              		.loc 3 95 0
 208 0050 1E48     		ldr	r0, .L15+36
 209 0052 FFF7FEFF 		bl	trace_printf
 210              	.LVL12:
  96:../system/src/cortexm/exception_handlers.c ****   trace_printf (" CFSR =  %08X\n", cfsr);
 211              		.loc 3 96 0
 212 0056 2946     		mov	r1, r5
 213 0058 1D48     		ldr	r0, .L15+40
 214 005a FFF7FEFF 		bl	trace_printf
 215              	.LVL13:
  97:../system/src/cortexm/exception_handlers.c ****   trace_printf (" HFSR =  %08X\n", SCB->HFSR);
 216              		.loc 3 97 0
 217 005e 1D4C     		ldr	r4, .L15+44
 218              	.LVL14:
 219 0060 E16A     		ldr	r1, [r4, #44]
 220 0062 1D48     		ldr	r0, .L15+48
 221 0064 FFF7FEFF 		bl	trace_printf
 222              	.LVL15:
  98:../system/src/cortexm/exception_handlers.c ****   trace_printf (" DFSR =  %08X\n", SCB->DFSR);
 223              		.loc 3 98 0
 224 0068 216B     		ldr	r1, [r4, #48]
 225 006a 1C48     		ldr	r0, .L15+52
 226 006c FFF7FEFF 		bl	trace_printf
 227              	.LVL16:
  99:../system/src/cortexm/exception_handlers.c ****   trace_printf (" AFSR =  %08X\n", SCB->AFSR);
 228              		.loc 3 99 0
 229 0070 E16B     		ldr	r1, [r4, #60]
 230 0072 1B48     		ldr	r0, .L15+56
 231 0074 FFF7FEFF 		bl	trace_printf
 232              	.LVL17:
 100:../system/src/cortexm/exception_handlers.c **** 
 101:../system/src/cortexm/exception_handlers.c ****   if (cfsr & (1UL << 7))
 233              		.loc 3 101 0
 234 0078 15F0800F 		tst	r5, #128
 235 007c 0AD1     		bne	.L13
 236              	.L10:
 102:../system/src/cortexm/exception_handlers.c ****     {
 103:../system/src/cortexm/exception_handlers.c ****       trace_printf (" MMFAR = %08X\n", mmfar);
 104:../system/src/cortexm/exception_handlers.c ****     }
 105:../system/src/cortexm/exception_handlers.c ****   if (cfsr & (1UL << 15))
 237              		.loc 3 105 0
 238 007e 15F4004F 		tst	r5, #32768
 239 0082 0CD1     		bne	.L14
 240              	.L11:
 106:../system/src/cortexm/exception_handlers.c ****     {
 107:../system/src/cortexm/exception_handlers.c ****       trace_printf (" BFAR =  %08X\n", bfar);
 108:../system/src/cortexm/exception_handlers.c ****     }
 109:../system/src/cortexm/exception_handlers.c ****   trace_printf ("Misc\n");
 241              		.loc 3 109 0
 242 0084 1748     		ldr	r0, .L15+60
 243 0086 FFF7FEFF 		bl	trace_printf
 244              	.LVL18:
 110:../system/src/cortexm/exception_handlers.c ****   trace_printf (" LR/EXC_RETURN= %08X\n", lr);
 245              		.loc 3 110 0
 246 008a 0699     		ldr	r1, [sp, #24]
 247 008c 1648     		ldr	r0, .L15+64
 248 008e FFF7FEFF 		bl	trace_printf
 249              	.LVL19:
 111:../system/src/cortexm/exception_handlers.c **** }
 250              		.loc 3 111 0
 251 0092 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 252              	.LVL20:
 253              	.L13:
 103:../system/src/cortexm/exception_handlers.c ****     }
 254              		.loc 3 103 0
 255 0094 3946     		mov	r1, r7
 256 0096 1548     		ldr	r0, .L15+68
 257 0098 FFF7FEFF 		bl	trace_printf
 258              	.LVL21:
 259 009c EFE7     		b	.L10
 260              	.L14:
 107:../system/src/cortexm/exception_handlers.c ****     }
 261              		.loc 3 107 0
 262 009e 3146     		mov	r1, r6
 263 00a0 1348     		ldr	r0, .L15+72
 264 00a2 FFF7FEFF 		bl	trace_printf
 265              	.LVL22:
 266 00a6 EDE7     		b	.L11
 267              	.L16:
 268              		.align	2
 269              	.L15:
 270 00a8 00000000 		.word	.LC0
 271 00ac 10000000 		.word	.LC1
 272 00b0 20000000 		.word	.LC2
 273 00b4 30000000 		.word	.LC3
 274 00b8 40000000 		.word	.LC4
 275 00bc 50000000 		.word	.LC5
 276 00c0 60000000 		.word	.LC6
 277 00c4 70000000 		.word	.LC7
 278 00c8 80000000 		.word	.LC8
 279 00cc 90000000 		.word	.LC9
 280 00d0 9C000000 		.word	.LC10
 281 00d4 00ED00E0 		.word	-536810240
 282 00d8 AC000000 		.word	.LC11
 283 00dc BC000000 		.word	.LC12
 284 00e0 CC000000 		.word	.LC13
 285 00e4 FC000000 		.word	.LC16
 286 00e8 04010000 		.word	.LC17
 287 00ec DC000000 		.word	.LC14
 288 00f0 EC000000 		.word	.LC15
 289              		.cfi_endproc
 290              	.LFE67:
 292              		.section	.after_vectors
 293              		.align	1
 294              		.weak	HardFault_Handler
 295              		.syntax unified
 296              		.thumb
 297              		.thumb_func
 298              		.fpu softvfp
 300              	HardFault_Handler:
 301              	.LFB68:
 112:../system/src/cortexm/exception_handlers.c **** 
 113:../system/src/cortexm/exception_handlers.c **** #endif // defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
 114:../system/src/cortexm/exception_handlers.c **** 
 115:../system/src/cortexm/exception_handlers.c **** #if defined(__ARM_ARCH_6M__)
 116:../system/src/cortexm/exception_handlers.c **** 
 117:../system/src/cortexm/exception_handlers.c **** void
 118:../system/src/cortexm/exception_handlers.c **** dumpExceptionStack (ExceptionStackFrame* frame, uint32_t lr)
 119:../system/src/cortexm/exception_handlers.c **** {
 120:../system/src/cortexm/exception_handlers.c ****   trace_printf ("Stack frame:\n");
 121:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R0 =  %08X\n", frame->r0);
 122:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R1 =  %08X\n", frame->r1);
 123:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R2 =  %08X\n", frame->r2);
 124:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R3 =  %08X\n", frame->r3);
 125:../system/src/cortexm/exception_handlers.c ****   trace_printf (" R12 = %08X\n", frame->r12);
 126:../system/src/cortexm/exception_handlers.c ****   trace_printf (" LR =  %08X\n", frame->lr);
 127:../system/src/cortexm/exception_handlers.c ****   trace_printf (" PC =  %08X\n", frame->pc);
 128:../system/src/cortexm/exception_handlers.c ****   trace_printf (" PSR = %08X\n", frame->psr);
 129:../system/src/cortexm/exception_handlers.c ****   trace_printf ("Misc\n");
 130:../system/src/cortexm/exception_handlers.c ****   trace_printf (" LR/EXC_RETURN= %08X\n", lr);
 131:../system/src/cortexm/exception_handlers.c **** }
 132:../system/src/cortexm/exception_handlers.c **** 
 133:../system/src/cortexm/exception_handlers.c **** #endif // defined(__ARM_ARCH_6M__)
 134:../system/src/cortexm/exception_handlers.c **** 
 135:../system/src/cortexm/exception_handlers.c **** #endif // defined(TRACE)
 136:../system/src/cortexm/exception_handlers.c **** 
 137:../system/src/cortexm/exception_handlers.c **** // ----------------------------------------------------------------------------
 138:../system/src/cortexm/exception_handlers.c **** 
 139:../system/src/cortexm/exception_handlers.c **** #if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
 140:../system/src/cortexm/exception_handlers.c **** 
 141:../system/src/cortexm/exception_handlers.c **** #if defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEMIHOSTING_STDOUT) || defined(OS_USE_TRACE
 142:../system/src/cortexm/exception_handlers.c **** 
 143:../system/src/cortexm/exception_handlers.c **** int
 144:../system/src/cortexm/exception_handlers.c **** isSemihosting (ExceptionStackFrame* frame, uint16_t opCode);
 145:../system/src/cortexm/exception_handlers.c **** 
 146:../system/src/cortexm/exception_handlers.c **** /**
 147:../system/src/cortexm/exception_handlers.c ****  * This function provides the minimum functionality to make a semihosting program execute even with
 148:../system/src/cortexm/exception_handlers.c ****  * @param frame pointer to an exception stack frame.
 149:../system/src/cortexm/exception_handlers.c ****  * @param opCode the 16-bin word of the BKPT instruction.
 150:../system/src/cortexm/exception_handlers.c ****  * @return 1 if the instruction was a valid semihosting call; 0 otherwise.
 151:../system/src/cortexm/exception_handlers.c ****  */
 152:../system/src/cortexm/exception_handlers.c **** int
 153:../system/src/cortexm/exception_handlers.c **** isSemihosting (ExceptionStackFrame* frame, uint16_t opCode)
 154:../system/src/cortexm/exception_handlers.c **** {
 155:../system/src/cortexm/exception_handlers.c ****   uint16_t* pw = (uint16_t*) frame->pc;
 156:../system/src/cortexm/exception_handlers.c ****   if (*pw == opCode)
 157:../system/src/cortexm/exception_handlers.c ****     {
 158:../system/src/cortexm/exception_handlers.c ****       uint32_t r0 = frame->r0;
 159:../system/src/cortexm/exception_handlers.c **** #if defined(OS_DEBUG_SEMIHOSTING_FAULTS) || defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEM
 160:../system/src/cortexm/exception_handlers.c ****       uint32_t r1 = frame->r1;
 161:../system/src/cortexm/exception_handlers.c **** #endif
 162:../system/src/cortexm/exception_handlers.c **** #if defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
 163:../system/src/cortexm/exception_handlers.c ****       uint32_t* blk = (uint32_t*) r1;
 164:../system/src/cortexm/exception_handlers.c **** #endif
 165:../system/src/cortexm/exception_handlers.c **** 
 166:../system/src/cortexm/exception_handlers.c **** #if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
 167:../system/src/cortexm/exception_handlers.c ****       // trace_printf ("sh r0=%d\n", r0);
 168:../system/src/cortexm/exception_handlers.c **** #endif
 169:../system/src/cortexm/exception_handlers.c **** 
 170:../system/src/cortexm/exception_handlers.c ****       switch (r0)
 171:../system/src/cortexm/exception_handlers.c ****         {
 172:../system/src/cortexm/exception_handlers.c **** 
 173:../system/src/cortexm/exception_handlers.c **** #if defined(OS_USE_SEMIHOSTING)
 174:../system/src/cortexm/exception_handlers.c **** 
 175:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_CLOCK:
 176:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_ELAPSED:
 177:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_FLEN:
 178:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_GET_CMDLINE:
 179:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_REMOVE:
 180:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_RENAME:
 181:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_SEEK:
 182:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_SYSTEM:
 183:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_TICKFREQ:
 184:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_TMPNAM:
 185:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_ISTTY:
 186:../system/src/cortexm/exception_handlers.c ****           frame->r0 = (uint32_t)-1; // the call is not successful or not supported
 187:../system/src/cortexm/exception_handlers.c ****           break;
 188:../system/src/cortexm/exception_handlers.c **** 
 189:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_CLOSE:
 190:../system/src/cortexm/exception_handlers.c ****           frame->r0 = 0; // call is successful
 191:../system/src/cortexm/exception_handlers.c ****           break;
 192:../system/src/cortexm/exception_handlers.c **** 
 193:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_ERRNO:
 194:../system/src/cortexm/exception_handlers.c ****           frame->r0 = 0; // the value of the C library errno variable.
 195:../system/src/cortexm/exception_handlers.c ****           break;
 196:../system/src/cortexm/exception_handlers.c **** 
 197:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_HEAPINFO:
 198:../system/src/cortexm/exception_handlers.c ****           blk[0] = 0; // heap_base
 199:../system/src/cortexm/exception_handlers.c ****           blk[1] = 0; // heap_limit
 200:../system/src/cortexm/exception_handlers.c ****           blk[2] = 0; // stack_base
 201:../system/src/cortexm/exception_handlers.c ****           blk[3] = 0; // stack_limit
 202:../system/src/cortexm/exception_handlers.c ****           break;
 203:../system/src/cortexm/exception_handlers.c **** 
 204:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_ISERROR:
 205:../system/src/cortexm/exception_handlers.c ****           frame->r0 = 0; // 0 if the status word is not an error indication
 206:../system/src/cortexm/exception_handlers.c ****           break;
 207:../system/src/cortexm/exception_handlers.c **** 
 208:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_READ:
 209:../system/src/cortexm/exception_handlers.c ****           // If R0 contains the same value as word 3, the call has
 210:../system/src/cortexm/exception_handlers.c ****           // failed and EOF is assumed.
 211:../system/src/cortexm/exception_handlers.c ****           frame->r0 = blk[2];
 212:../system/src/cortexm/exception_handlers.c ****           break;
 213:../system/src/cortexm/exception_handlers.c **** 
 214:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_READC:
 215:../system/src/cortexm/exception_handlers.c ****           frame->r0 = '\0'; // the byte read from the console.
 216:../system/src/cortexm/exception_handlers.c ****           break;
 217:../system/src/cortexm/exception_handlers.c **** 
 218:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_TIME:
 219:../system/src/cortexm/exception_handlers.c ****           frame->r0 = 0; // the number of seconds since 00:00 January 1, 1970.
 220:../system/src/cortexm/exception_handlers.c ****           break;
 221:../system/src/cortexm/exception_handlers.c **** 
 222:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_ReportException:
 223:../system/src/cortexm/exception_handlers.c **** 
 224:../system/src/cortexm/exception_handlers.c ****           NVIC_SystemReset ();
 225:../system/src/cortexm/exception_handlers.c ****           // Should not reach here
 226:../system/src/cortexm/exception_handlers.c ****           return 0;
 227:../system/src/cortexm/exception_handlers.c **** 
 228:../system/src/cortexm/exception_handlers.c **** #endif // defined(OS_USE_SEMIHOSTING)
 229:../system/src/cortexm/exception_handlers.c **** 
 230:../system/src/cortexm/exception_handlers.c **** #if defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
 231:../system/src/cortexm/exception_handlers.c **** 
 232:../system/src/cortexm/exception_handlers.c **** #define HANDLER_STDIN   (1)
 233:../system/src/cortexm/exception_handlers.c **** #define HANDLER_STDOUT  (2)
 234:../system/src/cortexm/exception_handlers.c **** #define HANDLER_STDERR  (3)
 235:../system/src/cortexm/exception_handlers.c **** 
 236:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_OPEN:
 237:../system/src/cortexm/exception_handlers.c ****           // Process only standard io/out/err and return 1/2/3
 238:../system/src/cortexm/exception_handlers.c ****           if (strcmp ((char*) blk[0], ":tt") == 0)
 239:../system/src/cortexm/exception_handlers.c ****             {
 240:../system/src/cortexm/exception_handlers.c ****               if ((blk[1] == 0))
 241:../system/src/cortexm/exception_handlers.c ****                 {
 242:../system/src/cortexm/exception_handlers.c ****                   frame->r0 = HANDLER_STDIN;
 243:../system/src/cortexm/exception_handlers.c ****                   break;
 244:../system/src/cortexm/exception_handlers.c ****                 }
 245:../system/src/cortexm/exception_handlers.c ****               else if (blk[1] == 4)
 246:../system/src/cortexm/exception_handlers.c ****                 {
 247:../system/src/cortexm/exception_handlers.c ****                   frame->r0 = HANDLER_STDOUT;
 248:../system/src/cortexm/exception_handlers.c ****                   break;
 249:../system/src/cortexm/exception_handlers.c ****                 }
 250:../system/src/cortexm/exception_handlers.c ****               else if (blk[1] == 8)
 251:../system/src/cortexm/exception_handlers.c ****                 {
 252:../system/src/cortexm/exception_handlers.c ****                   frame->r0 = HANDLER_STDERR;
 253:../system/src/cortexm/exception_handlers.c ****                   break;
 254:../system/src/cortexm/exception_handlers.c ****                 }
 255:../system/src/cortexm/exception_handlers.c ****             }
 256:../system/src/cortexm/exception_handlers.c ****           frame->r0 = (uint32_t)-1; // the call is not successful or not supported
 257:../system/src/cortexm/exception_handlers.c ****           break;
 258:../system/src/cortexm/exception_handlers.c **** 
 259:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_WRITE:
 260:../system/src/cortexm/exception_handlers.c ****           // Silently ignore writes to stdout/stderr, fail on all other handler.
 261:../system/src/cortexm/exception_handlers.c ****           if ((blk[0] == HANDLER_STDOUT) || (blk[0] == HANDLER_STDERR))
 262:../system/src/cortexm/exception_handlers.c ****             {
 263:../system/src/cortexm/exception_handlers.c **** #if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
 264:../system/src/cortexm/exception_handlers.c ****               frame->r0 = (uint32_t) blk[2]
 265:../system/src/cortexm/exception_handlers.c ****                   - trace_write ((char*) blk[1], blk[2]);
 266:../system/src/cortexm/exception_handlers.c **** #else
 267:../system/src/cortexm/exception_handlers.c ****               frame->r0 = 0; // all sent, no more.
 268:../system/src/cortexm/exception_handlers.c **** #endif // defined(OS_DEBUG_SEMIHOSTING_FAULTS)
 269:../system/src/cortexm/exception_handlers.c ****             }
 270:../system/src/cortexm/exception_handlers.c ****           else
 271:../system/src/cortexm/exception_handlers.c ****             {
 272:../system/src/cortexm/exception_handlers.c ****               // If other handler, return the total number of bytes
 273:../system/src/cortexm/exception_handlers.c ****               // as the number of bytes that are not written.
 274:../system/src/cortexm/exception_handlers.c ****               frame->r0 = blk[2];
 275:../system/src/cortexm/exception_handlers.c ****             }
 276:../system/src/cortexm/exception_handlers.c ****           break;
 277:../system/src/cortexm/exception_handlers.c **** 
 278:../system/src/cortexm/exception_handlers.c **** #endif // defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
 279:../system/src/cortexm/exception_handlers.c **** 
 280:../system/src/cortexm/exception_handlers.c **** #if defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEMIHOSTING_STDOUT) || defined(OS_USE_TRACE
 281:../system/src/cortexm/exception_handlers.c **** 
 282:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_WRITEC:
 283:../system/src/cortexm/exception_handlers.c **** #if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
 284:../system/src/cortexm/exception_handlers.c ****           {
 285:../system/src/cortexm/exception_handlers.c ****             char ch = *((char*) r1);
 286:../system/src/cortexm/exception_handlers.c ****             trace_write (&ch, 1);
 287:../system/src/cortexm/exception_handlers.c ****           }
 288:../system/src/cortexm/exception_handlers.c **** #endif
 289:../system/src/cortexm/exception_handlers.c ****           // Register R0 is corrupted.
 290:../system/src/cortexm/exception_handlers.c ****           break;
 291:../system/src/cortexm/exception_handlers.c **** 
 292:../system/src/cortexm/exception_handlers.c ****         case SEMIHOSTING_SYS_WRITE0:
 293:../system/src/cortexm/exception_handlers.c **** #if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
 294:../system/src/cortexm/exception_handlers.c ****           {
 295:../system/src/cortexm/exception_handlers.c ****             char* p = ((char*) r1);
 296:../system/src/cortexm/exception_handlers.c ****             trace_write (p, strlen (p));
 297:../system/src/cortexm/exception_handlers.c ****           }
 298:../system/src/cortexm/exception_handlers.c **** #endif
 299:../system/src/cortexm/exception_handlers.c ****           // Register R0 is corrupted.
 300:../system/src/cortexm/exception_handlers.c ****           break;
 301:../system/src/cortexm/exception_handlers.c **** 
 302:../system/src/cortexm/exception_handlers.c **** #endif
 303:../system/src/cortexm/exception_handlers.c **** 
 304:../system/src/cortexm/exception_handlers.c ****         default:
 305:../system/src/cortexm/exception_handlers.c ****           return 0;
 306:../system/src/cortexm/exception_handlers.c ****         }
 307:../system/src/cortexm/exception_handlers.c **** 
 308:../system/src/cortexm/exception_handlers.c ****       // Alter the PC to make the exception returns to
 309:../system/src/cortexm/exception_handlers.c ****       // the instruction after the faulty BKPT.
 310:../system/src/cortexm/exception_handlers.c ****       frame->pc += 2;
 311:../system/src/cortexm/exception_handlers.c ****       return 1;
 312:../system/src/cortexm/exception_handlers.c ****     }
 313:../system/src/cortexm/exception_handlers.c ****   return 0;
 314:../system/src/cortexm/exception_handlers.c **** }
 315:../system/src/cortexm/exception_handlers.c **** 
 316:../system/src/cortexm/exception_handlers.c **** #endif
 317:../system/src/cortexm/exception_handlers.c **** 
 318:../system/src/cortexm/exception_handlers.c **** // Hard Fault handler wrapper in assembly.
 319:../system/src/cortexm/exception_handlers.c **** // It extracts the location of stack frame and passes it to handler
 320:../system/src/cortexm/exception_handlers.c **** // in C as a pointer. We also pass the LR value as second
 321:../system/src/cortexm/exception_handlers.c **** // parameter.
 322:../system/src/cortexm/exception_handlers.c **** // (Based on Joseph Yiu's, The Definitive Guide to ARM Cortex-M3 and
 323:../system/src/cortexm/exception_handlers.c **** // Cortex-M4 Processors, Third Edition, Chap. 12.8, page 402).
 324:../system/src/cortexm/exception_handlers.c **** 
 325:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,naked))
 326:../system/src/cortexm/exception_handlers.c **** HardFault_Handler (void)
 327:../system/src/cortexm/exception_handlers.c **** {
 302              		.loc 3 327 0
 303              		.cfi_startproc
 304              		@ Naked Function: prologue and epilogue provided by programmer.
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 328:../system/src/cortexm/exception_handlers.c ****   asm volatile(
 307              		.loc 3 328 0
 308              		.syntax unified
 309              	@ 328 "../system/src/cortexm/exception_handlers.c" 1
 310 000a 1EF0040F 		 tst lr,#4       
 311 000e 0CBF     	 ite eq          
 312 0010 EFF30880 	 mrseq r0,msp    
 313 0014 EFF30980 	 mrsne r0,psp    
 314 0018 7146     	 mov r1,lr       
 315 001a 434A     	 ldr r2,=HardFault_Handler_C 
 316 001c 1047     	 bx r2
 317              	@ 0 "" 2
 329:../system/src/cortexm/exception_handlers.c ****       " tst lr,#4       \n"
 330:../system/src/cortexm/exception_handlers.c ****       " ite eq          \n"
 331:../system/src/cortexm/exception_handlers.c ****       " mrseq r0,msp    \n"
 332:../system/src/cortexm/exception_handlers.c ****       " mrsne r0,psp    \n"
 333:../system/src/cortexm/exception_handlers.c ****       " mov r1,lr       \n"
 334:../system/src/cortexm/exception_handlers.c ****       " ldr r2,=HardFault_Handler_C \n"
 335:../system/src/cortexm/exception_handlers.c ****       " bx r2"
 336:../system/src/cortexm/exception_handlers.c **** 
 337:../system/src/cortexm/exception_handlers.c ****       : /* Outputs */
 338:../system/src/cortexm/exception_handlers.c ****       : /* Inputs */
 339:../system/src/cortexm/exception_handlers.c ****       : /* Clobbers */
 340:../system/src/cortexm/exception_handlers.c ****   );
 341:../system/src/cortexm/exception_handlers.c **** }
 318              		.loc 3 341 0
 319              		.thumb
 320              		.syntax unified
 321              		.cfi_endproc
 322              	.LFE68:
 324              		.align	1
 325              		.weak	HardFault_Handler_C
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 329              		.fpu softvfp
 331              	HardFault_Handler_C:
 332              	.LFB69:
 342:../system/src/cortexm/exception_handlers.c **** 
 343:../system/src/cortexm/exception_handlers.c **** uint8_t hard_faults = 0;
 344:../system/src/cortexm/exception_handlers.c **** 
 345:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,used,naked))
 346:../system/src/cortexm/exception_handlers.c **** HardFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
 347:../system/src/cortexm/exception_handlers.c ****                      uint32_t lr __attribute__((unused)))
 348:../system/src/cortexm/exception_handlers.c **** {
 333              		.loc 3 348 0
 334              		.cfi_startproc
 335              		@ Naked Function: prologue and epilogue provided by programmer.
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 0, uses_anonymous_args = 0
 338              	.LVL23:
 349:../system/src/cortexm/exception_handlers.c **** 	hard_faults = 0;
 339              		.loc 3 349 0
 340 001e 144E     		ldr	r6, .L19
 341 0020 0025     		movs	r5, #0
 342 0022 3570     		strb	r5, [r6]
 350:../system/src/cortexm/exception_handlers.c **** 
 351:../system/src/cortexm/exception_handlers.c **** 	  // enable access to BKP registers
 352:../system/src/cortexm/exception_handlers.c **** 	  RCC->APB1ENR |= (RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN);
 343              		.loc 3 352 0
 344 0024 134C     		ldr	r4, .L19+4
 345 0026 E369     		ldr	r3, [r4, #28]
 346 0028 43F0C053 		orr	r3, r3, #402653184
 347 002c E361     		str	r3, [r4, #28]
 353:../system/src/cortexm/exception_handlers.c **** 	  PWR->CR |= PWR_CR_DBP;
 348              		.loc 3 353 0
 349 002e 1249     		ldr	r1, .L19+8
 350              	.LVL24:
 351 0030 0B68     		ldr	r3, [r1]
 352 0032 43F48073 		orr	r3, r3, #256
 353 0036 0B60     		str	r3, [r1]
 354:../system/src/cortexm/exception_handlers.c **** 
 355:../system/src/cortexm/exception_handlers.c **** 	  // read current number of hard faults
 356:../system/src/cortexm/exception_handlers.c **** 	  hard_faults = (uint8_t)((BKP->DR2 & 0xFF00) >> 8);
 354              		.loc 3 356 0
 355 0038 104B     		ldr	r3, .L19+12
 356 003a 1A89     		ldrh	r2, [r3, #8]
 357 003c 120A     		lsrs	r2, r2, #8
 357:../system/src/cortexm/exception_handlers.c **** 
 358:../system/src/cortexm/exception_handlers.c **** 	  // increase hard faults counter
 359:../system/src/cortexm/exception_handlers.c **** 	  hard_faults++;
 358              		.loc 3 359 0
 359 003e 0132     		adds	r2, r2, #1
 360 0040 D2B2     		uxtb	r2, r2
 361 0042 3270     		strb	r2, [r6]
 360:../system/src/cortexm/exception_handlers.c **** 
 361:../system/src/cortexm/exception_handlers.c **** 	  // erasing old value from backup registers
 362:../system/src/cortexm/exception_handlers.c **** 	  BKP->DR2 &= (0xFFFF ^ 0xFF00);
 362              		.loc 3 362 0
 363 0044 1A89     		ldrh	r2, [r3, #8]
 364 0046 D2B2     		uxtb	r2, r2
 365 0048 1A81     		strh	r2, [r3, #8]	@ movhi
 363:../system/src/cortexm/exception_handlers.c **** 
 364:../system/src/cortexm/exception_handlers.c **** 	  // storing increased value
 365:../system/src/cortexm/exception_handlers.c **** 	  BKP->DR2 |= (hard_faults << 16);
 366              		.loc 3 365 0
 367 004a 1A89     		ldrh	r2, [r3, #8]
 368 004c 1A81     		strh	r2, [r3, #8]	@ movhi
 366:../system/src/cortexm/exception_handlers.c **** 
 367:../system/src/cortexm/exception_handlers.c **** 	  // storing trace informations
 368:../system/src/cortexm/exception_handlers.c **** 	  BKP->DR3 = (uint16_t)(frame->pc & 0xFFFF);
 369              		.loc 3 368 0
 370 004e 028B     		ldrh	r2, [r0, #24]
 371 0050 9A81     		strh	r2, [r3, #12]	@ movhi
 369:../system/src/cortexm/exception_handlers.c **** 	  BKP->DR4 = (uint16_t)(frame->pc & 0xFFFF0000) >> 16;
 372              		.loc 3 369 0
 373 0052 1D82     		strh	r5, [r3, #16]	@ movhi
 370:../system/src/cortexm/exception_handlers.c **** 	  BKP->DR4 = (uint16_t)(frame->lr & 0xFFFF);
 374              		.loc 3 370 0
 375 0054 828A     		ldrh	r2, [r0, #20]
 376 0056 1A82     		strh	r2, [r3, #16]	@ movhi
 371:../system/src/cortexm/exception_handlers.c **** 	  BKP->DR5 = (uint16_t)(frame->lr & 0xFFFF0000) >> 16;
 377              		.loc 3 371 0
 378 0058 9D82     		strh	r5, [r3, #20]	@ movhi
 372:../system/src/cortexm/exception_handlers.c **** 
 373:../system/src/cortexm/exception_handlers.c **** 	  // disabling access to BKP registers
 374:../system/src/cortexm/exception_handlers.c **** 	  RCC->APB1ENR &= (0xFFFFFFFF ^ (RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN));
 379              		.loc 3 374 0
 380 005a E369     		ldr	r3, [r4, #28]
 381 005c 23F0C053 		bic	r3, r3, #402653184
 382 0060 E361     		str	r3, [r4, #28]
 375:../system/src/cortexm/exception_handlers.c **** 	  PWR->CR &= (0xFFFFFFFF ^ PWR_CR_DBP);
 383              		.loc 3 375 0
 384 0062 0B68     		ldr	r3, [r1]
 385 0064 23F48073 		bic	r3, r3, #256
 386 0068 0B60     		str	r3, [r1]
 376:../system/src/cortexm/exception_handlers.c **** 
 377:../system/src/cortexm/exception_handlers.c **** 	  NVIC_SystemReset();
 387              		.loc 3 377 0
 388 006a FFF7FEFF 		bl	NVIC_SystemReset
 389              	.LVL25:
 390              	.L20:
 391 006e 00BF     		.align	2
 392              	.L19:
 393 0070 00000000 		.word	.LANCHOR0
 394 0074 00100240 		.word	1073876992
 395 0078 00700040 		.word	1073770496
 396 007c 006C0040 		.word	1073769472
 397              		.cfi_endproc
 398              	.LFE69:
 400              		.align	1
 401              		.weak	MemManage_Handler
 402              		.syntax unified
 403              		.thumb
 404              		.thumb_func
 405              		.fpu softvfp
 407              	MemManage_Handler:
 408              	.LFB70:
 378:../system/src/cortexm/exception_handlers.c **** 
 379:../system/src/cortexm/exception_handlers.c **** 
 380:../system/src/cortexm/exception_handlers.c **** #if defined(TRACE)
 381:../system/src/cortexm/exception_handlers.c ****   uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 382:../system/src/cortexm/exception_handlers.c ****   uint32_t bfar = SCB->BFAR; // Bus Fault Address
 383:../system/src/cortexm/exception_handlers.c ****   uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 384:../system/src/cortexm/exception_handlers.c **** #endif
 385:../system/src/cortexm/exception_handlers.c **** 
 386:../system/src/cortexm/exception_handlers.c **** #if defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEMIHOSTING_STDOUT) || defined(OS_USE_TRACE
 387:../system/src/cortexm/exception_handlers.c **** 
 388:../system/src/cortexm/exception_handlers.c ****   // If the BKPT instruction is executed with C_DEBUGEN == 0 and MON_EN == 0,
 389:../system/src/cortexm/exception_handlers.c ****   // it will cause the processor to enter a HardFault exception, with DEBUGEVT
 390:../system/src/cortexm/exception_handlers.c ****   // in the Hard Fault Status register (HFSR) set to 1, and BKPT in the
 391:../system/src/cortexm/exception_handlers.c ****   // Debug Fault Status register (DFSR) also set to 1.
 392:../system/src/cortexm/exception_handlers.c **** 
 393:../system/src/cortexm/exception_handlers.c ****   if (((SCB->DFSR & SCB_DFSR_BKPT_Msk) != 0)
 394:../system/src/cortexm/exception_handlers.c ****       && ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0))
 395:../system/src/cortexm/exception_handlers.c ****     {
 396:../system/src/cortexm/exception_handlers.c ****       if (isSemihosting (frame, 0xBE00 + (AngelSWI & 0xFF)))
 397:../system/src/cortexm/exception_handlers.c ****         {
 398:../system/src/cortexm/exception_handlers.c ****           // Clear the exception cause in exception status.
 399:../system/src/cortexm/exception_handlers.c ****           SCB->HFSR = SCB_HFSR_DEBUGEVT_Msk;
 400:../system/src/cortexm/exception_handlers.c **** 
 401:../system/src/cortexm/exception_handlers.c ****           // Continue after the BKPT
 402:../system/src/cortexm/exception_handlers.c ****           return;
 403:../system/src/cortexm/exception_handlers.c ****         }
 404:../system/src/cortexm/exception_handlers.c ****     }
 405:../system/src/cortexm/exception_handlers.c **** 
 406:../system/src/cortexm/exception_handlers.c **** #endif
 407:../system/src/cortexm/exception_handlers.c **** 
 408:../system/src/cortexm/exception_handlers.c **** #if defined(TRACE)
 409:../system/src/cortexm/exception_handlers.c ****   trace_printf ("[HardFault]\n");
 410:../system/src/cortexm/exception_handlers.c ****   dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 411:../system/src/cortexm/exception_handlers.c **** #endif // defined(TRACE)
 412:../system/src/cortexm/exception_handlers.c **** 
 413:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 414:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 415:../system/src/cortexm/exception_handlers.c **** #endif
 416:../system/src/cortexm/exception_handlers.c **** 
 417:../system/src/cortexm/exception_handlers.c ****   while (1)
 418:../system/src/cortexm/exception_handlers.c ****     {
 419:../system/src/cortexm/exception_handlers.c ****     }
 420:../system/src/cortexm/exception_handlers.c **** }
 421:../system/src/cortexm/exception_handlers.c **** 
 422:../system/src/cortexm/exception_handlers.c **** #endif // defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
 423:../system/src/cortexm/exception_handlers.c **** 
 424:../system/src/cortexm/exception_handlers.c **** 
 425:../system/src/cortexm/exception_handlers.c **** #if defined(__ARM_ARCH_6M__)
 426:../system/src/cortexm/exception_handlers.c **** 
 427:../system/src/cortexm/exception_handlers.c **** // Hard Fault handler wrapper in assembly.
 428:../system/src/cortexm/exception_handlers.c **** // It extracts the location of stack frame and passes it to handler
 429:../system/src/cortexm/exception_handlers.c **** // in C as a pointer. We also pass the LR value as second
 430:../system/src/cortexm/exception_handlers.c **** // parameter.
 431:../system/src/cortexm/exception_handlers.c **** // (Based on Joseph Yiu's, The Definitive Guide to ARM Cortex-M0
 432:../system/src/cortexm/exception_handlers.c **** // First Edition, Chap. 12.8, page 402).
 433:../system/src/cortexm/exception_handlers.c **** 
 434:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,naked))
 435:../system/src/cortexm/exception_handlers.c **** HardFault_Handler (void)
 436:../system/src/cortexm/exception_handlers.c **** {
 437:../system/src/cortexm/exception_handlers.c ****   asm volatile(
 438:../system/src/cortexm/exception_handlers.c ****       " movs r0,#4      \n"
 439:../system/src/cortexm/exception_handlers.c ****       " mov r1,lr       \n"
 440:../system/src/cortexm/exception_handlers.c ****       " tst r0,r1       \n"
 441:../system/src/cortexm/exception_handlers.c ****       " beq 1f          \n"
 442:../system/src/cortexm/exception_handlers.c ****       " mrs r0,psp      \n"
 443:../system/src/cortexm/exception_handlers.c ****       " b   2f          \n"
 444:../system/src/cortexm/exception_handlers.c ****       "1:               \n"
 445:../system/src/cortexm/exception_handlers.c ****       " mrs r0,msp      \n"
 446:../system/src/cortexm/exception_handlers.c ****       "2:"
 447:../system/src/cortexm/exception_handlers.c ****       " mov r1,lr       \n"
 448:../system/src/cortexm/exception_handlers.c ****       " ldr r2,=HardFault_Handler_C \n"
 449:../system/src/cortexm/exception_handlers.c ****       " bx r2"
 450:../system/src/cortexm/exception_handlers.c **** 
 451:../system/src/cortexm/exception_handlers.c ****       : /* Outputs */
 452:../system/src/cortexm/exception_handlers.c ****       : /* Inputs */
 453:../system/src/cortexm/exception_handlers.c ****       : /* Clobbers */
 454:../system/src/cortexm/exception_handlers.c ****   );
 455:../system/src/cortexm/exception_handlers.c **** }
 456:../system/src/cortexm/exception_handlers.c **** 
 457:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,used))
 458:../system/src/cortexm/exception_handlers.c **** HardFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
 459:../system/src/cortexm/exception_handlers.c ****                      uint32_t lr __attribute__((unused)))
 460:../system/src/cortexm/exception_handlers.c **** {
 461:../system/src/cortexm/exception_handlers.c ****   // There is no semihosting support for Cortex-M0, since on ARMv6-M
 462:../system/src/cortexm/exception_handlers.c ****   // faults are fatal and it is not possible to return from the handler.
 463:../system/src/cortexm/exception_handlers.c **** 
 464:../system/src/cortexm/exception_handlers.c **** #if defined(TRACE)
 465:../system/src/cortexm/exception_handlers.c ****   trace_printf ("[HardFault]\n");
 466:../system/src/cortexm/exception_handlers.c ****   dumpExceptionStack (frame, lr);
 467:../system/src/cortexm/exception_handlers.c **** #endif // defined(TRACE)
 468:../system/src/cortexm/exception_handlers.c **** 
 469:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 470:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 471:../system/src/cortexm/exception_handlers.c **** #endif
 472:../system/src/cortexm/exception_handlers.c ****   while (1)
 473:../system/src/cortexm/exception_handlers.c ****     {
 474:../system/src/cortexm/exception_handlers.c ****     }
 475:../system/src/cortexm/exception_handlers.c **** }
 476:../system/src/cortexm/exception_handlers.c **** 
 477:../system/src/cortexm/exception_handlers.c **** #endif // defined(__ARM_ARCH_6M__)
 478:../system/src/cortexm/exception_handlers.c **** 
 479:../system/src/cortexm/exception_handlers.c **** 
 480:../system/src/cortexm/exception_handlers.c **** #if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
 481:../system/src/cortexm/exception_handlers.c **** 
 482:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak))
 483:../system/src/cortexm/exception_handlers.c **** MemManage_Handler (void)
 484:../system/src/cortexm/exception_handlers.c **** {
 409              		.loc 3 484 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413              		@ link register save eliminated.
 485:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 486:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 414              		.loc 3 486 0
 415              		.syntax unified
 416              	@ 486 "../system/src/cortexm/exception_handlers.c" 1
 417 0080 00BE     		bkpt 0
 418              	@ 0 "" 2
 419              		.thumb
 420              		.syntax unified
 421              	.L22:
 422 0082 FEE7     		b	.L22
 423              		.cfi_endproc
 424              	.LFE70:
 426              		.align	1
 427              		.weak	BusFault_Handler
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 431              		.fpu softvfp
 433              	BusFault_Handler:
 434              	.LFB71:
 487:../system/src/cortexm/exception_handlers.c **** #endif
 488:../system/src/cortexm/exception_handlers.c ****   while (1)
 489:../system/src/cortexm/exception_handlers.c ****     {
 490:../system/src/cortexm/exception_handlers.c ****     }
 491:../system/src/cortexm/exception_handlers.c **** }
 492:../system/src/cortexm/exception_handlers.c **** 
 493:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,naked))
 494:../system/src/cortexm/exception_handlers.c **** BusFault_Handler (void)
 495:../system/src/cortexm/exception_handlers.c **** {
 435              		.loc 3 495 0
 436              		.cfi_startproc
 437              		@ Naked Function: prologue and epilogue provided by programmer.
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 496:../system/src/cortexm/exception_handlers.c ****   asm volatile(
 440              		.loc 3 496 0
 441              		.syntax unified
 442              	@ 496 "../system/src/cortexm/exception_handlers.c" 1
 443 0084 1EF0040F 		 tst lr,#4       
 444 0088 0CBF     	 ite eq          
 445 008a EFF30880 	 mrseq r0,msp    
 446 008e EFF30980 	 mrsne r0,psp    
 447 0092 7146     	 mov r1,lr       
 448 0094 254A     	 ldr r2,=BusFault_Handler_C 
 449 0096 1047     	 bx r2
 450              	@ 0 "" 2
 497:../system/src/cortexm/exception_handlers.c ****       " tst lr,#4       \n"
 498:../system/src/cortexm/exception_handlers.c ****       " ite eq          \n"
 499:../system/src/cortexm/exception_handlers.c ****       " mrseq r0,msp    \n"
 500:../system/src/cortexm/exception_handlers.c ****       " mrsne r0,psp    \n"
 501:../system/src/cortexm/exception_handlers.c ****       " mov r1,lr       \n"
 502:../system/src/cortexm/exception_handlers.c ****       " ldr r2,=BusFault_Handler_C \n"
 503:../system/src/cortexm/exception_handlers.c ****       " bx r2"
 504:../system/src/cortexm/exception_handlers.c **** 
 505:../system/src/cortexm/exception_handlers.c ****       : /* Outputs */
 506:../system/src/cortexm/exception_handlers.c ****       : /* Inputs */
 507:../system/src/cortexm/exception_handlers.c ****       : /* Clobbers */
 508:../system/src/cortexm/exception_handlers.c ****   );
 509:../system/src/cortexm/exception_handlers.c **** }
 451              		.loc 3 509 0
 452              		.thumb
 453              		.syntax unified
 454              		.cfi_endproc
 455              	.LFE71:
 457              		.align	1
 458              		.weak	BusFault_Handler_C
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu softvfp
 464              	BusFault_Handler_C:
 465              	.LFB72:
 510:../system/src/cortexm/exception_handlers.c **** 
 511:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,used))
 512:../system/src/cortexm/exception_handlers.c **** BusFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
 513:../system/src/cortexm/exception_handlers.c ****                     uint32_t lr __attribute__((unused)))
 514:../system/src/cortexm/exception_handlers.c **** {
 466              		.loc 3 514 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470              	.LVL26:
 471 0098 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 472              		.cfi_def_cfa_offset 24
 473              		.cfi_offset 4, -24
 474              		.cfi_offset 5, -20
 475              		.cfi_offset 6, -16
 476              		.cfi_offset 7, -12
 477              		.cfi_offset 8, -8
 478              		.cfi_offset 14, -4
 479 009c 82B0     		sub	sp, sp, #8
 480              		.cfi_def_cfa_offset 32
 481 009e 0446     		mov	r4, r0
 482 00a0 8846     		mov	r8, r1
 515:../system/src/cortexm/exception_handlers.c **** #if defined(TRACE)
 516:../system/src/cortexm/exception_handlers.c ****   uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 483              		.loc 3 516 0
 484 00a2 094B     		ldr	r3, .L26
 485 00a4 5E6B     		ldr	r6, [r3, #52]
 486              	.LVL27:
 517:../system/src/cortexm/exception_handlers.c ****   uint32_t bfar = SCB->BFAR; // Bus Fault Address
 487              		.loc 3 517 0
 488 00a6 9F6B     		ldr	r7, [r3, #56]
 489              	.LVL28:
 518:../system/src/cortexm/exception_handlers.c ****   uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 490              		.loc 3 518 0
 491 00a8 9D6A     		ldr	r5, [r3, #40]
 492              	.LVL29:
 519:../system/src/cortexm/exception_handlers.c **** 
 520:../system/src/cortexm/exception_handlers.c ****   trace_printf ("[BusFault]\n");
 493              		.loc 3 520 0
 494 00aa 0848     		ldr	r0, .L26+4
 495              	.LVL30:
 496 00ac FFF7FEFF 		bl	trace_printf
 497              	.LVL31:
 521:../system/src/cortexm/exception_handlers.c ****   dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 498              		.loc 3 521 0
 499 00b0 CDF80080 		str	r8, [sp]
 500 00b4 3B46     		mov	r3, r7
 501 00b6 3246     		mov	r2, r6
 502 00b8 2946     		mov	r1, r5
 503 00ba 2046     		mov	r0, r4
 504 00bc FFF7FEFF 		bl	dumpExceptionStack
 505              	.LVL32:
 522:../system/src/cortexm/exception_handlers.c **** #endif // defined(TRACE)
 523:../system/src/cortexm/exception_handlers.c **** 
 524:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 525:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 506              		.loc 3 525 0
 507              		.syntax unified
 508              	@ 525 "../system/src/cortexm/exception_handlers.c" 1
 509 00c0 00BE     		bkpt 0
 510              	@ 0 "" 2
 526:../system/src/cortexm/exception_handlers.c **** #endif
 527:../system/src/cortexm/exception_handlers.c **** 
 528:../system/src/cortexm/exception_handlers.c ****   NVIC_SystemReset();
 511              		.loc 3 528 0
 512              		.thumb
 513              		.syntax unified
 514 00c2 FFF7FEFF 		bl	NVIC_SystemReset
 515              	.LVL33:
 516              	.L27:
 517 00c6 00BF     		.align	2
 518              	.L26:
 519 00c8 00ED00E0 		.word	-536810240
 520 00cc 00000000 		.word	.LC18
 521              		.cfi_endproc
 522              	.LFE72:
 524              		.align	1
 525              		.weak	UsageFault_Handler
 526              		.syntax unified
 527              		.thumb
 528              		.thumb_func
 529              		.fpu softvfp
 531              	UsageFault_Handler:
 532              	.LFB73:
 529:../system/src/cortexm/exception_handlers.c **** 
 530:../system/src/cortexm/exception_handlers.c ****   while (1)
 531:../system/src/cortexm/exception_handlers.c ****     {
 532:../system/src/cortexm/exception_handlers.c ****     }
 533:../system/src/cortexm/exception_handlers.c **** }
 534:../system/src/cortexm/exception_handlers.c **** 
 535:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,naked))
 536:../system/src/cortexm/exception_handlers.c **** UsageFault_Handler (void)
 537:../system/src/cortexm/exception_handlers.c **** {
 533              		.loc 3 537 0
 534              		.cfi_startproc
 535              		@ Naked Function: prologue and epilogue provided by programmer.
 536              		@ args = 0, pretend = 0, frame = 0
 537              		@ frame_needed = 0, uses_anonymous_args = 0
 538:../system/src/cortexm/exception_handlers.c ****   asm volatile(
 538              		.loc 3 538 0
 539              		.syntax unified
 540              	@ 538 "../system/src/cortexm/exception_handlers.c" 1
 541 00d0 1EF0040F 		 tst lr,#4       
 542 00d4 0CBF     	 ite eq          
 543 00d6 EFF30880 	 mrseq r0,msp    
 544 00da EFF30980 	 mrsne r0,psp    
 545 00de 7146     	 mov r1,lr       
 546 00e0 134A     	 ldr r2,=UsageFault_Handler_C 
 547 00e2 1047     	 bx r2
 548              	@ 0 "" 2
 539:../system/src/cortexm/exception_handlers.c ****       " tst lr,#4       \n"
 540:../system/src/cortexm/exception_handlers.c ****       " ite eq          \n"
 541:../system/src/cortexm/exception_handlers.c ****       " mrseq r0,msp    \n"
 542:../system/src/cortexm/exception_handlers.c ****       " mrsne r0,psp    \n"
 543:../system/src/cortexm/exception_handlers.c ****       " mov r1,lr       \n"
 544:../system/src/cortexm/exception_handlers.c ****       " ldr r2,=UsageFault_Handler_C \n"
 545:../system/src/cortexm/exception_handlers.c ****       " bx r2"
 546:../system/src/cortexm/exception_handlers.c **** 
 547:../system/src/cortexm/exception_handlers.c ****       : /* Outputs */
 548:../system/src/cortexm/exception_handlers.c ****       : /* Inputs */
 549:../system/src/cortexm/exception_handlers.c ****       : /* Clobbers */
 550:../system/src/cortexm/exception_handlers.c ****   );
 551:../system/src/cortexm/exception_handlers.c **** }
 549              		.loc 3 551 0
 550              		.thumb
 551              		.syntax unified
 552              		.cfi_endproc
 553              	.LFE73:
 555              		.align	1
 556              		.weak	UsageFault_Handler_C
 557              		.syntax unified
 558              		.thumb
 559              		.thumb_func
 560              		.fpu softvfp
 562              	UsageFault_Handler_C:
 563              	.LFB74:
 552:../system/src/cortexm/exception_handlers.c **** 
 553:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak,used))
 554:../system/src/cortexm/exception_handlers.c **** UsageFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
 555:../system/src/cortexm/exception_handlers.c ****                       uint32_t lr __attribute__((unused)))
 556:../system/src/cortexm/exception_handlers.c **** {
 564              		.loc 3 556 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568              	.LVL34:
 569 00e4 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 570              		.cfi_def_cfa_offset 24
 571              		.cfi_offset 4, -24
 572              		.cfi_offset 5, -20
 573              		.cfi_offset 6, -16
 574              		.cfi_offset 7, -12
 575              		.cfi_offset 8, -8
 576              		.cfi_offset 14, -4
 577 00e8 82B0     		sub	sp, sp, #8
 578              		.cfi_def_cfa_offset 32
 579 00ea 0446     		mov	r4, r0
 580 00ec 8846     		mov	r8, r1
 557:../system/src/cortexm/exception_handlers.c **** #if defined(TRACE)
 558:../system/src/cortexm/exception_handlers.c ****   uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 581              		.loc 3 558 0
 582 00ee 084B     		ldr	r3, .L32
 583 00f0 5E6B     		ldr	r6, [r3, #52]
 584              	.LVL35:
 559:../system/src/cortexm/exception_handlers.c ****   uint32_t bfar = SCB->BFAR; // Bus Fault Address
 585              		.loc 3 559 0
 586 00f2 9F6B     		ldr	r7, [r3, #56]
 587              	.LVL36:
 560:../system/src/cortexm/exception_handlers.c ****   uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 588              		.loc 3 560 0
 589 00f4 9D6A     		ldr	r5, [r3, #40]
 590              	.LVL37:
 561:../system/src/cortexm/exception_handlers.c **** #endif
 562:../system/src/cortexm/exception_handlers.c **** 
 563:../system/src/cortexm/exception_handlers.c **** #if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
 564:../system/src/cortexm/exception_handlers.c **** 
 565:../system/src/cortexm/exception_handlers.c ****   if ((cfsr & (1UL << 16)) != 0) // UNDEFINSTR
 566:../system/src/cortexm/exception_handlers.c ****     {
 567:../system/src/cortexm/exception_handlers.c ****       // For testing purposes, instead of BKPT use 'setend be'.
 568:../system/src/cortexm/exception_handlers.c ****       if (isSemihosting (frame, AngelSWITestFaultOpCode))
 569:../system/src/cortexm/exception_handlers.c ****         {
 570:../system/src/cortexm/exception_handlers.c ****           return;
 571:../system/src/cortexm/exception_handlers.c ****         }
 572:../system/src/cortexm/exception_handlers.c ****     }
 573:../system/src/cortexm/exception_handlers.c **** 
 574:../system/src/cortexm/exception_handlers.c **** #endif
 575:../system/src/cortexm/exception_handlers.c **** 
 576:../system/src/cortexm/exception_handlers.c **** #if defined(TRACE)
 577:../system/src/cortexm/exception_handlers.c ****   trace_printf ("[UsageFault]\n");
 591              		.loc 3 577 0
 592 00f6 0748     		ldr	r0, .L32+4
 593              	.LVL38:
 594 00f8 FFF7FEFF 		bl	trace_printf
 595              	.LVL39:
 578:../system/src/cortexm/exception_handlers.c ****   dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 596              		.loc 3 578 0
 597 00fc CDF80080 		str	r8, [sp]
 598 0100 3B46     		mov	r3, r7
 599 0102 3246     		mov	r2, r6
 600 0104 2946     		mov	r1, r5
 601 0106 2046     		mov	r0, r4
 602 0108 FFF7FEFF 		bl	dumpExceptionStack
 603              	.LVL40:
 579:../system/src/cortexm/exception_handlers.c **** #endif // defined(TRACE)
 580:../system/src/cortexm/exception_handlers.c **** 
 581:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 582:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 604              		.loc 3 582 0
 605              		.syntax unified
 606              	@ 582 "../system/src/cortexm/exception_handlers.c" 1
 607 010c 00BE     		bkpt 0
 608              	@ 0 "" 2
 609              		.thumb
 610              		.syntax unified
 611              	.L30:
 612 010e FEE7     		b	.L30
 613              	.L33:
 614              		.align	2
 615              	.L32:
 616 0110 00ED00E0 		.word	-536810240
 617 0114 0C000000 		.word	.LC19
 618              		.cfi_endproc
 619              	.LFE74:
 621              		.align	1
 622              		.weak	SVC_Handler
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 626              		.fpu softvfp
 628              	SVC_Handler:
 629              	.LFB75:
 583:../system/src/cortexm/exception_handlers.c **** #endif
 584:../system/src/cortexm/exception_handlers.c ****   while (1)
 585:../system/src/cortexm/exception_handlers.c ****     {
 586:../system/src/cortexm/exception_handlers.c ****     }
 587:../system/src/cortexm/exception_handlers.c **** }
 588:../system/src/cortexm/exception_handlers.c **** 
 589:../system/src/cortexm/exception_handlers.c **** #endif
 590:../system/src/cortexm/exception_handlers.c **** 
 591:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak))
 592:../system/src/cortexm/exception_handlers.c **** SVC_Handler (void)
 593:../system/src/cortexm/exception_handlers.c **** {
 630              		.loc 3 593 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 0
 633              		@ frame_needed = 0, uses_anonymous_args = 0
 634              		@ link register save eliminated.
 594:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 595:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 635              		.loc 3 595 0
 636              		.syntax unified
 637              	@ 595 "../system/src/cortexm/exception_handlers.c" 1
 638 0118 00BE     		bkpt 0
 639              	@ 0 "" 2
 640              		.thumb
 641              		.syntax unified
 642              	.L35:
 643 011a FEE7     		b	.L35
 644              		.cfi_endproc
 645              	.LFE75:
 647              		.align	1
 648              		.weak	DebugMon_Handler
 649              		.syntax unified
 650              		.thumb
 651              		.thumb_func
 652              		.fpu softvfp
 654              	DebugMon_Handler:
 655              	.LFB76:
 596:../system/src/cortexm/exception_handlers.c **** #endif
 597:../system/src/cortexm/exception_handlers.c ****   while (1)
 598:../system/src/cortexm/exception_handlers.c ****     {
 599:../system/src/cortexm/exception_handlers.c ****     }
 600:../system/src/cortexm/exception_handlers.c **** }
 601:../system/src/cortexm/exception_handlers.c **** 
 602:../system/src/cortexm/exception_handlers.c **** #if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
 603:../system/src/cortexm/exception_handlers.c **** 
 604:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak))
 605:../system/src/cortexm/exception_handlers.c **** DebugMon_Handler (void)
 606:../system/src/cortexm/exception_handlers.c **** {
 656              		.loc 3 606 0
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 0
 659              		@ frame_needed = 0, uses_anonymous_args = 0
 660              		@ link register save eliminated.
 607:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 608:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 661              		.loc 3 608 0
 662              		.syntax unified
 663              	@ 608 "../system/src/cortexm/exception_handlers.c" 1
 664 011c 00BE     		bkpt 0
 665              	@ 0 "" 2
 666              		.thumb
 667              		.syntax unified
 668              	.L37:
 669 011e FEE7     		b	.L37
 670              		.cfi_endproc
 671              	.LFE76:
 673              		.align	1
 674              		.weak	PendSV_Handler
 675              		.syntax unified
 676              		.thumb
 677              		.thumb_func
 678              		.fpu softvfp
 680              	PendSV_Handler:
 681              	.LFB77:
 609:../system/src/cortexm/exception_handlers.c **** #endif
 610:../system/src/cortexm/exception_handlers.c ****   while (1)
 611:../system/src/cortexm/exception_handlers.c ****     {
 612:../system/src/cortexm/exception_handlers.c ****     }
 613:../system/src/cortexm/exception_handlers.c **** }
 614:../system/src/cortexm/exception_handlers.c **** 
 615:../system/src/cortexm/exception_handlers.c **** #endif
 616:../system/src/cortexm/exception_handlers.c **** 
 617:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak))
 618:../system/src/cortexm/exception_handlers.c **** PendSV_Handler (void)
 619:../system/src/cortexm/exception_handlers.c **** {
 682              		.loc 3 619 0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 0
 685              		@ frame_needed = 0, uses_anonymous_args = 0
 686              		@ link register save eliminated.
 620:../system/src/cortexm/exception_handlers.c **** #if defined(DEBUG)
 621:../system/src/cortexm/exception_handlers.c ****   __DEBUG_BKPT();
 687              		.loc 3 621 0
 688              		.syntax unified
 689              	@ 621 "../system/src/cortexm/exception_handlers.c" 1
 690 0120 00BE     		bkpt 0
 691              	@ 0 "" 2
 692              		.thumb
 693              		.syntax unified
 694              	.L39:
 695 0122 FEE7     		b	.L39
 696              		.cfi_endproc
 697              	.LFE77:
 699              		.align	1
 700              		.weak	SysTick_Handler
 701              		.syntax unified
 702              		.thumb
 703              		.thumb_func
 704              		.fpu softvfp
 706              	SysTick_Handler:
 707              	.LFB78:
 622:../system/src/cortexm/exception_handlers.c **** #endif
 623:../system/src/cortexm/exception_handlers.c ****   while (1)
 624:../system/src/cortexm/exception_handlers.c ****     {
 625:../system/src/cortexm/exception_handlers.c ****     }
 626:../system/src/cortexm/exception_handlers.c **** }
 627:../system/src/cortexm/exception_handlers.c **** 
 628:../system/src/cortexm/exception_handlers.c **** void __attribute__ ((section(".after_vectors"),weak))
 629:../system/src/cortexm/exception_handlers.c **** SysTick_Handler (void)
 630:../system/src/cortexm/exception_handlers.c **** {
 708              		.loc 3 630 0
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 0
 711              		@ frame_needed = 0, uses_anonymous_args = 0
 712              		@ link register save eliminated.
 631:../system/src/cortexm/exception_handlers.c ****   // DO NOT loop, just return.
 632:../system/src/cortexm/exception_handlers.c ****   // Useful in case someone (like STM HAL) inadvertently enables SysTick.
 633:../system/src/cortexm/exception_handlers.c ****   ;
 634:../system/src/cortexm/exception_handlers.c **** }
 713              		.loc 3 634 0
 714 0124 7047     		bx	lr
 715              		.cfi_endproc
 716              	.LFE78:
 718              		.global	hard_faults
 719 0126 0000     		.section	.bss.hard_faults,"aw",%nobits
 720              		.set	.LANCHOR0,. + 0
 723              	hard_faults:
 724 0000 00       		.space	1
 725              		.section	.rodata.dumpExceptionStack.str1.4,"aMS",%progbits,1
 726              		.align	2
 727              	.LC0:
 728 0000 53746163 		.ascii	"Stack frame:\012\000"
 728      6B206672 
 728      616D653A 
 728      0A00
 729 000e 0000     		.space	2
 730              	.LC1:
 731 0010 20523020 		.ascii	" R0 =  %08X\012\000"
 731      3D202025 
 731      3038580A 
 731      00
 732 001d 000000   		.space	3
 733              	.LC2:
 734 0020 20523120 		.ascii	" R1 =  %08X\012\000"
 734      3D202025 
 734      3038580A 
 734      00
 735 002d 000000   		.space	3
 736              	.LC3:
 737 0030 20523220 		.ascii	" R2 =  %08X\012\000"
 737      3D202025 
 737      3038580A 
 737      00
 738 003d 000000   		.space	3
 739              	.LC4:
 740 0040 20523320 		.ascii	" R3 =  %08X\012\000"
 740      3D202025 
 740      3038580A 
 740      00
 741 004d 000000   		.space	3
 742              	.LC5:
 743 0050 20523132 		.ascii	" R12 = %08X\012\000"
 743      203D2025 
 743      3038580A 
 743      00
 744 005d 000000   		.space	3
 745              	.LC6:
 746 0060 204C5220 		.ascii	" LR =  %08X\012\000"
 746      3D202025 
 746      3038580A 
 746      00
 747 006d 000000   		.space	3
 748              	.LC7:
 749 0070 20504320 		.ascii	" PC =  %08X\012\000"
 749      3D202025 
 749      3038580A 
 749      00
 750 007d 000000   		.space	3
 751              	.LC8:
 752 0080 20505352 		.ascii	" PSR = %08X\012\000"
 752      203D2025 
 752      3038580A 
 752      00
 753 008d 000000   		.space	3
 754              	.LC9:
 755 0090 4653522F 		.ascii	"FSR/FAR:\012\000"
 755      4641523A 
 755      0A00
 756 009a 0000     		.space	2
 757              	.LC10:
 758 009c 20434653 		.ascii	" CFSR =  %08X\012\000"
 758      52203D20 
 758      20253038 
 758      580A00
 759 00ab 00       		.space	1
 760              	.LC11:
 761 00ac 20484653 		.ascii	" HFSR =  %08X\012\000"
 761      52203D20 
 761      20253038 
 761      580A00
 762 00bb 00       		.space	1
 763              	.LC12:
 764 00bc 20444653 		.ascii	" DFSR =  %08X\012\000"
 764      52203D20 
 764      20253038 
 764      580A00
 765 00cb 00       		.space	1
 766              	.LC13:
 767 00cc 20414653 		.ascii	" AFSR =  %08X\012\000"
 767      52203D20 
 767      20253038 
 767      580A00
 768 00db 00       		.space	1
 769              	.LC14:
 770 00dc 204D4D46 		.ascii	" MMFAR = %08X\012\000"
 770      4152203D 
 770      20253038 
 770      580A00
 771 00eb 00       		.space	1
 772              	.LC15:
 773 00ec 20424641 		.ascii	" BFAR =  %08X\012\000"
 773      52203D20 
 773      20253038 
 773      580A00
 774 00fb 00       		.space	1
 775              	.LC16:
 776 00fc 4D697363 		.ascii	"Misc\012\000"
 776      0A00
 777 0102 0000     		.space	2
 778              	.LC17:
 779 0104 204C522F 		.ascii	" LR/EXC_RETURN= %08X\012\000"
 779      4558435F 
 779      52455455 
 779      524E3D20 
 779      25303858 
 780              		.section	.rodata.str1.4,"aMS",%progbits,1
 781              		.align	2
 782              	.LC18:
 783 0000 5B427573 		.ascii	"[BusFault]\012\000"
 783      4661756C 
 783      745D0A00 
 784              	.LC19:
 785 000c 5B557361 		.ascii	"[UsageFault]\012\000"
 785      67654661 
 785      756C745D 
 785      0A00
 786              		.weak	_start
 787              		.text
 788              	.Letext0:
 789              		.file 4 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 790              		.file 5 "../system/include/cortexm/ExceptionHandlers.h"
 791              		.file 6 "../system/include/cmsis/system_stm32f10x.h"
 792              		.file 7 "../system/include/cmsis/stm32f10x.h"
 793              		.file 8 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 794              		.file 9 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 795              		.file 10 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/st
 796              		.file 11 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/unistd.h"
 797              		.file 12 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 798              		.file 13 "../system/include/diag/Trace.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 exception_handlers.c
     /tmp/cc1g9Uxt.s:16     .text.NVIC_SystemReset:0000000000000000 $t
     /tmp/cc1g9Uxt.s:22     .text.NVIC_SystemReset:0000000000000000 NVIC_SystemReset
     /tmp/cc1g9Uxt.s:76     .text.NVIC_SystemReset:000000000000001c $d
     /tmp/cc1g9Uxt.s:84     .after_vectors:0000000000000000 $t
     /tmp/cc1g9Uxt.s:91     .after_vectors:0000000000000000 Reset_Handler
     /tmp/cc1g9Uxt.s:116    .after_vectors:0000000000000006 NMI_Handler
     /tmp/cc1g9Uxt.s:136    .text.dumpExceptionStack:0000000000000000 $t
     /tmp/cc1g9Uxt.s:143    .text.dumpExceptionStack:0000000000000000 dumpExceptionStack
     /tmp/cc1g9Uxt.s:270    .text.dumpExceptionStack:00000000000000a8 $d
     /tmp/cc1g9Uxt.s:300    .after_vectors:000000000000000a HardFault_Handler
     /tmp/cc1g9Uxt.s:331    .after_vectors:000000000000001e HardFault_Handler_C
     /tmp/cc1g9Uxt.s:393    .after_vectors:0000000000000070 $d
     /tmp/cc1g9Uxt.s:400    .after_vectors:0000000000000080 $t
     /tmp/cc1g9Uxt.s:407    .after_vectors:0000000000000080 MemManage_Handler
     /tmp/cc1g9Uxt.s:433    .after_vectors:0000000000000084 BusFault_Handler
     /tmp/cc1g9Uxt.s:464    .after_vectors:0000000000000098 BusFault_Handler_C
     /tmp/cc1g9Uxt.s:519    .after_vectors:00000000000000c8 $d
     /tmp/cc1g9Uxt.s:524    .after_vectors:00000000000000d0 $t
     /tmp/cc1g9Uxt.s:531    .after_vectors:00000000000000d0 UsageFault_Handler
     /tmp/cc1g9Uxt.s:562    .after_vectors:00000000000000e4 UsageFault_Handler_C
     /tmp/cc1g9Uxt.s:616    .after_vectors:0000000000000110 $d
     /tmp/cc1g9Uxt.s:621    .after_vectors:0000000000000118 $t
     /tmp/cc1g9Uxt.s:628    .after_vectors:0000000000000118 SVC_Handler
     /tmp/cc1g9Uxt.s:654    .after_vectors:000000000000011c DebugMon_Handler
     /tmp/cc1g9Uxt.s:680    .after_vectors:0000000000000120 PendSV_Handler
     /tmp/cc1g9Uxt.s:706    .after_vectors:0000000000000124 SysTick_Handler
     /tmp/cc1g9Uxt.s:723    .bss.hard_faults:0000000000000000 hard_faults
     /tmp/cc1g9Uxt.s:724    .bss.hard_faults:0000000000000000 $d
     /tmp/cc1g9Uxt.s:726    .rodata.dumpExceptionStack.str1.4:0000000000000000 $d
     /tmp/cc1g9Uxt.s:781    .rodata.str1.4:0000000000000000 $d
     /tmp/cc1g9Uxt.s:719    .after_vectors:0000000000000126 $d
     /tmp/cc1g9Uxt.s:47552  .after_vectors:0000000000000128 $d
                           .group:0000000000000000 wm4.0.879aed89c359f5856fe69c61b3590d34
                           .group:0000000000000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:0000000000000000 wm4.stm32f10x.h.51.c58ea26c5150470d52680f0bbaa7049c
                           .group:0000000000000000 wm4.core_cm3.h.42.c33bb1302bf53de0580fb6140a46f2eb
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.67d2dcde6a14ff518eedc1d545d89a76
                           .group:0000000000000000 wm4.core_cm3.h.183.ecfd9c316d6f10b73648f6e579b02c8b
                           .group:0000000000000000 wm4.stm32f10x.h.522.a925aafc848b1f088438cf0e9b167b78
                           .group:0000000000000000 wm4.stm32f10x_adc.h.89.9f2b285fa0070185d48a05b61a05798c
                           .group:0000000000000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:0000000000000000 wm4.stm32f10x_can.h.25.e5e43f6bbc8fc7c8aa30ef2bc5610ced
                           .group:0000000000000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:0000000000000000 wm4.stm32f10x_dac.h.25.d946244edf026333094657d55ea894b8
                           .group:0000000000000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:0000000000000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:0000000000000000 wm4.stm32f10x_exti.h.25.f52c69aad7d1994be5b2c4e2b8f4c595
                           .group:0000000000000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:0000000000000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:0000000000000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:0000000000000000 wm4.stm32f10x_i2c.h.25.b124ac2c620f8ebddd92b6d95ca62176
                           .group:0000000000000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:0000000000000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:0000000000000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:0000000000000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:0000000000000000 wm4.stm32f10x_sdio.h.25.fb0db079f5c1412c40f359319f7c40b0
                           .group:0000000000000000 wm4.stm32f10x_spi.h.25.3f6dfa4abe177efb3c6f5a717c06b323
                           .group:0000000000000000 wm4.stm32f10x_tim.h.25.f709106ba77b314e6b070693f89f3c56
                           .group:0000000000000000 wm4.stm32f10x_usart.h.25.2e65e396239d0cc41fd0bf6faa2a32cb
                           .group:0000000000000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:0000000000000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:0000000000000000 wm4.stm32f10x.h.8317.9a8e476d96d33bb2df9a9ad0775bd4a7
                           .group:0000000000000000 wm4.semihosting.h.7.f965fb2195e730a75c170c23748db52a
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.newlib.h.18.5e5ca3429233af402d406a202f1fc1ac
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.unistd.h.9.2709ac388e61c5728907bf928c890ff7
                           .group:0000000000000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:0000000000000000 wm4.stddef.h.137.87f4223e19f53e7620a07a017dcd2e0a
                           .group:0000000000000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4.stddef.h.39.79ae3d254e9e71fbd4877f77aa50f4ea
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:0000000000000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:0000000000000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:0000000000000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:0000000000000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:0000000000000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:0000000000000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:0000000000000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:0000000000000000 wm4.unistd.h.170.da6e816043042c61475c2b1f58468b37
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e

UNDEFINED SYMBOLS
_start
trace_printf
