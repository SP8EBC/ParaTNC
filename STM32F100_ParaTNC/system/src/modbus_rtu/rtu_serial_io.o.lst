   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"rtu_serial_io.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.rtu_serial_callback,"ax",%progbits
  16              		.align	1
  17              		.global	rtu_serial_callback
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	rtu_serial_callback:
  24              	.LFB98:
  25              		.file 1 "../system/src/modbus_rtu/rtu_serial_io.c"
   1:../system/src/modbus_rtu/rtu_serial_io.c **** /*
   2:../system/src/modbus_rtu/rtu_serial_io.c ****  * rtu_serial_io.c
   3:../system/src/modbus_rtu/rtu_serial_io.c ****  *
   4:../system/src/modbus_rtu/rtu_serial_io.c ****  *  Created on: 27.08.2020
   5:../system/src/modbus_rtu/rtu_serial_io.c ****  *      Author: mateusz
   6:../system/src/modbus_rtu/rtu_serial_io.c ****  */
   7:../system/src/modbus_rtu/rtu_serial_io.c **** 
   8:../system/src/modbus_rtu/rtu_serial_io.c **** #include "modbus_rtu/rtu_configuration.h"
   9:../system/src/modbus_rtu/rtu_serial_io.c **** #include "modbus_rtu/rtu_serial_io.h"
  10:../system/src/modbus_rtu/rtu_serial_io.c **** #include "modbus_rtu/rtu_crc.h"
  11:../system/src/modbus_rtu/rtu_serial_io.c **** #include "modbus_rtu/rtu_parser.h"
  12:../system/src/modbus_rtu/rtu_serial_io.c **** #include "modbus_rtu/rtu_return_values.h"
  13:../system/src/modbus_rtu/rtu_serial_io.c **** #include "modbus_rtu/rtu_register_data_t.h"
  14:../system/src/modbus_rtu/rtu_serial_io.c **** #include "modbus_rtu/rtu_request.h"
  15:../system/src/modbus_rtu/rtu_serial_io.c **** 
  16:../system/src/modbus_rtu/rtu_serial_io.c **** #include "drivers/serial.h"
  17:../system/src/modbus_rtu/rtu_serial_io.c **** 
  18:../system/src/modbus_rtu/rtu_serial_io.c **** #include "main.h"
  19:../system/src/modbus_rtu/rtu_serial_io.c **** #include "rte_wx.h"
  20:../system/src/modbus_rtu/rtu_serial_io.c **** #include "rte_main.h"
  21:../system/src/modbus_rtu/rtu_serial_io.c **** #include "rte_rtu.h"
  22:../system/src/modbus_rtu/rtu_serial_io.c **** 
  23:../system/src/modbus_rtu/rtu_serial_io.c **** #include <string.h>
  24:../system/src/modbus_rtu/rtu_serial_io.c **** #include <stdio.h>
  25:../system/src/modbus_rtu/rtu_serial_io.c **** 
  26:../system/src/modbus_rtu/rtu_serial_io.c **** #define INTERFRAME_SP	20
  27:../system/src/modbus_rtu/rtu_serial_io.c **** 
  28:../system/src/modbus_rtu/rtu_serial_io.c **** 
  29:../system/src/modbus_rtu/rtu_serial_io.c **** #ifndef _RTU_SLAVE_LENGHT_1
  30:../system/src/modbus_rtu/rtu_serial_io.c **** 	#define _RTU_SLAVE_LENGHT_1 0x1
  31:../system/src/modbus_rtu/rtu_serial_io.c **** #endif
  32:../system/src/modbus_rtu/rtu_serial_io.c **** 
  33:../system/src/modbus_rtu/rtu_serial_io.c **** #ifndef _RTU_SLAVE_LENGHT_2
  34:../system/src/modbus_rtu/rtu_serial_io.c **** 	#define _RTU_SLAVE_LENGHT_2 0x1
  35:../system/src/modbus_rtu/rtu_serial_io.c **** #endif
  36:../system/src/modbus_rtu/rtu_serial_io.c **** 
  37:../system/src/modbus_rtu/rtu_serial_io.c **** #ifndef _RTU_SLAVE_LENGHT_3
  38:../system/src/modbus_rtu/rtu_serial_io.c **** 	#define _RTU_SLAVE_LENGHT_3 0x1
  39:../system/src/modbus_rtu/rtu_serial_io.c **** #endif
  40:../system/src/modbus_rtu/rtu_serial_io.c **** 
  41:../system/src/modbus_rtu/rtu_serial_io.c **** #ifndef _RTU_SLAVE_LENGHT_4
  42:../system/src/modbus_rtu/rtu_serial_io.c **** 	#define _RTU_SLAVE_LENGHT_4 0x1
  43:../system/src/modbus_rtu/rtu_serial_io.c **** #endif
  44:../system/src/modbus_rtu/rtu_serial_io.c **** 
  45:../system/src/modbus_rtu/rtu_serial_io.c **** #ifndef _RTU_SLAVE_LENGHT_5
  46:../system/src/modbus_rtu/rtu_serial_io.c **** 	#define _RTU_SLAVE_LENGHT_5 0x1
  47:../system/src/modbus_rtu/rtu_serial_io.c **** #endif
  48:../system/src/modbus_rtu/rtu_serial_io.c **** 
  49:../system/src/modbus_rtu/rtu_serial_io.c **** #ifndef _RTU_SLAVE_LENGHT_6
  50:../system/src/modbus_rtu/rtu_serial_io.c **** 	#define _RTU_SLAVE_LENGHT_6 0x1
  51:../system/src/modbus_rtu/rtu_serial_io.c **** #endif
  52:../system/src/modbus_rtu/rtu_serial_io.c **** 
  53:../system/src/modbus_rtu/rtu_serial_io.c **** typedef enum rtu_pool_state {
  54:../system/src/modbus_rtu/rtu_serial_io.c **** 	RTU_POOL_IDLE,
  55:../system/src/modbus_rtu/rtu_serial_io.c **** 	RTU_POOL_TRANSMITTING,
  56:../system/src/modbus_rtu/rtu_serial_io.c **** 	RTU_POOL_RECEIVING,
  57:../system/src/modbus_rtu/rtu_serial_io.c **** 	RTU_POOL_WAIT_AFTER_RECEIVE,
  58:../system/src/modbus_rtu/rtu_serial_io.c **** 	RTU_POOL_RECEIVE_ERROR,
  59:../system/src/modbus_rtu/rtu_serial_io.c **** 	RTU_POOL_STOP
  60:../system/src/modbus_rtu/rtu_serial_io.c **** } rtu_pool_state_t;
  61:../system/src/modbus_rtu/rtu_serial_io.c **** 
  62:../system/src/modbus_rtu/rtu_serial_io.c **** rtu_pool_state_t rtu_pool_state = RTU_POOL_STOP;
  63:../system/src/modbus_rtu/rtu_serial_io.c **** 
  64:../system/src/modbus_rtu/rtu_serial_io.c **** /**
  65:../system/src/modbus_rtu/rtu_serial_io.c ****  * Set to one to switch I/O operations to blocking mode
  66:../system/src/modbus_rtu/rtu_serial_io.c ****  */
  67:../system/src/modbus_rtu/rtu_serial_io.c **** uint8_t rtu_blocking_io = 0;
  68:../system/src/modbus_rtu/rtu_serial_io.c **** 
  69:../system/src/modbus_rtu/rtu_serial_io.c **** /**
  70:../system/src/modbus_rtu/rtu_serial_io.c ****  * Timestamp of last received modbus RTU response with good CRC
  71:../system/src/modbus_rtu/rtu_serial_io.c ****  */
  72:../system/src/modbus_rtu/rtu_serial_io.c **** uint32_t rtu_time_of_last_successfull_comm = 0;
  73:../system/src/modbus_rtu/rtu_serial_io.c **** 
  74:../system/src/modbus_rtu/rtu_serial_io.c **** /**
  75:../system/src/modbus_rtu/rtu_serial_io.c ****  * This variable latches the value of 'rtu_time_of_last_successfull_comm' across
  76:../system/src/modbus_rtu/rtu_serial_io.c ****  * consecutive messages with an error status. If the value is the same as during
  77:../system/src/modbus_rtu/rtu_serial_io.c ****  * previous transmission the controller is restarted
  78:../system/src/modbus_rtu/rtu_serial_io.c ****  */
  79:../system/src/modbus_rtu/rtu_serial_io.c **** uint32_t rtu_time_of_last_succ_comm_at_previous_error_status = 0;
  80:../system/src/modbus_rtu/rtu_serial_io.c **** 
  81:../system/src/modbus_rtu/rtu_serial_io.c **** /**
  82:../system/src/modbus_rtu/rtu_serial_io.c ****  * CRC value after the last call to rtu_serial_callback
  83:../system/src/modbus_rtu/rtu_serial_io.c ****  */
  84:../system/src/modbus_rtu/rtu_serial_io.c **** uint16_t rtu_serial_previous_crc = 0xFFFF;
  85:../system/src/modbus_rtu/rtu_serial_io.c **** 
  86:../system/src/modbus_rtu/rtu_serial_io.c **** /**
  87:../system/src/modbus_rtu/rtu_serial_io.c ****  * Cleared by 'rtu_serial_callback' when first byte from range 0x1..0xF7 is received
  88:../system/src/modbus_rtu/rtu_serial_io.c ****  */
  89:../system/src/modbus_rtu/rtu_serial_io.c **** uint8_t rtu_waiting_for_slave_addr = 0x1;
  90:../system/src/modbus_rtu/rtu_serial_io.c **** 
  91:../system/src/modbus_rtu/rtu_serial_io.c **** volatile rtu_pool_queue_t* rtu_used_queue;
  92:../system/src/modbus_rtu/rtu_serial_io.c **** 
  93:../system/src/modbus_rtu/rtu_serial_io.c **** volatile srl_context_t* rtu_used_serial_context;
  94:../system/src/modbus_rtu/rtu_serial_io.c **** 
  95:../system/src/modbus_rtu/rtu_serial_io.c **** volatile uint8_t rtu_current_03_slave_address;
  96:../system/src/modbus_rtu/rtu_serial_io.c **** 
  97:../system/src/modbus_rtu/rtu_serial_io.c **** volatile uint16_t rtu_current_03_base_register;
  98:../system/src/modbus_rtu/rtu_serial_io.c **** 
  99:../system/src/modbus_rtu/rtu_serial_io.c **** volatile uint8_t rtu_current_03_number_of_registers;
 100:../system/src/modbus_rtu/rtu_serial_io.c **** 
 101:../system/src/modbus_rtu/rtu_serial_io.c **** /**
 102:../system/src/modbus_rtu/rtu_serial_io.c ****  * The callback for stream CRC calculation
 103:../system/src/modbus_rtu/rtu_serial_io.c ****  */
 104:../system/src/modbus_rtu/rtu_serial_io.c **** uint8_t rtu_serial_callback(uint8_t current_data, const uint8_t * const rx_buffer, uint16_t rx_byte
  26              		.loc 1 104 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32 0000 10B4     		push	{r4}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 4, -4
  35              	.LVL1:
 105:../system/src/modbus_rtu/rtu_serial_io.c **** 
 106:../system/src/modbus_rtu/rtu_serial_io.c **** 	uint8_t retval = 0;
 107:../system/src/modbus_rtu/rtu_serial_io.c **** 
 108:../system/src/modbus_rtu/rtu_serial_io.c **** 	uint16_t new_crc = 0;
 109:../system/src/modbus_rtu/rtu_serial_io.c **** 
 110:../system/src/modbus_rtu/rtu_serial_io.c **** 	// check if the callback still waits for first 'valid' byte to be received from RTU slave
 111:../system/src/modbus_rtu/rtu_serial_io.c **** 	if (rtu_waiting_for_slave_addr == 0x1) {
  36              		.loc 1 111 0
  37 0002 154A     		ldr	r2, .L13
  38              	.LVL2:
  39 0004 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
  40 0006 012A     		cmp	r2, #1
  41 0008 07D0     		beq	.L11
  42              	.L2:
 112:../system/src/modbus_rtu/rtu_serial_io.c **** 
 113:../system/src/modbus_rtu/rtu_serial_io.c **** 		// check if the byte which was received from the slave is valid address
 114:../system/src/modbus_rtu/rtu_serial_io.c **** 		if (current_data >= 0x01 && current_data <= 0xF7) {
 115:../system/src/modbus_rtu/rtu_serial_io.c **** 			// clear this flag to start CRC calculation and data receiving
 116:../system/src/modbus_rtu/rtu_serial_io.c **** 			rtu_waiting_for_slave_addr = 0;
 117:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 118:../system/src/modbus_rtu/rtu_serial_io.c **** 		else {
 119:../system/src/modbus_rtu/rtu_serial_io.c **** 			// RTU slave cannot respond with the broadcast address (0x00), also 0xF8..0xFF
 120:../system/src/modbus_rtu/rtu_serial_io.c **** 			// are not valid RTU address
 121:../system/src/modbus_rtu/rtu_serial_io.c **** 			;
 122:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 123:../system/src/modbus_rtu/rtu_serial_io.c **** 	}
 124:../system/src/modbus_rtu/rtu_serial_io.c **** 
 125:../system/src/modbus_rtu/rtu_serial_io.c **** 	// the second 'if' clause checks if the slave response has began
 126:../system/src/modbus_rtu/rtu_serial_io.c **** 	if (rtu_waiting_for_slave_addr == 0x0) {
  43              		.loc 1 126 0
  44 000a 134A     		ldr	r2, .L13
  45 000c 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
  46 000e E4B9     		cbnz	r4, .L8
 127:../system/src/modbus_rtu/rtu_serial_io.c **** 
 128:../system/src/modbus_rtu/rtu_serial_io.c **** 		// calculate new crc
 129:../system/src/modbus_rtu/rtu_serial_io.c **** 		new_crc = rtu_crc_stream(rtu_serial_previous_crc, current_data);
  47              		.loc 1 129 0
  48 0010 124B     		ldr	r3, .L13+4
  49 0012 1B88     		ldrh	r3, [r3]
  50              	.LVL3:
  51              	.LBB16:
  52              	.LBB17:
  53              		.file 2 "../system/include/modbus_rtu/rtu_crc.h"
   1:../system/include/modbus_rtu/rtu_crc.h **** /*
   2:../system/include/modbus_rtu/rtu_crc.h ****  * rtu_crc.h
   3:../system/include/modbus_rtu/rtu_crc.h ****  *
   4:../system/include/modbus_rtu/rtu_crc.h ****  *  Created on: 18.09.2020
   5:../system/include/modbus_rtu/rtu_crc.h ****  *      Author: mateusz
   6:../system/include/modbus_rtu/rtu_crc.h ****  */
   7:../system/include/modbus_rtu/rtu_crc.h **** 
   8:../system/include/modbus_rtu/rtu_crc.h **** #ifndef INCLUDE_MODBUS_RTU_RTU_CRC_H_
   9:../system/include/modbus_rtu/rtu_crc.h **** #define INCLUDE_MODBUS_RTU_RTU_CRC_H_
  10:../system/include/modbus_rtu/rtu_crc.h **** 
  11:../system/include/modbus_rtu/rtu_crc.h **** #include <stdint.h>
  12:../system/include/modbus_rtu/rtu_crc.h **** 
  13:../system/include/modbus_rtu/rtu_crc.h **** inline uint16_t rtu_crc_stream(uint16_t previous_crc, uint8_t current_data) {
  14:../system/include/modbus_rtu/rtu_crc.h **** 	int i;
  15:../system/include/modbus_rtu/rtu_crc.h **** 
  16:../system/include/modbus_rtu/rtu_crc.h **** 	previous_crc ^= (uint16_t)current_data;
  54              		.loc 2 16 0
  55 0014 4340     		eors	r3, r3, r0
  56              	.LVL4:
  17:../system/include/modbus_rtu/rtu_crc.h **** 	for (i = 0; i < 8; ++i) {
  57              		.loc 2 17 0
  58 0016 0022     		movs	r2, #0
  59 0018 09E0     		b	.L4
  60              	.LVL5:
  61              	.L11:
  62              	.LBE17:
  63              	.LBE16:
 114:../system/src/modbus_rtu/rtu_serial_io.c **** 			// clear this flag to start CRC calculation and data receiving
  64              		.loc 1 114 0
  65 001a 431E     		subs	r3, r0, #1
  66 001c DBB2     		uxtb	r3, r3
  67 001e F62B     		cmp	r3, #246
  68 0020 F3D8     		bhi	.L2
 116:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
  69              		.loc 1 116 0
  70 0022 0D4B     		ldr	r3, .L13
  71 0024 0022     		movs	r2, #0
  72 0026 1A70     		strb	r2, [r3]
  73 0028 EFE7     		b	.L2
  74              	.LVL6:
  75              	.L5:
  76              	.LBB19:
  77              	.LBB18:
  18:../system/include/modbus_rtu/rtu_crc.h **** 		if (previous_crc & 1) {
  19:../system/include/modbus_rtu/rtu_crc.h **** 			previous_crc = (previous_crc >> 1);
  20:../system/include/modbus_rtu/rtu_crc.h **** 			previous_crc = (previous_crc) ^ 0xA001;
  21:../system/include/modbus_rtu/rtu_crc.h **** 		}
  22:../system/include/modbus_rtu/rtu_crc.h **** 		else
  23:../system/include/modbus_rtu/rtu_crc.h **** 			previous_crc = (previous_crc >> 1);
  78              		.loc 2 23 0
  79 002a 5B08     		lsrs	r3, r3, #1
  80              	.LVL7:
  81              	.L6:
  17:../system/include/modbus_rtu/rtu_crc.h **** 		if (previous_crc & 1) {
  82              		.loc 2 17 0
  83 002c 0132     		adds	r2, r2, #1
  84              	.LVL8:
  85              	.L4:
  86 002e 072A     		cmp	r2, #7
  87 0030 07DC     		bgt	.L12
  18:../system/include/modbus_rtu/rtu_crc.h **** 		if (previous_crc & 1) {
  88              		.loc 2 18 0
  89 0032 13F0010F 		tst	r3, #1
  90 0036 F8D0     		beq	.L5
  91              	.LVL9:
  20:../system/include/modbus_rtu/rtu_crc.h **** 		}
  92              		.loc 2 20 0
  93 0038 4AF20101 		movw	r1, #40961
  94 003c 81EA5303 		eor	r3, r1, r3, lsr #1
  95              	.LVL10:
  96 0040 F4E7     		b	.L6
  97              	.L12:
  98              	.LVL11:
  99              	.LBE18:
 100              	.LBE19:
 130:../system/src/modbus_rtu/rtu_serial_io.c **** 
 131:../system/src/modbus_rtu/rtu_serial_io.c **** 		// if the new CRC value equals 0x0000 it means that this was MSB
 132:../system/src/modbus_rtu/rtu_serial_io.c **** 		// of CRC from correctly received Modbus-RTU frame
 133:../system/src/modbus_rtu/rtu_serial_io.c **** 		if (new_crc == 0) {
 101              		.loc 1 133 0
 102 0042 33B1     		cbz	r3, .L9
 134:../system/src/modbus_rtu/rtu_serial_io.c **** 			// return '1' to terminate the transmission
 135:../system/src/modbus_rtu/rtu_serial_io.c **** 			retval = 1;
 136:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 137:../system/src/modbus_rtu/rtu_serial_io.c **** 		else {
 138:../system/src/modbus_rtu/rtu_serial_io.c **** 			rtu_serial_previous_crc = new_crc;
 103              		.loc 1 138 0
 104 0044 054A     		ldr	r2, .L13+4
 105 0046 1380     		strh	r3, [r2]	@ movhi
 106 0048 00E0     		b	.L3
 107              	.LVL12:
 108              	.L8:
 106:../system/src/modbus_rtu/rtu_serial_io.c **** 
 109              		.loc 1 106 0
 110 004a 0024     		movs	r4, #0
 111              	.LVL13:
 112              	.L3:
 139:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 140:../system/src/modbus_rtu/rtu_serial_io.c **** 	}
 141:../system/src/modbus_rtu/rtu_serial_io.c **** 
 142:../system/src/modbus_rtu/rtu_serial_io.c **** 	return retval;
 143:../system/src/modbus_rtu/rtu_serial_io.c **** }
 113              		.loc 1 143 0
 114 004c 2046     		mov	r0, r4
 115              	.LVL14:
 116 004e 10BC     		pop	{r4}
 117              		.cfi_remember_state
 118              		.cfi_restore 4
 119              		.cfi_def_cfa_offset 0
 120              	.LVL15:
 121 0050 7047     		bx	lr
 122              	.LVL16:
 123              	.L9:
 124              		.cfi_restore_state
 135:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 125              		.loc 1 135 0
 126 0052 0124     		movs	r4, #1
 127 0054 FAE7     		b	.L3
 128              	.L14:
 129 0056 00BF     		.align	2
 130              	.L13:
 131 0058 00000000 		.word	.LANCHOR0
 132 005c 00000000 		.word	.LANCHOR1
 133              		.cfi_endproc
 134              	.LFE98:
 136              		.section	.text.rtu_serial_init,"ax",%progbits
 137              		.align	1
 138              		.global	rtu_serial_init
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu softvfp
 144              	rtu_serial_init:
 145              	.LFB99:
 144:../system/src/modbus_rtu/rtu_serial_io.c **** 
 145:../system/src/modbus_rtu/rtu_serial_io.c **** int32_t rtu_serial_init(rtu_pool_queue_t* queue, uint8_t io_mode, srl_context_t* serial_context, co
 146              		.loc 1 145 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              	.LVL17:
 151 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 152              		.cfi_def_cfa_offset 24
 153              		.cfi_offset 3, -24
 154              		.cfi_offset 4, -20
 155              		.cfi_offset 5, -16
 156              		.cfi_offset 6, -12
 157              		.cfi_offset 7, -8
 158              		.cfi_offset 14, -4
 159 0002 0546     		mov	r5, r0
 160 0004 0F46     		mov	r7, r1
 161 0006 1646     		mov	r6, r2
 162 0008 1C46     		mov	r4, r3
 163              	.LVL18:
 146:../system/src/modbus_rtu/rtu_serial_io.c **** 
 147:../system/src/modbus_rtu/rtu_serial_io.c **** 	int32_t retval = MODBUS_RET_UNINITIALIZED;
 148:../system/src/modbus_rtu/rtu_serial_io.c **** 
 149:../system/src/modbus_rtu/rtu_serial_io.c **** 	// zeroing the content of the structure
 150:../system/src/modbus_rtu/rtu_serial_io.c **** 	memset(queue, 0x00, sizeof(rtu_pool_queue_t));
 164              		.loc 1 150 0
 165 000a 4422     		movs	r2, #68
 166              	.LVL19:
 167 000c 0021     		movs	r1, #0
 168              	.LVL20:
 169 000e FFF7FEFF 		bl	memset
 170              	.LVL21:
 151:../system/src/modbus_rtu/rtu_serial_io.c **** 
 152:../system/src/modbus_rtu/rtu_serial_io.c **** 	rtu_blocking_io = io_mode;
 171              		.loc 1 152 0
 172 0012 284B     		ldr	r3, .L17
 173 0014 1F70     		strb	r7, [r3]
 153:../system/src/modbus_rtu/rtu_serial_io.c **** 
 154:../system/src/modbus_rtu/rtu_serial_io.c **** 	rtu_used_queue = queue;
 174              		.loc 1 154 0
 175 0016 284B     		ldr	r3, .L17+4
 176 0018 1D60     		str	r5, [r3]
 155:../system/src/modbus_rtu/rtu_serial_io.c **** 
 156:../system/src/modbus_rtu/rtu_serial_io.c **** 	rtu_used_serial_context = serial_context;
 177              		.loc 1 156 0
 178 001a 284B     		ldr	r3, .L17+8
 179 001c 1E60     		str	r6, [r3]
 157:../system/src/modbus_rtu/rtu_serial_io.c **** 
 158:../system/src/modbus_rtu/rtu_serial_io.c **** //#ifdef _MODBUS_RTU
 159:../system/src/modbus_rtu/rtu_serial_io.c **** 
 160:../system/src/modbus_rtu/rtu_serial_io.c **** 	queue->function_id[0] = config->slave_1_function;
 180              		.loc 1 160 0
 181 001e 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 182 0020 6B70     		strb	r3, [r5, #1]
 161:../system/src/modbus_rtu/rtu_serial_io.c **** 	queue->function_parameter[0] = &rte_wx_modbus_rtu_f1;
 183              		.loc 1 161 0
 184 0022 274B     		ldr	r3, .L17+12
 185 0024 AB60     		str	r3, [r5, #8]
 162:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f1.slave_address = config->slave_1_bus_address;
 186              		.loc 1 162 0
 187 0026 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
 188 0028 1A80     		strh	r2, [r3]	@ movhi
 163:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f1.base_address = config->slave_1_register_address;
 189              		.loc 1 163 0
 190 002a E289     		ldrh	r2, [r4, #14]
 191 002c 9A80     		strh	r2, [r3, #4]	@ movhi
 164:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f1.number_of_registers = config->slave_1_lenght;
 192              		.loc 1 164 0
 193 002e 228A     		ldrh	r2, [r4, #16]
 194 0030 9A70     		strb	r2, [r3, #2]
 165:../system/src/modbus_rtu/rtu_serial_io.c **** 
 166:../system/src/modbus_rtu/rtu_serial_io.c **** 	queue->function_id[1] =config->slave_2_function;;
 195              		.loc 1 166 0
 196 0032 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 197 0034 AB70     		strb	r3, [r5, #2]
 167:../system/src/modbus_rtu/rtu_serial_io.c **** 	queue->function_parameter[1] = &rte_wx_modbus_rtu_f2;
 198              		.loc 1 167 0
 199 0036 234B     		ldr	r3, .L17+16
 200 0038 EB60     		str	r3, [r5, #12]
 168:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f2.slave_address = config->slave_2_bus_address;
 201              		.loc 1 168 0
 202 003a E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 203 003c 1A80     		strh	r2, [r3]	@ movhi
 169:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f2.base_address = config->slave_2_register_address;
 204              		.loc 1 169 0
 205 003e 628B     		ldrh	r2, [r4, #26]
 206 0040 9A80     		strh	r2, [r3, #4]	@ movhi
 170:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f2.number_of_registers = config->slave_2_lenght;
 207              		.loc 1 170 0
 208 0042 A28B     		ldrh	r2, [r4, #28]
 209 0044 9A70     		strb	r2, [r3, #2]
 171:../system/src/modbus_rtu/rtu_serial_io.c **** 
 172:../system/src/modbus_rtu/rtu_serial_io.c **** 	queue->function_id[2] =config->slave_3_function;;
 210              		.loc 1 172 0
 211 0046 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 212 004a EB70     		strb	r3, [r5, #3]
 173:../system/src/modbus_rtu/rtu_serial_io.c **** 	queue->function_parameter[2] = &rte_wx_modbus_rtu_f3;
 213              		.loc 1 173 0
 214 004c 1E4B     		ldr	r3, .L17+20
 215 004e 2B61     		str	r3, [r5, #16]
 174:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f3.slave_address = config->slave_3_bus_address;
 216              		.loc 1 174 0
 217 0050 94F82320 		ldrb	r2, [r4, #35]	@ zero_extendqisi2
 218 0054 1A80     		strh	r2, [r3]	@ movhi
 175:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f3.base_address = config->slave_3_register_address;
 219              		.loc 1 175 0
 220 0056 E28C     		ldrh	r2, [r4, #38]
 221 0058 9A80     		strh	r2, [r3, #4]	@ movhi
 176:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f3.number_of_registers = config->slave_3_lenght;
 222              		.loc 1 176 0
 223 005a 228D     		ldrh	r2, [r4, #40]
 224 005c 9A70     		strb	r2, [r3, #2]
 177:../system/src/modbus_rtu/rtu_serial_io.c **** 
 178:../system/src/modbus_rtu/rtu_serial_io.c **** 	queue->function_id[3] =config->slave_4_function;;
 225              		.loc 1 178 0
 226 005e 94F83030 		ldrb	r3, [r4, #48]	@ zero_extendqisi2
 227 0062 2B71     		strb	r3, [r5, #4]
 179:../system/src/modbus_rtu/rtu_serial_io.c **** 	queue->function_parameter[3] = &rte_wx_modbus_rtu_f4;
 228              		.loc 1 179 0
 229 0064 194B     		ldr	r3, .L17+24
 230 0066 6B61     		str	r3, [r5, #20]
 180:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f4.slave_address = config->slave_4_bus_address;
 231              		.loc 1 180 0
 232 0068 94F82F20 		ldrb	r2, [r4, #47]	@ zero_extendqisi2
 233 006c 1A80     		strh	r2, [r3]	@ movhi
 181:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f4.base_address = config->slave_4_register_address;
 234              		.loc 1 181 0
 235 006e 628E     		ldrh	r2, [r4, #50]
 236 0070 9A80     		strh	r2, [r3, #4]	@ movhi
 182:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f4.number_of_registers = config->slave_4_lenght;
 237              		.loc 1 182 0
 238 0072 A28E     		ldrh	r2, [r4, #52]
 239 0074 9A70     		strb	r2, [r3, #2]
 183:../system/src/modbus_rtu/rtu_serial_io.c **** 
 184:../system/src/modbus_rtu/rtu_serial_io.c **** 	queue->function_id[4] =config->slave_5_function;;
 240              		.loc 1 184 0
 241 0076 94F83C30 		ldrb	r3, [r4, #60]	@ zero_extendqisi2
 242 007a 6B71     		strb	r3, [r5, #5]
 185:../system/src/modbus_rtu/rtu_serial_io.c **** 	queue->function_parameter[4] = &rte_wx_modbus_rtu_f5;
 243              		.loc 1 185 0
 244 007c 144B     		ldr	r3, .L17+28
 245 007e AB61     		str	r3, [r5, #24]
 186:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f5.slave_address = config->slave_5_bus_address;
 246              		.loc 1 186 0
 247 0080 94F83B20 		ldrb	r2, [r4, #59]	@ zero_extendqisi2
 248 0084 1A80     		strh	r2, [r3]	@ movhi
 187:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f5.base_address = config->slave_5_register_address;
 249              		.loc 1 187 0
 250 0086 E28F     		ldrh	r2, [r4, #62]
 251 0088 9A80     		strh	r2, [r3, #4]	@ movhi
 188:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f5.number_of_registers = config->slave_5_lenght;
 252              		.loc 1 188 0
 253 008a B4F84020 		ldrh	r2, [r4, #64]
 254 008e 9A70     		strb	r2, [r3, #2]
 189:../system/src/modbus_rtu/rtu_serial_io.c **** 
 190:../system/src/modbus_rtu/rtu_serial_io.c **** 
 191:../system/src/modbus_rtu/rtu_serial_io.c **** 	queue->function_id[5] =config->slave_6_function;;
 255              		.loc 1 191 0
 256 0090 94F84830 		ldrb	r3, [r4, #72]	@ zero_extendqisi2
 257 0094 AB71     		strb	r3, [r5, #6]
 192:../system/src/modbus_rtu/rtu_serial_io.c **** 	queue->function_parameter[5] = &rte_wx_modbus_rtu_f6;
 258              		.loc 1 192 0
 259 0096 0F4B     		ldr	r3, .L17+32
 260 0098 EB61     		str	r3, [r5, #28]
 193:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f6.slave_address = config->slave_6_bus_address;
 261              		.loc 1 193 0
 262 009a 94F84720 		ldrb	r2, [r4, #71]	@ zero_extendqisi2
 263 009e 1A80     		strh	r2, [r3]	@ movhi
 194:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f6.base_address = config->slave_6_register_address;
 264              		.loc 1 194 0
 265 00a0 B4F84A20 		ldrh	r2, [r4, #74]
 266 00a4 9A80     		strh	r2, [r3, #4]	@ movhi
 195:../system/src/modbus_rtu/rtu_serial_io.c **** 	rte_wx_modbus_rtu_f6.number_of_registers = config->slave_6_lenght;
 267              		.loc 1 195 0
 268 00a6 B4F84C20 		ldrh	r2, [r4, #76]
 269 00aa 9A70     		strb	r2, [r3, #2]
 196:../system/src/modbus_rtu/rtu_serial_io.c **** 
 197:../system/src/modbus_rtu/rtu_serial_io.c **** 
 198:../system/src/modbus_rtu/rtu_serial_io.c **** //#endif
 199:../system/src/modbus_rtu/rtu_serial_io.c **** 
 200:../system/src/modbus_rtu/rtu_serial_io.c **** 	return retval;
 201:../system/src/modbus_rtu/rtu_serial_io.c **** 
 202:../system/src/modbus_rtu/rtu_serial_io.c **** }
 270              		.loc 1 202 0
 271 00ac 4FF0FF30 		mov	r0, #-1
 272 00b0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 273              	.LVL22:
 274              	.L18:
 275 00b2 00BF     		.align	2
 276              	.L17:
 277 00b4 00000000 		.word	.LANCHOR2
 278 00b8 00000000 		.word	rtu_used_queue
 279 00bc 00000000 		.word	rtu_used_serial_context
 280 00c0 00000000 		.word	rte_wx_modbus_rtu_f1
 281 00c4 00000000 		.word	rte_wx_modbus_rtu_f2
 282 00c8 00000000 		.word	rte_wx_modbus_rtu_f3
 283 00cc 00000000 		.word	rte_wx_modbus_rtu_f4
 284 00d0 00000000 		.word	rte_wx_modbus_rtu_f5
 285 00d4 00000000 		.word	rte_wx_modbus_rtu_f6
 286              		.cfi_endproc
 287              	.LFE99:
 289              		.section	.text.rtu_serial_blocking_io,"ax",%progbits
 290              		.align	1
 291              		.global	rtu_serial_blocking_io
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu softvfp
 297              	rtu_serial_blocking_io:
 298              	.LFB101:
 203:../system/src/modbus_rtu/rtu_serial_io.c **** 
 204:../system/src/modbus_rtu/rtu_serial_io.c **** int32_t rtu_serial_pool(void) {
 205:../system/src/modbus_rtu/rtu_serial_io.c **** 
 206:../system/src/modbus_rtu/rtu_serial_io.c **** 	int32_t retval = MODBUS_RET_UNINITIALIZED;
 207:../system/src/modbus_rtu/rtu_serial_io.c **** //#ifdef _MODBUS_RTU
 208:../system/src/modbus_rtu/rtu_serial_io.c **** 	int32_t result = MODBUS_RET_UNINITIALIZED;
 209:../system/src/modbus_rtu/rtu_serial_io.c **** 
 210:../system/src/modbus_rtu/rtu_serial_io.c **** 	uint8_t output_data_lenght = 0;
 211:../system/src/modbus_rtu/rtu_serial_io.c **** 
 212:../system/src/modbus_rtu/rtu_serial_io.c **** 	rtu_register_data_t* ptr_func_03;
 213:../system/src/modbus_rtu/rtu_serial_io.c **** 
 214:../system/src/modbus_rtu/rtu_serial_io.c **** 	// if there were any serial I/O error
 215:../system/src/modbus_rtu/rtu_serial_io.c **** 	if (rte_rtu_number_of_serial_io_errors > 0) {
 216:../system/src/modbus_rtu/rtu_serial_io.c **** 
 217:../system/src/modbus_rtu/rtu_serial_io.c **** 		// check how many serial I/O erros have been detected so far
 218:../system/src/modbus_rtu/rtu_serial_io.c **** 		if ((rte_rtu_number_of_serial_io_errors % RTU_NUMBER_OF_ERRORS_TO_TRIG_STATUS) == 0) {
 219:../system/src/modbus_rtu/rtu_serial_io.c **** 			// set the status trigger
 220:../system/src/modbus_rtu/rtu_serial_io.c **** 			rte_main_trigger_modbus_status = 1;
 221:../system/src/modbus_rtu/rtu_serial_io.c **** 
 222:../system/src/modbus_rtu/rtu_serial_io.c **** 			// increment the error counter artificially to protect sending status in the loop
 223:../system/src/modbus_rtu/rtu_serial_io.c **** 			rte_rtu_number_of_serial_io_errors++;
 224:../system/src/modbus_rtu/rtu_serial_io.c **** 
 225:../system/src/modbus_rtu/rtu_serial_io.c **** 			// stupid workaround. If there is a lot of I/O errors reset the controller
 226:../system/src/modbus_rtu/rtu_serial_io.c **** 
 227:../system/src/modbus_rtu/rtu_serial_io.c **** 			if (rte_rtu_number_of_serial_io_errors >= (0xFF - RTU_NUMBER_OF_ERRORS_TO_TRIG_STATUS))
 228:../system/src/modbus_rtu/rtu_serial_io.c **** 			{
 229:../system/src/modbus_rtu/rtu_serial_io.c **** 				rte_main_reboot_req = 1;
 230:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 231:../system/src/modbus_rtu/rtu_serial_io.c **** 
 232:../system/src/modbus_rtu/rtu_serial_io.c **** 			// latch the current value of last successfull communication
 233:../system/src/modbus_rtu/rtu_serial_io.c **** 			rtu_time_of_last_succ_comm_at_previous_error_status = rtu_time_of_last_successfull_comm;
 234:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 235:../system/src/modbus_rtu/rtu_serial_io.c **** 	}
 236:../system/src/modbus_rtu/rtu_serial_io.c **** 
 237:../system/src/modbus_rtu/rtu_serial_io.c **** 	if (rtu_used_queue->it >= RTU_POOL_QUEUE_LENGHT) {
 238:../system/src/modbus_rtu/rtu_serial_io.c **** 		rtu_used_queue->it = 0;
 239:../system/src/modbus_rtu/rtu_serial_io.c **** 
 240:../system/src/modbus_rtu/rtu_serial_io.c **** 		// all queued modbus functions have been serviced
 241:../system/src/modbus_rtu/rtu_serial_io.c **** 		rtu_pool_state = RTU_POOL_STOP;
 242:../system/src/modbus_rtu/rtu_serial_io.c **** 	}
 243:../system/src/modbus_rtu/rtu_serial_io.c **** 
 244:../system/src/modbus_rtu/rtu_serial_io.c **** 	switch (rtu_pool_state) {
 245:../system/src/modbus_rtu/rtu_serial_io.c **** 		case RTU_POOL_IDLE: {
 246:../system/src/modbus_rtu/rtu_serial_io.c **** 
 247:../system/src/modbus_rtu/rtu_serial_io.c **** 			// initialize the serial port.
 248:../system/src/modbus_rtu/rtu_serial_io.c **** 			srl_init(	rtu_used_serial_context,
 249:../system/src/modbus_rtu/rtu_serial_io.c **** 					rtu_used_serial_context->port,
 250:../system/src/modbus_rtu/rtu_serial_io.c **** 					rtu_used_serial_context->srl_rx_buf_pointer,
 251:../system/src/modbus_rtu/rtu_serial_io.c **** 					rtu_used_serial_context->srl_rx_buf_ln,
 252:../system/src/modbus_rtu/rtu_serial_io.c **** 					rtu_used_serial_context->srl_tx_buf_pointer,
 253:../system/src/modbus_rtu/rtu_serial_io.c **** 					rtu_used_serial_context->srl_tx_buf_ln,
 254:../system/src/modbus_rtu/rtu_serial_io.c **** 					rtu_used_serial_context->port_baurate,
 255:../system/src/modbus_rtu/rtu_serial_io.c **** 					rtu_used_serial_context->port_stopbits);
 256:../system/src/modbus_rtu/rtu_serial_io.c **** 
 257:../system/src/modbus_rtu/rtu_serial_io.c **** 			// Enabling the timeout for Modbus-RTU.
 258:../system/src/modbus_rtu/rtu_serial_io.c **** 			// This timeout starts after first received byte and triggers if
 259:../system/src/modbus_rtu/rtu_serial_io.c **** 			// the slave will hang up and stop the transmission before the end of the frame
 260:../system/src/modbus_rtu/rtu_serial_io.c **** 			// It doesn't need to be called each time but this is the only function which takes
 261:../system/src/modbus_rtu/rtu_serial_io.c **** 			// the pointer to serial context
 262:../system/src/modbus_rtu/rtu_serial_io.c **** 			srl_switch_timeout(rtu_used_serial_context, 1, 0);
 263:../system/src/modbus_rtu/rtu_serial_io.c **** 
 264:../system/src/modbus_rtu/rtu_serial_io.c **** 			srl_switch_tx_delay(rtu_used_serial_context, 1);
 265:../system/src/modbus_rtu/rtu_serial_io.c **** 
 266:../system/src/modbus_rtu/rtu_serial_io.c **** 			// check the function it at current queue position
 267:../system/src/modbus_rtu/rtu_serial_io.c **** 			if (rtu_used_queue->function_id[rtu_used_queue->it] == 0x03) {
 268:../system/src/modbus_rtu/rtu_serial_io.c **** 				// read holding registers
 269:../system/src/modbus_rtu/rtu_serial_io.c **** 				ptr_func_03 = ((rtu_register_data_t*)rtu_used_queue->function_parameter[rtu_used_queue->it]);
 270:../system/src/modbus_rtu/rtu_serial_io.c **** 
 271:../system/src/modbus_rtu/rtu_serial_io.c **** 				rtu_current_03_slave_address = ptr_func_03->slave_address;
 272:../system/src/modbus_rtu/rtu_serial_io.c **** 				rtu_current_03_base_register = ptr_func_03->base_address;
 273:../system/src/modbus_rtu/rtu_serial_io.c **** 				rtu_current_03_number_of_registers = ptr_func_03->number_of_registers;
 274:../system/src/modbus_rtu/rtu_serial_io.c **** 
 275:../system/src/modbus_rtu/rtu_serial_io.c **** 				// generate request content
 276:../system/src/modbus_rtu/rtu_serial_io.c **** 				result = rtu_request_03_04_registers(
 277:../system/src/modbus_rtu/rtu_serial_io.c **** 						1,
 278:../system/src/modbus_rtu/rtu_serial_io.c **** 						rtu_used_serial_context->srl_tx_buf_pointer,
 279:../system/src/modbus_rtu/rtu_serial_io.c **** 						rtu_used_serial_context->srl_tx_buf_ln,
 280:../system/src/modbus_rtu/rtu_serial_io.c **** 						&output_data_lenght,
 281:../system/src/modbus_rtu/rtu_serial_io.c **** 						rtu_current_03_slave_address,
 282:../system/src/modbus_rtu/rtu_serial_io.c **** 						rtu_current_03_base_register,
 283:../system/src/modbus_rtu/rtu_serial_io.c **** 						rtu_current_03_number_of_registers);
 284:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 285:../system/src/modbus_rtu/rtu_serial_io.c **** 			else if (rtu_used_queue->function_id[rtu_used_queue->it] == 0x04) {
 286:../system/src/modbus_rtu/rtu_serial_io.c **** 				// read input registers
 287:../system/src/modbus_rtu/rtu_serial_io.c **** 
 288:../system/src/modbus_rtu/rtu_serial_io.c **** 				// generate request content
 289:../system/src/modbus_rtu/rtu_serial_io.c **** 				result = rtu_request_03_04_registers(
 290:../system/src/modbus_rtu/rtu_serial_io.c **** 						0,
 291:../system/src/modbus_rtu/rtu_serial_io.c **** 						rtu_used_serial_context->srl_tx_buf_pointer,
 292:../system/src/modbus_rtu/rtu_serial_io.c **** 						rtu_used_serial_context->srl_tx_buf_ln,
 293:../system/src/modbus_rtu/rtu_serial_io.c **** 						&output_data_lenght,
 294:../system/src/modbus_rtu/rtu_serial_io.c **** 						((rtu_register_data_t*)rtu_used_queue->function_parameter[rtu_used_queue->it])->slave_address
 295:../system/src/modbus_rtu/rtu_serial_io.c **** 						((rtu_register_data_t*)rtu_used_queue->function_parameter[rtu_used_queue->it])->base_address,
 296:../system/src/modbus_rtu/rtu_serial_io.c **** 						((rtu_register_data_t*)rtu_used_queue->function_parameter[rtu_used_queue->it])->number_of_reg
 297:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 298:../system/src/modbus_rtu/rtu_serial_io.c **** 			else {
 299:../system/src/modbus_rtu/rtu_serial_io.c **** 				// any other unsupported or wrong function id. It will also stop at the last element
 300:../system/src/modbus_rtu/rtu_serial_io.c **** 				// on the last element of the queue
 301:../system/src/modbus_rtu/rtu_serial_io.c **** 				rtu_pool_state = RTU_POOL_STOP;
 302:../system/src/modbus_rtu/rtu_serial_io.c **** 
 303:../system/src/modbus_rtu/rtu_serial_io.c **** 				// rewind the iterator back to the begining
 304:../system/src/modbus_rtu/rtu_serial_io.c **** 				rtu_used_queue->it = 0;
 305:../system/src/modbus_rtu/rtu_serial_io.c **** 
 306:../system/src/modbus_rtu/rtu_serial_io.c **** 				retval = MODBUS_RET_WRONG_FUNCTION;
 307:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 308:../system/src/modbus_rtu/rtu_serial_io.c **** 
 309:../system/src/modbus_rtu/rtu_serial_io.c **** 
 310:../system/src/modbus_rtu/rtu_serial_io.c **** 			// if request has been generated correctly
 311:../system/src/modbus_rtu/rtu_serial_io.c **** 			if (result == MODBUS_RET_OK) {
 312:../system/src/modbus_rtu/rtu_serial_io.c **** 
 313:../system/src/modbus_rtu/rtu_serial_io.c **** 				// check if block I/O mode shall be used for the communication
 314:../system/src/modbus_rtu/rtu_serial_io.c **** 				if (rtu_blocking_io) {
 315:../system/src/modbus_rtu/rtu_serial_io.c **** 					// call the function which will process the same stuff than
 316:../system/src/modbus_rtu/rtu_serial_io.c **** 					// RTU_POOL_IDLE (from transmitting), RTU_POOL_TRANSMITTING
 317:../system/src/modbus_rtu/rtu_serial_io.c **** 					// and partially RTU_POOL_RECEIVING
 318:../system/src/modbus_rtu/rtu_serial_io.c **** 					result = rtu_serial_blocking_io(rtu_used_serial_context, output_data_lenght);
 319:../system/src/modbus_rtu/rtu_serial_io.c **** 
 320:../system/src/modbus_rtu/rtu_serial_io.c **** 					if (result == MODBUS_RET_OK) {
 321:../system/src/modbus_rtu/rtu_serial_io.c **** 						// if transmission and reception was successful switch to the
 322:../system/src/modbus_rtu/rtu_serial_io.c **** 						// receiving state. The 'serial_context->srl_rx_state' will be
 323:../system/src/modbus_rtu/rtu_serial_io.c **** 						// alredy set to 'SRL_RX_DONE'
 324:../system/src/modbus_rtu/rtu_serial_io.c **** 						rtu_pool_state = RTU_POOL_RECEIVING;
 325:../system/src/modbus_rtu/rtu_serial_io.c **** 					}
 326:../system/src/modbus_rtu/rtu_serial_io.c **** 					else {
 327:../system/src/modbus_rtu/rtu_serial_io.c **** 						rtu_pool_state = RTU_POOL_RECEIVE_ERROR;
 328:../system/src/modbus_rtu/rtu_serial_io.c **** 					}
 329:../system/src/modbus_rtu/rtu_serial_io.c **** 				}
 330:../system/src/modbus_rtu/rtu_serial_io.c **** 				else {
 331:../system/src/modbus_rtu/rtu_serial_io.c **** 					// trigger the transmission itself
 332:../system/src/modbus_rtu/rtu_serial_io.c **** 					result = srl_start_tx(rtu_used_serial_context, output_data_lenght);
 333:../system/src/modbus_rtu/rtu_serial_io.c **** 
 334:../system/src/modbus_rtu/rtu_serial_io.c **** 					// reset the CRC value to default
 335:../system/src/modbus_rtu/rtu_serial_io.c **** 					rtu_serial_previous_crc = 0xFFFF;
 336:../system/src/modbus_rtu/rtu_serial_io.c **** 
 337:../system/src/modbus_rtu/rtu_serial_io.c **** 					rtu_waiting_for_slave_addr = 1;
 338:../system/src/modbus_rtu/rtu_serial_io.c **** 
 339:../system/src/modbus_rtu/rtu_serial_io.c **** 					// if serial transmission has been starter
 340:../system/src/modbus_rtu/rtu_serial_io.c **** 					if (result == SRL_OK) {
 341:../system/src/modbus_rtu/rtu_serial_io.c **** 						// proceed to the next state (transmitting)
 342:../system/src/modbus_rtu/rtu_serial_io.c **** 						rtu_pool_state = RTU_POOL_TRANSMITTING;
 343:../system/src/modbus_rtu/rtu_serial_io.c **** 
 344:../system/src/modbus_rtu/rtu_serial_io.c **** 						retval = MODBUS_RET_OK;
 345:../system/src/modbus_rtu/rtu_serial_io.c **** 					}
 346:../system/src/modbus_rtu/rtu_serial_io.c **** 					else {
 347:../system/src/modbus_rtu/rtu_serial_io.c **** 						// if not do nothing and try in next pooler call
 348:../system/src/modbus_rtu/rtu_serial_io.c **** 						;
 349:../system/src/modbus_rtu/rtu_serial_io.c **** 					}
 350:../system/src/modbus_rtu/rtu_serial_io.c **** 				}
 351:../system/src/modbus_rtu/rtu_serial_io.c **** 
 352:../system/src/modbus_rtu/rtu_serial_io.c **** 
 353:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 354:../system/src/modbus_rtu/rtu_serial_io.c **** 			else {
 355:../system/src/modbus_rtu/rtu_serial_io.c **** 				retval = MODBUS_RET_REQUEST_GEN_ERR;
 356:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 357:../system/src/modbus_rtu/rtu_serial_io.c **** 
 358:../system/src/modbus_rtu/rtu_serial_io.c **** 			break;
 359:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 360:../system/src/modbus_rtu/rtu_serial_io.c **** 		case RTU_POOL_TRANSMITTING: {
 361:../system/src/modbus_rtu/rtu_serial_io.c **** 
 362:../system/src/modbus_rtu/rtu_serial_io.c **** 			// if transmission is still pending
 363:../system/src/modbus_rtu/rtu_serial_io.c **** 			if (rtu_used_serial_context->srl_tx_state == SRL_TXING || rtu_used_serial_context->srl_tx_state 
 364:../system/src/modbus_rtu/rtu_serial_io.c **** 				// wait until it will finish
 365:../system/src/modbus_rtu/rtu_serial_io.c **** 				;
 366:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 367:../system/src/modbus_rtu/rtu_serial_io.c **** 			else {
 368:../system/src/modbus_rtu/rtu_serial_io.c **** 				// trigger reception
 369:../system/src/modbus_rtu/rtu_serial_io.c **** 				srl_receive_data_with_callback(rtu_used_serial_context, rtu_serial_callback);
 370:../system/src/modbus_rtu/rtu_serial_io.c **** 
 371:../system/src/modbus_rtu/rtu_serial_io.c **** 				// enable the timeout in case the RTU slave won't respond
 372:../system/src/modbus_rtu/rtu_serial_io.c **** 				// at all or there is no slaves connected to RS485 bus
 373:../system/src/modbus_rtu/rtu_serial_io.c **** 				srl_switch_timeout_for_waiting(rtu_used_serial_context, 1);
 374:../system/src/modbus_rtu/rtu_serial_io.c **** 
 375:../system/src/modbus_rtu/rtu_serial_io.c **** 				// switch the state
 376:../system/src/modbus_rtu/rtu_serial_io.c **** 				rtu_pool_state = RTU_POOL_RECEIVING;
 377:../system/src/modbus_rtu/rtu_serial_io.c **** 
 378:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 379:../system/src/modbus_rtu/rtu_serial_io.c **** 
 380:../system/src/modbus_rtu/rtu_serial_io.c **** 			retval = MODBUS_RET_OK;
 381:../system/src/modbus_rtu/rtu_serial_io.c **** 
 382:../system/src/modbus_rtu/rtu_serial_io.c **** 			break;
 383:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 384:../system/src/modbus_rtu/rtu_serial_io.c **** 		case RTU_POOL_RECEIVING: {
 385:../system/src/modbus_rtu/rtu_serial_io.c **** 
 386:../system/src/modbus_rtu/rtu_serial_io.c **** 			// if data reception still took place
 387:../system/src/modbus_rtu/rtu_serial_io.c **** 			if (rtu_used_serial_context->srl_rx_state == SRL_WAITING_TO_RX || rtu_used_serial_context->srl_r
 388:../system/src/modbus_rtu/rtu_serial_io.c **** 				// wait
 389:../system/src/modbus_rtu/rtu_serial_io.c **** 				;
 390:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 391:../system/src/modbus_rtu/rtu_serial_io.c **** 			else if (rtu_used_serial_context->srl_rx_state == SRL_RX_DONE) {
 392:../system/src/modbus_rtu/rtu_serial_io.c **** 				// parse the response from RTU slave // here there is a problem with changing slave address
 393:../system/src/modbus_rtu/rtu_serial_io.c **** 				if (rtu_used_queue->function_id[rtu_used_queue->it] == 0x03 || rtu_used_queue->function_id[rtu_
 394:../system/src/modbus_rtu/rtu_serial_io.c **** 					result = rtu_parser_03_04_registers(
 395:../system/src/modbus_rtu/rtu_serial_io.c **** 							rtu_used_serial_context->srl_rx_buf_pointer,
 396:../system/src/modbus_rtu/rtu_serial_io.c **** 							rtu_used_serial_context->srl_rx_bytes_counter,
 397:../system/src/modbus_rtu/rtu_serial_io.c **** 							((rtu_register_data_t*)rtu_used_queue->function_parameter[rtu_used_queue->it]),
 398:../system/src/modbus_rtu/rtu_serial_io.c **** 							&rte_rtu_last_modbus_exception);
 399:../system/src/modbus_rtu/rtu_serial_io.c **** 				}
 400:../system/src/modbus_rtu/rtu_serial_io.c **** 				else {
 401:../system/src/modbus_rtu/rtu_serial_io.c **** 					retval = MODBUS_RET_WRONG_FUNCTION;
 402:../system/src/modbus_rtu/rtu_serial_io.c **** 				}
 403:../system/src/modbus_rtu/rtu_serial_io.c **** 
 404:../system/src/modbus_rtu/rtu_serial_io.c **** 				// check parsing result
 405:../system/src/modbus_rtu/rtu_serial_io.c **** 				if (result == MODBUS_RET_OK) {
 406:../system/src/modbus_rtu/rtu_serial_io.c **** 					// store the current time
 407:../system/src/modbus_rtu/rtu_serial_io.c **** 					rtu_used_queue->last_successfull_call_to_function[rtu_used_queue->it] = main_get_master_time()
 408:../system/src/modbus_rtu/rtu_serial_io.c **** 
 409:../system/src/modbus_rtu/rtu_serial_io.c **** 					// switch the state to inter-frame silence period
 410:../system/src/modbus_rtu/rtu_serial_io.c **** 					rtu_pool_state = RTU_POOL_WAIT_AFTER_RECEIVE;
 411:../system/src/modbus_rtu/rtu_serial_io.c **** 				}
 412:../system/src/modbus_rtu/rtu_serial_io.c **** 				else if (result == MODBUS_RET_GOT_EXCEPTION) {
 413:../system/src/modbus_rtu/rtu_serial_io.c **** 					// in case of an excetpion store the current timestamp
 414:../system/src/modbus_rtu/rtu_serial_io.c **** 					rte_rtu_last_modbus_exception_timestamp = main_get_master_time();
 415:../system/src/modbus_rtu/rtu_serial_io.c **** 
 416:../system/src/modbus_rtu/rtu_serial_io.c **** 					// switch the state to inter-frame silence period
 417:../system/src/modbus_rtu/rtu_serial_io.c **** 					rtu_pool_state = RTU_POOL_WAIT_AFTER_RECEIVE;
 418:../system/src/modbus_rtu/rtu_serial_io.c **** 				}
 419:../system/src/modbus_rtu/rtu_serial_io.c **** 				else {
 420:../system/src/modbus_rtu/rtu_serial_io.c **** 					// Receive error state will switch to the next function
 421:../system/src/modbus_rtu/rtu_serial_io.c **** 					rtu_pool_state = RTU_POOL_RECEIVE_ERROR;
 422:../system/src/modbus_rtu/rtu_serial_io.c **** 				}
 423:../system/src/modbus_rtu/rtu_serial_io.c **** 
 424:../system/src/modbus_rtu/rtu_serial_io.c **** 				// get current time to start the inter-frame delay
 425:../system/src/modbus_rtu/rtu_serial_io.c **** 				rtu_time_of_last_successfull_comm = main_get_master_time();
 426:../system/src/modbus_rtu/rtu_serial_io.c **** 
 427:../system/src/modbus_rtu/rtu_serial_io.c **** 				rte_rtu_number_of_successfull_serial_comm++;
 428:../system/src/modbus_rtu/rtu_serial_io.c **** 
 429:../system/src/modbus_rtu/rtu_serial_io.c **** 				// Close the serial port. This is a part of the stupid workaround of the problem
 430:../system/src/modbus_rtu/rtu_serial_io.c **** 				// with a serial port which leads to receiving a lot of idle frames of unknown origin
 431:../system/src/modbus_rtu/rtu_serial_io.c **** 				// and corrupting some part of data at the begining of some Modbus-RTU frames
 432:../system/src/modbus_rtu/rtu_serial_io.c **** 				srl_close(rtu_used_serial_context);
 433:../system/src/modbus_rtu/rtu_serial_io.c **** 
 434:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 435:../system/src/modbus_rtu/rtu_serial_io.c **** 
 436:../system/src/modbus_rtu/rtu_serial_io.c **** 			// in case of any error during data reception or the serial driver have fallen into unknown & un
 437:../system/src/modbus_rtu/rtu_serial_io.c **** 			// state
 438:../system/src/modbus_rtu/rtu_serial_io.c **** 			else {
 439:../system/src/modbus_rtu/rtu_serial_io.c **** 
 440:../system/src/modbus_rtu/rtu_serial_io.c **** 				rtu_pool_state = RTU_POOL_RECEIVE_ERROR;
 441:../system/src/modbus_rtu/rtu_serial_io.c **** 
 442:../system/src/modbus_rtu/rtu_serial_io.c **** 				srl_close(rtu_used_serial_context);
 443:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 444:../system/src/modbus_rtu/rtu_serial_io.c **** 
 445:../system/src/modbus_rtu/rtu_serial_io.c **** 			break;
 446:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 447:../system/src/modbus_rtu/rtu_serial_io.c **** 		case RTU_POOL_WAIT_AFTER_RECEIVE: {
 448:../system/src/modbus_rtu/rtu_serial_io.c **** 
 449:../system/src/modbus_rtu/rtu_serial_io.c **** 			// check if required interframe silence period elapsed
 450:../system/src/modbus_rtu/rtu_serial_io.c **** 			if (main_get_master_time() - rtu_time_of_last_successfull_comm > INTERFRAME_SP) {
 451:../system/src/modbus_rtu/rtu_serial_io.c **** 				rtu_pool_state = RTU_POOL_IDLE;
 452:../system/src/modbus_rtu/rtu_serial_io.c **** 
 453:../system/src/modbus_rtu/rtu_serial_io.c **** 				rtu_used_queue->it++;
 454:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 455:../system/src/modbus_rtu/rtu_serial_io.c **** 			break;
 456:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 457:../system/src/modbus_rtu/rtu_serial_io.c **** 		case RTU_POOL_RECEIVE_ERROR: {
 458:../system/src/modbus_rtu/rtu_serial_io.c **** 			// if the response from the slave was corrupted or any other serial I/O error
 459:../system/src/modbus_rtu/rtu_serial_io.c **** 			// occured switch to the next function in the queue
 460:../system/src/modbus_rtu/rtu_serial_io.c **** 			rtu_pool_state = RTU_POOL_IDLE;
 461:../system/src/modbus_rtu/rtu_serial_io.c **** 
 462:../system/src/modbus_rtu/rtu_serial_io.c **** 			// increasing the global counter of io errors
 463:../system/src/modbus_rtu/rtu_serial_io.c **** 			rte_rtu_number_of_serial_io_errors++;
 464:../system/src/modbus_rtu/rtu_serial_io.c **** 
 465:../system/src/modbus_rtu/rtu_serial_io.c **** 			rte_rtu_last_modbus_rx_error_timestamp = main_get_master_time();
 466:../system/src/modbus_rtu/rtu_serial_io.c **** 
 467:../system/src/modbus_rtu/rtu_serial_io.c **** 			// icrease the error counter for this queue element
 468:../system/src/modbus_rtu/rtu_serial_io.c **** 			rtu_used_queue->number_of_errors[rtu_used_queue->it] = rtu_used_queue->number_of_errors[rtu_used
 469:../system/src/modbus_rtu/rtu_serial_io.c **** 
 470:../system/src/modbus_rtu/rtu_serial_io.c **** 			// move to the next function queued
 471:../system/src/modbus_rtu/rtu_serial_io.c **** 			rtu_used_queue->it++;
 472:../system/src/modbus_rtu/rtu_serial_io.c **** 
 473:../system/src/modbus_rtu/rtu_serial_io.c **** 			retval = MODBUS_RET_OK;
 474:../system/src/modbus_rtu/rtu_serial_io.c **** 
 475:../system/src/modbus_rtu/rtu_serial_io.c **** 			break;
 476:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 477:../system/src/modbus_rtu/rtu_serial_io.c **** 		case RTU_POOL_STOP: {
 478:../system/src/modbus_rtu/rtu_serial_io.c **** 			break;
 479:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 480:../system/src/modbus_rtu/rtu_serial_io.c **** 		default: {
 481:../system/src/modbus_rtu/rtu_serial_io.c **** 			rtu_pool_state = RTU_POOL_STOP;
 482:../system/src/modbus_rtu/rtu_serial_io.c **** 			break;
 483:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 484:../system/src/modbus_rtu/rtu_serial_io.c **** 	}
 485:../system/src/modbus_rtu/rtu_serial_io.c **** //#endif
 486:../system/src/modbus_rtu/rtu_serial_io.c **** 	return retval;
 487:../system/src/modbus_rtu/rtu_serial_io.c **** }
 488:../system/src/modbus_rtu/rtu_serial_io.c **** 
 489:../system/src/modbus_rtu/rtu_serial_io.c **** int32_t rtu_serial_blocking_io(srl_context_t* serial_context, uint8_t query_ln) {
 299              		.loc 1 489 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 8
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              	.LVL23:
 304 0000 10B5     		push	{r4, lr}
 305              		.cfi_def_cfa_offset 8
 306              		.cfi_offset 4, -8
 307              		.cfi_offset 14, -4
 308 0002 82B0     		sub	sp, sp, #8
 309              		.cfi_def_cfa_offset 16
 310 0004 0446     		mov	r4, r0
 311              	.LVL24:
 490:../system/src/modbus_rtu/rtu_serial_io.c **** 
 491:../system/src/modbus_rtu/rtu_serial_io.c **** 	int32_t retval = MODBUS_RET_UNINITIALIZED;
 492:../system/src/modbus_rtu/rtu_serial_io.c **** 
 493:../system/src/modbus_rtu/rtu_serial_io.c **** 	uint8_t serial_result = SRL_UNINITIALIZED;
 312              		.loc 1 493 0
 313 0006 7F23     		movs	r3, #127
 314 0008 8DF80730 		strb	r3, [sp, #7]
 494:../system/src/modbus_rtu/rtu_serial_io.c **** 
 495:../system/src/modbus_rtu/rtu_serial_io.c **** 	// reset the CRC value to default
 496:../system/src/modbus_rtu/rtu_serial_io.c **** 	rtu_serial_previous_crc = 0xFFFF;
 315              		.loc 1 496 0
 316 000c 164B     		ldr	r3, .L25
 317 000e 4FF6FF72 		movw	r2, #65535
 318 0012 1A80     		strh	r2, [r3]	@ movhi
 497:../system/src/modbus_rtu/rtu_serial_io.c **** 
 498:../system/src/modbus_rtu/rtu_serial_io.c **** 	rtu_waiting_for_slave_addr = 1;
 319              		.loc 1 498 0
 320 0014 154B     		ldr	r3, .L25+4
 321 0016 0122     		movs	r2, #1
 322 0018 1A70     		strb	r2, [r3]
 499:../system/src/modbus_rtu/rtu_serial_io.c **** 
 500:../system/src/modbus_rtu/rtu_serial_io.c **** 	// sending data
 501:../system/src/modbus_rtu/rtu_serial_io.c **** 	serial_result = srl_start_tx(serial_context, query_ln);
 323              		.loc 1 501 0
 324 001a FFF7FEFF 		bl	srl_start_tx
 325              	.LVL25:
 326 001e 8DF80700 		strb	r0, [sp, #7]
 502:../system/src/modbus_rtu/rtu_serial_io.c **** 
 503:../system/src/modbus_rtu/rtu_serial_io.c **** 	// if tx has been triggered successfully
 504:../system/src/modbus_rtu/rtu_serial_io.c **** 	if (serial_result == SRL_OK) {
 327              		.loc 1 504 0
 328 0022 C0B9     		cbnz	r0, .L21
 505:../system/src/modbus_rtu/rtu_serial_io.c **** 
 506:../system/src/modbus_rtu/rtu_serial_io.c **** 		// wait for transmission to complete
 507:../system/src/modbus_rtu/rtu_serial_io.c **** 		srl_wait_for_tx_completion(serial_context);
 329              		.loc 1 507 0
 330 0024 2046     		mov	r0, r4
 331 0026 FFF7FEFF 		bl	srl_wait_for_tx_completion
 332              	.LVL26:
 508:../system/src/modbus_rtu/rtu_serial_io.c **** 
 509:../system/src/modbus_rtu/rtu_serial_io.c **** 		// trigger reception
 510:../system/src/modbus_rtu/rtu_serial_io.c **** 		serial_result = srl_receive_data_with_callback(serial_context, rtu_serial_callback);
 333              		.loc 1 510 0
 334 002a 1149     		ldr	r1, .L25+8
 335 002c 2046     		mov	r0, r4
 336 002e FFF7FEFF 		bl	srl_receive_data_with_callback
 337              	.LVL27:
 338 0032 8DF80700 		strb	r0, [sp, #7]
 511:../system/src/modbus_rtu/rtu_serial_io.c **** 
 512:../system/src/modbus_rtu/rtu_serial_io.c **** 		if (serial_result == SRL_OK) {
 339              		.loc 1 512 0
 340 0036 88B9     		cbnz	r0, .L22
 513:../system/src/modbus_rtu/rtu_serial_io.c **** 
 514:../system/src/modbus_rtu/rtu_serial_io.c **** 			// enable the timeout in case the RTU slave won't respond
 515:../system/src/modbus_rtu/rtu_serial_io.c **** 			// at all or there is no slaves connected to RS485 bus
 516:../system/src/modbus_rtu/rtu_serial_io.c **** 			srl_switch_timeout_for_waiting(serial_context, 1);
 341              		.loc 1 516 0
 342 0038 0121     		movs	r1, #1
 343 003a 2046     		mov	r0, r4
 344 003c FFF7FEFF 		bl	srl_switch_timeout_for_waiting
 345              	.LVL28:
 517:../system/src/modbus_rtu/rtu_serial_io.c **** 
 518:../system/src/modbus_rtu/rtu_serial_io.c **** 			// wait for the slave response
 519:../system/src/modbus_rtu/rtu_serial_io.c **** 			srl_wait_for_rx_completion_or_timeout(serial_context, &serial_result);
 346              		.loc 1 519 0
 347 0040 0DF10701 		add	r1, sp, #7
 348 0044 2046     		mov	r0, r4
 349 0046 FFF7FEFF 		bl	srl_wait_for_rx_completion_or_timeout
 350              	.LVL29:
 520:../system/src/modbus_rtu/rtu_serial_io.c **** 
 521:../system/src/modbus_rtu/rtu_serial_io.c **** 			if (serial_result == SRL_OK) {
 351              		.loc 1 521 0
 352 004a 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 353 004e 43B9     		cbnz	r3, .L23
 522:../system/src/modbus_rtu/rtu_serial_io.c **** 				retval = MODBUS_RET_OK;
 354              		.loc 1 522 0
 355 0050 0020     		movs	r0, #0
 356              	.LVL30:
 357              	.L19:
 523:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 524:../system/src/modbus_rtu/rtu_serial_io.c **** 			else {
 525:../system/src/modbus_rtu/rtu_serial_io.c **** 				retval = MODBUS_RET_GOT_EXCEPTION;
 526:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 527:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 528:../system/src/modbus_rtu/rtu_serial_io.c **** 
 529:../system/src/modbus_rtu/rtu_serial_io.c **** 	}
 530:../system/src/modbus_rtu/rtu_serial_io.c **** 
 531:../system/src/modbus_rtu/rtu_serial_io.c **** 	return retval;
 532:../system/src/modbus_rtu/rtu_serial_io.c **** }
 358              		.loc 1 532 0
 359 0052 02B0     		add	sp, sp, #8
 360              		.cfi_remember_state
 361              		.cfi_def_cfa_offset 8
 362              		@ sp needed
 363 0054 10BD     		pop	{r4, pc}
 364              	.LVL31:
 365              	.L21:
 366              		.cfi_restore_state
 491:../system/src/modbus_rtu/rtu_serial_io.c **** 
 367              		.loc 1 491 0
 368 0056 4FF0FF30 		mov	r0, #-1
 369 005a FAE7     		b	.L19
 370              	.L22:
 371 005c 4FF0FF30 		mov	r0, #-1
 372 0060 F7E7     		b	.L19
 373              	.L23:
 525:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 374              		.loc 1 525 0
 375 0062 0420     		movs	r0, #4
 376              	.LVL32:
 531:../system/src/modbus_rtu/rtu_serial_io.c **** }
 377              		.loc 1 531 0
 378 0064 F5E7     		b	.L19
 379              	.L26:
 380 0066 00BF     		.align	2
 381              	.L25:
 382 0068 00000000 		.word	.LANCHOR1
 383 006c 00000000 		.word	.LANCHOR0
 384 0070 00000000 		.word	rtu_serial_callback
 385              		.cfi_endproc
 386              	.LFE101:
 388              		.section	.text.rtu_serial_pool,"ax",%progbits
 389              		.align	1
 390              		.global	rtu_serial_pool
 391              		.syntax unified
 392              		.thumb
 393              		.thumb_func
 394              		.fpu softvfp
 396              	rtu_serial_pool:
 397              	.LFB100:
 204:../system/src/modbus_rtu/rtu_serial_io.c **** 
 398              		.loc 1 204 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 8
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 403              		.cfi_def_cfa_offset 20
 404              		.cfi_offset 4, -20
 405              		.cfi_offset 5, -16
 406              		.cfi_offset 6, -12
 407              		.cfi_offset 7, -8
 408              		.cfi_offset 14, -4
 409 0002 87B0     		sub	sp, sp, #28
 410              		.cfi_def_cfa_offset 48
 411              	.LVL33:
 210:../system/src/modbus_rtu/rtu_serial_io.c **** 
 412              		.loc 1 210 0
 413 0004 0023     		movs	r3, #0
 414 0006 8DF81730 		strb	r3, [sp, #23]
 215:../system/src/modbus_rtu/rtu_serial_io.c **** 
 415              		.loc 1 215 0
 416 000a A14B     		ldr	r3, .L65
 417 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 418 000e 8BB1     		cbz	r3, .L28
 218:../system/src/modbus_rtu/rtu_serial_io.c **** 			// set the status trigger
 419              		.loc 1 218 0
 420 0010 13F01F0F 		tst	r3, #31
 421 0014 0ED1     		bne	.L28
 220:../system/src/modbus_rtu/rtu_serial_io.c **** 
 422              		.loc 1 220 0
 423 0016 9F4A     		ldr	r2, .L65+4
 424 0018 0121     		movs	r1, #1
 425 001a 1170     		strb	r1, [r2]
 223:../system/src/modbus_rtu/rtu_serial_io.c **** 
 426              		.loc 1 223 0
 427 001c 0B44     		add	r3, r3, r1
 428 001e DBB2     		uxtb	r3, r3
 429 0020 9B4A     		ldr	r2, .L65
 430 0022 1370     		strb	r3, [r2]
 227:../system/src/modbus_rtu/rtu_serial_io.c **** 			{
 431              		.loc 1 227 0
 432 0024 DE2B     		cmp	r3, #222
 433 0026 01D9     		bls	.L29
 229:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 434              		.loc 1 229 0
 435 0028 9B4B     		ldr	r3, .L65+8
 436 002a 1970     		strb	r1, [r3]
 437              	.L29:
 233:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 438              		.loc 1 233 0
 439 002c 9B4B     		ldr	r3, .L65+12
 440 002e 1A68     		ldr	r2, [r3]
 441 0030 9B4B     		ldr	r3, .L65+16
 442 0032 1A60     		str	r2, [r3]
 443              	.L28:
 237:../system/src/modbus_rtu/rtu_serial_io.c **** 		rtu_used_queue->it = 0;
 444              		.loc 1 237 0
 445 0034 9B4B     		ldr	r3, .L65+20
 446 0036 1A68     		ldr	r2, [r3]
 447 0038 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 448 003a 5BB2     		sxtb	r3, r3
 449 003c 052B     		cmp	r3, #5
 450 003e 04DD     		ble	.L30
 238:../system/src/modbus_rtu/rtu_serial_io.c **** 
 451              		.loc 1 238 0
 452 0040 0023     		movs	r3, #0
 453 0042 1370     		strb	r3, [r2]
 241:../system/src/modbus_rtu/rtu_serial_io.c **** 	}
 454              		.loc 1 241 0
 455 0044 984B     		ldr	r3, .L65+24
 456 0046 0522     		movs	r2, #5
 457 0048 1A70     		strb	r2, [r3]
 458              	.L30:
 244:../system/src/modbus_rtu/rtu_serial_io.c **** 		case RTU_POOL_IDLE: {
 459              		.loc 1 244 0
 460 004a 974B     		ldr	r3, .L65+24
 461 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 462 004e 052B     		cmp	r3, #5
 463 0050 00F28681 		bhi	.L31
 464 0054 DFE813F0 		tbh	[pc, r3, lsl #1]
 465              	.L33:
 466 0058 0600     		.2byte	(.L32-.L33)/2
 467 005a A300     		.2byte	(.L34-.L33)/2
 468 005c BF00     		.2byte	(.L35-.L33)/2
 469 005e 5101     		.2byte	(.L36-.L33)/2
 470 0060 6501     		.2byte	(.L37-.L33)/2
 471 0062 8A01     		.2byte	(.L49-.L33)/2
 472              		.p2align 1
 473              	.L32:
 248:../system/src/modbus_rtu/rtu_serial_io.c **** 					rtu_used_serial_context->port,
 474              		.loc 1 248 0
 475 0064 914C     		ldr	r4, .L65+28
 476 0066 2068     		ldr	r0, [r4]
 477 0068 0168     		ldr	r1, [r0]
 478 006a 8269     		ldr	r2, [r0, #24]
 479 006c 838B     		ldrh	r3, [r0, #28]
 480 006e 4569     		ldr	r5, [r0, #20]
 481 0070 C68B     		ldrh	r6, [r0, #30]
 482 0072 4768     		ldr	r7, [r0, #4]
 483 0074 90F808C0 		ldrb	ip, [r0, #8]	@ zero_extendqisi2
 484 0078 CDF80CC0 		str	ip, [sp, #12]
 485 007c 0297     		str	r7, [sp, #8]
 486 007e 0196     		str	r6, [sp, #4]
 487 0080 0095     		str	r5, [sp]
 488 0082 FFF7FEFF 		bl	srl_init
 489              	.LVL34:
 262:../system/src/modbus_rtu/rtu_serial_io.c **** 
 490              		.loc 1 262 0
 491 0086 0022     		movs	r2, #0
 492 0088 0121     		movs	r1, #1
 493 008a 2068     		ldr	r0, [r4]
 494 008c FFF7FEFF 		bl	srl_switch_timeout
 495              	.LVL35:
 264:../system/src/modbus_rtu/rtu_serial_io.c **** 
 496              		.loc 1 264 0
 497 0090 0121     		movs	r1, #1
 498 0092 2068     		ldr	r0, [r4]
 499 0094 FFF7FEFF 		bl	srl_switch_tx_delay
 500              	.LVL36:
 267:../system/src/modbus_rtu/rtu_serial_io.c **** 				// read holding registers
 501              		.loc 1 267 0
 502 0098 824B     		ldr	r3, .L65+20
 503 009a 1B68     		ldr	r3, [r3]
 504 009c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 505 009e 52B2     		sxtb	r2, r2
 506 00a0 1A44     		add	r2, r2, r3
 507 00a2 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 508 00a4 D2B2     		uxtb	r2, r2
 509 00a6 032A     		cmp	r2, #3
 510 00a8 0DD0     		beq	.L61
 285:../system/src/modbus_rtu/rtu_serial_io.c **** 				// read input registers
 511              		.loc 1 285 0
 512 00aa 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 513 00ac 52B2     		sxtb	r2, r2
 514 00ae 1A44     		add	r2, r2, r3
 515 00b0 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 516 00b2 D2B2     		uxtb	r2, r2
 517 00b4 042A     		cmp	r2, #4
 518 00b6 26D0     		beq	.L62
 301:../system/src/modbus_rtu/rtu_serial_io.c **** 
 519              		.loc 1 301 0
 520 00b8 7B4A     		ldr	r2, .L65+24
 521 00ba 0521     		movs	r1, #5
 522 00bc 1170     		strb	r1, [r2]
 304:../system/src/modbus_rtu/rtu_serial_io.c **** 
 523              		.loc 1 304 0
 524 00be 0022     		movs	r2, #0
 525 00c0 1A70     		strb	r2, [r3]
 526              	.LVL37:
 355:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 527              		.loc 1 355 0
 528 00c2 0324     		movs	r4, #3
 529 00c4 54E1     		b	.L27
 530              	.LVL38:
 531              	.L61:
 269:../system/src/modbus_rtu/rtu_serial_io.c **** 
 532              		.loc 1 269 0
 533 00c6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 534 00c8 52B2     		sxtb	r2, r2
 535 00ca 0232     		adds	r2, r2, #2
 536 00cc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 537              	.LVL39:
 271:../system/src/modbus_rtu/rtu_serial_io.c **** 				rtu_current_03_base_register = ptr_func_03->base_address;
 538              		.loc 1 271 0
 539 00d0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 540 00d2 774C     		ldr	r4, .L65+32
 541 00d4 2270     		strb	r2, [r4]
 272:../system/src/modbus_rtu/rtu_serial_io.c **** 				rtu_current_03_number_of_registers = ptr_func_03->number_of_registers;
 542              		.loc 1 272 0
 543 00d6 9A88     		ldrh	r2, [r3, #4]
 544 00d8 7648     		ldr	r0, .L65+36
 545 00da 0280     		strh	r2, [r0]	@ movhi
 273:../system/src/modbus_rtu/rtu_serial_io.c **** 
 546              		.loc 1 273 0
 547 00dc 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 548 00de 764B     		ldr	r3, .L65+40
 549              	.LVL40:
 550 00e0 1A70     		strb	r2, [r3]
 278:../system/src/modbus_rtu/rtu_serial_io.c **** 						rtu_used_serial_context->srl_tx_buf_ln,
 551              		.loc 1 278 0
 552 00e2 724A     		ldr	r2, .L65+28
 553 00e4 1268     		ldr	r2, [r2]
 276:../system/src/modbus_rtu/rtu_serial_io.c **** 						1,
 554              		.loc 1 276 0
 555 00e6 5169     		ldr	r1, [r2, #20]
 279:../system/src/modbus_rtu/rtu_serial_io.c **** 						&output_data_lenght,
 556              		.loc 1 279 0
 557 00e8 D28B     		ldrh	r2, [r2, #30]
 276:../system/src/modbus_rtu/rtu_serial_io.c **** 						1,
 558              		.loc 1 276 0
 559 00ea 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 560 00ec 0088     		ldrh	r0, [r0]
 561 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 562 00f0 0293     		str	r3, [sp, #8]
 563 00f2 0190     		str	r0, [sp, #4]
 564 00f4 0094     		str	r4, [sp]
 565 00f6 0DF11703 		add	r3, sp, #23
 566 00fa D2B2     		uxtb	r2, r2
 567 00fc 0120     		movs	r0, #1
 568 00fe FFF7FEFF 		bl	rtu_request_03_04_registers
 569              	.LVL41:
 570 0102 0446     		mov	r4, r0
 571              	.LVL42:
 572 0104 1FE0     		b	.L40
 573              	.LVL43:
 574              	.L62:
 291:../system/src/modbus_rtu/rtu_serial_io.c **** 						rtu_used_serial_context->srl_tx_buf_ln,
 575              		.loc 1 291 0
 576 0106 694A     		ldr	r2, .L65+28
 577 0108 1268     		ldr	r2, [r2]
 289:../system/src/modbus_rtu/rtu_serial_io.c **** 						0,
 578              		.loc 1 289 0
 579 010a 5169     		ldr	r1, [r2, #20]
 292:../system/src/modbus_rtu/rtu_serial_io.c **** 						&output_data_lenght,
 580              		.loc 1 292 0
 581 010c D28B     		ldrh	r2, [r2, #30]
 294:../system/src/modbus_rtu/rtu_serial_io.c **** 						((rtu_register_data_t*)rtu_used_queue->function_parameter[rtu_used_queue->it])->base_address,
 582              		.loc 1 294 0
 583 010e 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 584 0110 40B2     		sxtb	r0, r0
 585 0112 0230     		adds	r0, r0, #2
 586 0114 53F82000 		ldr	r0, [r3, r0, lsl #2]
 289:../system/src/modbus_rtu/rtu_serial_io.c **** 						0,
 587              		.loc 1 289 0
 588 0118 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 295:../system/src/modbus_rtu/rtu_serial_io.c **** 						((rtu_register_data_t*)rtu_used_queue->function_parameter[rtu_used_queue->it])->number_of_reg
 589              		.loc 1 295 0
 590 011a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 591 011c 40B2     		sxtb	r0, r0
 592 011e 0230     		adds	r0, r0, #2
 593 0120 53F82000 		ldr	r0, [r3, r0, lsl #2]
 289:../system/src/modbus_rtu/rtu_serial_io.c **** 						0,
 594              		.loc 1 289 0
 595 0124 8588     		ldrh	r5, [r0, #4]
 296:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 596              		.loc 1 296 0
 597 0126 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 598 0128 40B2     		sxtb	r0, r0
 599 012a 0230     		adds	r0, r0, #2
 600 012c 53F82030 		ldr	r3, [r3, r0, lsl #2]
 289:../system/src/modbus_rtu/rtu_serial_io.c **** 						0,
 601              		.loc 1 289 0
 602 0130 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 603 0132 0293     		str	r3, [sp, #8]
 604 0134 0195     		str	r5, [sp, #4]
 605 0136 0094     		str	r4, [sp]
 606 0138 0DF11703 		add	r3, sp, #23
 607 013c D2B2     		uxtb	r2, r2
 608 013e 0020     		movs	r0, #0
 609 0140 FFF7FEFF 		bl	rtu_request_03_04_registers
 610              	.LVL44:
 611 0144 0446     		mov	r4, r0
 612              	.LVL45:
 613              	.L40:
 311:../system/src/modbus_rtu/rtu_serial_io.c **** 
 614              		.loc 1 311 0
 615 0146 002C     		cmp	r4, #0
 616 0148 40F01581 		bne	.L50
 314:../system/src/modbus_rtu/rtu_serial_io.c **** 					// call the function which will process the same stuff than
 617              		.loc 1 314 0
 618 014c 5B4B     		ldr	r3, .L65+44
 619 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 620 0150 93B1     		cbz	r3, .L42
 318:../system/src/modbus_rtu/rtu_serial_io.c **** 
 621              		.loc 1 318 0
 622 0152 9DF81710 		ldrb	r1, [sp, #23]	@ zero_extendqisi2
 623 0156 554B     		ldr	r3, .L65+28
 624 0158 1868     		ldr	r0, [r3]
 625              	.LVL46:
 626 015a FFF7FEFF 		bl	rtu_serial_blocking_io
 627              	.LVL47:
 320:../system/src/modbus_rtu/rtu_serial_io.c **** 						// if transmission and reception was successful switch to the
 628              		.loc 1 320 0
 629 015e 28B9     		cbnz	r0, .L43
 324:../system/src/modbus_rtu/rtu_serial_io.c **** 					}
 630              		.loc 1 324 0
 631 0160 514B     		ldr	r3, .L65+24
 632 0162 0222     		movs	r2, #2
 633 0164 1A70     		strb	r2, [r3]
 634 0166 4FF0FF34 		mov	r4, #-1
 635 016a 01E1     		b	.L27
 636              	.L43:
 327:../system/src/modbus_rtu/rtu_serial_io.c **** 					}
 637              		.loc 1 327 0
 638 016c 4E4B     		ldr	r3, .L65+24
 639 016e 0422     		movs	r2, #4
 640 0170 1A70     		strb	r2, [r3]
 641 0172 4FF0FF34 		mov	r4, #-1
 642 0176 FBE0     		b	.L27
 643              	.L42:
 332:../system/src/modbus_rtu/rtu_serial_io.c **** 
 644              		.loc 1 332 0
 645 0178 9DF81710 		ldrb	r1, [sp, #23]	@ zero_extendqisi2
 646 017c 4B4B     		ldr	r3, .L65+28
 647 017e 1868     		ldr	r0, [r3]
 648              	.LVL48:
 649 0180 FFF7FEFF 		bl	srl_start_tx
 650              	.LVL49:
 335:../system/src/modbus_rtu/rtu_serial_io.c **** 
 651              		.loc 1 335 0
 652 0184 4E4B     		ldr	r3, .L65+48
 653 0186 4FF6FF72 		movw	r2, #65535
 654 018a 1A80     		strh	r2, [r3]	@ movhi
 337:../system/src/modbus_rtu/rtu_serial_io.c **** 
 655              		.loc 1 337 0
 656 018c 4D4B     		ldr	r3, .L65+52
 657 018e 0122     		movs	r2, #1
 658 0190 1A70     		strb	r2, [r3]
 340:../system/src/modbus_rtu/rtu_serial_io.c **** 						// proceed to the next state (transmitting)
 659              		.loc 1 340 0
 660 0192 0028     		cmp	r0, #0
 661 0194 40F0F180 		bne	.L51
 342:../system/src/modbus_rtu/rtu_serial_io.c **** 
 662              		.loc 1 342 0
 663 0198 434B     		ldr	r3, .L65+24
 664 019a 1A70     		strb	r2, [r3]
 665              	.LVL50:
 666 019c E8E0     		b	.L27
 667              	.LVL51:
 668              	.L34:
 363:../system/src/modbus_rtu/rtu_serial_io.c **** 				// wait until it will finish
 669              		.loc 1 363 0
 670 019e 434B     		ldr	r3, .L65+28
 671 01a0 1868     		ldr	r0, [r3]
 672 01a2 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 673 01a6 DBB2     		uxtb	r3, r3
 674 01a8 032B     		cmp	r3, #3
 675 01aa 00F0E980 		beq	.L52
 363:../system/src/modbus_rtu/rtu_serial_io.c **** 				// wait until it will finish
 676              		.loc 1 363 0 is_stmt 0 discriminator 1
 677 01ae 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 678 01b2 DBB2     		uxtb	r3, r3
 679 01b4 022B     		cmp	r3, #2
 680 01b6 01D1     		bne	.L63
 380:../system/src/modbus_rtu/rtu_serial_io.c **** 
 681              		.loc 1 380 0 is_stmt 1
 682 01b8 0024     		movs	r4, #0
 683 01ba D9E0     		b	.L27
 684              	.L63:
 369:../system/src/modbus_rtu/rtu_serial_io.c **** 
 685              		.loc 1 369 0
 686 01bc 4249     		ldr	r1, .L65+56
 687 01be FFF7FEFF 		bl	srl_receive_data_with_callback
 688              	.LVL52:
 373:../system/src/modbus_rtu/rtu_serial_io.c **** 
 689              		.loc 1 373 0
 690 01c2 0121     		movs	r1, #1
 691 01c4 394B     		ldr	r3, .L65+28
 692 01c6 1868     		ldr	r0, [r3]
 693 01c8 FFF7FEFF 		bl	srl_switch_timeout_for_waiting
 694              	.LVL53:
 376:../system/src/modbus_rtu/rtu_serial_io.c **** 
 695              		.loc 1 376 0
 696 01cc 364B     		ldr	r3, .L65+24
 697 01ce 0222     		movs	r2, #2
 698 01d0 1A70     		strb	r2, [r3]
 380:../system/src/modbus_rtu/rtu_serial_io.c **** 
 699              		.loc 1 380 0
 700 01d2 0024     		movs	r4, #0
 701 01d4 CCE0     		b	.L27
 702              	.L35:
 387:../system/src/modbus_rtu/rtu_serial_io.c **** 				// wait
 703              		.loc 1 387 0
 704 01d6 354B     		ldr	r3, .L65+28
 705 01d8 1B68     		ldr	r3, [r3]
 706 01da 93F84420 		ldrb	r2, [r3, #68]	@ zero_extendqisi2
 707 01de D2B2     		uxtb	r2, r2
 708 01e0 022A     		cmp	r2, #2
 709 01e2 00F0CF80 		beq	.L54
 387:../system/src/modbus_rtu/rtu_serial_io.c **** 				// wait
 710              		.loc 1 387 0 is_stmt 0 discriminator 1
 711 01e6 93F84420 		ldrb	r2, [r3, #68]	@ zero_extendqisi2
 712 01ea D2B2     		uxtb	r2, r2
 713 01ec 032A     		cmp	r2, #3
 714 01ee 00F0CC80 		beq	.L55
 387:../system/src/modbus_rtu/rtu_serial_io.c **** 				// wait
 715              		.loc 1 387 0 discriminator 2
 716 01f2 93F84420 		ldrb	r2, [r3, #68]	@ zero_extendqisi2
 717 01f6 D2B2     		uxtb	r2, r2
 718 01f8 012A     		cmp	r2, #1
 719 01fa 00F0C980 		beq	.L56
 391:../system/src/modbus_rtu/rtu_serial_io.c **** 				// parse the response from RTU slave // here there is a problem with changing slave address
 720              		.loc 1 391 0 is_stmt 1
 721 01fe 93F84420 		ldrb	r2, [r3, #68]	@ zero_extendqisi2
 722 0202 D2B2     		uxtb	r2, r2
 723 0204 042A     		cmp	r2, #4
 724 0206 6FD1     		bne	.L44
 393:../system/src/modbus_rtu/rtu_serial_io.c **** 					result = rtu_parser_03_04_registers(
 725              		.loc 1 393 0
 726 0208 264A     		ldr	r2, .L65+20
 727 020a 1468     		ldr	r4, [r2]
 728 020c 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 729 020e 52B2     		sxtb	r2, r2
 730 0210 2244     		add	r2, r2, r4
 731 0212 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 732 0214 D2B2     		uxtb	r2, r2
 733 0216 032A     		cmp	r2, #3
 734 0218 1BD0     		beq	.L45
 393:../system/src/modbus_rtu/rtu_serial_io.c **** 					result = rtu_parser_03_04_registers(
 735              		.loc 1 393 0 is_stmt 0 discriminator 1
 736 021a 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 737 021c 52B2     		sxtb	r2, r2
 738 021e 2244     		add	r2, r2, r4
 739 0220 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 740 0222 D2B2     		uxtb	r2, r2
 741 0224 042A     		cmp	r2, #4
 742 0226 14D0     		beq	.L45
 208:../system/src/modbus_rtu/rtu_serial_io.c **** 
 743              		.loc 1 208 0 is_stmt 1
 744 0228 4FF0FF33 		mov	r3, #-1
 401:../system/src/modbus_rtu/rtu_serial_io.c **** 				}
 745              		.loc 1 401 0
 746 022c 0224     		movs	r4, #2
 747              	.LVL54:
 748              	.L46:
 412:../system/src/modbus_rtu/rtu_serial_io.c **** 					// in case of an excetpion store the current timestamp
 749              		.loc 1 412 0
 750 022e 042B     		cmp	r3, #4
 751 0230 52D0     		beq	.L64
 421:../system/src/modbus_rtu/rtu_serial_io.c **** 				}
 752              		.loc 1 421 0
 753 0232 1D4B     		ldr	r3, .L65+24
 754 0234 0422     		movs	r2, #4
 755 0236 1A70     		strb	r2, [r3]
 756              	.L47:
 757              	.LBB20:
 758              	.LBB21:
 759              		.file 3 "../include/main.h"
   1:../include/main.h **** #ifndef MAIN_H_
   2:../include/main.h **** #define MAIN_H_
   3:../include/main.h **** 
   4:../include/main.h **** #include "aprs/ax25.h"
   5:../include/main.h **** #include "drivers/serial.h"
   6:../include/main.h **** #include "config_data.h"
   7:../include/main.h **** 
   8:../include/main.h **** #define SW_VER "EA00"
   9:../include/main.h **** #define SW_DATE "23052021"
  10:../include/main.h **** 
  11:../include/main.h **** #define SYSTICK_TICKS_PER_SECONDS 100
  12:../include/main.h **** #define SYSTICK_TICKS_PERIOD 10
  13:../include/main.h **** 
  14:../include/main.h **** #define INTERNAL_WATCHDOG
  15:../include/main.h **** #define EXTERNAL_WATCHDOG
  16:../include/main.h **** 
  17:../include/main.h **** #define PWR_SWITCH_BOTH
  18:../include/main.h **** 
  19:../include/main.h **** #define OWN_APRS_MSG_LN 	160
  20:../include/main.h **** 
  21:../include/main.h **** extern uint32_t master_time;
  22:../include/main.h **** 
  23:../include/main.h **** extern const config_data_mode_t * main_config_data_mode;
  24:../include/main.h **** extern const config_data_basic_t * main_config_data_basic;
  25:../include/main.h **** extern const config_data_wx_sources_t * main_config_data_wx_sources;
  26:../include/main.h **** extern const config_data_umb_t * main_config_data_umb;
  27:../include/main.h **** extern const config_data_rtu_t * main_config_data_rtu;
  28:../include/main.h **** 
  29:../include/main.h **** extern int32_t main_wx_sensors_pool_timer;
  30:../include/main.h **** extern int32_t main_one_minute_pool_timer;
  31:../include/main.h **** extern int32_t main_one_second_pool_timer;
  32:../include/main.h **** extern int32_t main_two_second_pool_timer;
  33:../include/main.h **** extern int32_t main_ten_second_pool_timer;
  34:../include/main.h **** 
  35:../include/main.h **** extern AX25Ctx main_ax25;
  36:../include/main.h **** extern Afsk main_afsk;
  37:../include/main.h **** 
  38:../include/main.h **** extern AX25Call main_own_path[3];
  39:../include/main.h **** extern uint8_t main_own_path_ln;
  40:../include/main.h **** extern uint8_t main_own_aprs_msg_len;
  41:../include/main.h **** extern char main_own_aprs_msg[OWN_APRS_MSG_LN];
  42:../include/main.h **** 
  43:../include/main.h **** extern char main_string_latitude[9];
  44:../include/main.h **** extern char main_string_longitude[9];
  45:../include/main.h **** 
  46:../include/main.h **** extern char main_symbol_f;
  47:../include/main.h **** extern char main_symbol_s;
  48:../include/main.h **** 
  49:../include/main.h **** extern srl_context_t* main_kiss_srl_ctx_ptr;
  50:../include/main.h **** extern srl_context_t* main_wx_srl_ctx_ptr;
  51:../include/main.h **** 
  52:../include/main.h **** extern  uint8_t main_kiss_enabled;
  53:../include/main.h **** 
  54:../include/main.h **** extern char after_tx_lock;
  55:../include/main.h **** 
  56:../include/main.h **** extern unsigned short rx10m, tx10m, digi10m, digidrop10m, kiss10m;
  57:../include/main.h **** 
  58:../include/main.h **** uint16_t main_get_adc_sample(void);
  59:../include/main.h **** 
  60:../include/main.h **** void main_service_cpu_load_ticks(void);
  61:../include/main.h **** 
  62:../include/main.h **** inline uint32_t main_get_master_time(void) {
  63:../include/main.h **** 	return master_time;
 760              		.loc 3 63 0
 761 0238 244B     		ldr	r3, .L65+60
 762 023a 1A68     		ldr	r2, [r3]
 763              	.LBE21:
 764              	.LBE20:
 425:../system/src/modbus_rtu/rtu_serial_io.c **** 
 765              		.loc 1 425 0
 766 023c 174B     		ldr	r3, .L65+12
 767 023e 1A60     		str	r2, [r3]
 427:../system/src/modbus_rtu/rtu_serial_io.c **** 
 768              		.loc 1 427 0
 769 0240 234A     		ldr	r2, .L65+64
 770 0242 1388     		ldrh	r3, [r2]
 771 0244 0133     		adds	r3, r3, #1
 772 0246 1380     		strh	r3, [r2]	@ movhi
 432:../system/src/modbus_rtu/rtu_serial_io.c **** 
 773              		.loc 1 432 0
 774 0248 184B     		ldr	r3, .L65+28
 775 024a 1868     		ldr	r0, [r3]
 776 024c FFF7FEFF 		bl	srl_close
 777              	.LVL55:
 778 0250 8EE0     		b	.L27
 779              	.LVL56:
 780              	.L45:
 394:../system/src/modbus_rtu/rtu_serial_io.c **** 							rtu_used_serial_context->srl_rx_buf_pointer,
 781              		.loc 1 394 0
 782 0252 9869     		ldr	r0, [r3, #24]
 783 0254 198C     		ldrh	r1, [r3, #32]
 397:../system/src/modbus_rtu/rtu_serial_io.c **** 							&rte_rtu_last_modbus_exception);
 784              		.loc 1 397 0
 785 0256 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 786 0258 5BB2     		sxtb	r3, r3
 787 025a 0233     		adds	r3, r3, #2
 788 025c 54F82320 		ldr	r2, [r4, r3, lsl #2]
 394:../system/src/modbus_rtu/rtu_serial_io.c **** 							rtu_used_serial_context->srl_rx_buf_pointer,
 789              		.loc 1 394 0
 790 0260 1C4B     		ldr	r3, .L65+68
 791 0262 FFF7FEFF 		bl	rtu_parser_03_04_registers
 792              	.LVL57:
 405:../system/src/modbus_rtu/rtu_serial_io.c **** 					// store the current time
 793              		.loc 1 405 0
 794 0266 0346     		mov	r3, r0
 795 0268 70B9     		cbnz	r0, .L58
 407:../system/src/modbus_rtu/rtu_serial_io.c **** 
 796              		.loc 1 407 0
 797 026a 0E4B     		ldr	r3, .L65+20
 798 026c 1A68     		ldr	r2, [r3]
 799 026e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 800 0270 5BB2     		sxtb	r3, r3
 801              	.LBB22:
 802              	.LBB23:
 803              		.loc 3 63 0
 804 0272 1649     		ldr	r1, .L65+60
 805 0274 0968     		ldr	r1, [r1]
 806              	.LBE23:
 807              	.LBE22:
 407:../system/src/modbus_rtu/rtu_serial_io.c **** 
 808              		.loc 1 407 0
 809 0276 0833     		adds	r3, r3, #8
 810 0278 42F82310 		str	r1, [r2, r3, lsl #2]
 410:../system/src/modbus_rtu/rtu_serial_io.c **** 				}
 811              		.loc 1 410 0
 812 027c 0A4B     		ldr	r3, .L65+24
 813 027e 0322     		movs	r2, #3
 814 0280 1A70     		strb	r2, [r3]
 206:../system/src/modbus_rtu/rtu_serial_io.c **** //#ifdef _MODBUS_RTU
 815              		.loc 1 206 0
 816 0282 4FF0FF34 		mov	r4, #-1
 817 0286 D7E7     		b	.L47
 818              	.L58:
 819 0288 4FF0FF34 		mov	r4, #-1
 820 028c CFE7     		b	.L46
 821              	.L66:
 822 028e 00BF     		.align	2
 823              	.L65:
 824 0290 00000000 		.word	rte_rtu_number_of_serial_io_errors
 825 0294 00000000 		.word	rte_main_trigger_modbus_status
 826 0298 00000000 		.word	rte_main_reboot_req
 827 029c 00000000 		.word	.LANCHOR4
 828 02a0 00000000 		.word	.LANCHOR3
 829 02a4 00000000 		.word	rtu_used_queue
 830 02a8 00000000 		.word	.LANCHOR5
 831 02ac 00000000 		.word	rtu_used_serial_context
 832 02b0 00000000 		.word	rtu_current_03_slave_address
 833 02b4 00000000 		.word	rtu_current_03_base_register
 834 02b8 00000000 		.word	rtu_current_03_number_of_registers
 835 02bc 00000000 		.word	.LANCHOR2
 836 02c0 00000000 		.word	.LANCHOR1
 837 02c4 00000000 		.word	.LANCHOR0
 838 02c8 00000000 		.word	rtu_serial_callback
 839 02cc 00000000 		.word	master_time
 840 02d0 00000000 		.word	rte_rtu_number_of_successfull_serial_comm
 841 02d4 00000000 		.word	rte_rtu_last_modbus_exception
 842              	.LVL58:
 843              	.L64:
 844              	.LBB24:
 845              	.LBB25:
 846              		.loc 3 63 0
 847 02d8 304B     		ldr	r3, .L67
 848 02da 1A68     		ldr	r2, [r3]
 849              	.LBE25:
 850              	.LBE24:
 414:../system/src/modbus_rtu/rtu_serial_io.c **** 
 851              		.loc 1 414 0
 852 02dc 304B     		ldr	r3, .L67+4
 853 02de 1A60     		str	r2, [r3]
 417:../system/src/modbus_rtu/rtu_serial_io.c **** 				}
 854              		.loc 1 417 0
 855 02e0 304B     		ldr	r3, .L67+8
 856 02e2 0322     		movs	r2, #3
 857 02e4 1A70     		strb	r2, [r3]
 858 02e6 A7E7     		b	.L47
 859              	.LVL59:
 860              	.L44:
 440:../system/src/modbus_rtu/rtu_serial_io.c **** 
 861              		.loc 1 440 0
 862 02e8 2E4A     		ldr	r2, .L67+8
 863 02ea 0421     		movs	r1, #4
 864 02ec 1170     		strb	r1, [r2]
 442:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 865              		.loc 1 442 0
 866 02ee 1846     		mov	r0, r3
 867 02f0 FFF7FEFF 		bl	srl_close
 868              	.LVL60:
 206:../system/src/modbus_rtu/rtu_serial_io.c **** //#ifdef _MODBUS_RTU
 869              		.loc 1 206 0
 870 02f4 4FF0FF34 		mov	r4, #-1
 871 02f8 3AE0     		b	.L27
 872              	.L36:
 873              	.LBB26:
 874              	.LBB27:
 875              		.loc 3 63 0
 876 02fa 284B     		ldr	r3, .L67
 877 02fc 1B68     		ldr	r3, [r3]
 878              	.LBE27:
 879              	.LBE26:
 450:../system/src/modbus_rtu/rtu_serial_io.c **** 				rtu_pool_state = RTU_POOL_IDLE;
 880              		.loc 1 450 0
 881 02fe 2A4A     		ldr	r2, .L67+12
 882 0300 1268     		ldr	r2, [r2]
 883 0302 9B1A     		subs	r3, r3, r2
 884 0304 142B     		cmp	r3, #20
 885 0306 46D9     		bls	.L59
 451:../system/src/modbus_rtu/rtu_serial_io.c **** 
 886              		.loc 1 451 0
 887 0308 264B     		ldr	r3, .L67+8
 888 030a 0022     		movs	r2, #0
 889 030c 1A70     		strb	r2, [r3]
 453:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 890              		.loc 1 453 0
 891 030e 274B     		ldr	r3, .L67+16
 892 0310 1A68     		ldr	r2, [r3]
 893 0312 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 894 0314 5BB2     		sxtb	r3, r3
 895 0316 0133     		adds	r3, r3, #1
 896 0318 5BB2     		sxtb	r3, r3
 897 031a 1370     		strb	r3, [r2]
 206:../system/src/modbus_rtu/rtu_serial_io.c **** //#ifdef _MODBUS_RTU
 898              		.loc 1 206 0
 899 031c 4FF0FF34 		mov	r4, #-1
 900 0320 26E0     		b	.L27
 901              	.L37:
 460:../system/src/modbus_rtu/rtu_serial_io.c **** 
 902              		.loc 1 460 0
 903 0322 0024     		movs	r4, #0
 904 0324 1F4B     		ldr	r3, .L67+8
 905 0326 1C70     		strb	r4, [r3]
 463:../system/src/modbus_rtu/rtu_serial_io.c **** 
 906              		.loc 1 463 0
 907 0328 214A     		ldr	r2, .L67+20
 908 032a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 909 032c 0133     		adds	r3, r3, #1
 910 032e 1370     		strb	r3, [r2]
 911              	.LBB28:
 912              	.LBB29:
 913              		.loc 3 63 0
 914 0330 1A4B     		ldr	r3, .L67
 915 0332 1A68     		ldr	r2, [r3]
 916              	.LBE29:
 917              	.LBE28:
 465:../system/src/modbus_rtu/rtu_serial_io.c **** 
 918              		.loc 1 465 0
 919 0334 1F4B     		ldr	r3, .L67+24
 920 0336 1A60     		str	r2, [r3]
 468:../system/src/modbus_rtu/rtu_serial_io.c **** 
 921              		.loc 1 468 0
 922 0338 1C4B     		ldr	r3, .L67+16
 923 033a 1A68     		ldr	r2, [r3]
 924 033c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 925 033e 5BB2     		sxtb	r3, r3
 926 0340 1C33     		adds	r3, r3, #28
 927 0342 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 928 0346 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 929 0348 5BB2     		sxtb	r3, r3
 930 034a 0131     		adds	r1, r1, #1
 931 034c 89B2     		uxth	r1, r1
 932 034e 1C33     		adds	r3, r3, #28
 933 0350 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 471:../system/src/modbus_rtu/rtu_serial_io.c **** 
 934              		.loc 1 471 0
 935 0354 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 936 0356 5BB2     		sxtb	r3, r3
 937 0358 0133     		adds	r3, r3, #1
 938 035a 5BB2     		sxtb	r3, r3
 939 035c 1370     		strb	r3, [r2]
 940              	.LVL61:
 475:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 941              		.loc 1 475 0
 942 035e 07E0     		b	.L27
 943              	.LVL62:
 944              	.L31:
 481:../system/src/modbus_rtu/rtu_serial_io.c **** 			break;
 945              		.loc 1 481 0
 946 0360 104B     		ldr	r3, .L67+8
 947 0362 0522     		movs	r2, #5
 948 0364 1A70     		strb	r2, [r3]
 206:../system/src/modbus_rtu/rtu_serial_io.c **** //#ifdef _MODBUS_RTU
 949              		.loc 1 206 0
 950 0366 4FF0FF34 		mov	r4, #-1
 482:../system/src/modbus_rtu/rtu_serial_io.c **** 		}
 951              		.loc 1 482 0
 952 036a 01E0     		b	.L27
 953              	.L49:
 206:../system/src/modbus_rtu/rtu_serial_io.c **** //#ifdef _MODBUS_RTU
 954              		.loc 1 206 0
 955 036c 4FF0FF34 		mov	r4, #-1
 956              	.LVL63:
 957              	.L27:
 487:../system/src/modbus_rtu/rtu_serial_io.c **** 
 958              		.loc 1 487 0
 959 0370 2046     		mov	r0, r4
 960 0372 07B0     		add	sp, sp, #28
 961              		.cfi_remember_state
 962              		.cfi_def_cfa_offset 20
 963              		@ sp needed
 964 0374 F0BD     		pop	{r4, r5, r6, r7, pc}
 965              	.LVL64:
 966              	.L50:
 967              		.cfi_restore_state
 355:../system/src/modbus_rtu/rtu_serial_io.c **** 			}
 968              		.loc 1 355 0
 969 0376 0324     		movs	r4, #3
 970 0378 FAE7     		b	.L27
 971              	.LVL65:
 972              	.L51:
 973 037a 4FF0FF34 		mov	r4, #-1
 974 037e F7E7     		b	.L27
 975              	.LVL66:
 976              	.L52:
 380:../system/src/modbus_rtu/rtu_serial_io.c **** 
 977              		.loc 1 380 0
 978 0380 0024     		movs	r4, #0
 979 0382 F5E7     		b	.L27
 980              	.L54:
 206:../system/src/modbus_rtu/rtu_serial_io.c **** //#ifdef _MODBUS_RTU
 981              		.loc 1 206 0
 982 0384 4FF0FF34 		mov	r4, #-1
 983 0388 F2E7     		b	.L27
 984              	.L55:
 985 038a 4FF0FF34 		mov	r4, #-1
 986 038e EFE7     		b	.L27
 987              	.L56:
 988 0390 4FF0FF34 		mov	r4, #-1
 989 0394 ECE7     		b	.L27
 990              	.L59:
 991 0396 4FF0FF34 		mov	r4, #-1
 486:../system/src/modbus_rtu/rtu_serial_io.c **** }
 992              		.loc 1 486 0
 993 039a E9E7     		b	.L27
 994              	.L68:
 995              		.align	2
 996              	.L67:
 997 039c 00000000 		.word	master_time
 998 03a0 00000000 		.word	rte_rtu_last_modbus_exception_timestamp
 999 03a4 00000000 		.word	.LANCHOR5
 1000 03a8 00000000 		.word	.LANCHOR4
 1001 03ac 00000000 		.word	rtu_used_queue
 1002 03b0 00000000 		.word	rte_rtu_number_of_serial_io_errors
 1003 03b4 00000000 		.word	rte_rtu_last_modbus_rx_error_timestamp
 1004              		.cfi_endproc
 1005              	.LFE100:
 1007              		.section	.text.rtu_serial_start,"ax",%progbits
 1008              		.align	1
 1009              		.global	rtu_serial_start
 1010              		.syntax unified
 1011              		.thumb
 1012              		.thumb_func
 1013              		.fpu softvfp
 1015              	rtu_serial_start:
 1016              	.LFB102:
 533:../system/src/modbus_rtu/rtu_serial_io.c **** 
 534:../system/src/modbus_rtu/rtu_serial_io.c **** int32_t rtu_serial_start(void) {
 1017              		.loc 1 534 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              		@ link register save eliminated.
 1022              	.LVL67:
 535:../system/src/modbus_rtu/rtu_serial_io.c **** 
 536:../system/src/modbus_rtu/rtu_serial_io.c **** 	int32_t retval = MODBUS_RET_UNINITIALIZED;
 537:../system/src/modbus_rtu/rtu_serial_io.c **** 
 538:../system/src/modbus_rtu/rtu_serial_io.c **** 	rtu_pool_state = RTU_POOL_IDLE;
 1023              		.loc 1 538 0
 1024 0000 024B     		ldr	r3, .L70
 1025 0002 0022     		movs	r2, #0
 1026 0004 1A70     		strb	r2, [r3]
 539:../system/src/modbus_rtu/rtu_serial_io.c **** 
 540:../system/src/modbus_rtu/rtu_serial_io.c **** 	return retval;
 541:../system/src/modbus_rtu/rtu_serial_io.c **** }
 1027              		.loc 1 541 0
 1028 0006 4FF0FF30 		mov	r0, #-1
 1029 000a 7047     		bx	lr
 1030              	.L71:
 1031              		.align	2
 1032              	.L70:
 1033 000c 00000000 		.word	.LANCHOR5
 1034              		.cfi_endproc
 1035              	.LFE102:
 1037              		.section	.text.rtu_serial_get_status_string,"ax",%progbits
 1038              		.align	1
 1039              		.global	rtu_serial_get_status_string
 1040              		.syntax unified
 1041              		.thumb
 1042              		.thumb_func
 1043              		.fpu softvfp
 1045              	rtu_serial_get_status_string:
 1046              	.LFB103:
 542:../system/src/modbus_rtu/rtu_serial_io.c **** 
 543:../system/src/modbus_rtu/rtu_serial_io.c **** int32_t rtu_serial_get_status_string(rtu_pool_queue_t* queue, srl_context_t* srl_ctx, char* out, ui
 1047              		.loc 1 543 0
 1048              		.cfi_startproc
 1049              		@ args = 4, pretend = 0, frame = 0
 1050              		@ frame_needed = 0, uses_anonymous_args = 0
 1051              	.LVL68:
 1052 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1053              		.cfi_def_cfa_offset 20
 1054              		.cfi_offset 4, -20
 1055              		.cfi_offset 5, -16
 1056              		.cfi_offset 6, -12
 1057              		.cfi_offset 7, -8
 1058              		.cfi_offset 14, -4
 1059 0002 89B0     		sub	sp, sp, #36
 1060              		.cfi_def_cfa_offset 56
 1061 0004 0C46     		mov	r4, r1
 1062 0006 1546     		mov	r5, r2
 1063 0008 1E46     		mov	r6, r3
 1064              	.LVL69:
 544:../system/src/modbus_rtu/rtu_serial_io.c **** 
 545:../system/src/modbus_rtu/rtu_serial_io.c **** 	int32_t retval = MODBUS_RET_UNINITIALIZED;
 546:../system/src/modbus_rtu/rtu_serial_io.c **** 	int string_ln = 0;
 547:../system/src/modbus_rtu/rtu_serial_io.c **** 
 548:../system/src/modbus_rtu/rtu_serial_io.c **** 	memset(out, 0x00, out_buffer_ln);
 1065              		.loc 1 548 0
 1066 000a 1A46     		mov	r2, r3
 1067              	.LVL70:
 1068 000c 0021     		movs	r1, #0
 1069              	.LVL71:
 1070 000e 2846     		mov	r0, r5
 1071              	.LVL72:
 1072 0010 FFF7FEFF 		bl	memset
 1073              	.LVL73:
 1074              	.LBB30:
 1075              	.LBB31:
 1076              		.loc 3 63 0
 1077 0014 0F4B     		ldr	r3, .L74
 1078 0016 1B68     		ldr	r3, [r3]
 1079              	.LBE31:
 1080              	.LBE30:
 549:../system/src/modbus_rtu/rtu_serial_io.c **** //#ifdef _MODBUS_RTU
 550:../system/src/modbus_rtu/rtu_serial_io.c **** 
 551:../system/src/modbus_rtu/rtu_serial_io.c **** 	string_ln = snprintf(out, out_buffer_ln, ">MT %lX, LRET %lX, LSCT %lX, NSSC %X, NSE %X, RXB %lX, R
 1081              		.loc 1 551 0
 1082 0018 0F4A     		ldr	r2, .L74+4
 1083 001a 1268     		ldr	r2, [r2]
 1084 001c 0092     		str	r2, [sp]
 1085 001e 0F49     		ldr	r1, .L74+8
 1086 0020 0A68     		ldr	r2, [r1]
 1087 0022 0192     		str	r2, [sp, #4]
 1088 0024 0E48     		ldr	r0, .L74+12
 1089 0026 0088     		ldrh	r0, [r0]
 1090 0028 0E4F     		ldr	r7, .L74+16
 1091 002a 3A78     		ldrb	r2, [r7]	@ zero_extendqisi2
 1092 002c 276D     		ldr	r7, [r4, #80]
 552:../system/src/modbus_rtu/rtu_serial_io.c **** 												main_get_master_time(),
 553:../system/src/modbus_rtu/rtu_serial_io.c **** 												rte_rtu_last_modbus_rx_error_timestamp,
 554:../system/src/modbus_rtu/rtu_serial_io.c **** 												rtu_time_of_last_successfull_comm,
 555:../system/src/modbus_rtu/rtu_serial_io.c **** 												(int)rte_rtu_number_of_successfull_serial_comm,
 556:../system/src/modbus_rtu/rtu_serial_io.c **** 												(int)rte_rtu_number_of_serial_io_errors,
 557:../system/src/modbus_rtu/rtu_serial_io.c **** 												srl_ctx->total_rx_bytes,
 558:../system/src/modbus_rtu/rtu_serial_io.c **** 												srl_ctx->total_idle_counter,
 1093              		.loc 1 558 0
 1094 002e 94F84710 		ldrb	r1, [r4, #71]	@ zero_extendqisi2
 551:../system/src/modbus_rtu/rtu_serial_io.c **** 												main_get_master_time(),
 1095              		.loc 1 551 0
 1096 0032 646D     		ldr	r4, [r4, #84]
 1097              	.LVL74:
 1098 0034 0694     		str	r4, [sp, #24]
 1099 0036 0591     		str	r1, [sp, #20]
 1100 0038 0497     		str	r7, [sp, #16]
 1101 003a 0392     		str	r2, [sp, #12]
 1102 003c 0290     		str	r0, [sp, #8]
 1103 003e 0A4A     		ldr	r2, .L74+20
 1104 0040 3146     		mov	r1, r6
 1105 0042 2846     		mov	r0, r5
 1106 0044 FFF7FEFF 		bl	snprintf
 1107              	.LVL75:
 559:../system/src/modbus_rtu/rtu_serial_io.c **** 												srl_ctx->total_tx_bytes);
 560:../system/src/modbus_rtu/rtu_serial_io.c **** 
 561:../system/src/modbus_rtu/rtu_serial_io.c **** 	*generated_string_ln = (uint8_t) string_ln;
 1108              		.loc 1 561 0
 1109 0048 0E9B     		ldr	r3, [sp, #56]
 1110 004a 1870     		strb	r0, [r3]
 562:../system/src/modbus_rtu/rtu_serial_io.c **** //#endif
 563:../system/src/modbus_rtu/rtu_serial_io.c **** 	return retval;
 564:../system/src/modbus_rtu/rtu_serial_io.c **** }
 1111              		.loc 1 564 0
 1112 004c 4FF0FF30 		mov	r0, #-1
 1113              	.LVL76:
 1114 0050 09B0     		add	sp, sp, #36
 1115              		.cfi_def_cfa_offset 20
 1116              		@ sp needed
 1117 0052 F0BD     		pop	{r4, r5, r6, r7, pc}
 1118              	.LVL77:
 1119              	.L75:
 1120              		.align	2
 1121              	.L74:
 1122 0054 00000000 		.word	master_time
 1123 0058 00000000 		.word	rte_rtu_last_modbus_rx_error_timestamp
 1124 005c 00000000 		.word	.LANCHOR4
 1125 0060 00000000 		.word	rte_rtu_number_of_successfull_serial_comm
 1126 0064 00000000 		.word	rte_rtu_number_of_serial_io_errors
 1127 0068 00000000 		.word	.LC0
 1128              		.cfi_endproc
 1129              	.LFE103:
 1131              		.comm	rtu_current_03_number_of_registers,1,1
 1132              		.comm	rtu_current_03_base_register,2,2
 1133              		.comm	rtu_current_03_slave_address,1,1
 1134              		.comm	rtu_used_serial_context,4,4
 1135              		.comm	rtu_used_queue,4,4
 1136              		.global	rtu_waiting_for_slave_addr
 1137              		.global	rtu_serial_previous_crc
 1138              		.global	rtu_time_of_last_succ_comm_at_previous_error_status
 1139              		.global	rtu_time_of_last_successfull_comm
 1140              		.global	rtu_blocking_io
 1141              		.global	rtu_pool_state
 1142              		.section	.bss.rtu_blocking_io,"aw",%nobits
 1143              		.set	.LANCHOR2,. + 0
 1146              	rtu_blocking_io:
 1147 0000 00       		.space	1
 1148              		.section	.bss.rtu_time_of_last_succ_comm_at_previous_error_status,"aw",%nobits
 1149              		.align	2
 1150              		.set	.LANCHOR3,. + 0
 1153              	rtu_time_of_last_succ_comm_at_previous_error_status:
 1154 0000 00000000 		.space	4
 1155              		.section	.bss.rtu_time_of_last_successfull_comm,"aw",%nobits
 1156              		.align	2
 1157              		.set	.LANCHOR4,. + 0
 1160              	rtu_time_of_last_successfull_comm:
 1161 0000 00000000 		.space	4
 1162              		.section	.data.rtu_pool_state,"aw",%progbits
 1163              		.set	.LANCHOR5,. + 0
 1166              	rtu_pool_state:
 1167 0000 05       		.byte	5
 1168              		.section	.data.rtu_serial_previous_crc,"aw",%progbits
 1169              		.align	1
 1170              		.set	.LANCHOR1,. + 0
 1173              	rtu_serial_previous_crc:
 1174 0000 FFFF     		.short	-1
 1175              		.section	.data.rtu_waiting_for_slave_addr,"aw",%progbits
 1176              		.set	.LANCHOR0,. + 0
 1179              	rtu_waiting_for_slave_addr:
 1180 0000 01       		.byte	1
 1181              		.section	.rodata.rtu_serial_get_status_string.str1.4,"aMS",%progbits,1
 1182              		.align	2
 1183              	.LC0:
 1184 0000 3E4D5420 		.ascii	">MT %lX, LRET %lX, LSCT %lX, NSSC %X, NSE %X, RXB %"
 1184      256C582C 
 1184      204C5245 
 1184      5420256C 
 1184      582C204C 
 1185 0033 6C582C20 		.ascii	"lX, RXI %X, TXB %lX\000"
 1185      52584920 
 1185      25582C20 
 1185      54584220 
 1185      256C5800 
 1186              		.text
 1187              	.Letext0:
 1188              		.file 4 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 1189              		.file 5 "../system/include/cmsis/core_cm3.h"
 1190              		.file 6 "../system/include/cmsis/system_stm32f10x.h"
 1191              		.file 7 "../system/include/cmsis/stm32f10x.h"
 1192              		.file 8 "../system/include/./drivers/serial.h"
 1193              		.file 9 "../system/include/./modbus_rtu/rtu_pool_queue_t.h"
 1194              		.file 10 "../include/config_data.h"
 1195              		.file 11 "../system/include/modbus_rtu/rtu_serial_io.h"
 1196              		.file 12 "../system/include/modbus_rtu/rtu_register_data_t.h"
 1197              		.file 13 "../system/include/modbus_rtu/rtu_exception_t.h"
 1198              		.file 14 "../system/include/aprs/cfifo.h"
 1199              		.file 15 "../system/include/aprs/afsk.h"
 1200              		.file 16 "../system/include/aprs/ax25.h"
 1201              		.file 17 "../system/include/drivers/dallas.h"
 1202              		.file 18 "../system/include/drivers/analog_anemometer.h"
 1203              		.file 19 "../system/include/davis_vantage/davis_loop_t.h"
 1204              		.file 20 "../system/include/umb_master/umb_frame_t.h"
 1205              		.file 21 "../system/include/umb_master/umb_state_t.h"
 1206              		.file 22 "../system/include/umb_master/umb_context_t.h"
 1207              		.file 23 "../system/include/umb_master/umb_qf_t.h"
 1208              		.file 24 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 1209              		.file 25 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 1210              		.file 26 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/st
 1211              		.file 27 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 1212              		.file 28 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/math.h"
 1213              		.file 29 "../system/include/drivers/ms5611.h"
 1214              		.file 30 "../system/include/drivers/bme280.h"
 1215              		.file 31 "../include/rte_wx.h"
 1216              		.file 32 "../include/rte_main.h"
 1217              		.file 33 "../include/rte_rtu.h"
 1218              		.file 34 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/string.h"
 1219              		.file 35 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdio.h"
 1220              		.file 36 "../system/include/modbus_rtu/rtu_request.h"
 1221              		.file 37 "../system/include/modbus_rtu/rtu_parser.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 rtu_serial_io.c
     /tmp/ccg1oHiz.s:16     .text.rtu_serial_callback:0000000000000000 $t
     /tmp/ccg1oHiz.s:23     .text.rtu_serial_callback:0000000000000000 rtu_serial_callback
     /tmp/ccg1oHiz.s:131    .text.rtu_serial_callback:0000000000000058 $d
     /tmp/ccg1oHiz.s:137    .text.rtu_serial_init:0000000000000000 $t
     /tmp/ccg1oHiz.s:144    .text.rtu_serial_init:0000000000000000 rtu_serial_init
     /tmp/ccg1oHiz.s:277    .text.rtu_serial_init:00000000000000b4 $d
                            *COM*:0000000000000004 rtu_used_queue
                            *COM*:0000000000000004 rtu_used_serial_context
     /tmp/ccg1oHiz.s:290    .text.rtu_serial_blocking_io:0000000000000000 $t
     /tmp/ccg1oHiz.s:297    .text.rtu_serial_blocking_io:0000000000000000 rtu_serial_blocking_io
     /tmp/ccg1oHiz.s:382    .text.rtu_serial_blocking_io:0000000000000068 $d
     /tmp/ccg1oHiz.s:389    .text.rtu_serial_pool:0000000000000000 $t
     /tmp/ccg1oHiz.s:396    .text.rtu_serial_pool:0000000000000000 rtu_serial_pool
     /tmp/ccg1oHiz.s:466    .text.rtu_serial_pool:0000000000000058 $d
     /tmp/ccg1oHiz.s:472    .text.rtu_serial_pool:0000000000000064 $t
     /tmp/ccg1oHiz.s:824    .text.rtu_serial_pool:0000000000000290 $d
                            *COM*:0000000000000001 rtu_current_03_slave_address
                            *COM*:0000000000000002 rtu_current_03_base_register
                            *COM*:0000000000000001 rtu_current_03_number_of_registers
     /tmp/ccg1oHiz.s:847    .text.rtu_serial_pool:00000000000002d8 $t
     /tmp/ccg1oHiz.s:997    .text.rtu_serial_pool:000000000000039c $d
     /tmp/ccg1oHiz.s:1008   .text.rtu_serial_start:0000000000000000 $t
     /tmp/ccg1oHiz.s:1015   .text.rtu_serial_start:0000000000000000 rtu_serial_start
     /tmp/ccg1oHiz.s:1033   .text.rtu_serial_start:000000000000000c $d
     /tmp/ccg1oHiz.s:1038   .text.rtu_serial_get_status_string:0000000000000000 $t
     /tmp/ccg1oHiz.s:1045   .text.rtu_serial_get_status_string:0000000000000000 rtu_serial_get_status_string
     /tmp/ccg1oHiz.s:1122   .text.rtu_serial_get_status_string:0000000000000054 $d
     /tmp/ccg1oHiz.s:1179   .data.rtu_waiting_for_slave_addr:0000000000000000 rtu_waiting_for_slave_addr
     /tmp/ccg1oHiz.s:1173   .data.rtu_serial_previous_crc:0000000000000000 rtu_serial_previous_crc
     /tmp/ccg1oHiz.s:1153   .bss.rtu_time_of_last_succ_comm_at_previous_error_status:0000000000000000 rtu_time_of_last_succ_comm_at_previous_error_status
     /tmp/ccg1oHiz.s:1160   .bss.rtu_time_of_last_successfull_comm:0000000000000000 rtu_time_of_last_successfull_comm
     /tmp/ccg1oHiz.s:1146   .bss.rtu_blocking_io:0000000000000000 rtu_blocking_io
     /tmp/ccg1oHiz.s:1166   .data.rtu_pool_state:0000000000000000 rtu_pool_state
     /tmp/ccg1oHiz.s:1147   .bss.rtu_blocking_io:0000000000000000 $d
     /tmp/ccg1oHiz.s:1149   .bss.rtu_time_of_last_succ_comm_at_previous_error_status:0000000000000000 $d
     /tmp/ccg1oHiz.s:1156   .bss.rtu_time_of_last_successfull_comm:0000000000000000 $d
     /tmp/ccg1oHiz.s:1169   .data.rtu_serial_previous_crc:0000000000000000 $d
     /tmp/ccg1oHiz.s:1182   .rodata.rtu_serial_get_status_string.str1.4:0000000000000000 $d
                           .group:0000000000000000 wm4.0.879aed89c359f5856fe69c61b3590d34
                           .group:0000000000000000 wm4.rtu_configuration.h.9.225559723a46d58da796e0ac6cb0b2ac
                           .group:0000000000000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:0000000000000000 wm4.stm32f10x.h.51.c58ea26c5150470d52680f0bbaa7049c
                           .group:0000000000000000 wm4.core_cm3.h.42.c33bb1302bf53de0580fb6140a46f2eb
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.67d2dcde6a14ff518eedc1d545d89a76
                           .group:0000000000000000 wm4.core_cm3.h.183.ecfd9c316d6f10b73648f6e579b02c8b
                           .group:0000000000000000 wm4.stm32f10x.h.522.a925aafc848b1f088438cf0e9b167b78
                           .group:0000000000000000 wm4.stm32f10x_adc.h.89.9f2b285fa0070185d48a05b61a05798c
                           .group:0000000000000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:0000000000000000 wm4.stm32f10x_can.h.25.e5e43f6bbc8fc7c8aa30ef2bc5610ced
                           .group:0000000000000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:0000000000000000 wm4.stm32f10x_dac.h.25.d946244edf026333094657d55ea894b8
                           .group:0000000000000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:0000000000000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:0000000000000000 wm4.stm32f10x_exti.h.25.f52c69aad7d1994be5b2c4e2b8f4c595
                           .group:0000000000000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:0000000000000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:0000000000000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:0000000000000000 wm4.stm32f10x_i2c.h.25.b124ac2c620f8ebddd92b6d95ca62176
                           .group:0000000000000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:0000000000000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:0000000000000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:0000000000000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:0000000000000000 wm4.stm32f10x_sdio.h.25.fb0db079f5c1412c40f359319f7c40b0
                           .group:0000000000000000 wm4.stm32f10x_spi.h.25.3f6dfa4abe177efb3c6f5a717c06b323
                           .group:0000000000000000 wm4.stm32f10x_tim.h.25.f709106ba77b314e6b070693f89f3c56
                           .group:0000000000000000 wm4.stm32f10x_usart.h.25.2e65e396239d0cc41fd0bf6faa2a32cb
                           .group:0000000000000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:0000000000000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:0000000000000000 wm4.stm32f10x.h.8317.9a8e476d96d33bb2df9a9ad0775bd4a7
                           .group:0000000000000000 wm4.serial.h.8.be81c40110fd9bb3b68e7ebdb6b30450
                           .group:0000000000000000 wm4.config_data.h.9.6026a38cd2f39158a8fd50707ba1bf90
                           .group:0000000000000000 wm4.rtu_return_values.h.9.ebf5128ee53fb26e4da5d61aff7556b7
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.macros.h.2.7a7a5ac48d4160b7481c806e80b68442
                           .group:0000000000000000 wm4.config.h.2.f5e96167cb26b0ce97c5e7513a95bc8b
                           .group:0000000000000000 wm4.afsk.h.17.cf8f922069680e152e1eddb76cd4cc82
                           .group:0000000000000000 wm4.ax25.h.18.077e42a4af9016476e34900472a8fe18
                           .group:0000000000000000 wm4.main.h.8.3d6ad69e5f061008d8c5cc5f5c9dd15a
                           .group:0000000000000000 wm4.station_config.h.9.75b6c5687acc8f60d219d6a552b2bf59
                           .group:0000000000000000 wm4.dallas.h.19.15d389ea66759bb36d2e3183b267092a
                           .group:0000000000000000 wm4.analog_anemometer.h.9.8c21570f6fc3dcd7763ba4d0d5168e3c
                           .group:0000000000000000 wm4.umb_frame_t.h.9.05796095a57acd1575f07118cb6ab058
                           .group:0000000000000000 wm4.umb_defines.h.9.77e79b84cd2dd9a74204aaeb1ca9d6be
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.newlib.h.18.5e5ca3429233af402d406a202f1fc1ac
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:0000000000000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
                           .group:0000000000000000 wm4.math.h.13.adb102f7bd7860b1f241e149d6914a1e
                           .group:0000000000000000 wm4.ms5611.h.13.84fbf6afa85557f675e3d85f1be6067c
                           .group:0000000000000000 wm4.bme280.h.9.aefe05f9329372f30337537cea488dce
                           .group:0000000000000000 wm4.rte_wx.h.30.cb80bd87f9fae81b43459954f1781e96
                           .group:0000000000000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:0000000000000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:0000000000000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:0000000000000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:0000000000000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:0000000000000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:0000000000000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:0000000000000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78

UNDEFINED SYMBOLS
memset
rte_wx_modbus_rtu_f1
rte_wx_modbus_rtu_f2
rte_wx_modbus_rtu_f3
rte_wx_modbus_rtu_f4
rte_wx_modbus_rtu_f5
rte_wx_modbus_rtu_f6
srl_start_tx
srl_wait_for_tx_completion
srl_receive_data_with_callback
srl_switch_timeout_for_waiting
srl_wait_for_rx_completion_or_timeout
srl_init
srl_switch_timeout
srl_switch_tx_delay
rtu_request_03_04_registers
srl_close
rtu_parser_03_04_registers
rte_rtu_number_of_serial_io_errors
rte_main_trigger_modbus_status
rte_main_reboot_req
master_time
rte_rtu_number_of_successfull_serial_comm
rte_rtu_last_modbus_exception
rte_rtu_last_modbus_exception_timestamp
rte_rtu_last_modbus_rx_error_timestamp
snprintf
