   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.message_callback,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	message_callback:
  23              	.LFB112:
  24              		.file 1 "../src/main.c"
   1:../src/main.c **** #include "station_config_target_hw.h"
   2:../src/main.c **** 
   3:../src/main.c **** #ifdef STM32F10X_MD_VL
   4:../src/main.c **** #include <stm32f10x_rcc.h>
   5:../src/main.c **** #include <stm32f10x_iwdg.h>
   6:../src/main.c **** #include <stm32f10x.h>
   7:../src/main.c **** #include <drivers/f1/gpio_conf_stm32f1x.h>
   8:../src/main.c **** #endif
   9:../src/main.c **** 
  10:../src/main.c **** #ifdef STM32L471xx
  11:../src/main.c **** #include <stm32l4xx_hal_cortex.h>
  12:../src/main.c **** #include <stm32l4xx.h>
  13:../src/main.c **** #include <stm32l4xx_ll_iwdg.h>
  14:../src/main.c **** #include <stm32l4xx_ll_rcc.h>
  15:../src/main.c **** #include <stm32l4xx_ll_gpio.h>
  16:../src/main.c **** #include "cmsis/stm32l4xx/system_stm32l4xx.h"
  17:../src/main.c **** #endif
  18:../src/main.c **** 
  19:../src/main.c **** #include <delay.h>
  20:../src/main.c **** #include <LedConfig.h>
  21:../src/main.c **** #include <stdio.h>
  22:../src/main.c **** #include <stdlib.h>
  23:../src/main.c **** #include <string.h>
  24:../src/main.c **** 
  25:../src/main.c **** #include "main.h"
  26:../src/main.c **** #include "packet_tx_handler.h"
  27:../src/main.c **** 
  28:../src/main.c **** #include "station_config.h"
  29:../src/main.c **** #include "config_data_externs.h"
  30:../src/main.c **** #include "configuration_handler.h"
  31:../src/main.c **** 
  32:../src/main.c **** #include "diag/Trace.h"
  33:../src/main.c **** #include "antilib_adc.h"
  34:../src/main.c **** #include "afsk_pr.h"
  35:../src/main.c **** #include "TimerConfig.h"
  36:../src/main.c **** #include "PathConfig.h"
  37:../src/main.c **** #include "LedConfig.h"
  38:../src/main.c **** #include "io.h"
  39:../src/main.c **** #include "float_to_string.h"
  40:../src/main.c **** #include "pwr_save.h"
  41:../src/main.c **** #include "pwr_switch.h"
  42:../src/main.c **** 
  43:../src/main.c **** #include "it_handlers.h"
  44:../src/main.c **** 
  45:../src/main.c **** #include "aprs/digi.h"
  46:../src/main.c **** #include "aprs/telemetry.h"
  47:../src/main.c **** #include "aprs/dac.h"
  48:../src/main.c **** #include "aprs/beacon.h"
  49:../src/main.c **** 
  50:../src/main.c **** #include "ve_direct_protocol/parser.h"
  51:../src/main.c **** 
  52:../src/main.c **** #include "rte_wx.h"
  53:../src/main.c **** #include "rte_pv.h"
  54:../src/main.c **** #include "rte_main.h"
  55:../src/main.c **** #include "rte_rtu.h"
  56:../src/main.c **** 
  57:../src/main.c **** #include <wx_handler.h>
  58:../src/main.c **** #include "drivers/dallas.h"
  59:../src/main.c **** #include "drivers/i2c.h"
  60:../src/main.c **** #include "drivers/analog_anemometer.h"
  61:../src/main.c **** #include "aprs/wx.h"
  62:../src/main.c **** 
  63:../src/main.c **** #include "../system/include/modbus_rtu/rtu_serial_io.h"
  64:../src/main.c **** 
  65:../src/main.c **** #include "../system/include/davis_vantage/davis.h"
  66:../src/main.c **** #include "../system/include/davis_vantage/davis_parsers.h"
  67:../src/main.c **** 
  68:../src/main.c **** #include "drivers/ms5611.h"
  69:../src/main.c **** #include <drivers/bme280.h>
  70:../src/main.c **** 
  71:../src/main.c **** #include "umb_master/umb_master.h"
  72:../src/main.c **** #include "umb_master/umb_channel_pool.h"
  73:../src/main.c **** #include "umb_master/umb_0x26_status.h"
  74:../src/main.c **** 
  75:../src/main.c **** #include "drivers/dallas.h"
  76:../src/main.c **** 
  77:../src/main.c **** #include "KissCommunication.h"
  78:../src/main.c **** 
  79:../src/main.c **** #define SOH 0x01
  80:../src/main.c **** 
  81:../src/main.c **** 
  82:../src/main.c **** //#define SERIAL_TX_TEST_MODE
  83:../src/main.c **** 
  84:../src/main.c **** // Niebieska dioda -> DCD
  85:../src/main.c **** // Zielona dioda -> anemometr albo TX
  86:../src/main.c **** 
  87:../src/main.c **** // backup registers (ParaTNC)
  88:../src/main.c **** // 0 ->
  89:../src/main.c **** // 2 -> boot and hard fault count
  90:../src/main.c **** // 3 -> controller configuration status
  91:../src/main.c **** // 4 ->
  92:../src/main.c **** // 5 ->
  93:../src/main.c **** // 6 ->
  94:../src/main.c **** 
  95:../src/main.c **** // backup registers (ParaMETEO)
  96:../src/main.c **** // 0 -> powersave status
  97:../src/main.c **** // 3 -> controller configuration status
  98:../src/main.c **** 
  99:../src/main.c **** 
 100:../src/main.c **** #define CONFIG_FIRST_RESTORED 			(1)
 101:../src/main.c **** #define CONFIG_FIRST_FAIL_RESTORING	  	(1 << 1)
 102:../src/main.c **** #define CONFIG_FIRST_CRC_OK				(1 << 2)
 103:../src/main.c **** 
 104:../src/main.c **** #define CONFIG_SECOND_RESTORED 				(1 << 3)
 105:../src/main.c **** #define CONFIG_SECOND_FAIL_RESTORING	  	(1 << 4)
 106:../src/main.c **** #define CONFIG_SECOND_CRC_OK				(1 << 5)
 107:../src/main.c **** 
 108:../src/main.c **** // ----- main() ---------------------------------------------------------------
 109:../src/main.c **** 
 110:../src/main.c **** // Sample pragmas to cope with warnings. Please note the related line at
 111:../src/main.c **** // the end of this function, used to pop the compiler diagnostics status.
 112:../src/main.c **** #pragma GCC diagnostic push
 113:../src/main.c **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 114:../src/main.c **** #pragma GCC diagnostic ignored "-Wmissing-declarations"
 115:../src/main.c **** #pragma GCC diagnostic ignored "-Wreturn-type"
 116:../src/main.c **** #pragma GCC diagnostic ignored "-Wempty-body"
 117:../src/main.c **** 
 118:../src/main.c **** // used configuration structures
 119:../src/main.c **** const config_data_mode_t * main_config_data_mode = 0;
 120:../src/main.c **** const config_data_basic_t * main_config_data_basic = 0;
 121:../src/main.c **** const config_data_wx_sources_t * main_config_data_wx_sources = 0;
 122:../src/main.c **** const config_data_umb_t * main_config_data_umb = 0;
 123:../src/main.c **** const config_data_rtu_t * main_config_data_rtu = 0;
 124:../src/main.c **** 
 125:../src/main.c **** // global variable incremented by the SysTick handler to measure time in miliseconds
 126:../src/main.c **** uint32_t master_time = 0;
 127:../src/main.c **** 
 128:../src/main.c **** // this global variable stores numbers of ticks of idling CPU
 129:../src/main.c **** uint32_t main_idle_cpu_ticks = 0;
 130:../src/main.c **** 
 131:../src/main.c **** // current cpu idle ticks
 132:../src/main.c **** uint32_t main_current_cpu_idle_ticks = 0;
 133:../src/main.c **** 
 134:../src/main.c **** // approx cpu load in percents
 135:../src/main.c **** int8_t main_cpu_load = 0;
 136:../src/main.c **** 
 137:../src/main.c **** // global variable used as a timer to trigger meteo sensors mesurements
 138:../src/main.c **** int32_t main_wx_sensors_pool_timer = 65500;
 139:../src/main.c **** 
 140:../src/main.c **** // global variable used as a timer to trigger packet sending
 141:../src/main.c **** int32_t main_one_minute_pool_timer = 45000;
 142:../src/main.c **** 
 143:../src/main.c **** // one second pool interval
 144:../src/main.c **** int32_t main_one_second_pool_timer = 1000;
 145:../src/main.c **** 
 146:../src/main.c **** // two second pool interval
 147:../src/main.c **** int32_t main_two_second_pool_timer = 2000;
 148:../src/main.c **** 
 149:../src/main.c **** // ten second pool interval
 150:../src/main.c **** int32_t main_ten_second_pool_timer = 10000;
 151:../src/main.c **** 
 152:../src/main.c **** // serial context for UART used to KISS
 153:../src/main.c **** srl_context_t main_kiss_srl_ctx;
 154:../src/main.c **** 
 155:../src/main.c **** // serial context for UART used for comm with wx sensors
 156:../src/main.c **** srl_context_t main_wx_srl_ctx;
 157:../src/main.c **** 
 158:../src/main.c **** // a pointer to KISS context
 159:../src/main.c **** srl_context_t* main_kiss_srl_ctx_ptr;
 160:../src/main.c **** 
 161:../src/main.c **** // a pointer to wx comms context
 162:../src/main.c **** srl_context_t* main_wx_srl_ctx_ptr;
 163:../src/main.c **** 
 164:../src/main.c **** // target USART1 (kiss) baudrate
 165:../src/main.c **** uint32_t main_target_kiss_baudrate;
 166:../src/main.c **** 
 167:../src/main.c **** // target USART2 (wx) baudrate
 168:../src/main.c **** uint32_t main_target_wx_baudrate;
 169:../src/main.c **** 
 170:../src/main.c **** // controls if the KISS modem is enabled
 171:../src/main.c **** uint8_t main_kiss_enabled = 1;
 172:../src/main.c **** 
 173:../src/main.c **** // controls if DAVIS serialprotocol client is enabled by the configuration
 174:../src/main.c **** uint8_t main_davis_serial_enabled = 0;
 175:../src/main.c **** 
 176:../src/main.c **** uint8_t main_modbus_rtu_master_enabled = 0;
 177:../src/main.c **** 
 178:../src/main.c **** // global variables represending the AX25/APRS stack
 179:../src/main.c **** AX25Ctx main_ax25;
 180:../src/main.c **** Afsk main_afsk;
 181:../src/main.c **** 
 182:../src/main.c **** 
 183:../src/main.c **** AX25Call main_own_path[3];
 184:../src/main.c **** uint8_t main_own_path_ln = 0;
 185:../src/main.c **** uint8_t main_own_aprs_msg_len;
 186:../src/main.c **** char main_own_aprs_msg[OWN_APRS_MSG_LN];
 187:../src/main.c **** 
 188:../src/main.c **** char main_string_latitude[9];
 189:../src/main.c **** char main_string_longitude[9];
 190:../src/main.c **** 
 191:../src/main.c **** char main_symbol_f = '/';
 192:../src/main.c **** char main_symbol_s = '#';
 193:../src/main.c **** 
 194:../src/main.c **** // global variable used to store return value from various functions
 195:../src/main.c **** volatile uint8_t retval = 100;
 196:../src/main.c **** 
 197:../src/main.c **** uint16_t buffer_len = 0;
 198:../src/main.c **** 
 199:../src/main.c **** // return value from UMB related functions
 200:../src/main.c **** umb_retval_t main_umb_retval = UMB_UNINITIALIZED;
 201:../src/main.c **** 
 202:../src/main.c **** // result of CRC calculation
 203:../src/main.c **** uint32_t main_crc_result = 0;
 204:../src/main.c **** 
 205:../src/main.c **** char after_tx_lock;
 206:../src/main.c **** 
 207:../src/main.c **** unsigned short rx10m = 0, tx10m = 0, digi10m = 0, digidrop10m = 0, kiss10m = 0;
 208:../src/main.c **** 
 209:../src/main.c **** #if defined(STM32L471xx)
 210:../src/main.c **** LL_GPIO_InitTypeDef GPIO_InitTypeDef;
 211:../src/main.c **** #endif
 212:../src/main.c **** 
 213:../src/main.c **** static void message_callback(struct AX25Msg *msg) {
  25              		.loc 1 213 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
 214:../src/main.c **** 
 215:../src/main.c **** }
  31              		.loc 1 215 0
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE112:
  36              		.section	.text.main,"ax",%progbits
  37              		.align	1
  38              		.global	main
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	main:
  45              	.LFB113:
 216:../src/main.c **** 
 217:../src/main.c **** int main(int argc, char* argv[]){
  46              		.loc 1 217 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 8
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              	.LVL1:
  51 0000 70B5     		push	{r4, r5, r6, lr}
  52              		.cfi_def_cfa_offset 16
  53              		.cfi_offset 4, -16
  54              		.cfi_offset 5, -12
  55              		.cfi_offset 6, -8
  56              		.cfi_offset 14, -4
  57 0002 88B0     		sub	sp, sp, #32
  58              		.cfi_def_cfa_offset 48
 218:../src/main.c **** 
 219:../src/main.c ****   int32_t ln = 0;
  59              		.loc 1 219 0
  60 0004 0021     		movs	r1, #0
  61              	.LVL2:
  62 0006 0791     		str	r1, [sp, #28]
  63              	.LVL3:
 220:../src/main.c **** 
 221:../src/main.c ****   uint8_t button_inhibit = 0;
 222:../src/main.c **** 
 223:../src/main.c ****   memset(main_own_aprs_msg, 0x00, OWN_APRS_MSG_LN);
  64              		.loc 1 223 0
  65 0008 A022     		movs	r2, #160
  66 000a 8C48     		ldr	r0, .L120
  67              	.LVL4:
  68 000c FFF7FEFF 		bl	memset
  69              	.LVL5:
 224:../src/main.c **** 
 225:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B) || defined(PARATNC_HWREV_C)
 226:../src/main.c ****   RCC->APB1ENR |= (RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM3EN | RCC_APB1ENR_TIM7EN | RCC_APB1ENR_TIM4E
  70              		.loc 1 226 0
  71 0010 8B4B     		ldr	r3, .L120+4
  72 0012 DA69     		ldr	r2, [r3, #28]
  73 0014 42F02702 		orr	r2, r2, #39
  74 0018 DA61     		str	r2, [r3, #28]
 227:../src/main.c ****   RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN | RCC_APB2ENR_IOPDE
  75              		.loc 1 227 0
  76 001a 9A69     		ldr	r2, [r3, #24]
  77 001c 42F40362 		orr	r2, r2, #2096
  78 0020 42F00D02 		orr	r2, r2, #13
  79 0024 9A61     		str	r2, [r3, #24]
 228:../src/main.c ****   RCC->AHBENR |= RCC_AHBENR_CRCEN;
  80              		.loc 1 228 0
  81 0026 5A69     		ldr	r2, [r3, #20]
  82 0028 42F04002 		orr	r2, r2, #64
  83 002c 5A61     		str	r2, [r3, #20]
 229:../src/main.c **** 
 230:../src/main.c ****   NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
  84              		.loc 1 230 0
  85 002e 4FF44070 		mov	r0, #768
  86 0032 FFF7FEFF 		bl	NVIC_PriorityGroupConfig
  87              	.LVL6:
 231:../src/main.c **** 
 232:../src/main.c ****   // choosing the signal source for the SysTick timer.
 233:../src/main.c ****   SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
  88              		.loc 1 233 0
  89 0036 0420     		movs	r0, #4
  90 0038 FFF7FEFF 		bl	SysTick_CLKSourceConfig
  91              	.LVL7:
 234:../src/main.c **** 
 235:../src/main.c ****   // Configuring the SysTick timer to generate interrupt 100x per second (one interrupt = 10ms)
 236:../src/main.c ****   SysTick_Config(SystemCoreClock / SYSTICK_TICKS_PER_SECONDS);
  92              		.loc 1 236 0
  93 003c 814B     		ldr	r3, .L120+8
  94 003e 1B68     		ldr	r3, [r3]
  95 0040 814A     		ldr	r2, .L120+12
  96 0042 A2FB0323 		umull	r2, r3, r2, r3
  97 0046 5B09     		lsrs	r3, r3, #5
  98              	.LVL8:
  99              	.LBB40:
 100              	.LBB41:
 101              		.file 2 "../system/include/cmsis/core_cm3.h"
   1:../system/include/cmsis/core_cm3.h **** /**************************************************************************//**
   2:../system/include/cmsis/core_cm3.h ****  * @file     core_cm3.h
   3:../system/include/cmsis/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:../system/include/cmsis/core_cm3.h ****  * @version  V4.30
   5:../system/include/cmsis/core_cm3.h ****  * @date     20. October 2015
   6:../system/include/cmsis/core_cm3.h ****  ******************************************************************************/
   7:../system/include/cmsis/core_cm3.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:../system/include/cmsis/core_cm3.h **** 
   9:../system/include/cmsis/core_cm3.h ****    All rights reserved.
  10:../system/include/cmsis/core_cm3.h ****    Redistribution and use in source and binary forms, with or without
  11:../system/include/cmsis/core_cm3.h ****    modification, are permitted provided that the following conditions are met:
  12:../system/include/cmsis/core_cm3.h ****    - Redistributions of source code must retain the above copyright
  13:../system/include/cmsis/core_cm3.h ****      notice, this list of conditions and the following disclaimer.
  14:../system/include/cmsis/core_cm3.h ****    - Redistributions in binary form must reproduce the above copyright
  15:../system/include/cmsis/core_cm3.h ****      notice, this list of conditions and the following disclaimer in the
  16:../system/include/cmsis/core_cm3.h ****      documentation and/or other materials provided with the distribution.
  17:../system/include/cmsis/core_cm3.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:../system/include/cmsis/core_cm3.h ****      to endorse or promote products derived from this software without
  19:../system/include/cmsis/core_cm3.h ****      specific prior written permission.
  20:../system/include/cmsis/core_cm3.h ****    *
  21:../system/include/cmsis/core_cm3.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:../system/include/cmsis/core_cm3.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:../system/include/cmsis/core_cm3.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:../system/include/cmsis/core_cm3.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:../system/include/cmsis/core_cm3.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:../system/include/cmsis/core_cm3.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:../system/include/cmsis/core_cm3.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:../system/include/cmsis/core_cm3.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:../system/include/cmsis/core_cm3.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:../system/include/cmsis/core_cm3.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:../system/include/cmsis/core_cm3.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:../system/include/cmsis/core_cm3.h ****    ---------------------------------------------------------------------------*/
  33:../system/include/cmsis/core_cm3.h **** 
  34:../system/include/cmsis/core_cm3.h **** 
  35:../system/include/cmsis/core_cm3.h **** #if   defined ( __ICCARM__ )
  36:../system/include/cmsis/core_cm3.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:../system/include/cmsis/core_cm3.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:../system/include/cmsis/core_cm3.h ****   #pragma clang system_header   /* treat file as system include file */
  39:../system/include/cmsis/core_cm3.h **** #endif
  40:../system/include/cmsis/core_cm3.h **** 
  41:../system/include/cmsis/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  42:../system/include/cmsis/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  43:../system/include/cmsis/core_cm3.h **** 
  44:../system/include/cmsis/core_cm3.h **** // [ILG]
  45:../system/include/cmsis/core_cm3.h **** #if defined ( __GNUC__ )
  46:../system/include/cmsis/core_cm3.h **** #pragma GCC diagnostic push
  47:../system/include/cmsis/core_cm3.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  48:../system/include/cmsis/core_cm3.h **** #pragma GCC diagnostic ignored "-Wconversion"
  49:../system/include/cmsis/core_cm3.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  50:../system/include/cmsis/core_cm3.h **** #endif
  51:../system/include/cmsis/core_cm3.h **** 
  52:../system/include/cmsis/core_cm3.h **** #include <stdint.h>
  53:../system/include/cmsis/core_cm3.h **** 
  54:../system/include/cmsis/core_cm3.h **** #ifdef __cplusplus
  55:../system/include/cmsis/core_cm3.h ****  extern "C" {
  56:../system/include/cmsis/core_cm3.h **** #endif
  57:../system/include/cmsis/core_cm3.h **** 
  58:../system/include/cmsis/core_cm3.h **** /**
  59:../system/include/cmsis/core_cm3.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  60:../system/include/cmsis/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  61:../system/include/cmsis/core_cm3.h **** 
  62:../system/include/cmsis/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  63:../system/include/cmsis/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  64:../system/include/cmsis/core_cm3.h **** 
  65:../system/include/cmsis/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  66:../system/include/cmsis/core_cm3.h ****      Unions are used for effective representation of core registers.
  67:../system/include/cmsis/core_cm3.h **** 
  68:../system/include/cmsis/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  69:../system/include/cmsis/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  70:../system/include/cmsis/core_cm3.h ****  */
  71:../system/include/cmsis/core_cm3.h **** 
  72:../system/include/cmsis/core_cm3.h **** 
  73:../system/include/cmsis/core_cm3.h **** /*******************************************************************************
  74:../system/include/cmsis/core_cm3.h ****  *                 CMSIS definitions
  75:../system/include/cmsis/core_cm3.h ****  ******************************************************************************/
  76:../system/include/cmsis/core_cm3.h **** /**
  77:../system/include/cmsis/core_cm3.h ****   \ingroup Cortex_M3
  78:../system/include/cmsis/core_cm3.h ****   @{
  79:../system/include/cmsis/core_cm3.h ****  */
  80:../system/include/cmsis/core_cm3.h **** 
  81:../system/include/cmsis/core_cm3.h **** /*  CMSIS CM3 definitions */
  82:../system/include/cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  83:../system/include/cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  84:../system/include/cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16U) | \
  85:../system/include/cmsis/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  86:../system/include/cmsis/core_cm3.h **** 
  87:../system/include/cmsis/core_cm3.h **** #define __CORTEX_M                (0x03U)                                      /*!< Cortex-M Core *
  88:../system/include/cmsis/core_cm3.h **** 
  89:../system/include/cmsis/core_cm3.h **** 
  90:../system/include/cmsis/core_cm3.h **** #if   defined ( __CC_ARM )
  91:../system/include/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  92:../system/include/cmsis/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  93:../system/include/cmsis/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  94:../system/include/cmsis/core_cm3.h **** 
  95:../system/include/cmsis/core_cm3.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  96:../system/include/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  97:../system/include/cmsis/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  98:../system/include/cmsis/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  99:../system/include/cmsis/core_cm3.h **** 
 100:../system/include/cmsis/core_cm3.h **** #elif defined ( __GNUC__ )
 101:../system/include/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 102:../system/include/cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 103:../system/include/cmsis/core_cm3.h ****   #define __STATIC_INLINE  static inline
 104:../system/include/cmsis/core_cm3.h **** 
 105:../system/include/cmsis/core_cm3.h **** #elif defined ( __ICCARM__ )
 106:../system/include/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
 107:../system/include/cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 108:../system/include/cmsis/core_cm3.h ****   #define __STATIC_INLINE  static inline
 109:../system/include/cmsis/core_cm3.h **** 
 110:../system/include/cmsis/core_cm3.h **** #elif defined ( __TMS470__ )
 111:../system/include/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 112:../system/include/cmsis/core_cm3.h ****   #define __STATIC_INLINE  static inline
 113:../system/include/cmsis/core_cm3.h **** 
 114:../system/include/cmsis/core_cm3.h **** #elif defined ( __TASKING__ )
 115:../system/include/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 116:../system/include/cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 117:../system/include/cmsis/core_cm3.h ****   #define __STATIC_INLINE  static inline
 118:../system/include/cmsis/core_cm3.h **** 
 119:../system/include/cmsis/core_cm3.h **** #elif defined ( __CSMC__ )
 120:../system/include/cmsis/core_cm3.h ****   #define __packed
 121:../system/include/cmsis/core_cm3.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 122:../system/include/cmsis/core_cm3.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 123:../system/include/cmsis/core_cm3.h ****   #define __STATIC_INLINE  static inline
 124:../system/include/cmsis/core_cm3.h **** 
 125:../system/include/cmsis/core_cm3.h **** #else
 126:../system/include/cmsis/core_cm3.h ****   #error Unknown compiler
 127:../system/include/cmsis/core_cm3.h **** #endif
 128:../system/include/cmsis/core_cm3.h **** 
 129:../system/include/cmsis/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not.
 130:../system/include/cmsis/core_cm3.h ****     This core does not support an FPU at all
 131:../system/include/cmsis/core_cm3.h **** */
 132:../system/include/cmsis/core_cm3.h **** #define __FPU_USED       0U
 133:../system/include/cmsis/core_cm3.h **** 
 134:../system/include/cmsis/core_cm3.h **** #if defined ( __CC_ARM )
 135:../system/include/cmsis/core_cm3.h ****   #if defined __TARGET_FPU_VFP
 136:../system/include/cmsis/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 137:../system/include/cmsis/core_cm3.h ****   #endif
 138:../system/include/cmsis/core_cm3.h **** 
 139:../system/include/cmsis/core_cm3.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 140:../system/include/cmsis/core_cm3.h ****   #if defined __ARM_PCS_VFP
 141:../system/include/cmsis/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 142:../system/include/cmsis/core_cm3.h ****   #endif
 143:../system/include/cmsis/core_cm3.h **** 
 144:../system/include/cmsis/core_cm3.h **** #elif defined ( __GNUC__ )
 145:../system/include/cmsis/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 146:../system/include/cmsis/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 147:../system/include/cmsis/core_cm3.h ****   #endif
 148:../system/include/cmsis/core_cm3.h **** 
 149:../system/include/cmsis/core_cm3.h **** #elif defined ( __ICCARM__ )
 150:../system/include/cmsis/core_cm3.h ****   #if defined __ARMVFP__
 151:../system/include/cmsis/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 152:../system/include/cmsis/core_cm3.h ****   #endif
 153:../system/include/cmsis/core_cm3.h **** 
 154:../system/include/cmsis/core_cm3.h **** #elif defined ( __TMS470__ )
 155:../system/include/cmsis/core_cm3.h ****   #if defined __TI_VFP_SUPPORT__
 156:../system/include/cmsis/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 157:../system/include/cmsis/core_cm3.h ****   #endif
 158:../system/include/cmsis/core_cm3.h **** 
 159:../system/include/cmsis/core_cm3.h **** #elif defined ( __TASKING__ )
 160:../system/include/cmsis/core_cm3.h ****   #if defined __FPU_VFP__
 161:../system/include/cmsis/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 162:../system/include/cmsis/core_cm3.h ****   #endif
 163:../system/include/cmsis/core_cm3.h **** 
 164:../system/include/cmsis/core_cm3.h **** #elif defined ( __CSMC__ )
 165:../system/include/cmsis/core_cm3.h ****   #if ( __CSMC__ & 0x400U)
 166:../system/include/cmsis/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 167:../system/include/cmsis/core_cm3.h ****   #endif
 168:../system/include/cmsis/core_cm3.h **** 
 169:../system/include/cmsis/core_cm3.h **** #endif
 170:../system/include/cmsis/core_cm3.h **** 
 171:../system/include/cmsis/core_cm3.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 172:../system/include/cmsis/core_cm3.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 173:../system/include/cmsis/core_cm3.h **** 
 174:../system/include/cmsis/core_cm3.h **** #ifdef __cplusplus
 175:../system/include/cmsis/core_cm3.h **** }
 176:../system/include/cmsis/core_cm3.h **** #endif
 177:../system/include/cmsis/core_cm3.h **** 
 178:../system/include/cmsis/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 179:../system/include/cmsis/core_cm3.h **** 
 180:../system/include/cmsis/core_cm3.h **** #ifndef __CMSIS_GENERIC
 181:../system/include/cmsis/core_cm3.h **** 
 182:../system/include/cmsis/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 183:../system/include/cmsis/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 184:../system/include/cmsis/core_cm3.h **** 
 185:../system/include/cmsis/core_cm3.h **** #ifdef __cplusplus
 186:../system/include/cmsis/core_cm3.h ****  extern "C" {
 187:../system/include/cmsis/core_cm3.h **** #endif
 188:../system/include/cmsis/core_cm3.h **** 
 189:../system/include/cmsis/core_cm3.h **** /* check device defines and use defaults */
 190:../system/include/cmsis/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 191:../system/include/cmsis/core_cm3.h ****   #ifndef __CM3_REV
 192:../system/include/cmsis/core_cm3.h ****     #define __CM3_REV               0x0200U
 193:../system/include/cmsis/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 194:../system/include/cmsis/core_cm3.h ****   #endif
 195:../system/include/cmsis/core_cm3.h **** 
 196:../system/include/cmsis/core_cm3.h ****   #ifndef __MPU_PRESENT
 197:../system/include/cmsis/core_cm3.h ****     #define __MPU_PRESENT             0U
 198:../system/include/cmsis/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 199:../system/include/cmsis/core_cm3.h ****   #endif
 200:../system/include/cmsis/core_cm3.h **** 
 201:../system/include/cmsis/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 202:../system/include/cmsis/core_cm3.h ****     #define __NVIC_PRIO_BITS          4U
 203:../system/include/cmsis/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 204:../system/include/cmsis/core_cm3.h ****   #endif
 205:../system/include/cmsis/core_cm3.h **** 
 206:../system/include/cmsis/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 207:../system/include/cmsis/core_cm3.h ****     #define __Vendor_SysTickConfig    0U
 208:../system/include/cmsis/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 209:../system/include/cmsis/core_cm3.h ****   #endif
 210:../system/include/cmsis/core_cm3.h **** #endif
 211:../system/include/cmsis/core_cm3.h **** 
 212:../system/include/cmsis/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 213:../system/include/cmsis/core_cm3.h **** /**
 214:../system/include/cmsis/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 215:../system/include/cmsis/core_cm3.h **** 
 216:../system/include/cmsis/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 217:../system/include/cmsis/core_cm3.h ****     \li to specify the access to peripheral variables.
 218:../system/include/cmsis/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 219:../system/include/cmsis/core_cm3.h **** */
 220:../system/include/cmsis/core_cm3.h **** #ifdef __cplusplus
 221:../system/include/cmsis/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 222:../system/include/cmsis/core_cm3.h **** #else
 223:../system/include/cmsis/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 224:../system/include/cmsis/core_cm3.h **** #endif
 225:../system/include/cmsis/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 226:../system/include/cmsis/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 227:../system/include/cmsis/core_cm3.h **** 
 228:../system/include/cmsis/core_cm3.h **** /* following defines should be used for structure members */
 229:../system/include/cmsis/core_cm3.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 230:../system/include/cmsis/core_cm3.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 231:../system/include/cmsis/core_cm3.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 232:../system/include/cmsis/core_cm3.h **** 
 233:../system/include/cmsis/core_cm3.h **** /*@} end of group Cortex_M3 */
 234:../system/include/cmsis/core_cm3.h **** 
 235:../system/include/cmsis/core_cm3.h **** 
 236:../system/include/cmsis/core_cm3.h **** 
 237:../system/include/cmsis/core_cm3.h **** /*******************************************************************************
 238:../system/include/cmsis/core_cm3.h ****  *                 Register Abstraction
 239:../system/include/cmsis/core_cm3.h ****   Core Register contain:
 240:../system/include/cmsis/core_cm3.h ****   - Core Register
 241:../system/include/cmsis/core_cm3.h ****   - Core NVIC Register
 242:../system/include/cmsis/core_cm3.h ****   - Core SCB Register
 243:../system/include/cmsis/core_cm3.h ****   - Core SysTick Register
 244:../system/include/cmsis/core_cm3.h ****   - Core Debug Register
 245:../system/include/cmsis/core_cm3.h ****   - Core MPU Register
 246:../system/include/cmsis/core_cm3.h ****  ******************************************************************************/
 247:../system/include/cmsis/core_cm3.h **** /**
 248:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 249:../system/include/cmsis/core_cm3.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 250:../system/include/cmsis/core_cm3.h **** */
 251:../system/include/cmsis/core_cm3.h **** 
 252:../system/include/cmsis/core_cm3.h **** /**
 253:../system/include/cmsis/core_cm3.h ****   \ingroup    CMSIS_core_register
 254:../system/include/cmsis/core_cm3.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 255:../system/include/cmsis/core_cm3.h ****   \brief      Core Register type definitions.
 256:../system/include/cmsis/core_cm3.h ****   @{
 257:../system/include/cmsis/core_cm3.h ****  */
 258:../system/include/cmsis/core_cm3.h **** 
 259:../system/include/cmsis/core_cm3.h **** /**
 260:../system/include/cmsis/core_cm3.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 261:../system/include/cmsis/core_cm3.h ****  */
 262:../system/include/cmsis/core_cm3.h **** typedef union
 263:../system/include/cmsis/core_cm3.h **** {
 264:../system/include/cmsis/core_cm3.h ****   struct
 265:../system/include/cmsis/core_cm3.h ****   {
 266:../system/include/cmsis/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved */
 267:../system/include/cmsis/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 268:../system/include/cmsis/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 269:../system/include/cmsis/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 270:../system/include/cmsis/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 271:../system/include/cmsis/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 272:../system/include/cmsis/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 273:../system/include/cmsis/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 274:../system/include/cmsis/core_cm3.h **** } APSR_Type;
 275:../system/include/cmsis/core_cm3.h **** 
 276:../system/include/cmsis/core_cm3.h **** /* APSR Register Definitions */
 277:../system/include/cmsis/core_cm3.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 278:../system/include/cmsis/core_cm3.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 279:../system/include/cmsis/core_cm3.h **** 
 280:../system/include/cmsis/core_cm3.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 281:../system/include/cmsis/core_cm3.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 282:../system/include/cmsis/core_cm3.h **** 
 283:../system/include/cmsis/core_cm3.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 284:../system/include/cmsis/core_cm3.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 285:../system/include/cmsis/core_cm3.h **** 
 286:../system/include/cmsis/core_cm3.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 287:../system/include/cmsis/core_cm3.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 288:../system/include/cmsis/core_cm3.h **** 
 289:../system/include/cmsis/core_cm3.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 290:../system/include/cmsis/core_cm3.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 291:../system/include/cmsis/core_cm3.h **** 
 292:../system/include/cmsis/core_cm3.h **** 
 293:../system/include/cmsis/core_cm3.h **** /**
 294:../system/include/cmsis/core_cm3.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 295:../system/include/cmsis/core_cm3.h ****  */
 296:../system/include/cmsis/core_cm3.h **** typedef union
 297:../system/include/cmsis/core_cm3.h **** {
 298:../system/include/cmsis/core_cm3.h ****   struct
 299:../system/include/cmsis/core_cm3.h ****   {
 300:../system/include/cmsis/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 301:../system/include/cmsis/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 302:../system/include/cmsis/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 303:../system/include/cmsis/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 304:../system/include/cmsis/core_cm3.h **** } IPSR_Type;
 305:../system/include/cmsis/core_cm3.h **** 
 306:../system/include/cmsis/core_cm3.h **** /* IPSR Register Definitions */
 307:../system/include/cmsis/core_cm3.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 308:../system/include/cmsis/core_cm3.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 309:../system/include/cmsis/core_cm3.h **** 
 310:../system/include/cmsis/core_cm3.h **** 
 311:../system/include/cmsis/core_cm3.h **** /**
 312:../system/include/cmsis/core_cm3.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 313:../system/include/cmsis/core_cm3.h ****  */
 314:../system/include/cmsis/core_cm3.h **** typedef union
 315:../system/include/cmsis/core_cm3.h **** {
 316:../system/include/cmsis/core_cm3.h ****   struct
 317:../system/include/cmsis/core_cm3.h ****   {
 318:../system/include/cmsis/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 319:../system/include/cmsis/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 320:../system/include/cmsis/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 321:../system/include/cmsis/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 322:../system/include/cmsis/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 323:../system/include/cmsis/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 324:../system/include/cmsis/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 325:../system/include/cmsis/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 326:../system/include/cmsis/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 327:../system/include/cmsis/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 328:../system/include/cmsis/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 329:../system/include/cmsis/core_cm3.h **** } xPSR_Type;
 330:../system/include/cmsis/core_cm3.h **** 
 331:../system/include/cmsis/core_cm3.h **** /* xPSR Register Definitions */
 332:../system/include/cmsis/core_cm3.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 333:../system/include/cmsis/core_cm3.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 334:../system/include/cmsis/core_cm3.h **** 
 335:../system/include/cmsis/core_cm3.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 336:../system/include/cmsis/core_cm3.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 337:../system/include/cmsis/core_cm3.h **** 
 338:../system/include/cmsis/core_cm3.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 339:../system/include/cmsis/core_cm3.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 340:../system/include/cmsis/core_cm3.h **** 
 341:../system/include/cmsis/core_cm3.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 342:../system/include/cmsis/core_cm3.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 343:../system/include/cmsis/core_cm3.h **** 
 344:../system/include/cmsis/core_cm3.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 345:../system/include/cmsis/core_cm3.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 346:../system/include/cmsis/core_cm3.h **** 
 347:../system/include/cmsis/core_cm3.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 348:../system/include/cmsis/core_cm3.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 349:../system/include/cmsis/core_cm3.h **** 
 350:../system/include/cmsis/core_cm3.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 351:../system/include/cmsis/core_cm3.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 352:../system/include/cmsis/core_cm3.h **** 
 353:../system/include/cmsis/core_cm3.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 354:../system/include/cmsis/core_cm3.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 355:../system/include/cmsis/core_cm3.h **** 
 356:../system/include/cmsis/core_cm3.h **** 
 357:../system/include/cmsis/core_cm3.h **** /**
 358:../system/include/cmsis/core_cm3.h ****   \brief  Union type to access the Control Registers (CONTROL).
 359:../system/include/cmsis/core_cm3.h ****  */
 360:../system/include/cmsis/core_cm3.h **** typedef union
 361:../system/include/cmsis/core_cm3.h **** {
 362:../system/include/cmsis/core_cm3.h ****   struct
 363:../system/include/cmsis/core_cm3.h ****   {
 364:../system/include/cmsis/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 365:../system/include/cmsis/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 366:../system/include/cmsis/core_cm3.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 367:../system/include/cmsis/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 368:../system/include/cmsis/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 369:../system/include/cmsis/core_cm3.h **** } CONTROL_Type;
 370:../system/include/cmsis/core_cm3.h **** 
 371:../system/include/cmsis/core_cm3.h **** /* CONTROL Register Definitions */
 372:../system/include/cmsis/core_cm3.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 373:../system/include/cmsis/core_cm3.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 374:../system/include/cmsis/core_cm3.h **** 
 375:../system/include/cmsis/core_cm3.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 376:../system/include/cmsis/core_cm3.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 377:../system/include/cmsis/core_cm3.h **** 
 378:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_CORE */
 379:../system/include/cmsis/core_cm3.h **** 
 380:../system/include/cmsis/core_cm3.h **** 
 381:../system/include/cmsis/core_cm3.h **** /**
 382:../system/include/cmsis/core_cm3.h ****   \ingroup    CMSIS_core_register
 383:../system/include/cmsis/core_cm3.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 384:../system/include/cmsis/core_cm3.h ****   \brief      Type definitions for the NVIC Registers
 385:../system/include/cmsis/core_cm3.h ****   @{
 386:../system/include/cmsis/core_cm3.h ****  */
 387:../system/include/cmsis/core_cm3.h **** 
 388:../system/include/cmsis/core_cm3.h **** /**
 389:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 390:../system/include/cmsis/core_cm3.h ****  */
 391:../system/include/cmsis/core_cm3.h **** typedef struct
 392:../system/include/cmsis/core_cm3.h **** {
 393:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 394:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED0[24U];
 395:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 396:../system/include/cmsis/core_cm3.h ****         uint32_t RSERVED1[24U];
 397:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 398:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED2[24U];
 399:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 400:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED3[24U];
 401:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 402:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED4[56U];
 403:../system/include/cmsis/core_cm3.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 404:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED5[644U];
 405:../system/include/cmsis/core_cm3.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 406:../system/include/cmsis/core_cm3.h **** }  NVIC_Type;
 407:../system/include/cmsis/core_cm3.h **** 
 408:../system/include/cmsis/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 409:../system/include/cmsis/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 410:../system/include/cmsis/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 411:../system/include/cmsis/core_cm3.h **** 
 412:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 413:../system/include/cmsis/core_cm3.h **** 
 414:../system/include/cmsis/core_cm3.h **** 
 415:../system/include/cmsis/core_cm3.h **** /**
 416:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
 417:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 418:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the System Control Block Registers
 419:../system/include/cmsis/core_cm3.h ****   @{
 420:../system/include/cmsis/core_cm3.h ****  */
 421:../system/include/cmsis/core_cm3.h **** 
 422:../system/include/cmsis/core_cm3.h **** /**
 423:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the System Control Block (SCB).
 424:../system/include/cmsis/core_cm3.h ****  */
 425:../system/include/cmsis/core_cm3.h **** typedef struct
 426:../system/include/cmsis/core_cm3.h **** {
 427:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 428:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 429:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 430:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 431:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 432:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 433:../system/include/cmsis/core_cm3.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 434:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 435:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 436:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 437:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 438:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 439:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 440:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 441:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 442:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 443:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 444:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 445:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 446:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED0[5U];
 447:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 448:../system/include/cmsis/core_cm3.h **** } SCB_Type;
 449:../system/include/cmsis/core_cm3.h **** 
 450:../system/include/cmsis/core_cm3.h **** /* SCB CPUID Register Definitions */
 451:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 452:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 453:../system/include/cmsis/core_cm3.h **** 
 454:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 455:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 456:../system/include/cmsis/core_cm3.h **** 
 457:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 458:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 459:../system/include/cmsis/core_cm3.h **** 
 460:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 461:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 462:../system/include/cmsis/core_cm3.h **** 
 463:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 464:../system/include/cmsis/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 465:../system/include/cmsis/core_cm3.h **** 
 466:../system/include/cmsis/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 467:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 468:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 469:../system/include/cmsis/core_cm3.h **** 
 470:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 471:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 472:../system/include/cmsis/core_cm3.h **** 
 473:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 474:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 475:../system/include/cmsis/core_cm3.h **** 
 476:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 477:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 478:../system/include/cmsis/core_cm3.h **** 
 479:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 480:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 481:../system/include/cmsis/core_cm3.h **** 
 482:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 483:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 484:../system/include/cmsis/core_cm3.h **** 
 485:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 486:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 487:../system/include/cmsis/core_cm3.h **** 
 488:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 489:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 490:../system/include/cmsis/core_cm3.h **** 
 491:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 492:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 493:../system/include/cmsis/core_cm3.h **** 
 494:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 495:../system/include/cmsis/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 496:../system/include/cmsis/core_cm3.h **** 
 497:../system/include/cmsis/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 498:../system/include/cmsis/core_cm3.h **** #if (__CM3_REV < 0x0201U)                   /* core r2p1 */
 499:../system/include/cmsis/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29U                                            /*!< SCB 
 500:../system/include/cmsis/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 501:../system/include/cmsis/core_cm3.h **** 
 502:../system/include/cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 503:../system/include/cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 504:../system/include/cmsis/core_cm3.h **** #else
 505:../system/include/cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 506:../system/include/cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 507:../system/include/cmsis/core_cm3.h **** #endif
 508:../system/include/cmsis/core_cm3.h **** 
 509:../system/include/cmsis/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 510:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 511:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 512:../system/include/cmsis/core_cm3.h **** 
 513:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 514:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 515:../system/include/cmsis/core_cm3.h **** 
 516:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 517:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 518:../system/include/cmsis/core_cm3.h **** 
 519:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 520:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 521:../system/include/cmsis/core_cm3.h **** 
 522:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 523:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 524:../system/include/cmsis/core_cm3.h **** 
 525:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 526:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 527:../system/include/cmsis/core_cm3.h **** 
 528:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 529:../system/include/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 530:../system/include/cmsis/core_cm3.h **** 
 531:../system/include/cmsis/core_cm3.h **** /* SCB System Control Register Definitions */
 532:../system/include/cmsis/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 533:../system/include/cmsis/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 534:../system/include/cmsis/core_cm3.h **** 
 535:../system/include/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 536:../system/include/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 537:../system/include/cmsis/core_cm3.h **** 
 538:../system/include/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 539:../system/include/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 540:../system/include/cmsis/core_cm3.h **** 
 541:../system/include/cmsis/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 542:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 543:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 544:../system/include/cmsis/core_cm3.h **** 
 545:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 546:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 547:../system/include/cmsis/core_cm3.h **** 
 548:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 549:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 550:../system/include/cmsis/core_cm3.h **** 
 551:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 552:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 553:../system/include/cmsis/core_cm3.h **** 
 554:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 555:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 556:../system/include/cmsis/core_cm3.h **** 
 557:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 558:../system/include/cmsis/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 559:../system/include/cmsis/core_cm3.h **** 
 560:../system/include/cmsis/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 561:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 562:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 563:../system/include/cmsis/core_cm3.h **** 
 564:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 565:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 566:../system/include/cmsis/core_cm3.h **** 
 567:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 568:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 569:../system/include/cmsis/core_cm3.h **** 
 570:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 571:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 572:../system/include/cmsis/core_cm3.h **** 
 573:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 574:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 575:../system/include/cmsis/core_cm3.h **** 
 576:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 577:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 578:../system/include/cmsis/core_cm3.h **** 
 579:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 580:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 581:../system/include/cmsis/core_cm3.h **** 
 582:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 583:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 584:../system/include/cmsis/core_cm3.h **** 
 585:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 586:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 587:../system/include/cmsis/core_cm3.h **** 
 588:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 589:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 590:../system/include/cmsis/core_cm3.h **** 
 591:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 592:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 593:../system/include/cmsis/core_cm3.h **** 
 594:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 595:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 596:../system/include/cmsis/core_cm3.h **** 
 597:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 598:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 599:../system/include/cmsis/core_cm3.h **** 
 600:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 601:../system/include/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 602:../system/include/cmsis/core_cm3.h **** 
 603:../system/include/cmsis/core_cm3.h **** /* SCB Configurable Fault Status Register Definitions */
 604:../system/include/cmsis/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 605:../system/include/cmsis/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 606:../system/include/cmsis/core_cm3.h **** 
 607:../system/include/cmsis/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 608:../system/include/cmsis/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 609:../system/include/cmsis/core_cm3.h **** 
 610:../system/include/cmsis/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 611:../system/include/cmsis/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 612:../system/include/cmsis/core_cm3.h **** 
 613:../system/include/cmsis/core_cm3.h **** /* SCB Hard Fault Status Register Definitions */
 614:../system/include/cmsis/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 615:../system/include/cmsis/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 616:../system/include/cmsis/core_cm3.h **** 
 617:../system/include/cmsis/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 618:../system/include/cmsis/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 619:../system/include/cmsis/core_cm3.h **** 
 620:../system/include/cmsis/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 621:../system/include/cmsis/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 622:../system/include/cmsis/core_cm3.h **** 
 623:../system/include/cmsis/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 624:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 625:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 626:../system/include/cmsis/core_cm3.h **** 
 627:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 628:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 629:../system/include/cmsis/core_cm3.h **** 
 630:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 631:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 632:../system/include/cmsis/core_cm3.h **** 
 633:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 634:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 635:../system/include/cmsis/core_cm3.h **** 
 636:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 637:../system/include/cmsis/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 638:../system/include/cmsis/core_cm3.h **** 
 639:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_SCB */
 640:../system/include/cmsis/core_cm3.h **** 
 641:../system/include/cmsis/core_cm3.h **** 
 642:../system/include/cmsis/core_cm3.h **** /**
 643:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
 644:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 645:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 646:../system/include/cmsis/core_cm3.h ****   @{
 647:../system/include/cmsis/core_cm3.h ****  */
 648:../system/include/cmsis/core_cm3.h **** 
 649:../system/include/cmsis/core_cm3.h **** /**
 650:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 651:../system/include/cmsis/core_cm3.h ****  */
 652:../system/include/cmsis/core_cm3.h **** typedef struct
 653:../system/include/cmsis/core_cm3.h **** {
 654:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED0[1U];
 655:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 656:../system/include/cmsis/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200U))
 657:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 658:../system/include/cmsis/core_cm3.h **** #else
 659:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED1[1U];
 660:../system/include/cmsis/core_cm3.h **** #endif
 661:../system/include/cmsis/core_cm3.h **** } SCnSCB_Type;
 662:../system/include/cmsis/core_cm3.h **** 
 663:../system/include/cmsis/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 664:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 665:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 666:../system/include/cmsis/core_cm3.h **** 
 667:../system/include/cmsis/core_cm3.h **** /* Auxiliary Control Register Definitions */
 668:../system/include/cmsis/core_cm3.h **** 
 669:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 670:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 671:../system/include/cmsis/core_cm3.h **** 
 672:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 673:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 674:../system/include/cmsis/core_cm3.h **** 
 675:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 676:../system/include/cmsis/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 677:../system/include/cmsis/core_cm3.h **** 
 678:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 679:../system/include/cmsis/core_cm3.h **** 
 680:../system/include/cmsis/core_cm3.h **** 
 681:../system/include/cmsis/core_cm3.h **** /**
 682:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
 683:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 684:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the System Timer Registers.
 685:../system/include/cmsis/core_cm3.h ****   @{
 686:../system/include/cmsis/core_cm3.h ****  */
 687:../system/include/cmsis/core_cm3.h **** 
 688:../system/include/cmsis/core_cm3.h **** /**
 689:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the System Timer (SysTick).
 690:../system/include/cmsis/core_cm3.h ****  */
 691:../system/include/cmsis/core_cm3.h **** typedef struct
 692:../system/include/cmsis/core_cm3.h **** {
 693:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 694:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 695:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 696:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 697:../system/include/cmsis/core_cm3.h **** } SysTick_Type;
 698:../system/include/cmsis/core_cm3.h **** 
 699:../system/include/cmsis/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 700:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 701:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 702:../system/include/cmsis/core_cm3.h **** 
 703:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 704:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 705:../system/include/cmsis/core_cm3.h **** 
 706:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 707:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 708:../system/include/cmsis/core_cm3.h **** 
 709:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 710:../system/include/cmsis/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 711:../system/include/cmsis/core_cm3.h **** 
 712:../system/include/cmsis/core_cm3.h **** /* SysTick Reload Register Definitions */
 713:../system/include/cmsis/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 714:../system/include/cmsis/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 715:../system/include/cmsis/core_cm3.h **** 
 716:../system/include/cmsis/core_cm3.h **** /* SysTick Current Register Definitions */
 717:../system/include/cmsis/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 718:../system/include/cmsis/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 719:../system/include/cmsis/core_cm3.h **** 
 720:../system/include/cmsis/core_cm3.h **** /* SysTick Calibration Register Definitions */
 721:../system/include/cmsis/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 722:../system/include/cmsis/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 723:../system/include/cmsis/core_cm3.h **** 
 724:../system/include/cmsis/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 725:../system/include/cmsis/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 726:../system/include/cmsis/core_cm3.h **** 
 727:../system/include/cmsis/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 728:../system/include/cmsis/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 729:../system/include/cmsis/core_cm3.h **** 
 730:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 731:../system/include/cmsis/core_cm3.h **** 
 732:../system/include/cmsis/core_cm3.h **** 
 733:../system/include/cmsis/core_cm3.h **** /**
 734:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
 735:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 736:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 737:../system/include/cmsis/core_cm3.h ****   @{
 738:../system/include/cmsis/core_cm3.h ****  */
 739:../system/include/cmsis/core_cm3.h **** 
 740:../system/include/cmsis/core_cm3.h **** /**
 741:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 742:../system/include/cmsis/core_cm3.h ****  */
 743:../system/include/cmsis/core_cm3.h **** typedef struct
 744:../system/include/cmsis/core_cm3.h **** {
 745:../system/include/cmsis/core_cm3.h ****   __OM  union
 746:../system/include/cmsis/core_cm3.h ****   {
 747:../system/include/cmsis/core_cm3.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 748:../system/include/cmsis/core_cm3.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 749:../system/include/cmsis/core_cm3.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 750:../system/include/cmsis/core_cm3.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 751:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED0[864U];
 752:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 753:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED1[15U];
 754:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 755:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED2[15U];
 756:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 757:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED3[29U];
 758:../system/include/cmsis/core_cm3.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 759:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 760:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 761:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED4[43U];
 762:../system/include/cmsis/core_cm3.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 763:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 764:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED5[6U];
 765:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 766:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 767:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 768:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 769:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 770:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 771:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 772:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 773:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 774:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 775:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 776:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 777:../system/include/cmsis/core_cm3.h **** } ITM_Type;
 778:../system/include/cmsis/core_cm3.h **** 
 779:../system/include/cmsis/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 780:../system/include/cmsis/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 781:../system/include/cmsis/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 782:../system/include/cmsis/core_cm3.h **** 
 783:../system/include/cmsis/core_cm3.h **** /* ITM Trace Control Register Definitions */
 784:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 785:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 786:../system/include/cmsis/core_cm3.h **** 
 787:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 788:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 789:../system/include/cmsis/core_cm3.h **** 
 790:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 791:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 792:../system/include/cmsis/core_cm3.h **** 
 793:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 794:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 795:../system/include/cmsis/core_cm3.h **** 
 796:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 797:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 798:../system/include/cmsis/core_cm3.h **** 
 799:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 800:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 801:../system/include/cmsis/core_cm3.h **** 
 802:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 803:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 804:../system/include/cmsis/core_cm3.h **** 
 805:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 806:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 807:../system/include/cmsis/core_cm3.h **** 
 808:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 809:../system/include/cmsis/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 810:../system/include/cmsis/core_cm3.h **** 
 811:../system/include/cmsis/core_cm3.h **** /* ITM Integration Write Register Definitions */
 812:../system/include/cmsis/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 813:../system/include/cmsis/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 814:../system/include/cmsis/core_cm3.h **** 
 815:../system/include/cmsis/core_cm3.h **** /* ITM Integration Read Register Definitions */
 816:../system/include/cmsis/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 817:../system/include/cmsis/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 818:../system/include/cmsis/core_cm3.h **** 
 819:../system/include/cmsis/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 820:../system/include/cmsis/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 821:../system/include/cmsis/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 822:../system/include/cmsis/core_cm3.h **** 
 823:../system/include/cmsis/core_cm3.h **** /* ITM Lock Status Register Definitions */
 824:../system/include/cmsis/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 825:../system/include/cmsis/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 826:../system/include/cmsis/core_cm3.h **** 
 827:../system/include/cmsis/core_cm3.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 828:../system/include/cmsis/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 829:../system/include/cmsis/core_cm3.h **** 
 830:../system/include/cmsis/core_cm3.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 831:../system/include/cmsis/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 832:../system/include/cmsis/core_cm3.h **** 
 833:../system/include/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 834:../system/include/cmsis/core_cm3.h **** 
 835:../system/include/cmsis/core_cm3.h **** 
 836:../system/include/cmsis/core_cm3.h **** /**
 837:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
 838:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 839:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 840:../system/include/cmsis/core_cm3.h ****   @{
 841:../system/include/cmsis/core_cm3.h ****  */
 842:../system/include/cmsis/core_cm3.h **** 
 843:../system/include/cmsis/core_cm3.h **** /**
 844:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 845:../system/include/cmsis/core_cm3.h ****  */
 846:../system/include/cmsis/core_cm3.h **** typedef struct
 847:../system/include/cmsis/core_cm3.h **** {
 848:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 849:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 850:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 851:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 852:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 853:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 854:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 855:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 856:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 857:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 858:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 859:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED0[1U];
 860:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 861:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 862:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 863:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED1[1U];
 864:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 865:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 866:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 867:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED2[1U];
 868:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 869:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 870:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 871:../system/include/cmsis/core_cm3.h **** } DWT_Type;
 872:../system/include/cmsis/core_cm3.h **** 
 873:../system/include/cmsis/core_cm3.h **** /* DWT Control Register Definitions */
 874:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 875:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 876:../system/include/cmsis/core_cm3.h **** 
 877:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 878:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 879:../system/include/cmsis/core_cm3.h **** 
 880:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 881:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 882:../system/include/cmsis/core_cm3.h **** 
 883:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 884:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 885:../system/include/cmsis/core_cm3.h **** 
 886:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 887:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 888:../system/include/cmsis/core_cm3.h **** 
 889:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 890:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 891:../system/include/cmsis/core_cm3.h **** 
 892:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 893:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 894:../system/include/cmsis/core_cm3.h **** 
 895:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 896:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 897:../system/include/cmsis/core_cm3.h **** 
 898:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 899:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 900:../system/include/cmsis/core_cm3.h **** 
 901:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 902:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 903:../system/include/cmsis/core_cm3.h **** 
 904:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 905:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 906:../system/include/cmsis/core_cm3.h **** 
 907:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 908:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 909:../system/include/cmsis/core_cm3.h **** 
 910:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 911:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 912:../system/include/cmsis/core_cm3.h **** 
 913:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 914:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 915:../system/include/cmsis/core_cm3.h **** 
 916:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 917:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 918:../system/include/cmsis/core_cm3.h **** 
 919:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 920:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 921:../system/include/cmsis/core_cm3.h **** 
 922:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 923:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 924:../system/include/cmsis/core_cm3.h **** 
 925:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 926:../system/include/cmsis/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 927:../system/include/cmsis/core_cm3.h **** 
 928:../system/include/cmsis/core_cm3.h **** /* DWT CPI Count Register Definitions */
 929:../system/include/cmsis/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 930:../system/include/cmsis/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 931:../system/include/cmsis/core_cm3.h **** 
 932:../system/include/cmsis/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 933:../system/include/cmsis/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 934:../system/include/cmsis/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 935:../system/include/cmsis/core_cm3.h **** 
 936:../system/include/cmsis/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 937:../system/include/cmsis/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 938:../system/include/cmsis/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 939:../system/include/cmsis/core_cm3.h **** 
 940:../system/include/cmsis/core_cm3.h **** /* DWT LSU Count Register Definitions */
 941:../system/include/cmsis/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 942:../system/include/cmsis/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 943:../system/include/cmsis/core_cm3.h **** 
 944:../system/include/cmsis/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 945:../system/include/cmsis/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 946:../system/include/cmsis/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
 947:../system/include/cmsis/core_cm3.h **** 
 948:../system/include/cmsis/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 949:../system/include/cmsis/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
 950:../system/include/cmsis/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
 951:../system/include/cmsis/core_cm3.h **** 
 952:../system/include/cmsis/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 953:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
 954:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 955:../system/include/cmsis/core_cm3.h **** 
 956:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
 957:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 958:../system/include/cmsis/core_cm3.h **** 
 959:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
 960:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 961:../system/include/cmsis/core_cm3.h **** 
 962:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
 963:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 964:../system/include/cmsis/core_cm3.h **** 
 965:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
 966:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 967:../system/include/cmsis/core_cm3.h **** 
 968:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
 969:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 970:../system/include/cmsis/core_cm3.h **** 
 971:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
 972:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 973:../system/include/cmsis/core_cm3.h **** 
 974:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
 975:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 976:../system/include/cmsis/core_cm3.h **** 
 977:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
 978:../system/include/cmsis/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
 979:../system/include/cmsis/core_cm3.h **** 
 980:../system/include/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 981:../system/include/cmsis/core_cm3.h **** 
 982:../system/include/cmsis/core_cm3.h **** 
 983:../system/include/cmsis/core_cm3.h **** /**
 984:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
 985:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 986:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
 987:../system/include/cmsis/core_cm3.h ****   @{
 988:../system/include/cmsis/core_cm3.h ****  */
 989:../system/include/cmsis/core_cm3.h **** 
 990:../system/include/cmsis/core_cm3.h **** /**
 991:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
 992:../system/include/cmsis/core_cm3.h ****  */
 993:../system/include/cmsis/core_cm3.h **** typedef struct
 994:../system/include/cmsis/core_cm3.h **** {
 995:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 996:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 997:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED0[2U];
 998:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 999:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED1[55U];
1000:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1001:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED2[131U];
1002:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1003:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1004:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1005:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED3[759U];
1006:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1007:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1008:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1009:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED4[1U];
1010:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1011:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1012:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1013:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED5[39U];
1014:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1015:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1016:../system/include/cmsis/core_cm3.h ****         uint32_t RESERVED7[8U];
1017:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1018:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1019:../system/include/cmsis/core_cm3.h **** } TPI_Type;
1020:../system/include/cmsis/core_cm3.h **** 
1021:../system/include/cmsis/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1022:../system/include/cmsis/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1023:../system/include/cmsis/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1024:../system/include/cmsis/core_cm3.h **** 
1025:../system/include/cmsis/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
1026:../system/include/cmsis/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1027:../system/include/cmsis/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1028:../system/include/cmsis/core_cm3.h **** 
1029:../system/include/cmsis/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
1030:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1031:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1032:../system/include/cmsis/core_cm3.h **** 
1033:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1034:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1035:../system/include/cmsis/core_cm3.h **** 
1036:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1037:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1038:../system/include/cmsis/core_cm3.h **** 
1039:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1040:../system/include/cmsis/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1041:../system/include/cmsis/core_cm3.h **** 
1042:../system/include/cmsis/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
1043:../system/include/cmsis/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1044:../system/include/cmsis/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1045:../system/include/cmsis/core_cm3.h **** 
1046:../system/include/cmsis/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1047:../system/include/cmsis/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1048:../system/include/cmsis/core_cm3.h **** 
1049:../system/include/cmsis/core_cm3.h **** /* TPI TRIGGER Register Definitions */
1050:../system/include/cmsis/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1051:../system/include/cmsis/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1052:../system/include/cmsis/core_cm3.h **** 
1053:../system/include/cmsis/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1054:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1055:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1056:../system/include/cmsis/core_cm3.h **** 
1057:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1058:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1059:../system/include/cmsis/core_cm3.h **** 
1060:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1061:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1062:../system/include/cmsis/core_cm3.h **** 
1063:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1064:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1065:../system/include/cmsis/core_cm3.h **** 
1066:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1067:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1068:../system/include/cmsis/core_cm3.h **** 
1069:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1070:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1071:../system/include/cmsis/core_cm3.h **** 
1072:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1073:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1074:../system/include/cmsis/core_cm3.h **** 
1075:../system/include/cmsis/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
1076:../system/include/cmsis/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1077:../system/include/cmsis/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1078:../system/include/cmsis/core_cm3.h **** 
1079:../system/include/cmsis/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1080:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1081:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1082:../system/include/cmsis/core_cm3.h **** 
1083:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1084:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1085:../system/include/cmsis/core_cm3.h **** 
1086:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1087:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1088:../system/include/cmsis/core_cm3.h **** 
1089:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1090:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1091:../system/include/cmsis/core_cm3.h **** 
1092:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1093:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1094:../system/include/cmsis/core_cm3.h **** 
1095:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1096:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1097:../system/include/cmsis/core_cm3.h **** 
1098:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1099:../system/include/cmsis/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1100:../system/include/cmsis/core_cm3.h **** 
1101:../system/include/cmsis/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
1102:../system/include/cmsis/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1103:../system/include/cmsis/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1104:../system/include/cmsis/core_cm3.h **** 
1105:../system/include/cmsis/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
1106:../system/include/cmsis/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1107:../system/include/cmsis/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1108:../system/include/cmsis/core_cm3.h **** 
1109:../system/include/cmsis/core_cm3.h **** /* TPI DEVID Register Definitions */
1110:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1111:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1112:../system/include/cmsis/core_cm3.h **** 
1113:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1114:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1115:../system/include/cmsis/core_cm3.h **** 
1116:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1117:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1118:../system/include/cmsis/core_cm3.h **** 
1119:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1120:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1121:../system/include/cmsis/core_cm3.h **** 
1122:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1123:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1124:../system/include/cmsis/core_cm3.h **** 
1125:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1126:../system/include/cmsis/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1127:../system/include/cmsis/core_cm3.h **** 
1128:../system/include/cmsis/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1129:../system/include/cmsis/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1130:../system/include/cmsis/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1131:../system/include/cmsis/core_cm3.h **** 
1132:../system/include/cmsis/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1133:../system/include/cmsis/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1134:../system/include/cmsis/core_cm3.h **** 
1135:../system/include/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1136:../system/include/cmsis/core_cm3.h **** 
1137:../system/include/cmsis/core_cm3.h **** 
1138:../system/include/cmsis/core_cm3.h **** #if (__MPU_PRESENT == 1U)
1139:../system/include/cmsis/core_cm3.h **** /**
1140:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
1141:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1142:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1143:../system/include/cmsis/core_cm3.h ****   @{
1144:../system/include/cmsis/core_cm3.h ****  */
1145:../system/include/cmsis/core_cm3.h **** 
1146:../system/include/cmsis/core_cm3.h **** /**
1147:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1148:../system/include/cmsis/core_cm3.h ****  */
1149:../system/include/cmsis/core_cm3.h **** typedef struct
1150:../system/include/cmsis/core_cm3.h **** {
1151:../system/include/cmsis/core_cm3.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1152:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1153:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1154:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1155:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1156:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1157:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1158:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1159:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1160:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1161:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1162:../system/include/cmsis/core_cm3.h **** } MPU_Type;
1163:../system/include/cmsis/core_cm3.h **** 
1164:../system/include/cmsis/core_cm3.h **** /* MPU Type Register Definitions */
1165:../system/include/cmsis/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1166:../system/include/cmsis/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1167:../system/include/cmsis/core_cm3.h **** 
1168:../system/include/cmsis/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1169:../system/include/cmsis/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1170:../system/include/cmsis/core_cm3.h **** 
1171:../system/include/cmsis/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1172:../system/include/cmsis/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1173:../system/include/cmsis/core_cm3.h **** 
1174:../system/include/cmsis/core_cm3.h **** /* MPU Control Register Definitions */
1175:../system/include/cmsis/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1176:../system/include/cmsis/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1177:../system/include/cmsis/core_cm3.h **** 
1178:../system/include/cmsis/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1179:../system/include/cmsis/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1180:../system/include/cmsis/core_cm3.h **** 
1181:../system/include/cmsis/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1182:../system/include/cmsis/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1183:../system/include/cmsis/core_cm3.h **** 
1184:../system/include/cmsis/core_cm3.h **** /* MPU Region Number Register Definitions */
1185:../system/include/cmsis/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1186:../system/include/cmsis/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1187:../system/include/cmsis/core_cm3.h **** 
1188:../system/include/cmsis/core_cm3.h **** /* MPU Region Base Address Register Definitions */
1189:../system/include/cmsis/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1190:../system/include/cmsis/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1191:../system/include/cmsis/core_cm3.h **** 
1192:../system/include/cmsis/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1193:../system/include/cmsis/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1194:../system/include/cmsis/core_cm3.h **** 
1195:../system/include/cmsis/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1196:../system/include/cmsis/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1197:../system/include/cmsis/core_cm3.h **** 
1198:../system/include/cmsis/core_cm3.h **** /* MPU Region Attribute and Size Register Definitions */
1199:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1200:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1201:../system/include/cmsis/core_cm3.h **** 
1202:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1203:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1204:../system/include/cmsis/core_cm3.h **** 
1205:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1206:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1207:../system/include/cmsis/core_cm3.h **** 
1208:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1209:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1210:../system/include/cmsis/core_cm3.h **** 
1211:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1212:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1213:../system/include/cmsis/core_cm3.h **** 
1214:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1215:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1216:../system/include/cmsis/core_cm3.h **** 
1217:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1218:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1219:../system/include/cmsis/core_cm3.h **** 
1220:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1221:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1222:../system/include/cmsis/core_cm3.h **** 
1223:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1224:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1225:../system/include/cmsis/core_cm3.h **** 
1226:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1227:../system/include/cmsis/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1228:../system/include/cmsis/core_cm3.h **** 
1229:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_MPU */
1230:../system/include/cmsis/core_cm3.h **** #endif
1231:../system/include/cmsis/core_cm3.h **** 
1232:../system/include/cmsis/core_cm3.h **** 
1233:../system/include/cmsis/core_cm3.h **** /**
1234:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_core_register
1235:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1236:../system/include/cmsis/core_cm3.h ****   \brief    Type definitions for the Core Debug Registers
1237:../system/include/cmsis/core_cm3.h ****   @{
1238:../system/include/cmsis/core_cm3.h ****  */
1239:../system/include/cmsis/core_cm3.h **** 
1240:../system/include/cmsis/core_cm3.h **** /**
1241:../system/include/cmsis/core_cm3.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1242:../system/include/cmsis/core_cm3.h ****  */
1243:../system/include/cmsis/core_cm3.h **** typedef struct
1244:../system/include/cmsis/core_cm3.h **** {
1245:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1246:../system/include/cmsis/core_cm3.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1247:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1248:../system/include/cmsis/core_cm3.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1249:../system/include/cmsis/core_cm3.h **** } CoreDebug_Type;
1250:../system/include/cmsis/core_cm3.h **** 
1251:../system/include/cmsis/core_cm3.h **** /* Debug Halting Control and Status Register Definitions */
1252:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1253:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1254:../system/include/cmsis/core_cm3.h **** 
1255:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1256:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1257:../system/include/cmsis/core_cm3.h **** 
1258:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1259:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1260:../system/include/cmsis/core_cm3.h **** 
1261:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1262:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1263:../system/include/cmsis/core_cm3.h **** 
1264:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1265:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1266:../system/include/cmsis/core_cm3.h **** 
1267:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1268:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1269:../system/include/cmsis/core_cm3.h **** 
1270:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1271:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1272:../system/include/cmsis/core_cm3.h **** 
1273:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1274:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1275:../system/include/cmsis/core_cm3.h **** 
1276:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1277:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1278:../system/include/cmsis/core_cm3.h **** 
1279:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1280:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1281:../system/include/cmsis/core_cm3.h **** 
1282:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1283:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1284:../system/include/cmsis/core_cm3.h **** 
1285:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1286:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1287:../system/include/cmsis/core_cm3.h **** 
1288:../system/include/cmsis/core_cm3.h **** /* Debug Core Register Selector Register Definitions */
1289:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1290:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1291:../system/include/cmsis/core_cm3.h **** 
1292:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1293:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1294:../system/include/cmsis/core_cm3.h **** 
1295:../system/include/cmsis/core_cm3.h **** /* Debug Exception and Monitor Control Register Definitions */
1296:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1297:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1298:../system/include/cmsis/core_cm3.h **** 
1299:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1300:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1301:../system/include/cmsis/core_cm3.h **** 
1302:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1303:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1304:../system/include/cmsis/core_cm3.h **** 
1305:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1306:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1307:../system/include/cmsis/core_cm3.h **** 
1308:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1309:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1310:../system/include/cmsis/core_cm3.h **** 
1311:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1312:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1313:../system/include/cmsis/core_cm3.h **** 
1314:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1315:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1316:../system/include/cmsis/core_cm3.h **** 
1317:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1318:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1319:../system/include/cmsis/core_cm3.h **** 
1320:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1321:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1322:../system/include/cmsis/core_cm3.h **** 
1323:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1324:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1325:../system/include/cmsis/core_cm3.h **** 
1326:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1327:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1328:../system/include/cmsis/core_cm3.h **** 
1329:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1330:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1331:../system/include/cmsis/core_cm3.h **** 
1332:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1333:../system/include/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1334:../system/include/cmsis/core_cm3.h **** 
1335:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1336:../system/include/cmsis/core_cm3.h **** 
1337:../system/include/cmsis/core_cm3.h **** 
1338:../system/include/cmsis/core_cm3.h **** /**
1339:../system/include/cmsis/core_cm3.h ****   \ingroup    CMSIS_core_register
1340:../system/include/cmsis/core_cm3.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1341:../system/include/cmsis/core_cm3.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1342:../system/include/cmsis/core_cm3.h ****   @{
1343:../system/include/cmsis/core_cm3.h ****  */
1344:../system/include/cmsis/core_cm3.h **** 
1345:../system/include/cmsis/core_cm3.h **** /**
1346:../system/include/cmsis/core_cm3.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1347:../system/include/cmsis/core_cm3.h ****   \param[in] field  Name of the register bit field.
1348:../system/include/cmsis/core_cm3.h ****   \param[in] value  Value of the bit field.
1349:../system/include/cmsis/core_cm3.h ****   \return           Masked and shifted value.
1350:../system/include/cmsis/core_cm3.h **** */
1351:../system/include/cmsis/core_cm3.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1352:../system/include/cmsis/core_cm3.h **** 
1353:../system/include/cmsis/core_cm3.h **** /**
1354:../system/include/cmsis/core_cm3.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1355:../system/include/cmsis/core_cm3.h ****   \param[in] field  Name of the register bit field.
1356:../system/include/cmsis/core_cm3.h ****   \param[in] value  Value of register.
1357:../system/include/cmsis/core_cm3.h ****   \return           Masked and shifted bit field value.
1358:../system/include/cmsis/core_cm3.h **** */
1359:../system/include/cmsis/core_cm3.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1360:../system/include/cmsis/core_cm3.h **** 
1361:../system/include/cmsis/core_cm3.h **** /*@} end of group CMSIS_core_bitfield */
1362:../system/include/cmsis/core_cm3.h **** 
1363:../system/include/cmsis/core_cm3.h **** 
1364:../system/include/cmsis/core_cm3.h **** /**
1365:../system/include/cmsis/core_cm3.h ****   \ingroup    CMSIS_core_register
1366:../system/include/cmsis/core_cm3.h ****   \defgroup   CMSIS_core_base     Core Definitions
1367:../system/include/cmsis/core_cm3.h ****   \brief      Definitions for base addresses, unions, and structures.
1368:../system/include/cmsis/core_cm3.h ****   @{
1369:../system/include/cmsis/core_cm3.h ****  */
1370:../system/include/cmsis/core_cm3.h **** 
1371:../system/include/cmsis/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1372:../system/include/cmsis/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1373:../system/include/cmsis/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1374:../system/include/cmsis/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1375:../system/include/cmsis/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1376:../system/include/cmsis/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1377:../system/include/cmsis/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1378:../system/include/cmsis/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1379:../system/include/cmsis/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1380:../system/include/cmsis/core_cm3.h **** 
1381:../system/include/cmsis/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1382:../system/include/cmsis/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1383:../system/include/cmsis/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1384:../system/include/cmsis/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1385:../system/include/cmsis/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1386:../system/include/cmsis/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1387:../system/include/cmsis/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1388:../system/include/cmsis/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1389:../system/include/cmsis/core_cm3.h **** 
1390:../system/include/cmsis/core_cm3.h **** #if (__MPU_PRESENT == 1U)
1391:../system/include/cmsis/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1392:../system/include/cmsis/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1393:../system/include/cmsis/core_cm3.h **** #endif
1394:../system/include/cmsis/core_cm3.h **** 
1395:../system/include/cmsis/core_cm3.h **** /*@} */
1396:../system/include/cmsis/core_cm3.h **** 
1397:../system/include/cmsis/core_cm3.h **** 
1398:../system/include/cmsis/core_cm3.h **** 
1399:../system/include/cmsis/core_cm3.h **** /*******************************************************************************
1400:../system/include/cmsis/core_cm3.h ****  *                Hardware Abstraction Layer
1401:../system/include/cmsis/core_cm3.h ****   Core Function Interface contains:
1402:../system/include/cmsis/core_cm3.h ****   - Core NVIC Functions
1403:../system/include/cmsis/core_cm3.h ****   - Core SysTick Functions
1404:../system/include/cmsis/core_cm3.h ****   - Core Debug Functions
1405:../system/include/cmsis/core_cm3.h ****   - Core Register Access Functions
1406:../system/include/cmsis/core_cm3.h ****  ******************************************************************************/
1407:../system/include/cmsis/core_cm3.h **** /**
1408:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1409:../system/include/cmsis/core_cm3.h **** */
1410:../system/include/cmsis/core_cm3.h **** 
1411:../system/include/cmsis/core_cm3.h **** 
1412:../system/include/cmsis/core_cm3.h **** 
1413:../system/include/cmsis/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1414:../system/include/cmsis/core_cm3.h **** /**
1415:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1416:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1417:../system/include/cmsis/core_cm3.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1418:../system/include/cmsis/core_cm3.h ****   @{
1419:../system/include/cmsis/core_cm3.h ****  */
1420:../system/include/cmsis/core_cm3.h **** 
1421:../system/include/cmsis/core_cm3.h **** /**
1422:../system/include/cmsis/core_cm3.h ****   \brief   Set Priority Grouping
1423:../system/include/cmsis/core_cm3.h ****   \details Sets the priority grouping field using the required unlock sequence.
1424:../system/include/cmsis/core_cm3.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1425:../system/include/cmsis/core_cm3.h ****            Only values from 0..7 are used.
1426:../system/include/cmsis/core_cm3.h ****            In case of a conflict between priority grouping and available
1427:../system/include/cmsis/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1428:../system/include/cmsis/core_cm3.h ****   \param [in]      PriorityGroup  Priority grouping field.
1429:../system/include/cmsis/core_cm3.h ****  */
1430:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1431:../system/include/cmsis/core_cm3.h **** {
1432:../system/include/cmsis/core_cm3.h ****   uint32_t reg_value;
1433:../system/include/cmsis/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1434:../system/include/cmsis/core_cm3.h **** 
1435:../system/include/cmsis/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1436:../system/include/cmsis/core_cm3.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1437:../system/include/cmsis/core_cm3.h ****   reg_value  =  (reg_value                                   |
1438:../system/include/cmsis/core_cm3.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1439:../system/include/cmsis/core_cm3.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1440:../system/include/cmsis/core_cm3.h ****   SCB->AIRCR =  reg_value;
1441:../system/include/cmsis/core_cm3.h **** }
1442:../system/include/cmsis/core_cm3.h **** 
1443:../system/include/cmsis/core_cm3.h **** 
1444:../system/include/cmsis/core_cm3.h **** /**
1445:../system/include/cmsis/core_cm3.h ****   \brief   Get Priority Grouping
1446:../system/include/cmsis/core_cm3.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1447:../system/include/cmsis/core_cm3.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1448:../system/include/cmsis/core_cm3.h ****  */
1449:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1450:../system/include/cmsis/core_cm3.h **** {
1451:../system/include/cmsis/core_cm3.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1452:../system/include/cmsis/core_cm3.h **** }
1453:../system/include/cmsis/core_cm3.h **** 
1454:../system/include/cmsis/core_cm3.h **** 
1455:../system/include/cmsis/core_cm3.h **** /**
1456:../system/include/cmsis/core_cm3.h ****   \brief   Enable External Interrupt
1457:../system/include/cmsis/core_cm3.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1458:../system/include/cmsis/core_cm3.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1459:../system/include/cmsis/core_cm3.h ****  */
1460:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1461:../system/include/cmsis/core_cm3.h **** {
1462:../system/include/cmsis/core_cm3.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1463:../system/include/cmsis/core_cm3.h **** }
1464:../system/include/cmsis/core_cm3.h **** 
1465:../system/include/cmsis/core_cm3.h **** 
1466:../system/include/cmsis/core_cm3.h **** /**
1467:../system/include/cmsis/core_cm3.h ****   \brief   Disable External Interrupt
1468:../system/include/cmsis/core_cm3.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1469:../system/include/cmsis/core_cm3.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1470:../system/include/cmsis/core_cm3.h ****  */
1471:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1472:../system/include/cmsis/core_cm3.h **** {
1473:../system/include/cmsis/core_cm3.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1474:../system/include/cmsis/core_cm3.h **** }
1475:../system/include/cmsis/core_cm3.h **** 
1476:../system/include/cmsis/core_cm3.h **** 
1477:../system/include/cmsis/core_cm3.h **** /**
1478:../system/include/cmsis/core_cm3.h ****   \brief   Get Pending Interrupt
1479:../system/include/cmsis/core_cm3.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
1480:../system/include/cmsis/core_cm3.h ****   \param [in]      IRQn  Interrupt number.
1481:../system/include/cmsis/core_cm3.h ****   \return             0  Interrupt status is not pending.
1482:../system/include/cmsis/core_cm3.h ****   \return             1  Interrupt status is pending.
1483:../system/include/cmsis/core_cm3.h ****  */
1484:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1485:../system/include/cmsis/core_cm3.h **** {
1486:../system/include/cmsis/core_cm3.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1487:../system/include/cmsis/core_cm3.h **** }
1488:../system/include/cmsis/core_cm3.h **** 
1489:../system/include/cmsis/core_cm3.h **** 
1490:../system/include/cmsis/core_cm3.h **** /**
1491:../system/include/cmsis/core_cm3.h ****   \brief   Set Pending Interrupt
1492:../system/include/cmsis/core_cm3.h ****   \details Sets the pending bit of an external interrupt.
1493:../system/include/cmsis/core_cm3.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
1494:../system/include/cmsis/core_cm3.h ****  */
1495:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1496:../system/include/cmsis/core_cm3.h **** {
1497:../system/include/cmsis/core_cm3.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1498:../system/include/cmsis/core_cm3.h **** }
1499:../system/include/cmsis/core_cm3.h **** 
1500:../system/include/cmsis/core_cm3.h **** 
1501:../system/include/cmsis/core_cm3.h **** /**
1502:../system/include/cmsis/core_cm3.h ****   \brief   Clear Pending Interrupt
1503:../system/include/cmsis/core_cm3.h ****   \details Clears the pending bit of an external interrupt.
1504:../system/include/cmsis/core_cm3.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1505:../system/include/cmsis/core_cm3.h ****  */
1506:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1507:../system/include/cmsis/core_cm3.h **** {
1508:../system/include/cmsis/core_cm3.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1509:../system/include/cmsis/core_cm3.h **** }
1510:../system/include/cmsis/core_cm3.h **** 
1511:../system/include/cmsis/core_cm3.h **** 
1512:../system/include/cmsis/core_cm3.h **** /**
1513:../system/include/cmsis/core_cm3.h ****   \brief   Get Active Interrupt
1514:../system/include/cmsis/core_cm3.h ****   \details Reads the active register in NVIC and returns the active bit.
1515:../system/include/cmsis/core_cm3.h ****   \param [in]      IRQn  Interrupt number.
1516:../system/include/cmsis/core_cm3.h ****   \return             0  Interrupt status is not active.
1517:../system/include/cmsis/core_cm3.h ****   \return             1  Interrupt status is active.
1518:../system/include/cmsis/core_cm3.h ****  */
1519:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1520:../system/include/cmsis/core_cm3.h **** {
1521:../system/include/cmsis/core_cm3.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1522:../system/include/cmsis/core_cm3.h **** }
1523:../system/include/cmsis/core_cm3.h **** 
1524:../system/include/cmsis/core_cm3.h **** 
1525:../system/include/cmsis/core_cm3.h **** /**
1526:../system/include/cmsis/core_cm3.h ****   \brief   Set Interrupt Priority
1527:../system/include/cmsis/core_cm3.h ****   \details Sets the priority of an interrupt.
1528:../system/include/cmsis/core_cm3.h ****   \note    The priority cannot be set for every core interrupt.
1529:../system/include/cmsis/core_cm3.h ****   \param [in]      IRQn  Interrupt number.
1530:../system/include/cmsis/core_cm3.h ****   \param [in]  priority  Priority to set.
1531:../system/include/cmsis/core_cm3.h ****  */
1532:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1533:../system/include/cmsis/core_cm3.h **** {
1534:../system/include/cmsis/core_cm3.h ****   if ((int32_t)(IRQn) < 0)
1535:../system/include/cmsis/core_cm3.h ****   {
1536:../system/include/cmsis/core_cm3.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1537:../system/include/cmsis/core_cm3.h ****   }
1538:../system/include/cmsis/core_cm3.h ****   else
1539:../system/include/cmsis/core_cm3.h ****   {
1540:../system/include/cmsis/core_cm3.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1541:../system/include/cmsis/core_cm3.h ****   }
1542:../system/include/cmsis/core_cm3.h **** }
1543:../system/include/cmsis/core_cm3.h **** 
1544:../system/include/cmsis/core_cm3.h **** 
1545:../system/include/cmsis/core_cm3.h **** /**
1546:../system/include/cmsis/core_cm3.h ****   \brief   Get Interrupt Priority
1547:../system/include/cmsis/core_cm3.h ****   \details Reads the priority of an interrupt.
1548:../system/include/cmsis/core_cm3.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
1549:../system/include/cmsis/core_cm3.h ****            or negative to specify an internal (core) interrupt.
1550:../system/include/cmsis/core_cm3.h ****   \param [in]   IRQn  Interrupt number.
1551:../system/include/cmsis/core_cm3.h ****   \return             Interrupt Priority.
1552:../system/include/cmsis/core_cm3.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1553:../system/include/cmsis/core_cm3.h ****  */
1554:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1555:../system/include/cmsis/core_cm3.h **** {
1556:../system/include/cmsis/core_cm3.h **** 
1557:../system/include/cmsis/core_cm3.h ****   if ((int32_t)(IRQn) < 0)
1558:../system/include/cmsis/core_cm3.h ****   {
1559:../system/include/cmsis/core_cm3.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS))
1560:../system/include/cmsis/core_cm3.h ****   }
1561:../system/include/cmsis/core_cm3.h ****   else
1562:../system/include/cmsis/core_cm3.h ****   {
1563:../system/include/cmsis/core_cm3.h ****     return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS))
1564:../system/include/cmsis/core_cm3.h ****   }
1565:../system/include/cmsis/core_cm3.h **** }
1566:../system/include/cmsis/core_cm3.h **** 
1567:../system/include/cmsis/core_cm3.h **** 
1568:../system/include/cmsis/core_cm3.h **** /**
1569:../system/include/cmsis/core_cm3.h ****   \brief   Encode Priority
1570:../system/include/cmsis/core_cm3.h ****   \details Encodes the priority for an interrupt with the given priority group,
1571:../system/include/cmsis/core_cm3.h ****            preemptive priority value, and subpriority value.
1572:../system/include/cmsis/core_cm3.h ****            In case of a conflict between priority grouping and available
1573:../system/include/cmsis/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1574:../system/include/cmsis/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1575:../system/include/cmsis/core_cm3.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1576:../system/include/cmsis/core_cm3.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1577:../system/include/cmsis/core_cm3.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1578:../system/include/cmsis/core_cm3.h ****  */
1579:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1580:../system/include/cmsis/core_cm3.h **** {
1581:../system/include/cmsis/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1582:../system/include/cmsis/core_cm3.h ****   uint32_t PreemptPriorityBits;
1583:../system/include/cmsis/core_cm3.h ****   uint32_t SubPriorityBits;
1584:../system/include/cmsis/core_cm3.h **** 
1585:../system/include/cmsis/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1586:../system/include/cmsis/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1587:../system/include/cmsis/core_cm3.h **** 
1588:../system/include/cmsis/core_cm3.h ****   return (
1589:../system/include/cmsis/core_cm3.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
1590:../system/include/cmsis/core_cm3.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1591:../system/include/cmsis/core_cm3.h ****          );
1592:../system/include/cmsis/core_cm3.h **** }
1593:../system/include/cmsis/core_cm3.h **** 
1594:../system/include/cmsis/core_cm3.h **** 
1595:../system/include/cmsis/core_cm3.h **** /**
1596:../system/include/cmsis/core_cm3.h ****   \brief   Decode Priority
1597:../system/include/cmsis/core_cm3.h ****   \details Decodes an interrupt priority value with a given priority group to
1598:../system/include/cmsis/core_cm3.h ****            preemptive priority value and subpriority value.
1599:../system/include/cmsis/core_cm3.h ****            In case of a conflict between priority grouping and available
1600:../system/include/cmsis/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1601:../system/include/cmsis/core_cm3.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1602:../system/include/cmsis/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1603:../system/include/cmsis/core_cm3.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1604:../system/include/cmsis/core_cm3.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1605:../system/include/cmsis/core_cm3.h ****  */
1606:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1607:../system/include/cmsis/core_cm3.h **** {
1608:../system/include/cmsis/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1609:../system/include/cmsis/core_cm3.h ****   uint32_t PreemptPriorityBits;
1610:../system/include/cmsis/core_cm3.h ****   uint32_t SubPriorityBits;
1611:../system/include/cmsis/core_cm3.h **** 
1612:../system/include/cmsis/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1613:../system/include/cmsis/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1614:../system/include/cmsis/core_cm3.h **** 
1615:../system/include/cmsis/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1616:../system/include/cmsis/core_cm3.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1617:../system/include/cmsis/core_cm3.h **** }
1618:../system/include/cmsis/core_cm3.h **** 
1619:../system/include/cmsis/core_cm3.h **** 
1620:../system/include/cmsis/core_cm3.h **** /**
1621:../system/include/cmsis/core_cm3.h ****   \brief   System Reset
1622:../system/include/cmsis/core_cm3.h ****   \details Initiates a system reset request to reset the MCU.
1623:../system/include/cmsis/core_cm3.h ****  */
1624:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE void NVIC_SystemReset(void)
1625:../system/include/cmsis/core_cm3.h **** {
1626:../system/include/cmsis/core_cm3.h ****   __DSB();                                                          /* Ensure all outstanding memor
1627:../system/include/cmsis/core_cm3.h ****                                                                        buffered write are completed
1628:../system/include/cmsis/core_cm3.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
1629:../system/include/cmsis/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1630:../system/include/cmsis/core_cm3.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1631:../system/include/cmsis/core_cm3.h ****   __DSB();                                                          /* Ensure completion of memory 
1632:../system/include/cmsis/core_cm3.h **** 
1633:../system/include/cmsis/core_cm3.h ****   for(;;)                                                           /* wait until reset */
1634:../system/include/cmsis/core_cm3.h ****   {
1635:../system/include/cmsis/core_cm3.h ****     __NOP();
1636:../system/include/cmsis/core_cm3.h ****   }
1637:../system/include/cmsis/core_cm3.h **** }
1638:../system/include/cmsis/core_cm3.h **** 
1639:../system/include/cmsis/core_cm3.h **** /*@} end of CMSIS_Core_NVICFunctions */
1640:../system/include/cmsis/core_cm3.h **** 
1641:../system/include/cmsis/core_cm3.h **** 
1642:../system/include/cmsis/core_cm3.h **** 
1643:../system/include/cmsis/core_cm3.h **** /* ##################################    SysTick function  ########################################
1644:../system/include/cmsis/core_cm3.h **** /**
1645:../system/include/cmsis/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1646:../system/include/cmsis/core_cm3.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1647:../system/include/cmsis/core_cm3.h ****   \brief    Functions that configure the System.
1648:../system/include/cmsis/core_cm3.h ****   @{
1649:../system/include/cmsis/core_cm3.h ****  */
1650:../system/include/cmsis/core_cm3.h **** 
1651:../system/include/cmsis/core_cm3.h **** #if (__Vendor_SysTickConfig == 0U)
1652:../system/include/cmsis/core_cm3.h **** 
1653:../system/include/cmsis/core_cm3.h **** /**
1654:../system/include/cmsis/core_cm3.h ****   \brief   System Tick Configuration
1655:../system/include/cmsis/core_cm3.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
1656:../system/include/cmsis/core_cm3.h ****            Counter is in free running mode to generate periodic interrupts.
1657:../system/include/cmsis/core_cm3.h ****   \param [in]  ticks  Number of ticks between two interrupts.
1658:../system/include/cmsis/core_cm3.h ****   \return          0  Function succeeded.
1659:../system/include/cmsis/core_cm3.h ****   \return          1  Function failed.
1660:../system/include/cmsis/core_cm3.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1661:../system/include/cmsis/core_cm3.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
1662:../system/include/cmsis/core_cm3.h ****            must contain a vendor-specific implementation of this function.
1663:../system/include/cmsis/core_cm3.h ****  */
1664:../system/include/cmsis/core_cm3.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
1665:../system/include/cmsis/core_cm3.h **** {
1666:../system/include/cmsis/core_cm3.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 102              		.loc 2 1666 0
 103 0048 013B     		subs	r3, r3, #1
 104              	.LVL9:
 105 004a B3F1807F 		cmp	r3, #16777216
 106 004e 09D2     		bcs	.L3
1667:../system/include/cmsis/core_cm3.h ****   {
1668:../system/include/cmsis/core_cm3.h ****     return (1UL);                                                   /* Reload value impossible */
1669:../system/include/cmsis/core_cm3.h ****   }
1670:../system/include/cmsis/core_cm3.h **** 
1671:../system/include/cmsis/core_cm3.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 107              		.loc 2 1671 0
 108 0050 7E4A     		ldr	r2, .L120+16
 109 0052 5360     		str	r3, [r2, #4]
 110              	.LVL10:
 111              	.LBB42:
 112              	.LBB43:
1536:../system/include/cmsis/core_cm3.h ****   }
 113              		.loc 2 1536 0
 114 0054 7E4B     		ldr	r3, .L120+20
 115              	.LVL11:
 116 0056 F021     		movs	r1, #240
 117 0058 83F82310 		strb	r1, [r3, #35]
 118              	.LVL12:
 119              	.LBE43:
 120              	.LBE42:
1672:../system/include/cmsis/core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
1673:../system/include/cmsis/core_cm3.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 121              		.loc 2 1673 0
 122 005c 0023     		movs	r3, #0
 123 005e 9360     		str	r3, [r2, #8]
1674:../system/include/cmsis/core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 124              		.loc 2 1674 0
 125 0060 0723     		movs	r3, #7
 126 0062 1360     		str	r3, [r2]
 127              	.L3:
 128              	.LVL13:
 129              	.LBE41:
 130              	.LBE40:
 131              	.LBB44:
 132              	.LBB45:
1536:../system/include/cmsis/core_cm3.h ****   }
 133              		.loc 2 1536 0
 134 0064 7A4B     		ldr	r3, .L120+20
 135 0066 5022     		movs	r2, #80
 136 0068 83F82320 		strb	r2, [r3, #35]
 137              	.LVL14:
 138              	.LBE45:
 139              	.LBE44:
 237:../src/main.c **** 
 238:../src/main.c ****   // setting an Systick interrupt priority
 239:../src/main.c ****   NVIC_SetPriority(SysTick_IRQn, 5);
 240:../src/main.c **** 
 241:../src/main.c ****   // enable access to BKP registers
 242:../src/main.c ****   RCC->APB1ENR |= (RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN);
 140              		.loc 1 242 0
 141 006c 744A     		ldr	r2, .L120+4
 142 006e D369     		ldr	r3, [r2, #28]
 143 0070 43F0C053 		orr	r3, r3, #402653184
 144 0074 D361     		str	r3, [r2, #28]
 243:../src/main.c ****   PWR->CR |= PWR_CR_DBP;
 145              		.loc 1 243 0
 146 0076 A2F5D032 		sub	r2, r2, #106496
 147 007a 1368     		ldr	r3, [r2]
 148 007c 43F48073 		orr	r3, r3, #256
 149 0080 1360     		str	r3, [r2]
 244:../src/main.c **** 
 245:../src/main.c ****   // read current number of boot cycles
 246:../src/main.c ****   rte_main_boot_cycles = (uint8_t)(BKP->DR2 & 0xFF);
 150              		.loc 1 246 0
 151 0082 744B     		ldr	r3, .L120+24
 152 0084 1A89     		ldrh	r2, [r3, #8]
 153 0086 D2B2     		uxtb	r2, r2
 247:../src/main.c **** 
 248:../src/main.c ****   // read current number of hard faults
 249:../src/main.c ****   rte_main_hard_faults = (uint8_t)((BKP->DR2 & 0xFF00) >> 8);
 154              		.loc 1 249 0
 155 0088 1989     		ldrh	r1, [r3, #8]
 156 008a 090A     		lsrs	r1, r1, #8
 157 008c 7248     		ldr	r0, .L120+28
 158 008e 0170     		strb	r1, [r0]
 250:../src/main.c **** 
 251:../src/main.c ****   // increase boot cycles count
 252:../src/main.c ****   rte_main_boot_cycles++;
 159              		.loc 1 252 0
 160 0090 0132     		adds	r2, r2, #1
 161 0092 D2B2     		uxtb	r2, r2
 162 0094 7149     		ldr	r1, .L120+32
 163 0096 0A70     		strb	r2, [r1]
 253:../src/main.c **** 
 254:../src/main.c ****   // erasing old value from backup registers
 255:../src/main.c ****   BKP->DR2 &= (0xFFFF ^ 0xFF);
 164              		.loc 1 255 0
 165 0098 1989     		ldrh	r1, [r3, #8]
 166 009a 01F47F41 		and	r1, r1, #65280
 167 009e 1981     		strh	r1, [r3, #8]	@ movhi
 256:../src/main.c **** 
 257:../src/main.c ****   // storing increased value
 258:../src/main.c ****   BKP->DR2 |= rte_main_boot_cycles;
 168              		.loc 1 258 0
 169 00a0 1989     		ldrh	r1, [r3, #8]
 170 00a2 0A43     		orrs	r2, r2, r1
 171 00a4 1A81     		strh	r2, [r3, #8]	@ movhi
 259:../src/main.c **** 
 260:../src/main.c ****   BKP->DR3 = 0;
 172              		.loc 1 260 0
 173 00a6 0022     		movs	r2, #0
 174 00a8 9A81     		strh	r2, [r3, #12]	@ movhi
 261:../src/main.c ****   BKP->DR4 = 0;
 175              		.loc 1 261 0
 176 00aa 1A82     		strh	r2, [r3, #16]	@ movhi
 262:../src/main.c ****   BKP->DR5 = 0;
 177              		.loc 1 262 0
 178 00ac 9A82     		strh	r2, [r3, #20]	@ movhi
 263:../src/main.c ****   BKP->DR6 = 0;
 179              		.loc 1 263 0
 180 00ae 1A83     		strh	r2, [r3, #24]	@ movhi
 264:../src/main.c **** #endif
 265:../src/main.c **** 
 266:../src/main.c **** #if defined(STM32L471xx)
 267:../src/main.c ****   system_clock_update_l4();
 268:../src/main.c **** 
 269:../src/main.c ****   if (system_clock_configure_l4() != 0) {
 270:../src/main.c **** 	  HAL_NVIC_SystemReset();
 271:../src/main.c **** 
 272:../src/main.c ****   }
 273:../src/main.c **** 
 274:../src/main.c ****   // enable access to PWR control registers
 275:../src/main.c ****   RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;
 276:../src/main.c **** 
 277:../src/main.c ****   system_clock_update_l4();
 278:../src/main.c **** 
 279:../src/main.c ****   system_clock_configure_rtc_l4();
 280:../src/main.c **** 
 281:../src/main.c ****   RCC->APB1ENR1 |= (RCC_APB1ENR1_TIM2EN | RCC_APB1ENR1_TIM3EN | RCC_APB1ENR1_TIM4EN | RCC_APB1ENR1_
 282:../src/main.c ****   RCC->APB2ENR |= (RCC_APB2ENR_TIM1EN | RCC_APB2ENR_USART1EN);
 283:../src/main.c ****   RCC->AHB1ENR |= (RCC_AHB1ENR_CRCEN | RCC_AHB1ENR_DMA1EN);
 284:../src/main.c ****   RCC->AHB2ENR |= (RCC_AHB2ENR_ADCEN | RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIO
 285:../src/main.c ****   RCC->BDCR |= RCC_BDCR_RTCEN;
 286:../src/main.c **** 
 287:../src/main.c ****   /* Set Interrupt Group Priority */
 288:../src/main.c ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 289:../src/main.c **** 
 290:../src/main.c ****   // set systick frequency
 291:../src/main.c ****   HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)10));
 292:../src/main.c **** 
 293:../src/main.c ****   // set systick interrupt priority
 294:../src/main.c ****   HAL_NVIC_SetPriority(SysTick_IRQn, 5, 0U);
 295:../src/main.c **** #endif
 296:../src/main.c **** 
 297:../src/main.c ****   rte_main_reboot_req = 0;
 181              		.loc 1 297 0
 182 00b0 6B4B     		ldr	r3, .L120+36
 183 00b2 1A70     		strb	r2, [r3]
 298:../src/main.c **** 
 299:../src/main.c ****   // initializing variables & arrays in rte_wx
 300:../src/main.c ****   rte_wx_init();
 184              		.loc 1 300 0
 185 00b4 FFF7FEFF 		bl	rte_wx_init
 186              	.LVL15:
 301:../src/main.c ****   rte_rtu_init();
 187              		.loc 1 301 0
 188 00b8 FFF7FEFF 		bl	rte_rtu_init
 189              	.LVL16:
 302:../src/main.c **** 
 303:../src/main.c ****   // calculate CRC over configuration blocks
 304:../src/main.c ****   main_crc_result = configuration_handler_check_crc();
 190              		.loc 1 304 0
 191 00bc FFF7FEFF 		bl	configuration_handler_check_crc
 192              	.LVL17:
 193 00c0 684B     		ldr	r3, .L120+40
 194 00c2 1860     		str	r0, [r3]
 305:../src/main.c **** 
 306:../src/main.c ****   // if first section has wrong CRC and it hasn't been restored before
 307:../src/main.c ****   if ((main_crc_result & 0x01) == 0 && (configuration_get_register() & CONFIG_FIRST_FAIL_RESTORING)
 195              		.loc 1 307 0
 196 00c4 10F0010F 		tst	r0, #1
 197 00c8 12D1     		bne	.L4
 198              		.loc 1 307 0 is_stmt 0 discriminator 1
 199 00ca FFF7FEFF 		bl	configuration_get_register
 200              	.LVL18:
 201 00ce 10F0020F 		tst	r0, #2
 202 00d2 0DD1     		bne	.L4
 308:../src/main.c **** 	  // restore default configuration
 309:../src/main.c **** 	  if (configuration_handler_restore_default_first() == 0) {
 203              		.loc 1 309 0 is_stmt 1
 204 00d4 FFF7FEFF 		bl	configuration_handler_restore_default_first
 205              	.LVL19:
 206 00d8 30B9     		cbnz	r0, .L5
 310:../src/main.c **** 
 311:../src/main.c **** 		  // if configuration has been restored successfully
 312:../src/main.c **** 		  configuration_set_bits_register(CONFIG_FIRST_RESTORED);
 207              		.loc 1 312 0
 208 00da 0120     		movs	r0, #1
 209 00dc FFF7FEFF 		bl	configuration_set_bits_register
 210              	.LVL20:
 313:../src/main.c **** 
 314:../src/main.c **** 		  // set also CRC flag because if restoring is successfull the region has good CRC
 315:../src/main.c **** 		  configuration_set_bits_register(CONFIG_FIRST_CRC_OK);
 211              		.loc 1 315 0
 212 00e0 0420     		movs	r0, #4
 213 00e2 FFF7FEFF 		bl	configuration_set_bits_register
 214              	.LVL21:
 215 00e6 08E0     		b	.L6
 216              	.L5:
 316:../src/main.c **** 
 317:../src/main.c **** 	  }
 318:../src/main.c **** 	  else {
 319:../src/main.c **** 		  // if not store the flag in the backup register to block
 320:../src/main.c **** 		  // reinitializing once again in the consecutive restart
 321:../src/main.c **** 		  configuration_set_bits_register(CONFIG_FIRST_FAIL_RESTORING);
 217              		.loc 1 321 0
 218 00e8 0220     		movs	r0, #2
 219 00ea FFF7FEFF 		bl	configuration_set_bits_register
 220              	.LVL22:
 221 00ee 04E0     		b	.L6
 222              	.L4:
 322:../src/main.c **** 	  }
 323:../src/main.c **** 
 324:../src/main.c **** 
 325:../src/main.c ****   }
 326:../src/main.c ****   else {
 327:../src/main.c **** 	  // if the combined confition is not met check failed restoring flag
 328:../src/main.c **** 	  if ((configuration_get_register() & CONFIG_FIRST_FAIL_RESTORING) == 0) {
 223              		.loc 1 328 0
 224 00f0 FFF7FEFF 		bl	configuration_get_register
 225              	.LVL23:
 226 00f4 10F0020F 		tst	r0, #2
 227 00f8 13D0     		beq	.L82
 228              	.L6:
 329:../src/main.c **** 		  // a CRC checksum is ok, so first configuration section can be used further
 330:../src/main.c **** 		  configuration_set_bits_register(CONFIG_FIRST_CRC_OK);
 331:../src/main.c **** 	  }
 332:../src/main.c **** 	  else {
 333:../src/main.c **** 		  ;
 334:../src/main.c **** 	  }
 335:../src/main.c ****   }
 336:../src/main.c **** 
 337:../src/main.c ****   // if second section has wrong CRC and it hasn't been restored before
 338:../src/main.c ****   if ((main_crc_result & 0x02) == 0 && (configuration_get_register() & CONFIG_SECOND_FAIL_RESTORING
 229              		.loc 1 338 0
 230 00fa 5A4B     		ldr	r3, .L120+40
 231 00fc 1B68     		ldr	r3, [r3]
 232 00fe 13F0020F 		tst	r3, #2
 233 0102 19D1     		bne	.L7
 234              		.loc 1 338 0 is_stmt 0 discriminator 1
 235 0104 FFF7FEFF 		bl	configuration_get_register
 236              	.LVL24:
 237 0108 10F0100F 		tst	r0, #16
 238 010c 14D1     		bne	.L7
 339:../src/main.c **** 	  // restore default configuration
 340:../src/main.c **** 	  if (configuration_handler_restore_default_second() == 0) {
 239              		.loc 1 340 0 is_stmt 1
 240 010e FFF7FEFF 		bl	configuration_handler_restore_default_second
 241              	.LVL25:
 242 0112 50B9     		cbnz	r0, .L8
 341:../src/main.c **** 
 342:../src/main.c **** 		  // if configuration has been restored successfully
 343:../src/main.c **** 		  configuration_set_bits_register(CONFIG_SECOND_RESTORED);
 243              		.loc 1 343 0
 244 0114 0820     		movs	r0, #8
 245 0116 FFF7FEFF 		bl	configuration_set_bits_register
 246              	.LVL26:
 344:../src/main.c **** 
 345:../src/main.c **** 		  // set also CRC flag as if restoring is successfull the region has good CRC
 346:../src/main.c **** 		  configuration_set_bits_register(CONFIG_SECOND_CRC_OK);
 247              		.loc 1 346 0
 248 011a 2020     		movs	r0, #32
 249 011c FFF7FEFF 		bl	configuration_set_bits_register
 250              	.LVL27:
 251 0120 0FE0     		b	.L9
 252              	.L82:
 330:../src/main.c **** 	  }
 253              		.loc 1 330 0
 254 0122 0420     		movs	r0, #4
 255 0124 FFF7FEFF 		bl	configuration_set_bits_register
 256              	.LVL28:
 257 0128 E7E7     		b	.L6
 258              	.L8:
 347:../src/main.c **** 
 348:../src/main.c **** 	  }
 349:../src/main.c **** 	  else {
 350:../src/main.c **** 		  // if not store the flag in the backup register
 351:../src/main.c **** 		  configuration_set_bits_register(CONFIG_SECOND_FAIL_RESTORING);
 259              		.loc 1 351 0
 260 012a 1020     		movs	r0, #16
 261 012c FFF7FEFF 		bl	configuration_set_bits_register
 262              	.LVL29:
 352:../src/main.c **** 
 353:../src/main.c **** 		  configuration_clear_bits_register(CONFIG_SECOND_CRC_OK);
 263              		.loc 1 353 0
 264 0130 2020     		movs	r0, #32
 265 0132 FFF7FEFF 		bl	configuration_clear_bits_register
 266              	.LVL30:
 267 0136 04E0     		b	.L9
 268              	.L7:
 354:../src/main.c **** 	  }
 355:../src/main.c **** 
 356:../src/main.c **** 
 357:../src/main.c ****   }
 358:../src/main.c ****   else {
 359:../src/main.c **** 	  // check failed restoring flag
 360:../src/main.c **** 	  if ((configuration_get_register() & CONFIG_SECOND_FAIL_RESTORING) == 0) {
 269              		.loc 1 360 0
 270 0138 FFF7FEFF 		bl	configuration_get_register
 271              	.LVL31:
 272 013c 10F0100F 		tst	r0, #16
 273 0140 13D0     		beq	.L83
 274              	.L9:
 361:../src/main.c **** 		  // second configuration section has good CRC and can be used further
 362:../src/main.c **** 		  configuration_set_bits_register(CONFIG_SECOND_CRC_OK);
 363:../src/main.c **** 	  }
 364:../src/main.c **** 	  else {
 365:../src/main.c **** 		  ;
 366:../src/main.c **** 	  }
 367:../src/main.c ****   }
 368:../src/main.c **** 
 369:../src/main.c ****   // at this point both sections have either verified CRC or restored values to default
 370:../src/main.c ****   if ((configuration_get_register() & CONFIG_FIRST_CRC_OK) != 0 && (configuration_get_register() & 
 275              		.loc 1 370 0
 276 0142 FFF7FEFF 		bl	configuration_get_register
 277              	.LVL32:
 278 0146 10F0040F 		tst	r0, #4
 279 014a 16D0     		beq	.L10
 280              		.loc 1 370 0 is_stmt 0 discriminator 1
 281 014c FFF7FEFF 		bl	configuration_get_register
 282              	.LVL33:
 283 0150 10F0200F 		tst	r0, #32
 284 0154 11D0     		beq	.L10
 371:../src/main.c **** 	  // if both sections are OK check programming counters
 372:../src/main.c **** 	  if (config_data_pgm_cntr_first > config_data_pgm_cntr_second) {
 285              		.loc 1 372 0 is_stmt 1
 286 0156 444B     		ldr	r3, .L120+44
 287 0158 1A88     		ldrh	r2, [r3]
 288 015a 444B     		ldr	r3, .L120+48
 289 015c 1B88     		ldrh	r3, [r3]
 290 015e 9A42     		cmp	r2, r3
 291 0160 07D9     		bls	.L11
 373:../src/main.c **** 		  // if first section has bigger programing counter use it
 374:../src/main.c **** 		  configuration_handler_load_configuration(REGION_FIRST);
 292              		.loc 1 374 0
 293 0162 0120     		movs	r0, #1
 294 0164 FFF7FEFF 		bl	configuration_handler_load_configuration
 295              	.LVL34:
 296 0168 26E0     		b	.L12
 297              	.L83:
 362:../src/main.c **** 	  }
 298              		.loc 1 362 0
 299 016a 2020     		movs	r0, #32
 300 016c FFF7FEFF 		bl	configuration_set_bits_register
 301              	.LVL35:
 302 0170 E7E7     		b	.L9
 303              	.L11:
 375:../src/main.c **** 	  }
 376:../src/main.c **** 	  else {
 377:../src/main.c **** 		  configuration_handler_load_configuration(REGION_SECOND);
 304              		.loc 1 377 0
 305 0172 0220     		movs	r0, #2
 306 0174 FFF7FEFF 		bl	configuration_handler_load_configuration
 307              	.LVL36:
 308 0178 1EE0     		b	.L12
 309              	.L10:
 378:../src/main.c **** 
 379:../src/main.c **** 	  }
 380:../src/main.c ****   }
 381:../src/main.c ****   else if ((configuration_get_register() & CONFIG_FIRST_CRC_OK) != 0 && (configuration_get_register
 310              		.loc 1 381 0
 311 017a FFF7FEFF 		bl	configuration_get_register
 312              	.LVL37:
 313 017e 10F0040F 		tst	r0, #4
 314 0182 08D0     		beq	.L13
 315              		.loc 1 381 0 is_stmt 0 discriminator 1
 316 0184 FFF7FEFF 		bl	configuration_get_register
 317              	.LVL38:
 318 0188 10F0200F 		tst	r0, #32
 319 018c 03D1     		bne	.L13
 382:../src/main.c **** 	  // if only first region is OK use it
 383:../src/main.c **** 	  configuration_handler_load_configuration(REGION_FIRST);
 320              		.loc 1 383 0 is_stmt 1
 321 018e 0120     		movs	r0, #1
 322 0190 FFF7FEFF 		bl	configuration_handler_load_configuration
 323              	.LVL39:
 324 0194 10E0     		b	.L12
 325              	.L13:
 384:../src/main.c ****   }
 385:../src/main.c ****   else if ((configuration_get_register() & CONFIG_FIRST_CRC_OK) == 0 && (configuration_get_register
 326              		.loc 1 385 0
 327 0196 FFF7FEFF 		bl	configuration_get_register
 328              	.LVL40:
 329 019a 10F0040F 		tst	r0, #4
 330 019e 08D1     		bne	.L14
 331              		.loc 1 385 0 is_stmt 0 discriminator 1
 332 01a0 FFF7FEFF 		bl	configuration_get_register
 333              	.LVL41:
 334 01a4 10F0200F 		tst	r0, #32
 335 01a8 03D0     		beq	.L14
 386:../src/main.c **** 	  // if only first region is OK use it
 387:../src/main.c **** 	  configuration_handler_load_configuration(REGION_FIRST);
 336              		.loc 1 387 0 is_stmt 1
 337 01aa 0120     		movs	r0, #1
 338 01ac FFF7FEFF 		bl	configuration_handler_load_configuration
 339              	.LVL42:
 340 01b0 02E0     		b	.L12
 341              	.L14:
 388:../src/main.c ****   }
 389:../src/main.c ****   else {
 390:../src/main.c **** 	  configuration_handler_load_configuration(REGION_DEFAULT);
 342              		.loc 1 390 0
 343 01b2 0020     		movs	r0, #0
 344 01b4 FFF7FEFF 		bl	configuration_handler_load_configuration
 345              	.LVL43:
 346              	.L12:
 391:../src/main.c ****   }
 392:../src/main.c **** 
 393:../src/main.c ****   // set packets intervals
 394:../src/main.c ****   packet_tx_configure(main_config_data_basic->wx_transmit_period, main_config_data_basic->beacon_tr
 347              		.loc 1 394 0
 348 01b8 2D4C     		ldr	r4, .L120+52
 349 01ba 2368     		ldr	r3, [r4]
 350 01bc 2D4A     		ldr	r2, .L120+56
 351 01be 1268     		ldr	r2, [r2]
 352 01c0 D27A     		ldrb	r2, [r2, #11]	@ zero_extendqisi2
 353 01c2 93F89910 		ldrb	r1, [r3, #153]	@ zero_extendqisi2
 354 01c6 93F89800 		ldrb	r0, [r3, #152]	@ zero_extendqisi2
 355 01ca FFF7FEFF 		bl	packet_tx_configure
 356              	.LVL44:
 395:../src/main.c **** 
 396:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B) || defined(PARATNC_HWREV_C)
 397:../src/main.c ****   // disabling access to BKP registers
 398:../src/main.c ****   RCC->APB1ENR &= (0xFFFFFFFF ^ (RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN));
 357              		.loc 1 398 0
 358 01ce 1C4A     		ldr	r2, .L120+4
 359 01d0 D369     		ldr	r3, [r2, #28]
 360 01d2 23F0C053 		bic	r3, r3, #402653184
 361 01d6 D361     		str	r3, [r2, #28]
 399:../src/main.c ****   PWR->CR &= (0xFFFFFFFF ^ PWR_CR_DBP);
 362              		.loc 1 399 0
 363 01d8 A2F5D032 		sub	r2, r2, #106496
 364 01dc 1368     		ldr	r3, [r2]
 365 01de 23F48073 		bic	r3, r3, #256
 366 01e2 1360     		str	r3, [r2]
 400:../src/main.c **** #endif
 401:../src/main.c **** 
 402:../src/main.c ****   // converting latitude into string
 403:../src/main.c ****   memset(main_string_latitude, 0x00, sizeof(main_string_latitude));
 367              		.loc 1 403 0
 368 01e4 244E     		ldr	r6, .L120+60
 369 01e6 0922     		movs	r2, #9
 370 01e8 0021     		movs	r1, #0
 371 01ea 3046     		mov	r0, r6
 372 01ec FFF7FEFF 		bl	memset
 373              	.LVL45:
 404:../src/main.c ****   float_to_string(main_config_data_basic->latitude, main_string_latitude, sizeof(main_string_latitu
 374              		.loc 1 404 0
 375 01f0 2368     		ldr	r3, [r4]
 376 01f2 9868     		ldr	r0, [r3, #8]	@ float
 377 01f4 0225     		movs	r5, #2
 378 01f6 0095     		str	r5, [sp]
 379 01f8 2B46     		mov	r3, r5
 380 01fa 0922     		movs	r2, #9
 381 01fc 3146     		mov	r1, r6
 382 01fe FFF7FEFF 		bl	float_to_string
 383              	.LVL46:
 405:../src/main.c **** 
 406:../src/main.c ****   // converting longitude into string
 407:../src/main.c ****   memset(main_string_longitude, 0x00, sizeof(main_string_longitude));
 384              		.loc 1 407 0
 385 0202 1E4E     		ldr	r6, .L120+64
 386 0204 0922     		movs	r2, #9
 387 0206 0021     		movs	r1, #0
 388 0208 3046     		mov	r0, r6
 389 020a FFF7FEFF 		bl	memset
 390              	.LVL47:
 408:../src/main.c ****   float_to_string(main_config_data_basic->longitude, main_string_longitude, sizeof(main_string_long
 391              		.loc 1 408 0
 392 020e 2368     		ldr	r3, [r4]
 393 0210 1869     		ldr	r0, [r3, #16]	@ float
 394 0212 0523     		movs	r3, #5
 395 0214 0093     		str	r3, [sp]
 396 0216 2B46     		mov	r3, r5
 397 0218 0922     		movs	r2, #9
 398 021a 3146     		mov	r1, r6
 399 021c FFF7FEFF 		bl	float_to_string
 400              	.LVL48:
 409:../src/main.c **** 
 410:../src/main.c ****   switch(main_config_data_basic->symbol) {
 401              		.loc 1 410 0
 402 0220 2368     		ldr	r3, [r4]
 403 0222 93F89530 		ldrb	r3, [r3, #149]	@ zero_extendqisi2
 404 0226 052B     		cmp	r3, #5
 405 0228 00F24381 		bhi	.L15
 406 022c DFE813F0 		tbh	[pc, r3, lsl #1]
 407              	.L17:
 408 0230 2800     		.2byte	(.L16-.L17)/2
 409 0232 2501     		.2byte	(.L18-.L17)/2
 410 0234 2C01     		.2byte	(.L19-.L17)/2
 411 0236 3301     		.2byte	(.L20-.L17)/2
 412 0238 4101     		.2byte	(.L15-.L17)/2
 413 023a 3A01     		.2byte	(.L21-.L17)/2
 414              		.p2align 1
 415              	.L121:
 416              		.align	2
 417              	.L120:
 418 023c 00000000 		.word	main_own_aprs_msg
 419 0240 00100240 		.word	1073876992
 420 0244 00000000 		.word	SystemCoreClock
 421 0248 1F85EB51 		.word	1374389535
 422 024c 10E000E0 		.word	-536813552
 423 0250 00ED00E0 		.word	-536810240
 424 0254 006C0040 		.word	1073769472
 425 0258 00000000 		.word	rte_main_hard_faults
 426 025c 00000000 		.word	rte_main_boot_cycles
 427 0260 00000000 		.word	rte_main_reboot_req
 428 0264 00000000 		.word	.LANCHOR0
 429 0268 00000000 		.word	config_data_pgm_cntr_first
 430 026c 00000000 		.word	config_data_pgm_cntr_second
 431 0270 00000000 		.word	.LANCHOR1
 432 0274 00000000 		.word	.LANCHOR2
 433 0278 00000000 		.word	main_string_latitude
 434 027c 00000000 		.word	main_string_longitude
 435              	.L16:
 411:../src/main.c ****   case 0:		// _SYMBOL_DIGI
 412:../src/main.c **** 	  main_symbol_f = '/';
 436              		.loc 1 412 0
 437 0280 B04B     		ldr	r3, .L122
 438 0282 2F22     		movs	r2, #47
 439 0284 1A70     		strb	r2, [r3]
 413:../src/main.c **** 	  main_symbol_s = '#';
 440              		.loc 1 413 0
 441 0286 B04B     		ldr	r3, .L122+4
 442 0288 2322     		movs	r2, #35
 443 028a 1A70     		strb	r2, [r3]
 444              	.L22:
 414:../src/main.c **** 	  break;
 415:../src/main.c ****   case 1:		// _SYMBOL_WIDE1_DIGI
 416:../src/main.c **** 	  main_symbol_f = '1';
 417:../src/main.c **** 	  main_symbol_s = '#';
 418:../src/main.c **** 	  break;
 419:../src/main.c ****   case 2:		// _SYMBOL_HOUSE
 420:../src/main.c **** 	  main_symbol_f = '/';
 421:../src/main.c **** 	  main_symbol_s = '-';
 422:../src/main.c **** 	  break;
 423:../src/main.c ****   case 3:		// _SYMBOL_RXIGATE
 424:../src/main.c **** 	  main_symbol_f = 'I';
 425:../src/main.c **** 	  main_symbol_s = '&';
 426:../src/main.c **** 	  break;
 427:../src/main.c ****   case 5:		// _SYMBOL_SAILBOAT
 428:../src/main.c **** 	  main_symbol_f = '/';
 429:../src/main.c **** 	  main_symbol_s = 'Y';
 430:../src/main.c **** 	  break;
 431:../src/main.c ****   default:		// _SYMBOL_IGATE
 432:../src/main.c **** 	  main_symbol_f = 'R';
 433:../src/main.c **** 	  main_symbol_s = '&';
 434:../src/main.c **** 	  break;
 435:../src/main.c **** 
 436:../src/main.c ****   }
 437:../src/main.c **** 
 438:../src/main.c **** #if defined _RANDOM_DELAY
 439:../src/main.c ****   // configuring a default delay value
 440:../src/main.c ****   delay_set(_DELAY_BASE, 1);
 441:../src/main.c **** #elif !defined _RANDOM_DELAY
 442:../src/main.c ****   delay_set(_DELAY_BASE, 0);
 445              		.loc 1 442 0
 446 028c 0021     		movs	r1, #0
 447 028e 1420     		movs	r0, #20
 448 0290 FFF7FEFF 		bl	delay_set
 449              	.LVL49:
 443:../src/main.c **** 
 444:../src/main.c **** #endif
 445:../src/main.c **** 
 446:../src/main.c **** #if defined(STM32L471xx)
 447:../src/main.c ****   // initialize all powersaving functions
 448:../src/main.c ****   pwr_save_init(main_config_data_mode->powersave);
 449:../src/main.c **** #endif
 450:../src/main.c **** 
 451:../src/main.c ****   // initalizing separated Open Collector output
 452:../src/main.c ****   io_oc_init();
 450              		.loc 1 452 0
 451 0294 FFF7FEFF 		bl	io_oc_init
 452              	.LVL50:
 453:../src/main.c **** 
 454:../src/main.c ****   // initialize sensor power control and switch off supply voltage
 455:../src/main.c ****   wx_pwr_switch_init();
 453              		.loc 1 455 0
 454 0298 FFF7FEFF 		bl	wx_pwr_switch_init
 455              	.LVL51:
 456:../src/main.c **** 
 457:../src/main.c ****   // call periodic handle to wait for 1 second and then switch on voltage
 458:../src/main.c ****   wx_pwr_switch_periodic_handle();
 456              		.loc 1 458 0
 457 029c FFF7FEFF 		bl	wx_pwr_switch_periodic_handle
 458              	.LVL52:
 459:../src/main.c **** 
 460:../src/main.c ****   // waiting for 1 second to count number of ticks when the CPU is idle
 461:../src/main.c ****   main_idle_cpu_ticks = delay_fixed_with_count(1000);
 459              		.loc 1 461 0
 460 02a0 4FF47A70 		mov	r0, #1000
 461 02a4 FFF7FEFF 		bl	delay_fixed_with_count
 462              	.LVL53:
 463 02a8 A84B     		ldr	r3, .L122+8
 464 02aa 1860     		str	r0, [r3]
 462:../src/main.c **** 
 463:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B) || defined(PARATNC_HWREV_C)
 464:../src/main.c **** 
 465:../src/main.c ****   // Configure I/O pins for USART1 (Kiss modem)
 466:../src/main.c ****   Configure_GPIO(GPIOA,10,PUD_INPUT);		// RX
 465              		.loc 1 466 0
 466 02ac A84C     		ldr	r4, .L122+12
 467 02ae 0822     		movs	r2, #8
 468 02b0 0A21     		movs	r1, #10
 469 02b2 2046     		mov	r0, r4
 470 02b4 FFF7FEFF 		bl	Configure_GPIO
 471              	.LVL54:
 467:../src/main.c ****   Configure_GPIO(GPIOA,9,AFPP_OUTPUT_2MHZ);	// TX
 472              		.loc 1 467 0
 473 02b8 0922     		movs	r2, #9
 474 02ba 1146     		mov	r1, r2
 475 02bc 2046     		mov	r0, r4
 476 02be FFF7FEFF 		bl	Configure_GPIO
 477              	.LVL55:
 468:../src/main.c **** 
 469:../src/main.c ****   // Configure I/O pins for USART2 (wx meteo comm)
 470:../src/main.c ****   Configure_GPIO(GPIOA,3,PUD_INPUT);		// RX
 478              		.loc 1 470 0
 479 02c2 0822     		movs	r2, #8
 480 02c4 0321     		movs	r1, #3
 481 02c6 2046     		mov	r0, r4
 482 02c8 FFF7FEFF 		bl	Configure_GPIO
 483              	.LVL56:
 471:../src/main.c ****   Configure_GPIO(GPIOA,2,AFPP_OUTPUT_2MHZ);	// TX
 484              		.loc 1 471 0
 485 02cc 0922     		movs	r2, #9
 486 02ce 0221     		movs	r1, #2
 487 02d0 2046     		mov	r0, r4
 488 02d2 FFF7FEFF 		bl	Configure_GPIO
 489              	.LVL57:
 472:../src/main.c **** 
 473:../src/main.c **** #endif
 474:../src/main.c **** 
 475:../src/main.c **** #if defined(PARAMETEO)
 476:../src/main.c ****   	// USART1 - KISS
 477:../src/main.c **** 	GPIO_InitTypeDef.Mode = LL_GPIO_MODE_ALTERNATE;
 478:../src/main.c **** 	GPIO_InitTypeDef.Pin = LL_GPIO_PIN_10;
 479:../src/main.c **** 	GPIO_InitTypeDef.Pull = LL_GPIO_PULL_NO;
 480:../src/main.c **** 	GPIO_InitTypeDef.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 481:../src/main.c **** 	GPIO_InitTypeDef.Alternate = LL_GPIO_AF_7;
 482:../src/main.c **** 	GPIO_InitTypeDef.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 483:../src/main.c **** 	LL_GPIO_Init(GPIOA, &GPIO_InitTypeDef);		// RX
 484:../src/main.c **** 
 485:../src/main.c **** 	GPIO_InitTypeDef.Mode = LL_GPIO_MODE_ALTERNATE;
 486:../src/main.c **** 	GPIO_InitTypeDef.Pin = LL_GPIO_PIN_9;
 487:../src/main.c **** 	GPIO_InitTypeDef.Pull = LL_GPIO_PULL_NO;
 488:../src/main.c **** 	GPIO_InitTypeDef.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 489:../src/main.c **** 	GPIO_InitTypeDef.Alternate = LL_GPIO_AF_7;
 490:../src/main.c **** 	GPIO_InitTypeDef.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 491:../src/main.c **** 	LL_GPIO_Init(GPIOA, &GPIO_InitTypeDef);		// TX
 492:../src/main.c **** 
 493:../src/main.c **** 	// USART2 - METEO
 494:../src/main.c **** 	GPIO_InitTypeDef.Mode = LL_GPIO_MODE_ALTERNATE;
 495:../src/main.c **** 	GPIO_InitTypeDef.Pin = LL_GPIO_PIN_3;
 496:../src/main.c **** 	GPIO_InitTypeDef.Pull = LL_GPIO_PULL_NO;
 497:../src/main.c **** 	GPIO_InitTypeDef.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 498:../src/main.c **** 	GPIO_InitTypeDef.Alternate = LL_GPIO_AF_7;
 499:../src/main.c **** 	GPIO_InitTypeDef.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 500:../src/main.c **** 	LL_GPIO_Init(GPIOA, &GPIO_InitTypeDef);		// RX
 501:../src/main.c **** 
 502:../src/main.c **** 	GPIO_InitTypeDef.Mode = LL_GPIO_MODE_ALTERNATE;
 503:../src/main.c **** 	GPIO_InitTypeDef.Pin = LL_GPIO_PIN_2;
 504:../src/main.c **** 	GPIO_InitTypeDef.Pull = LL_GPIO_PULL_NO;
 505:../src/main.c **** 	GPIO_InitTypeDef.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 506:../src/main.c **** 	GPIO_InitTypeDef.Alternate = LL_GPIO_AF_7;
 507:../src/main.c **** 	GPIO_InitTypeDef.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 508:../src/main.c **** 	LL_GPIO_Init(GPIOA, &GPIO_InitTypeDef);		// TX
 509:../src/main.c **** 
 510:../src/main.c **** #endif
 511:../src/main.c **** 
 512:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B)
 513:../src/main.c ****   Configure_GPIO(GPIOA,7,GPPP_OUTPUT_2MHZ);	// re/te
 514:../src/main.c ****   GPIO_ResetBits(GPIOA, GPIO_Pin_7);
 515:../src/main.c **** #endif
 516:../src/main.c **** #if defined(PARATNC_HWREV_C)
 517:../src/main.c ****   Configure_GPIO(GPIOA,8,GPPP_OUTPUT_2MHZ);	// re/te
 490              		.loc 1 517 0
 491 02d6 0122     		movs	r2, #1
 492 02d8 0821     		movs	r1, #8
 493 02da 2046     		mov	r0, r4
 494 02dc FFF7FEFF 		bl	Configure_GPIO
 495              	.LVL58:
 518:../src/main.c ****   GPIO_ResetBits(GPIOA, GPIO_Pin_8);
 496              		.loc 1 518 0
 497 02e0 4FF48071 		mov	r1, #256
 498 02e4 2046     		mov	r0, r4
 499 02e6 FFF7FEFF 		bl	GPIO_ResetBits
 500              	.LVL59:
 519:../src/main.c **** #endif
 520:../src/main.c **** 
 521:../src/main.c **** #if defined(PARAMETEO)
 522:../src/main.c **** 	GPIO_InitTypeDef.Mode = LL_GPIO_MODE_OUTPUT;
 523:../src/main.c **** 	GPIO_InitTypeDef.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 524:../src/main.c **** 	GPIO_InitTypeDef.Pin = LL_GPIO_PIN_2;
 525:../src/main.c **** 	GPIO_InitTypeDef.Pull = LL_GPIO_PULL_NO;
 526:../src/main.c **** 	GPIO_InitTypeDef.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 527:../src/main.c **** 	GPIO_InitTypeDef.Alternate = LL_GPIO_AF_7;
 528:../src/main.c **** 	LL_GPIO_Init(GPIOA, &GPIO_InitTypeDef);		// RE-TE
 529:../src/main.c **** #endif
 530:../src/main.c **** 
 531:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B) || defined(PARATNC_HWREV_C)
 532:../src/main.c ****   // enabling the clock for both USARTs
 533:../src/main.c ****   RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 501              		.loc 1 533 0
 502 02ea 9A4B     		ldr	r3, .L122+16
 503 02ec 9A69     		ldr	r2, [r3, #24]
 504 02ee 42F48042 		orr	r2, r2, #16384
 505 02f2 9A61     		str	r2, [r3, #24]
 534:../src/main.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 506              		.loc 1 534 0
 507 02f4 DA69     		ldr	r2, [r3, #28]
 508 02f6 42F40032 		orr	r2, r2, #131072
 509 02fa DA61     		str	r2, [r3, #28]
 535:../src/main.c **** #endif
 536:../src/main.c **** 
 537:../src/main.c ****   main_kiss_srl_ctx_ptr = &main_kiss_srl_ctx;
 510              		.loc 1 537 0
 511 02fc 964B     		ldr	r3, .L122+20
 512 02fe 974A     		ldr	r2, .L122+24
 513 0300 1A60     		str	r2, [r3]
 538:../src/main.c ****   main_wx_srl_ctx_ptr = &main_wx_srl_ctx;
 514              		.loc 1 538 0
 515 0302 974B     		ldr	r3, .L122+28
 516 0304 974A     		ldr	r2, .L122+32
 517 0306 1A60     		str	r2, [r3]
 539:../src/main.c **** 
 540:../src/main.c ****   main_target_kiss_baudrate = 9600u;
 518              		.loc 1 540 0
 519 0308 4FF41653 		mov	r3, #9600
 520 030c 964A     		ldr	r2, .L122+36
 521 030e 1360     		str	r3, [r2]
 541:../src/main.c ****   main_target_wx_baudrate = _SERIAL_BAUDRATE;
 522              		.loc 1 541 0
 523 0310 964A     		ldr	r2, .L122+40
 524 0312 1360     		str	r3, [r2]
 542:../src/main.c **** 
 543:../src/main.c **** #if defined(PARAMETEO)
 544:../src/main.c ****   // swtich power to M4. turn on sensors but keep GSM modem turned off
 545:../src/main.c ****   pwr_save_switch_mode_to_m4();
 546:../src/main.c **** #endif
 547:../src/main.c **** 
 548:../src/main.c ****   // if Victron VE-direct protocol is enabled set the baudrate to the 19200u
 549:../src/main.c ****   if (main_config_data_mode->victron == 1) {
 525              		.loc 1 549 0
 526 0314 964B     		ldr	r3, .L122+44
 527 0316 1B68     		ldr	r3, [r3]
 528 0318 DA79     		ldrb	r2, [r3, #7]	@ zero_extendqisi2
 529 031a 012A     		cmp	r2, #1
 530 031c 00F0D080 		beq	.L84
 531              	.L23:
 550:../src/main.c ****     main_target_kiss_baudrate = 19200u;
 551:../src/main.c **** 
 552:../src/main.c ****     // and disable the kiss TNC option as it shares the same port
 553:../src/main.c ****     main_kiss_enabled = 0;
 554:../src/main.c ****   }
 555:../src/main.c **** 
 556:../src/main.c **** 
 557:../src/main.c ****   if (main_config_data_mode->wx_davis == 1) {
 532              		.loc 1 557 0
 533 0320 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 534 0322 012A     		cmp	r2, #1
 535 0324 00F0D480 		beq	.L85
 558:../src/main.c **** 	  // reinitialize the KISS serial port temporary to davis baudrate
 559:../src/main.c **** 	  main_target_kiss_baudrate = DAVIS_DEFAULT_BAUDRATE;
 560:../src/main.c **** 
 561:../src/main.c **** 	  // reset RX state to allow reinitialization with changed baudrate
 562:../src/main.c **** 	  main_kiss_srl_ctx_ptr->srl_rx_state = SRL_RX_NOT_CONFIG;
 563:../src/main.c **** 
 564:../src/main.c **** 	  // reinitializing serial hardware to wake up Davis wx station
 565:../src/main.c **** 	  srl_init(main_kiss_srl_ctx_ptr, USART1, srl_usart1_rx_buffer, RX_BUFFER_1_LN, srl_usart1_tx_buff
 566:../src/main.c **** 
 567:../src/main.c **** 	  srl_switch_timeout(main_kiss_srl_ctx_ptr, SRL_TIMEOUT_ENABLE, 3000);
 568:../src/main.c **** 
 569:../src/main.c **** 	  davis_init(main_kiss_srl_ctx_ptr);
 570:../src/main.c **** 
 571:../src/main.c **** 	  // try to wake up the davis base
 572:../src/main.c **** 	  rte_wx_davis_station_avaliable = (davis_wake_up(DAVIS_BLOCKING_IO) == 0 ? 1 : 0);
 573:../src/main.c **** 
 574:../src/main.c **** 	  // if davis weather stations is connected to SERIAL port
 575:../src/main.c **** 	  if (rte_wx_davis_station_avaliable == 1) {
 576:../src/main.c **** 		  // turn LCD backlight on..
 577:../src/main.c **** 		  davis_control_backlight(1);
 578:../src/main.c **** 
 579:../src/main.c **** 		  // wait for a while
 580:../src/main.c **** 		  delay_fixed(1000);
 581:../src/main.c **** 
 582:../src/main.c **** 		  // and then off to let the user know that communication is working
 583:../src/main.c **** 		  davis_control_backlight(0);
 584:../src/main.c **** 
 585:../src/main.c **** 		  // disable the KISS modem as the UART will be used for DAVIS wx station
 586:../src/main.c **** 		  main_kiss_enabled = 0;
 587:../src/main.c **** 
 588:../src/main.c **** 		  // enable the davis serial protocol client to allow pooling callbacks to be called in main loop
 589:../src/main.c **** 		  // This only controls the callback it doesn't mean that the station itself is responding to
 590:../src/main.c **** 		  // communication. It stays set to one event if Davis station
 591:../src/main.c **** 		  main_davis_serial_enabled = 1;
 592:../src/main.c **** 
 593:../src/main.c **** 		  // trigger the rxcheck to get all counter values
 594:../src/main.c **** 		  davis_trigger_rxcheck_packet();
 595:../src/main.c **** 
 596:../src/main.c **** 	  }
 597:../src/main.c **** 	  else {
 598:../src/main.c **** 		  // if not revert back to KISS configuration
 599:../src/main.c **** 		  main_target_kiss_baudrate = 9600u;
 600:../src/main.c **** 		  main_kiss_srl_ctx_ptr->srl_rx_state = SRL_RX_NOT_CONFIG;
 601:../src/main.c **** 
 602:../src/main.c **** 		  // initializing UART drvier
 603:../src/main.c **** 		  srl_init(main_kiss_srl_ctx_ptr, USART1, srl_usart1_rx_buffer, RX_BUFFER_1_LN, srl_usart1_tx_buf
 604:../src/main.c **** 		  srl_init(main_wx_srl_ctx_ptr, USART2, srl_usart2_rx_buffer, RX_BUFFER_2_LN, srl_usart2_tx_buffe
 605:../src/main.c **** 
 606:../src/main.c **** 	  }
 607:../src/main.c ****   }
 608:../src/main.c ****   else if (main_config_data_mode->wx_modbus == 1) {
 536              		.loc 1 608 0
 537 0328 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 538 032a 012B     		cmp	r3, #1
 539 032c 00F06681 		beq	.L86
 609:../src/main.c **** 
 610:../src/main.c **** 	  rtu_serial_init(&rte_rtu_pool_queue, 1, main_wx_srl_ctx_ptr, main_config_data_rtu);
 611:../src/main.c **** 
 612:../src/main.c **** 	  main_target_wx_baudrate = main_config_data_rtu->slave_speed;
 613:../src/main.c **** 
 614:../src/main.c **** 	  // initialize serial ports according to RS485 network configuration for Modbus-RTU
 615:../src/main.c **** 	  srl_init(main_kiss_srl_ctx_ptr, USART1, srl_usart1_rx_buffer, RX_BUFFER_1_LN, srl_usart1_tx_buff
 616:../src/main.c **** 	  srl_init(main_wx_srl_ctx_ptr, USART2, srl_usart2_rx_buffer, RX_BUFFER_2_LN, srl_usart2_tx_buffer
 617:../src/main.c **** 	  srl_switch_tx_delay(main_wx_srl_ctx_ptr, 1);
 618:../src/main.c **** 
 619:../src/main.c **** 	  // enabling rtu master code
 620:../src/main.c **** 	  main_modbus_rtu_master_enabled = 1;
 621:../src/main.c **** 
 622:../src/main.c **** 	  rtu_serial_start();
 623:../src/main.c ****   }
 624:../src/main.c ****   else {
 625:../src/main.c **** 	  // initializing UART drvier
 626:../src/main.c **** 	  srl_init(main_kiss_srl_ctx_ptr, USART1, srl_usart1_rx_buffer, RX_BUFFER_1_LN, srl_usart1_tx_buff
 540              		.loc 1 626 0
 541 0330 0124     		movs	r4, #1
 542 0332 0394     		str	r4, [sp, #12]
 543 0334 8C4B     		ldr	r3, .L122+36
 544 0336 1B68     		ldr	r3, [r3]
 545 0338 0293     		str	r3, [sp, #8]
 546 033a 4FF40073 		mov	r3, #512
 547 033e 0193     		str	r3, [sp, #4]
 548 0340 8C4A     		ldr	r2, .L122+48
 549 0342 0092     		str	r2, [sp]
 550 0344 8C4A     		ldr	r2, .L122+52
 551 0346 8D49     		ldr	r1, .L122+56
 552 0348 8448     		ldr	r0, .L122+24
 553 034a FFF7FEFF 		bl	srl_init
 554              	.LVL60:
 627:../src/main.c **** 	  srl_init(main_wx_srl_ctx_ptr, USART2, srl_usart2_rx_buffer, RX_BUFFER_2_LN, srl_usart2_tx_buffer
 555              		.loc 1 627 0
 556 034e 844B     		ldr	r3, .L122+28
 557 0350 1868     		ldr	r0, [r3]
 558 0352 0394     		str	r4, [sp, #12]
 559 0354 854B     		ldr	r3, .L122+40
 560 0356 1B68     		ldr	r3, [r3]
 561 0358 0293     		str	r3, [sp, #8]
 562 035a 6023     		movs	r3, #96
 563 035c 0193     		str	r3, [sp, #4]
 564 035e 884A     		ldr	r2, .L122+60
 565 0360 0092     		str	r2, [sp]
 566 0362 884A     		ldr	r2, .L122+64
 567 0364 8849     		ldr	r1, .L122+68
 568 0366 FFF7FEFF 		bl	srl_init
 569              	.LVL61:
 570              	.L26:
 628:../src/main.c ****   }
 629:../src/main.c **** 
 630:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B)
 631:../src/main.c ****   main_wx_srl_ctx_ptr->te_pin = GPIO_Pin_7;
 632:../src/main.c ****   main_wx_srl_ctx_ptr->te_port = GPIOA;
 633:../src/main.c **** #endif
 634:../src/main.c **** #if defined(PARATNC_HWREV_C)
 635:../src/main.c ****   main_wx_srl_ctx_ptr->te_pin = GPIO_Pin_8;
 571              		.loc 1 635 0
 572 036a 7D4B     		ldr	r3, .L122+28
 573 036c 1B68     		ldr	r3, [r3]
 574 036e 4FF48072 		mov	r2, #256
 575 0372 1A82     		strh	r2, [r3, #16]	@ movhi
 636:../src/main.c ****   main_wx_srl_ctx_ptr->te_port = GPIOA;
 576              		.loc 1 636 0
 577 0374 764A     		ldr	r2, .L122+12
 578 0376 DA60     		str	r2, [r3, #12]
 637:../src/main.c **** #endif
 638:../src/main.c **** #if defined(PARAMETEO)
 639:../src/main.c ****   main_wx_srl_ctx_ptr->te_pin = LL_GPIO_PIN_8;
 640:../src/main.c ****   main_wx_srl_ctx_ptr->te_port = GPIOA;
 641:../src/main.c **** #endif
 642:../src/main.c **** 
 643:../src/main.c ****   // initialize APRS path with zeros
 644:../src/main.c ****   memset (main_own_path, 0x00, sizeof(main_own_path));
 579              		.loc 1 644 0
 580 0378 844C     		ldr	r4, .L122+72
 581 037a 1522     		movs	r2, #21
 582 037c 0021     		movs	r1, #0
 583 037e 2046     		mov	r0, r4
 584 0380 FFF7FEFF 		bl	memset
 585              	.LVL62:
 645:../src/main.c **** 
 646:../src/main.c ****   // configuring an APRS path used to transmit own packets (telemetry, wx, beacons)
 647:../src/main.c ****   main_own_path_ln = ConfigPath(main_own_path, main_config_data_basic);
 586              		.loc 1 647 0
 587 0384 824B     		ldr	r3, .L122+76
 588 0386 1968     		ldr	r1, [r3]
 589 0388 2046     		mov	r0, r4
 590 038a FFF7FEFF 		bl	ConfigPath
 591              	.LVL63:
 592 038e 814B     		ldr	r3, .L122+80
 593 0390 1870     		strb	r0, [r3]
 648:../src/main.c **** 
 649:../src/main.c **** #ifdef INTERNAL_WATCHDOG
 650:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B) || defined(PARATNC_HWREV_C)
 651:../src/main.c ****   // enable write access to watchdog registers
 652:../src/main.c ****   IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
 653:../src/main.c **** 
 654:../src/main.c ****   // Set watchdog prescaler
 655:../src/main.c ****   IWDG_SetPrescaler(IWDG_Prescaler_128);
 656:../src/main.c **** 
 657:../src/main.c ****   // Set the counter value to program watchdog for about 13 seconds
 658:../src/main.c ****   IWDG_SetReload(0xFFF);
 659:../src/main.c **** 
 660:../src/main.c ****   // enable the watchdog
 661:../src/main.c ****   IWDG_Enable();
 662:../src/main.c **** 
 663:../src/main.c ****   // do not disable the watchdog when the core is halted on a breakpoint
 664:../src/main.c ****   DBGMCU_Config(DBGMCU_IWDG_STOP, ENABLE);
 665:../src/main.c **** 
 666:../src/main.c ****   // reload watchdog counter
 667:../src/main.c ****   IWDG_ReloadCounter();
 668:../src/main.c **** #endif
 669:../src/main.c **** #endif
 670:../src/main.c **** 
 671:../src/main.c **** #ifdef _METEO
 672:../src/main.c ****   // initialize i2c controller
 673:../src/main.c ****   i2cConfigure();
 594              		.loc 1 673 0
 595 0392 FFF7FEFF 		bl	i2cConfigure
 596              	.LVL64:
 674:../src/main.c **** #endif
 675:../src/main.c **** 
 676:../src/main.c ****   // initialize GPIO pins leds are connecting to
 677:../src/main.c ****   led_init();
 597              		.loc 1 677 0
 598 0396 FFF7FEFF 		bl	led_init
 599              	.LVL65:
 678:../src/main.c **** 
 679:../src/main.c ****   // initialize AX25 & APRS stuff
 680:../src/main.c ****   AFSK_Init(&main_afsk);
 600              		.loc 1 680 0
 601 039a 7F4C     		ldr	r4, .L122+84
 602 039c 2046     		mov	r0, r4
 603 039e FFF7FEFF 		bl	AFSK_Init
 604              	.LVL66:
 681:../src/main.c ****   ax25_init(&main_ax25, &main_afsk, 0, 0x00);
 605              		.loc 1 681 0
 606 03a2 0023     		movs	r3, #0
 607 03a4 1A46     		mov	r2, r3
 608 03a6 2146     		mov	r1, r4
 609 03a8 7C48     		ldr	r0, .L122+88
 610 03aa FFF7FEFF 		bl	ax25_init
 611              	.LVL67:
 682:../src/main.c ****   DA_Init();
 612              		.loc 1 682 0
 613 03ae FFF7FEFF 		bl	DA_Init
 614              	.LVL68:
 683:../src/main.c **** 
 684:../src/main.c ****   // configure external watchdog
 685:../src/main.c ****   io_ext_watchdog_config();
 615              		.loc 1 685 0
 616 03b2 FFF7FEFF 		bl	io_ext_watchdog_config
 617              	.LVL69:
 686:../src/main.c **** 
 687:../src/main.c ****   // initializing the digipeater configuration
 688:../src/main.c ****   digi_init(main_config_data_mode);
 618              		.loc 1 688 0
 619 03b6 6E4C     		ldr	r4, .L122+44
 620 03b8 2068     		ldr	r0, [r4]
 621 03ba FFF7FEFF 		bl	digi_init
 622              	.LVL70:
 689:../src/main.c **** 
 690:../src/main.c ****   if ((main_config_data_mode->wx & WX_ENABLED) == 1) {
 623              		.loc 1 690 0
 624 03be 2368     		ldr	r3, [r4]
 625 03c0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 626 03c2 13F0010F 		tst	r3, #1
 627 03c6 40F04C81 		bne	.L87
 628              	.L28:
 691:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B) || defined(PARATNC_HWREV_C)
 692:../src/main.c **** 	  dallas_init(GPIOC, GPIO_Pin_11, GPIO_PinSource11, &rte_wx_dallas_average);
 693:../src/main.c **** #endif
 694:../src/main.c **** 
 695:../src/main.c **** #if defined(PARAMETEO)
 696:../src/main.c **** 
 697:../src/main.c **** 	  // switch on voltages exclusively for ParaMETEO
 698:../src/main.c **** 
 699:../src/main.c **** 	  // initialize dallas one-wire driver for termometer
 700:../src/main.c **** 	  dallas_init(GPIOC, LL_GPIO_PIN_11, 0x0, &rte_wx_dallas_average);
 701:../src/main.c **** #endif
 702:../src/main.c **** 
 703:../src/main.c **** 	  if (main_config_data_mode->wx_umb == 1) {
 704:../src/main.c **** 		  // client initialization
 705:../src/main.c **** 		  umb_master_init(&rte_wx_umb_context, main_wx_srl_ctx_ptr, main_config_data_umb);
 706:../src/main.c **** 	  }
 707:../src/main.c **** 
 708:../src/main.c **** 	  if ((main_config_data_mode->wx & WX_INTERNAL_SPARKFUN_WIND) == 0) {
 709:../src/main.c **** 		  analog_anemometer_init(main_config_data_mode->wx_anemometer_pulses_constant, 38, 100, 1);
 710:../src/main.c **** 	  }
 711:../src/main.c **** 	  else {
 712:../src/main.c **** 		  analog_anemometer_init(main_config_data_mode->wx_anemometer_pulses_constant, 38, 100, 1);
 713:../src/main.c **** 	  }
 714:../src/main.c ****   }
 715:../src/main.c **** 
 716:../src/main.c ****   // configuring interrupt priorities
 717:../src/main.c ****   it_handlers_set_priorities();
 629              		.loc 1 717 0
 630 03ca FFF7FEFF 		bl	it_handlers_set_priorities
 631              	.LVL71:
 718:../src/main.c **** 
 719:../src/main.c **** 	if (main_config_data_mode->wx_ms5611_or_bme == 0) {
 632              		.loc 1 719 0
 633 03ce 684B     		ldr	r3, .L122+44
 634 03d0 1B68     		ldr	r3, [r3]
 635 03d2 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 636 03d4 002B     		cmp	r3, #0
 637 03d6 00F06A81 		beq	.L88
 720:../src/main.c **** 	 ms5611_reset(&rte_wx_ms5611_qf);
 721:../src/main.c **** 	 ms5611_read_calibration(SensorCalData, &rte_wx_ms5611_qf);
 722:../src/main.c **** 	 ms5611_trigger_measure(0, 0);
 723:../src/main.c **** 	}
 724:../src/main.c **** 	else if (main_config_data_mode->wx_ms5611_or_bme == 1) {
 638              		.loc 1 724 0
 639 03da 012B     		cmp	r3, #1
 640 03dc 00F07481 		beq	.L89
 641              	.L32:
 725:../src/main.c **** 	 bme280_reset(&rte_wx_bme280_qf);
 726:../src/main.c **** 	 bme280_setup();
 727:../src/main.c **** 	 bme280_read_calibration(bme280_calibration_data);
 728:../src/main.c **** 	}
 729:../src/main.c **** 
 730:../src/main.c ****  if (main_kiss_enabled == 1) {
 642              		.loc 1 730 0
 643 03e0 6F4B     		ldr	r3, .L122+92
 644 03e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 645 03e4 012B     		cmp	r3, #1
 646 03e6 00F07881 		beq	.L90
 647              	.L33:
 731:../src/main.c **** 	  // preparing initial beacon which will be sent to host PC using KISS protocol via UART
 732:../src/main.c **** 	  main_own_aprs_msg_len = sprintf(main_own_aprs_msg, "=%s%c%c%s%c%c %s", main_string_latitude, mai
 733:../src/main.c **** 
 734:../src/main.c **** 	  // terminating the aprs message
 735:../src/main.c **** 	  main_own_aprs_msg[main_own_aprs_msg_len] = 0;
 736:../src/main.c **** 
 737:../src/main.c **** 	  // 'sending' the message which will only encapsulate it inside AX25 protocol (ax25_starttx is no
 738:../src/main.c **** 	  //ax25_sendVia(&main_ax25, main_own_path, (sizeof(main_own_path) / sizeof(*(main_own_path))), ma
 739:../src/main.c **** 	  ln = ax25_sendVia_toBuffer(main_own_path, (sizeof(main_own_path) / sizeof(*(main_own_path))), ma
 740:../src/main.c **** 
 741:../src/main.c **** 	  // SendKISSToHost function cleares the output buffer hence routine need to wait till the UART wi
 742:../src/main.c **** 	  // Here this could be omitted because UART isn't used before but general idea
 743:../src/main.c **** 	  while(main_kiss_srl_ctx.srl_tx_state != SRL_TX_IDLE && main_kiss_srl_ctx.srl_tx_state != SRL_TX_
 744:../src/main.c **** 
 745:../src/main.c **** 	  // converting AX25 with beacon to KISS format
 746:../src/main.c **** 	  //ln = SendKISSToHost(main_afsk.tx_buf + 1, main_afsk.tx_fifo.tail - main_afsk.tx_fifo.head - 4,
 747:../src/main.c **** 
 748:../src/main.c **** 
 749:../src/main.c **** 	  // checking if KISS-framing was done correctly
 750:../src/main.c **** 	  if (ln != KISS_TOO_LONG_FRM) {
 751:../src/main.c **** 	#ifdef SERIAL_TX_TEST_MODE
 752:../src/main.c **** 		  // infinite loop for testing UART transmission
 753:../src/main.c **** 		  for (;;) {
 754:../src/main.c **** 
 755:../src/main.c **** 			  retval = srl_receive_data(main_kiss_srl_ctx_ptr, 100, FEND, FEND, 0, 0, 0);
 756:../src/main.c **** 	#endif
 757:../src/main.c **** 			  retval = srl_start_tx(main_kiss_srl_ctx_ptr, ln);
 758:../src/main.c **** 
 759:../src/main.c **** 	#ifdef SERIAL_TX_TEST_MODE
 760:../src/main.c **** 			  	  	while(main_kiss_srl_ctx_ptr->srl_tx_state != SRL_TX_IDLE);
 761:../src/main.c **** 
 762:../src/main.c **** 				#if defined(PARAMETEO)
 763:../src/main.c **** 			  	 	LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_9);
 764:../src/main.c **** 				#else
 765:../src/main.c **** 		  	  		GPIOC->ODR = (GPIOC->ODR ^ GPIO_Pin_9);
 766:../src/main.c **** 				#endif
 767:../src/main.c **** 
 768:../src/main.c **** 			  if (main_kiss_srl_ctx_ptr->srl_rx_state == SRL_RX_DONE) {
 769:../src/main.c **** 				#if defined(PARAMETEO)
 770:../src/main.c **** 			  	 		LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_9);
 771:../src/main.c **** 				#else
 772:../src/main.c **** 						GPIOC->ODR = (GPIOC->ODR ^ GPIO_Pin_9);
 773:../src/main.c **** 				#endif
 774:../src/main.c **** 				  retval = 200;
 775:../src/main.c **** 			  }
 776:../src/main.c **** 		  }
 777:../src/main.c **** 	#endif
 778:../src/main.c **** 	  }
 779:../src/main.c **** 
 780:../src/main.c ****  }
 781:../src/main.c **** 
 782:../src/main.c ****   // reinitializing AFSK and AX25 driver
 783:../src/main.c ****   AFSK_Init(&main_afsk);
 648              		.loc 1 783 0
 649 03ea 6B4C     		ldr	r4, .L122+84
 650 03ec 2046     		mov	r0, r4
 651 03ee FFF7FEFF 		bl	AFSK_Init
 652              	.LVL72:
 784:../src/main.c **** 
 785:../src/main.c ****   ADCStartConfig();
 653              		.loc 1 785 0
 654 03f2 FFF7FEFF 		bl	ADCStartConfig
 655              	.LVL73:
 786:../src/main.c ****   DACStartConfig();
 656              		.loc 1 786 0
 657 03f6 FFF7FEFF 		bl	DACStartConfig
 658              	.LVL74:
 787:../src/main.c ****   AFSK_Init(&main_afsk);
 659              		.loc 1 787 0
 660 03fa 2046     		mov	r0, r4
 661 03fc FFF7FEFF 		bl	AFSK_Init
 662              	.LVL75:
 788:../src/main.c ****   ax25_init(&main_ax25, &main_afsk, 0, message_callback);
 663              		.loc 1 788 0
 664 0400 684B     		ldr	r3, .L122+96
 665 0402 0022     		movs	r2, #0
 666 0404 2146     		mov	r1, r4
 667 0406 6548     		ldr	r0, .L122+88
 668 0408 FFF7FEFF 		bl	ax25_init
 669              	.LVL76:
 789:../src/main.c **** 
 790:../src/main.c **** 	if ((main_config_data_mode->wx & WX_ENABLED) == 1) {
 670              		.loc 1 790 0
 671 040c 584B     		ldr	r3, .L122+44
 672 040e 1968     		ldr	r1, [r3]
 673 0410 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 674 0412 13F0010F 		tst	r3, #1
 675 0416 40F09981 		bne	.L91
 676              	.L36:
 791:../src/main.c **** 	  // getting all meteo measuremenets to be sure that WX frames want be sent with zeros
 792:../src/main.c **** 	  wx_get_all_measurements(main_config_data_wx_sources, main_config_data_mode, main_config_data_umb
 793:../src/main.c **** 	}
 794:../src/main.c **** 
 795:../src/main.c ****   // start serial port i/o transaction depending on station configuration
 796:../src/main.c ****   if (main_config_data_mode->victron == 1) {
 677              		.loc 1 796 0
 678 041a 554B     		ldr	r3, .L122+44
 679 041c 1B68     		ldr	r3, [r3]
 680 041e DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 681 0420 012B     		cmp	r3, #1
 682 0422 00F09C81 		beq	.L92
 797:../src/main.c **** 	  // initializing protocol parser
 798:../src/main.c **** 	  ve_direct_parser_init(&rte_pv_struct, &rte_pv_average);
 799:../src/main.c **** 
 800:../src/main.c **** 	  // enabling timeout handling for serial port. This is required because VE protocol frame may var
 801:../src/main.c **** 	  // and serial port driver could finish reception only either on stop character or when declared 
 802:../src/main.c **** 	  // has been received.
 803:../src/main.c **** 	  srl_switch_timeout(main_kiss_srl_ctx_ptr, 1, 50);
 804:../src/main.c **** 
 805:../src/main.c **** 	  // switching UART to receive mode to be ready for data from charging controller
 806:../src/main.c **** 	  srl_receive_data(main_kiss_srl_ctx_ptr, VE_DIRECT_MAX_FRAME_LN, 0, 0, 0, 0, 0);
 807:../src/main.c ****   }
 808:../src/main.c ****   else {
 809:../src/main.c **** 	  // switching UART to receive mode to be ready for KISS frames from host
 810:../src/main.c **** 	  srl_receive_data(main_kiss_srl_ctx_ptr, 100, FEND, FEND, 0, 0, 0);
 683              		.loc 1 810 0
 684 0426 4C4B     		ldr	r3, .L122+20
 685 0428 1868     		ldr	r0, [r3]
 686 042a 0023     		movs	r3, #0
 687 042c 0293     		str	r3, [sp, #8]
 688 042e 0193     		str	r3, [sp, #4]
 689 0430 0093     		str	r3, [sp]
 690 0432 6FF03F03 		mvn	r3, #63
 691 0436 1A46     		mov	r2, r3
 692 0438 6421     		movs	r1, #100
 693 043a FFF7FEFF 		bl	srl_receive_data
 694              	.LVL77:
 695              	.L38:
 811:../src/main.c ****   }
 812:../src/main.c **** 
 813:../src/main.c ****   io_oc_output_low();
 696              		.loc 1 813 0
 697 043e FFF7FEFF 		bl	io_oc_output_low
 698              	.LVL78:
 699              	.LBB46:
 700              	.LBB47:
 701              		.file 3 "../include/LedConfig.h"
   1:../include/LedConfig.h **** /*
   2:../include/LedConfig.h ****  * LedConfig.h
   3:../include/LedConfig.h ****  *
   4:../include/LedConfig.h ****  *  Created on: 05.07.2017
   5:../include/LedConfig.h ****  *      Author: mateusz
   6:../include/LedConfig.h ****  */
   7:../include/LedConfig.h **** 
   8:../include/LedConfig.h **** #ifndef LEDCONFIG_H_
   9:../include/LedConfig.h **** #define LEDCONFIG_H_
  10:../include/LedConfig.h **** 
  11:../include/LedConfig.h **** // PC8 - LED1 - upper
  12:../include/LedConfig.h **** // PC9 - LED2 - lower
  13:../include/LedConfig.h **** 
  14:../include/LedConfig.h **** #ifdef STM32F10X_MD_VL
  15:../include/LedConfig.h **** #include <stm32f10x.h>
  16:../include/LedConfig.h **** #endif
  17:../include/LedConfig.h **** #ifdef STM32L471xx
  18:../include/LedConfig.h **** #include <stm32l4xx.h>
  19:../include/LedConfig.h **** #include <stm32l4xx_ll_gpio.h>
  20:../include/LedConfig.h **** #endif
  21:../include/LedConfig.h **** 
  22:../include/LedConfig.h **** #include <stdint.h>
  23:../include/LedConfig.h **** #include <stdbool.h>
  24:../include/LedConfig.h **** 
  25:../include/LedConfig.h **** #define BLINK_DURATION_MSEC 		20 * BLINK_MSEC_PER_SVC_CALL
  26:../include/LedConfig.h **** #define BLINK_MSEC_PER_SVC_CALL 	10
  27:../include/LedConfig.h **** 
  28:../include/LedConfig.h **** /* C++ detection */
  29:../include/LedConfig.h **** #ifdef __cplusplus
  30:../include/LedConfig.h **** extern "C" {
  31:../include/LedConfig.h **** #endif
  32:../include/LedConfig.h **** 
  33:../include/LedConfig.h **** extern uint8_t led_blinking_led2;
  34:../include/LedConfig.h **** extern uint8_t led_blinking_led1;
  35:../include/LedConfig.h **** 
  36:../include/LedConfig.h **** void led_config(void);
  37:../include/LedConfig.h **** void led_init(void);
  38:../include/LedConfig.h **** void led_service_blink(void);
  39:../include/LedConfig.h **** 
  40:../include/LedConfig.h **** #ifdef STM32F10X_MD_VL
  41:../include/LedConfig.h **** inline void led_control_led1_upper(bool _in) {
  42:../include/LedConfig.h **** 	if (_in == true) {
  43:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BS8;
  44:../include/LedConfig.h **** 	}
  45:../include/LedConfig.h **** 	else {
  46:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BR8;
 702              		.loc 3 46 0
 703 0442 594B     		ldr	r3, .L122+100
 704 0444 1A69     		ldr	r2, [r3, #16]
 705 0446 42F08072 		orr	r2, r2, #16777216
 706 044a 1A61     		str	r2, [r3, #16]
 707              	.LVL79:
 708              	.LBE47:
 709              	.LBE46:
 710              	.LBB48:
 711              	.LBB49:
  47:../include/LedConfig.h **** 	}
  48:../include/LedConfig.h **** }
  49:../include/LedConfig.h **** 
  50:../include/LedConfig.h **** inline void led_control_led2_bottom(bool _in) {
  51:../include/LedConfig.h **** 	if (_in == true) {
  52:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BS9;
  53:../include/LedConfig.h **** 	}
  54:../include/LedConfig.h **** 	else {
  55:../include/LedConfig.h **** 		GPIOC->BSRR |= GPIO_BSRR_BR9;
 712              		.loc 3 55 0
 713 044c 1A69     		ldr	r2, [r3, #16]
 714 044e 42F00072 		orr	r2, r2, #33554432
 715 0452 1A61     		str	r2, [r3, #16]
 716              	.LVL80:
 717              	.LBE49:
 718              	.LBE48:
 814:../src/main.c **** 
 815:../src/main.c ****   led_control_led1_upper(false);
 816:../src/main.c ****   led_control_led2_bottom(false);
 817:../src/main.c **** 
 818:../src/main.c **** #if defined(PARAMETEO)
 819:../src/main.c ****    pwr_save_switch_mode_to_c0();
 820:../src/main.c **** 
 821:../src/main.c ****    // sleep a little bit and wait for everything to power up completely
 822:../src/main.c ****    delay_fixed(1000);
 823:../src/main.c **** 
 824:../src/main.c ****    led_control_led1_upper(true);
 825:../src/main.c ****    led_control_led2_bottom(false);
 826:../src/main.c **** 
 827:../src/main.c ****    delay_fixed(1000);
 828:../src/main.c **** 
 829:../src/main.c ****    led_control_led1_upper(false);
 830:../src/main.c ****    led_control_led2_bottom(true);
 831:../src/main.c **** 
 832:../src/main.c ****    delay_fixed(1000);
 833:../src/main.c **** 
 834:../src/main.c ****    led_control_led1_upper(true);
 835:../src/main.c ****    led_control_led2_bottom(true);
 836:../src/main.c **** 
 837:../src/main.c ****    delay_fixed(1000);
 838:../src/main.c **** 
 839:../src/main.c ****    led_control_led1_upper(false);
 840:../src/main.c ****    led_control_led2_bottom(false);
 841:../src/main.c **** 
 842:../src/main.c **** #endif
 843:../src/main.c **** 
 844:../src/main.c ****   // configuting system timers
 845:../src/main.c ****   TimerConfig();
 719              		.loc 1 845 0
 720 0454 FFF7FEFF 		bl	TimerConfig
 721              	.LVL81:
 846:../src/main.c **** 
 847:../src/main.c ****   // initialize UMB transaction
 848:../src/main.c ****   if (main_config_data_mode->wx_umb == 1) {
 722              		.loc 1 848 0
 723 0458 454B     		ldr	r3, .L122+44
 724 045a 1B68     		ldr	r3, [r3]
 725 045c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 726 045e 012B     		cmp	r3, #1
 727 0460 00F09181 		beq	.L93
 728              	.L39:
 849:../src/main.c **** 	umb_0x26_status_request(&rte_wx_umb, &rte_wx_umb_context, main_config_data_umb);
 850:../src/main.c ****   }
 851:../src/main.c **** 
 852:../src/main.c **** #ifdef INTERNAL_WATCHDOG
 853:../src/main.c ****    // reload watchdog counter
 854:../src/main.c ****    IWDG_ReloadCounter();
 855:../src/main.c **** #endif
 856:../src/main.c **** 
 857:../src/main.c ****    io_ext_watchdog_service();
 729              		.loc 1 857 0
 730 0464 FFF7FEFF 		bl	io_ext_watchdog_service
 731              	.LVL82:
 858:../src/main.c **** 
 859:../src/main.c ****    if (main_config_data_basic-> beacon_at_bootup == 1) {
 732              		.loc 1 859 0
 733 0468 494B     		ldr	r3, .L122+76
 734 046a 1B68     		ldr	r3, [r3]
 735 046c 93F89730 		ldrb	r3, [r3, #151]	@ zero_extendqisi2
 736 0470 012B     		cmp	r3, #1
 737 0472 00F08F81 		beq	.L94
 738              	.L40:
 217:../src/main.c **** 
 739              		.loc 1 217 0
 740 0476 0024     		movs	r4, #0
 741 0478 F5E2     		b	.L41
 742              	.L18:
 416:../src/main.c **** 	  main_symbol_s = '#';
 743              		.loc 1 416 0
 744 047a 324B     		ldr	r3, .L122
 745 047c 3122     		movs	r2, #49
 746 047e 1A70     		strb	r2, [r3]
 417:../src/main.c **** 	  break;
 747              		.loc 1 417 0
 748 0480 314B     		ldr	r3, .L122+4
 749 0482 2322     		movs	r2, #35
 750 0484 1A70     		strb	r2, [r3]
 418:../src/main.c ****   case 2:		// _SYMBOL_HOUSE
 751              		.loc 1 418 0
 752 0486 01E7     		b	.L22
 753              	.L19:
 420:../src/main.c **** 	  main_symbol_s = '-';
 754              		.loc 1 420 0
 755 0488 2E4B     		ldr	r3, .L122
 756 048a 2F22     		movs	r2, #47
 757 048c 1A70     		strb	r2, [r3]
 421:../src/main.c **** 	  break;
 758              		.loc 1 421 0
 759 048e 2E4B     		ldr	r3, .L122+4
 760 0490 2D22     		movs	r2, #45
 761 0492 1A70     		strb	r2, [r3]
 422:../src/main.c ****   case 3:		// _SYMBOL_RXIGATE
 762              		.loc 1 422 0
 763 0494 FAE6     		b	.L22
 764              	.L20:
 424:../src/main.c **** 	  main_symbol_s = '&';
 765              		.loc 1 424 0
 766 0496 2B4B     		ldr	r3, .L122
 767 0498 4922     		movs	r2, #73
 768 049a 1A70     		strb	r2, [r3]
 425:../src/main.c **** 	  break;
 769              		.loc 1 425 0
 770 049c 2A4B     		ldr	r3, .L122+4
 771 049e 2622     		movs	r2, #38
 772 04a0 1A70     		strb	r2, [r3]
 426:../src/main.c ****   case 5:		// _SYMBOL_SAILBOAT
 773              		.loc 1 426 0
 774 04a2 F3E6     		b	.L22
 775              	.L21:
 428:../src/main.c **** 	  main_symbol_s = 'Y';
 776              		.loc 1 428 0
 777 04a4 274B     		ldr	r3, .L122
 778 04a6 2F22     		movs	r2, #47
 779 04a8 1A70     		strb	r2, [r3]
 429:../src/main.c **** 	  break;
 780              		.loc 1 429 0
 781 04aa 274B     		ldr	r3, .L122+4
 782 04ac 5922     		movs	r2, #89
 783 04ae 1A70     		strb	r2, [r3]
 430:../src/main.c ****   default:		// _SYMBOL_IGATE
 784              		.loc 1 430 0
 785 04b0 ECE6     		b	.L22
 786              	.L15:
 432:../src/main.c **** 	  main_symbol_s = '&';
 787              		.loc 1 432 0
 788 04b2 244B     		ldr	r3, .L122
 789 04b4 5222     		movs	r2, #82
 790 04b6 1A70     		strb	r2, [r3]
 433:../src/main.c **** 	  break;
 791              		.loc 1 433 0
 792 04b8 234B     		ldr	r3, .L122+4
 793 04ba 2622     		movs	r2, #38
 794 04bc 1A70     		strb	r2, [r3]
 434:../src/main.c **** 
 795              		.loc 1 434 0
 796 04be E5E6     		b	.L22
 797              	.L84:
 550:../src/main.c **** 
 798              		.loc 1 550 0
 799 04c0 294A     		ldr	r2, .L122+36
 800 04c2 4FF49641 		mov	r1, #19200
 801 04c6 1160     		str	r1, [r2]
 553:../src/main.c ****   }
 802              		.loc 1 553 0
 803 04c8 354A     		ldr	r2, .L122+92
 804 04ca 0021     		movs	r1, #0
 805 04cc 1170     		strb	r1, [r2]
 806 04ce 27E7     		b	.L23
 807              	.L85:
 559:../src/main.c **** 
 808              		.loc 1 559 0
 809 04d0 4FF49643 		mov	r3, #19200
 810 04d4 244A     		ldr	r2, .L122+36
 811 04d6 1360     		str	r3, [r2]
 562:../src/main.c **** 
 812              		.loc 1 562 0
 813 04d8 2048     		ldr	r0, .L122+24
 814 04da 0022     		movs	r2, #0
 815 04dc 80F84420 		strb	r2, [r0, #68]
 565:../src/main.c **** 
 816              		.loc 1 565 0
 817 04e0 0124     		movs	r4, #1
 818 04e2 0394     		str	r4, [sp, #12]
 819 04e4 0293     		str	r3, [sp, #8]
 820 04e6 4FF40073 		mov	r3, #512
 821 04ea 0193     		str	r3, [sp, #4]
 822 04ec 214A     		ldr	r2, .L122+48
 823 04ee 0092     		str	r2, [sp]
 824 04f0 214A     		ldr	r2, .L122+52
 825 04f2 2249     		ldr	r1, .L122+56
 826 04f4 FFF7FEFF 		bl	srl_init
 827              	.LVL83:
 567:../src/main.c **** 
 828              		.loc 1 567 0
 829 04f8 174D     		ldr	r5, .L122+20
 830 04fa 40F6B832 		movw	r2, #3000
 831 04fe 2146     		mov	r1, r4
 832 0500 2868     		ldr	r0, [r5]
 833 0502 FFF7FEFF 		bl	srl_switch_timeout
 834              	.LVL84:
 569:../src/main.c **** 
 835              		.loc 1 569 0
 836 0506 2868     		ldr	r0, [r5]
 837 0508 FFF7FEFF 		bl	davis_init
 838              	.LVL85:
 572:../src/main.c **** 
 839              		.loc 1 572 0
 840 050c 2046     		mov	r0, r4
 841 050e FFF7FEFF 		bl	davis_wake_up
 842              	.LVL86:
 843 0512 B0FA80F0 		clz	r0, r0
 844 0516 4009     		lsrs	r0, r0, #5
 845 0518 244B     		ldr	r3, .L122+104
 846 051a 1870     		strb	r0, [r3]
 575:../src/main.c **** 		  // turn LCD backlight on..
 847              		.loc 1 575 0
 848 051c 0028     		cmp	r0, #0
 849 051e 49D0     		beq	.L25
 577:../src/main.c **** 
 850              		.loc 1 577 0
 851 0520 2046     		mov	r0, r4
 852 0522 FFF7FEFF 		bl	davis_control_backlight
 853              	.LVL87:
 580:../src/main.c **** 
 854              		.loc 1 580 0
 855 0526 4FF47A70 		mov	r0, #1000
 856 052a FFF7FEFF 		bl	delay_fixed
 857              	.LVL88:
 583:../src/main.c **** 
 858              		.loc 1 583 0
 859 052e 0020     		movs	r0, #0
 860 0530 FFF7FEFF 		bl	davis_control_backlight
 861              	.LVL89:
 586:../src/main.c **** 
 862              		.loc 1 586 0
 863 0534 1A4B     		ldr	r3, .L122+92
 864 0536 0022     		movs	r2, #0
 865 0538 1A70     		strb	r2, [r3]
 591:../src/main.c **** 
 866              		.loc 1 591 0
 867 053a 1D4B     		ldr	r3, .L122+108
 868 053c 1C70     		strb	r4, [r3]
 594:../src/main.c **** 
 869              		.loc 1 594 0
 870 053e FFF7FEFF 		bl	davis_trigger_rxcheck_packet
 871              	.LVL90:
 872 0542 12E7     		b	.L26
 873              	.L123:
 874              		.align	2
 875              	.L122:
 876 0544 00000000 		.word	.LANCHOR3
 877 0548 00000000 		.word	.LANCHOR4
 878 054c 00000000 		.word	.LANCHOR5
 879 0550 00080140 		.word	1073809408
 880 0554 00100240 		.word	1073876992
 881 0558 00000000 		.word	main_kiss_srl_ctx_ptr
 882 055c 00000000 		.word	main_kiss_srl_ctx
 883 0560 00000000 		.word	main_wx_srl_ctx_ptr
 884 0564 00000000 		.word	main_wx_srl_ctx
 885 0568 00000000 		.word	main_target_kiss_baudrate
 886 056c 00000000 		.word	main_target_wx_baudrate
 887 0570 00000000 		.word	.LANCHOR2
 888 0574 00000000 		.word	srl_usart1_tx_buffer
 889 0578 00000000 		.word	srl_usart1_rx_buffer
 890 057c 00380140 		.word	1073821696
 891 0580 00000000 		.word	srl_usart2_tx_buffer
 892 0584 00000000 		.word	srl_usart2_rx_buffer
 893 0588 00440040 		.word	1073759232
 894 058c 00000000 		.word	main_own_path
 895 0590 00000000 		.word	.LANCHOR1
 896 0594 00000000 		.word	.LANCHOR10
 897 0598 00000000 		.word	main_afsk
 898 059c 00000000 		.word	main_ax25
 899 05a0 00000000 		.word	.LANCHOR6
 900 05a4 00000000 		.word	message_callback
 901 05a8 00100140 		.word	1073811456
 902 05ac 00000000 		.word	rte_wx_davis_station_avaliable
 903 05b0 00000000 		.word	.LANCHOR7
 904              	.L25:
 599:../src/main.c **** 		  main_kiss_srl_ctx_ptr->srl_rx_state = SRL_RX_NOT_CONFIG;
 905              		.loc 1 599 0
 906 05b4 4FF41653 		mov	r3, #9600
 907 05b8 924A     		ldr	r2, .L124
 908 05ba 1360     		str	r3, [r2]
 600:../src/main.c **** 
 909              		.loc 1 600 0
 910 05bc 924A     		ldr	r2, .L124+4
 911 05be 1068     		ldr	r0, [r2]
 912 05c0 0022     		movs	r2, #0
 913 05c2 80F84420 		strb	r2, [r0, #68]
 603:../src/main.c **** 		  srl_init(main_wx_srl_ctx_ptr, USART2, srl_usart2_rx_buffer, RX_BUFFER_2_LN, srl_usart2_tx_buffe
 914              		.loc 1 603 0
 915 05c6 0124     		movs	r4, #1
 916 05c8 0394     		str	r4, [sp, #12]
 917 05ca 0293     		str	r3, [sp, #8]
 918 05cc 4FF40073 		mov	r3, #512
 919 05d0 0193     		str	r3, [sp, #4]
 920 05d2 8E4A     		ldr	r2, .L124+8
 921 05d4 0092     		str	r2, [sp]
 922 05d6 8E4A     		ldr	r2, .L124+12
 923 05d8 8E49     		ldr	r1, .L124+16
 924 05da FFF7FEFF 		bl	srl_init
 925              	.LVL91:
 604:../src/main.c **** 
 926              		.loc 1 604 0
 927 05de 0394     		str	r4, [sp, #12]
 928 05e0 8D4B     		ldr	r3, .L124+20
 929 05e2 1B68     		ldr	r3, [r3]
 930 05e4 0293     		str	r3, [sp, #8]
 931 05e6 6023     		movs	r3, #96
 932 05e8 0193     		str	r3, [sp, #4]
 933 05ea 8C4A     		ldr	r2, .L124+24
 934 05ec 0092     		str	r2, [sp]
 935 05ee 8C4A     		ldr	r2, .L124+28
 936 05f0 8C49     		ldr	r1, .L124+32
 937 05f2 8D48     		ldr	r0, .L124+36
 938 05f4 0068     		ldr	r0, [r0]
 939 05f6 FFF7FEFF 		bl	srl_init
 940              	.LVL92:
 941 05fa B6E6     		b	.L26
 942              	.L86:
 610:../src/main.c **** 
 943              		.loc 1 610 0
 944 05fc 8B4D     		ldr	r5, .L124+40
 945 05fe 2B68     		ldr	r3, [r5]
 946 0600 8B4A     		ldr	r2, .L124+44
 947 0602 0121     		movs	r1, #1
 948 0604 8B48     		ldr	r0, .L124+48
 949 0606 FFF7FEFF 		bl	rtu_serial_init
 950              	.LVL93:
 612:../src/main.c **** 
 951              		.loc 1 612 0
 952 060a 2B68     		ldr	r3, [r5]
 953 060c 1B88     		ldrh	r3, [r3]
 954 060e 824E     		ldr	r6, .L124+20
 955 0610 3360     		str	r3, [r6]
 615:../src/main.c **** 	  srl_init(main_wx_srl_ctx_ptr, USART2, srl_usart2_rx_buffer, RX_BUFFER_2_LN, srl_usart2_tx_buffer
 956              		.loc 1 615 0
 957 0612 0124     		movs	r4, #1
 958 0614 0394     		str	r4, [sp, #12]
 959 0616 7B4B     		ldr	r3, .L124
 960 0618 1B68     		ldr	r3, [r3]
 961 061a 0293     		str	r3, [sp, #8]
 962 061c 4FF40073 		mov	r3, #512
 963 0620 0193     		str	r3, [sp, #4]
 964 0622 7A4A     		ldr	r2, .L124+8
 965 0624 0092     		str	r2, [sp]
 966 0626 7A4A     		ldr	r2, .L124+12
 967 0628 7A49     		ldr	r1, .L124+16
 968 062a 7748     		ldr	r0, .L124+4
 969 062c 0068     		ldr	r0, [r0]
 970 062e FFF7FEFF 		bl	srl_init
 971              	.LVL94:
 616:../src/main.c **** 	  srl_switch_tx_delay(main_wx_srl_ctx_ptr, 1);
 972              		.loc 1 616 0
 973 0632 2B68     		ldr	r3, [r5]
 974 0634 7C4D     		ldr	r5, .L124+36
 975 0636 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 976 0638 0393     		str	r3, [sp, #12]
 977 063a 3368     		ldr	r3, [r6]
 978 063c 0293     		str	r3, [sp, #8]
 979 063e 6023     		movs	r3, #96
 980 0640 0193     		str	r3, [sp, #4]
 981 0642 764A     		ldr	r2, .L124+24
 982 0644 0092     		str	r2, [sp]
 983 0646 764A     		ldr	r2, .L124+28
 984 0648 7649     		ldr	r1, .L124+32
 985 064a 2868     		ldr	r0, [r5]
 986 064c FFF7FEFF 		bl	srl_init
 987              	.LVL95:
 617:../src/main.c **** 
 988              		.loc 1 617 0
 989 0650 2146     		mov	r1, r4
 990 0652 2868     		ldr	r0, [r5]
 991 0654 FFF7FEFF 		bl	srl_switch_tx_delay
 992              	.LVL96:
 620:../src/main.c **** 
 993              		.loc 1 620 0
 994 0658 774B     		ldr	r3, .L124+52
 995 065a 1C70     		strb	r4, [r3]
 622:../src/main.c ****   }
 996              		.loc 1 622 0
 997 065c FFF7FEFF 		bl	rtu_serial_start
 998              	.LVL97:
 999 0660 83E6     		b	.L26
 1000              	.L87:
 692:../src/main.c **** #endif
 1001              		.loc 1 692 0
 1002 0662 764B     		ldr	r3, .L124+56
 1003 0664 0B22     		movs	r2, #11
 1004 0666 4FF40061 		mov	r1, #2048
 1005 066a 7548     		ldr	r0, .L124+60
 1006 066c FFF7FEFF 		bl	dallas_init
 1007              	.LVL98:
 703:../src/main.c **** 		  // client initialization
 1008              		.loc 1 703 0
 1009 0670 2368     		ldr	r3, [r4]
 1010 0672 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1011 0674 012B     		cmp	r3, #1
 1012 0676 06D1     		bne	.L29
 705:../src/main.c **** 	  }
 1013              		.loc 1 705 0
 1014 0678 724B     		ldr	r3, .L124+64
 1015 067a 1A68     		ldr	r2, [r3]
 1016 067c 6A4B     		ldr	r3, .L124+36
 1017 067e 1968     		ldr	r1, [r3]
 1018 0680 7148     		ldr	r0, .L124+68
 1019 0682 FFF7FEFF 		bl	umb_master_init
 1020              	.LVL99:
 1021              	.L29:
 708:../src/main.c **** 		  analog_anemometer_init(main_config_data_mode->wx_anemometer_pulses_constant, 38, 100, 1);
 1022              		.loc 1 708 0
 1023 0686 714B     		ldr	r3, .L124+72
 1024 0688 1868     		ldr	r0, [r3]
 1025 068a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 1026 068c 13F0040F 		tst	r3, #4
 1027 0690 06D1     		bne	.L30
 709:../src/main.c **** 	  }
 1028              		.loc 1 709 0
 1029 0692 0123     		movs	r3, #1
 1030 0694 6422     		movs	r2, #100
 1031 0696 2621     		movs	r1, #38
 1032 0698 8079     		ldrb	r0, [r0, #6]	@ zero_extendqisi2
 1033 069a FFF7FEFF 		bl	analog_anemometer_init
 1034              	.LVL100:
 1035 069e 94E6     		b	.L28
 1036              	.L30:
 712:../src/main.c **** 	  }
 1037              		.loc 1 712 0
 1038 06a0 0123     		movs	r3, #1
 1039 06a2 6422     		movs	r2, #100
 1040 06a4 2621     		movs	r1, #38
 1041 06a6 8079     		ldrb	r0, [r0, #6]	@ zero_extendqisi2
 1042 06a8 FFF7FEFF 		bl	analog_anemometer_init
 1043              	.LVL101:
 1044 06ac 8DE6     		b	.L28
 1045              	.L88:
 720:../src/main.c **** 	 ms5611_read_calibration(SensorCalData, &rte_wx_ms5611_qf);
 1046              		.loc 1 720 0
 1047 06ae 684C     		ldr	r4, .L124+76
 1048 06b0 2046     		mov	r0, r4
 1049 06b2 FFF7FEFF 		bl	ms5611_reset
 1050              	.LVL102:
 721:../src/main.c **** 	 ms5611_trigger_measure(0, 0);
 1051              		.loc 1 721 0
 1052 06b6 2146     		mov	r1, r4
 1053 06b8 6648     		ldr	r0, .L124+80
 1054 06ba FFF7FEFF 		bl	ms5611_read_calibration
 1055              	.LVL103:
 722:../src/main.c **** 	}
 1056              		.loc 1 722 0
 1057 06be 0021     		movs	r1, #0
 1058 06c0 0846     		mov	r0, r1
 1059 06c2 FFF7FEFF 		bl	ms5611_trigger_measure
 1060              	.LVL104:
 1061 06c6 8BE6     		b	.L32
 1062              	.L89:
 725:../src/main.c **** 	 bme280_setup();
 1063              		.loc 1 725 0
 1064 06c8 6348     		ldr	r0, .L124+84
 1065 06ca FFF7FEFF 		bl	bme280_reset
 1066              	.LVL105:
 726:../src/main.c **** 	 bme280_read_calibration(bme280_calibration_data);
 1067              		.loc 1 726 0
 1068 06ce FFF7FEFF 		bl	bme280_setup
 1069              	.LVL106:
 727:../src/main.c **** 	}
 1070              		.loc 1 727 0
 1071 06d2 6248     		ldr	r0, .L124+88
 1072 06d4 FFF7FEFF 		bl	bme280_read_calibration
 1073              	.LVL107:
 1074 06d8 82E6     		b	.L32
 1075              	.L90:
 732:../src/main.c **** 
 1076              		.loc 1 732 0
 1077 06da 614B     		ldr	r3, .L124+92
 1078 06dc 1A68     		ldr	r2, [r3]
 1079 06de 92F90C30 		ldrsb	r3, [r2, #12]
 1080 06e2 92F91410 		ldrsb	r1, [r2, #20]
 1081 06e6 1532     		adds	r2, r2, #21
 1082 06e8 5E4C     		ldr	r4, .L124+96
 1083 06ea 0492     		str	r2, [sp, #16]
 1084 06ec 5E4A     		ldr	r2, .L124+100
 1085 06ee 92F90020 		ldrsb	r2, [r2]
 1086 06f2 0392     		str	r2, [sp, #12]
 1087 06f4 0291     		str	r1, [sp, #8]
 1088 06f6 5D4A     		ldr	r2, .L124+104
 1089 06f8 0192     		str	r2, [sp, #4]
 1090 06fa 5D4A     		ldr	r2, .L124+108
 1091 06fc 92F90020 		ldrsb	r2, [r2]
 1092 0700 0092     		str	r2, [sp]
 1093 0702 5C4A     		ldr	r2, .L124+112
 1094 0704 5C49     		ldr	r1, .L124+116
 1095 0706 2046     		mov	r0, r4
 1096 0708 FFF7FEFF 		bl	sprintf
 1097              	.LVL108:
 1098 070c C3B2     		uxtb	r3, r0
 1099 070e 5B4A     		ldr	r2, .L124+120
 1100 0710 1370     		strb	r3, [r2]
 735:../src/main.c **** 
 1101              		.loc 1 735 0
 1102 0712 0022     		movs	r2, #0
 1103 0714 E254     		strb	r2, [r4, r3]
 739:../src/main.c **** 
 1104              		.loc 1 739 0
 1105 0716 4FF40072 		mov	r2, #512
 1106 071a 0192     		str	r2, [sp, #4]
 1107 071c 584A     		ldr	r2, .L124+124
 1108 071e 5269     		ldr	r2, [r2, #20]
 1109 0720 0092     		str	r2, [sp]
 1110 0722 2246     		mov	r2, r4
 1111 0724 0321     		movs	r1, #3
 1112 0726 5748     		ldr	r0, .L124+128
 1113 0728 FFF7FEFF 		bl	ax25_sendVia_toBuffer
 1114              	.LVL109:
 1115 072c 0790     		str	r0, [sp, #28]
 1116              	.L35:
 743:../src/main.c **** 
 1117              		.loc 1 743 0 discriminator 2
 1118 072e 544B     		ldr	r3, .L124+124
 1119 0730 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 1120 0734 012B     		cmp	r3, #1
 1121 0736 01D0     		beq	.L34
 743:../src/main.c **** 
 1122              		.loc 1 743 0 is_stmt 0 discriminator 1
 1123 0738 042B     		cmp	r3, #4
 1124 073a F8D1     		bne	.L35
 1125              	.L34:
 757:../src/main.c **** 
 1126              		.loc 1 757 0 is_stmt 1
 1127 073c 01B2     		sxth	r1, r0
 1128 073e 324B     		ldr	r3, .L124+4
 1129 0740 1868     		ldr	r0, [r3]
 1130 0742 FFF7FEFF 		bl	srl_start_tx
 1131              	.LVL110:
 1132 0746 504B     		ldr	r3, .L124+132
 1133 0748 1870     		strb	r0, [r3]
 1134 074a 4EE6     		b	.L33
 1135              	.L91:
 792:../src/main.c **** 	}
 1136              		.loc 1 792 0
 1137 074c 374B     		ldr	r3, .L124+40
 1138 074e 1B68     		ldr	r3, [r3]
 1139 0750 3C4A     		ldr	r2, .L124+64
 1140 0752 1268     		ldr	r2, [r2]
 1141 0754 4D48     		ldr	r0, .L124+136
 1142 0756 0068     		ldr	r0, [r0]
 1143 0758 FFF7FEFF 		bl	wx_get_all_measurements
 1144              	.LVL111:
 1145 075c 5DE6     		b	.L36
 1146              	.L92:
 798:../src/main.c **** 
 1147              		.loc 1 798 0
 1148 075e 4C49     		ldr	r1, .L124+140
 1149 0760 4C48     		ldr	r0, .L124+144
 1150 0762 FFF7FEFF 		bl	ve_direct_parser_init
 1151              	.LVL112:
 803:../src/main.c **** 
 1152              		.loc 1 803 0
 1153 0766 284C     		ldr	r4, .L124+4
 1154 0768 3222     		movs	r2, #50
 1155 076a 0121     		movs	r1, #1
 1156 076c 2068     		ldr	r0, [r4]
 1157 076e FFF7FEFF 		bl	srl_switch_timeout
 1158              	.LVL113:
 806:../src/main.c ****   }
 1159              		.loc 1 806 0
 1160 0772 0022     		movs	r2, #0
 1161 0774 0292     		str	r2, [sp, #8]
 1162 0776 0192     		str	r2, [sp, #4]
 1163 0778 0092     		str	r2, [sp]
 1164 077a 1346     		mov	r3, r2
 1165 077c BA21     		movs	r1, #186
 1166 077e 2068     		ldr	r0, [r4]
 1167 0780 FFF7FEFF 		bl	srl_receive_data
 1168              	.LVL114:
 1169 0784 5BE6     		b	.L38
 1170              	.L93:
 849:../src/main.c ****   }
 1171              		.loc 1 849 0
 1172 0786 2F4B     		ldr	r3, .L124+64
 1173 0788 1A68     		ldr	r2, [r3]
 1174 078a 2F49     		ldr	r1, .L124+68
 1175 078c 4248     		ldr	r0, .L124+148
 1176 078e FFF7FEFF 		bl	umb_0x26_status_request
 1177              	.LVL115:
 1178 0792 67E6     		b	.L39
 1179              	.L94:
 860:../src/main.c **** 	   beacon_send_own();
 1180              		.loc 1 860 0
 1181 0794 FFF7FEFF 		bl	beacon_send_own
 1182              	.LVL116:
 1183 0798 6DE6     		b	.L40
 1184              	.LVL117:
 1185              	.L115:
 1186              	.LBB50:
 1187              	.LBB51:
 1188              	.LBB52:
 1189              	.LBB53:
 1190              		.file 4 "../system/include/cmsis/cmsis_gcc.h"
   1:../system/include/cmsis/cmsis_gcc.h **** /**************************************************************************//**
   2:../system/include/cmsis/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../system/include/cmsis/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:../system/include/cmsis/cmsis_gcc.h ****  * @version  V4.30
   5:../system/include/cmsis/cmsis_gcc.h ****  * @date     20. October 2015
   6:../system/include/cmsis/cmsis_gcc.h ****  ******************************************************************************/
   7:../system/include/cmsis/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:../system/include/cmsis/cmsis_gcc.h **** 
   9:../system/include/cmsis/cmsis_gcc.h ****    All rights reserved.
  10:../system/include/cmsis/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:../system/include/cmsis/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:../system/include/cmsis/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:../system/include/cmsis/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:../system/include/cmsis/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:../system/include/cmsis/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:../system/include/cmsis/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:../system/include/cmsis/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:../system/include/cmsis/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:../system/include/cmsis/cmsis_gcc.h ****      specific prior written permission.
  20:../system/include/cmsis/cmsis_gcc.h ****    *
  21:../system/include/cmsis/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:../system/include/cmsis/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:../system/include/cmsis/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:../system/include/cmsis/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:../system/include/cmsis/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:../system/include/cmsis/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:../system/include/cmsis/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:../system/include/cmsis/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:../system/include/cmsis/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:../system/include/cmsis/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:../system/include/cmsis/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:../system/include/cmsis/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:../system/include/cmsis/cmsis_gcc.h **** 
  34:../system/include/cmsis/cmsis_gcc.h **** 
  35:../system/include/cmsis/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:../system/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:../system/include/cmsis/cmsis_gcc.h **** 
  38:../system/include/cmsis/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:../system/include/cmsis/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:../system/include/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:../system/include/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:../system/include/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:../system/include/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:../system/include/cmsis/cmsis_gcc.h **** #endif
  45:../system/include/cmsis/cmsis_gcc.h **** 
  46:../system/include/cmsis/cmsis_gcc.h **** 
  47:../system/include/cmsis/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:../system/include/cmsis/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:../system/include/cmsis/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:../system/include/cmsis/cmsis_gcc.h ****   @{
  51:../system/include/cmsis/cmsis_gcc.h ****  */
  52:../system/include/cmsis/cmsis_gcc.h **** 
  53:../system/include/cmsis/cmsis_gcc.h **** /**
  54:../system/include/cmsis/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:../system/include/cmsis/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:../system/include/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:../system/include/cmsis/cmsis_gcc.h ****  */
  58:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:../system/include/cmsis/cmsis_gcc.h **** {
  60:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:../system/include/cmsis/cmsis_gcc.h **** }
  62:../system/include/cmsis/cmsis_gcc.h **** 
  63:../system/include/cmsis/cmsis_gcc.h **** 
  64:../system/include/cmsis/cmsis_gcc.h **** /**
  65:../system/include/cmsis/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:../system/include/cmsis/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:../system/include/cmsis/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:../system/include/cmsis/cmsis_gcc.h ****  */
  69:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:../system/include/cmsis/cmsis_gcc.h **** {
  71:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:../system/include/cmsis/cmsis_gcc.h **** }
  73:../system/include/cmsis/cmsis_gcc.h **** 
  74:../system/include/cmsis/cmsis_gcc.h **** 
  75:../system/include/cmsis/cmsis_gcc.h **** /**
  76:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get Control Register
  77:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:../system/include/cmsis/cmsis_gcc.h ****   \return               Control Register value
  79:../system/include/cmsis/cmsis_gcc.h ****  */
  80:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:../system/include/cmsis/cmsis_gcc.h **** {
  82:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
  83:../system/include/cmsis/cmsis_gcc.h **** 
  84:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:../system/include/cmsis/cmsis_gcc.h ****   return(result);
  86:../system/include/cmsis/cmsis_gcc.h **** }
  87:../system/include/cmsis/cmsis_gcc.h **** 
  88:../system/include/cmsis/cmsis_gcc.h **** 
  89:../system/include/cmsis/cmsis_gcc.h **** /**
  90:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set Control Register
  91:../system/include/cmsis/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:../system/include/cmsis/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:../system/include/cmsis/cmsis_gcc.h ****  */
  94:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:../system/include/cmsis/cmsis_gcc.h **** {
  96:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:../system/include/cmsis/cmsis_gcc.h **** }
  98:../system/include/cmsis/cmsis_gcc.h **** 
  99:../system/include/cmsis/cmsis_gcc.h **** 
 100:../system/include/cmsis/cmsis_gcc.h **** /**
 101:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:../system/include/cmsis/cmsis_gcc.h ****   \return               IPSR Register value
 104:../system/include/cmsis/cmsis_gcc.h ****  */
 105:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:../system/include/cmsis/cmsis_gcc.h **** {
 107:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 108:../system/include/cmsis/cmsis_gcc.h **** 
 109:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 111:../system/include/cmsis/cmsis_gcc.h **** }
 112:../system/include/cmsis/cmsis_gcc.h **** 
 113:../system/include/cmsis/cmsis_gcc.h **** 
 114:../system/include/cmsis/cmsis_gcc.h **** /**
 115:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get APSR Register
 116:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:../system/include/cmsis/cmsis_gcc.h ****   \return               APSR Register value
 118:../system/include/cmsis/cmsis_gcc.h ****  */
 119:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:../system/include/cmsis/cmsis_gcc.h **** {
 121:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 122:../system/include/cmsis/cmsis_gcc.h **** 
 123:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 125:../system/include/cmsis/cmsis_gcc.h **** }
 126:../system/include/cmsis/cmsis_gcc.h **** 
 127:../system/include/cmsis/cmsis_gcc.h **** 
 128:../system/include/cmsis/cmsis_gcc.h **** /**
 129:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:../system/include/cmsis/cmsis_gcc.h **** 
 132:../system/include/cmsis/cmsis_gcc.h ****     \return               xPSR Register value
 133:../system/include/cmsis/cmsis_gcc.h ****  */
 134:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:../system/include/cmsis/cmsis_gcc.h **** {
 136:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 137:../system/include/cmsis/cmsis_gcc.h **** 
 138:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 140:../system/include/cmsis/cmsis_gcc.h **** }
 141:../system/include/cmsis/cmsis_gcc.h **** 
 142:../system/include/cmsis/cmsis_gcc.h **** 
 143:../system/include/cmsis/cmsis_gcc.h **** /**
 144:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:../system/include/cmsis/cmsis_gcc.h ****   \return               PSP Register value
 147:../system/include/cmsis/cmsis_gcc.h ****  */
 148:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:../system/include/cmsis/cmsis_gcc.h **** {
 150:../system/include/cmsis/cmsis_gcc.h ****   register uint32_t result;
 151:../system/include/cmsis/cmsis_gcc.h **** 
 152:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 154:../system/include/cmsis/cmsis_gcc.h **** }
 155:../system/include/cmsis/cmsis_gcc.h **** 
 156:../system/include/cmsis/cmsis_gcc.h **** 
 157:../system/include/cmsis/cmsis_gcc.h **** /**
 158:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:../system/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:../system/include/cmsis/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:../system/include/cmsis/cmsis_gcc.h ****  */
 162:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:../system/include/cmsis/cmsis_gcc.h **** {
 164:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:../system/include/cmsis/cmsis_gcc.h **** }
 166:../system/include/cmsis/cmsis_gcc.h **** 
 167:../system/include/cmsis/cmsis_gcc.h **** 
 168:../system/include/cmsis/cmsis_gcc.h **** /**
 169:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:../system/include/cmsis/cmsis_gcc.h ****   \return               MSP Register value
 172:../system/include/cmsis/cmsis_gcc.h ****  */
 173:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:../system/include/cmsis/cmsis_gcc.h **** {
 175:../system/include/cmsis/cmsis_gcc.h ****   register uint32_t result;
 176:../system/include/cmsis/cmsis_gcc.h **** 
 177:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 179:../system/include/cmsis/cmsis_gcc.h **** }
 180:../system/include/cmsis/cmsis_gcc.h **** 
 181:../system/include/cmsis/cmsis_gcc.h **** 
 182:../system/include/cmsis/cmsis_gcc.h **** /**
 183:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:../system/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:../system/include/cmsis/cmsis_gcc.h **** 
 186:../system/include/cmsis/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:../system/include/cmsis/cmsis_gcc.h ****  */
 188:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:../system/include/cmsis/cmsis_gcc.h **** {
 190:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:../system/include/cmsis/cmsis_gcc.h **** }
 192:../system/include/cmsis/cmsis_gcc.h **** 
 193:../system/include/cmsis/cmsis_gcc.h **** 
 194:../system/include/cmsis/cmsis_gcc.h **** /**
 195:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:../system/include/cmsis/cmsis_gcc.h ****   \return               Priority Mask value
 198:../system/include/cmsis/cmsis_gcc.h ****  */
 199:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:../system/include/cmsis/cmsis_gcc.h **** {
 201:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 202:../system/include/cmsis/cmsis_gcc.h **** 
 203:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 205:../system/include/cmsis/cmsis_gcc.h **** }
 206:../system/include/cmsis/cmsis_gcc.h **** 
 207:../system/include/cmsis/cmsis_gcc.h **** 
 208:../system/include/cmsis/cmsis_gcc.h **** /**
 209:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:../system/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:../system/include/cmsis/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:../system/include/cmsis/cmsis_gcc.h ****  */
 213:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:../system/include/cmsis/cmsis_gcc.h **** {
 215:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:../system/include/cmsis/cmsis_gcc.h **** }
 217:../system/include/cmsis/cmsis_gcc.h **** 
 218:../system/include/cmsis/cmsis_gcc.h **** 
 219:../system/include/cmsis/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:../system/include/cmsis/cmsis_gcc.h **** 
 221:../system/include/cmsis/cmsis_gcc.h **** /**
 222:../system/include/cmsis/cmsis_gcc.h ****   \brief   Enable FIQ
 223:../system/include/cmsis/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:../system/include/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:../system/include/cmsis/cmsis_gcc.h ****  */
 226:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:../system/include/cmsis/cmsis_gcc.h **** {
 228:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:../system/include/cmsis/cmsis_gcc.h **** }
 230:../system/include/cmsis/cmsis_gcc.h **** 
 231:../system/include/cmsis/cmsis_gcc.h **** 
 232:../system/include/cmsis/cmsis_gcc.h **** /**
 233:../system/include/cmsis/cmsis_gcc.h ****   \brief   Disable FIQ
 234:../system/include/cmsis/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:../system/include/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:../system/include/cmsis/cmsis_gcc.h ****  */
 237:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:../system/include/cmsis/cmsis_gcc.h **** {
 239:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:../system/include/cmsis/cmsis_gcc.h **** }
 241:../system/include/cmsis/cmsis_gcc.h **** 
 242:../system/include/cmsis/cmsis_gcc.h **** 
 243:../system/include/cmsis/cmsis_gcc.h **** /**
 244:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get Base Priority
 245:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:../system/include/cmsis/cmsis_gcc.h ****   \return               Base Priority register value
 247:../system/include/cmsis/cmsis_gcc.h ****  */
 248:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:../system/include/cmsis/cmsis_gcc.h **** {
 250:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 251:../system/include/cmsis/cmsis_gcc.h **** 
 252:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 254:../system/include/cmsis/cmsis_gcc.h **** }
 255:../system/include/cmsis/cmsis_gcc.h **** 
 256:../system/include/cmsis/cmsis_gcc.h **** 
 257:../system/include/cmsis/cmsis_gcc.h **** /**
 258:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set Base Priority
 259:../system/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:../system/include/cmsis/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:../system/include/cmsis/cmsis_gcc.h ****  */
 262:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:../system/include/cmsis/cmsis_gcc.h **** {
 264:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:../system/include/cmsis/cmsis_gcc.h **** }
 266:../system/include/cmsis/cmsis_gcc.h **** 
 267:../system/include/cmsis/cmsis_gcc.h **** 
 268:../system/include/cmsis/cmsis_gcc.h **** /**
 269:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:../system/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:../system/include/cmsis/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:../system/include/cmsis/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:../system/include/cmsis/cmsis_gcc.h ****  */
 274:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:../system/include/cmsis/cmsis_gcc.h **** {
 276:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:../system/include/cmsis/cmsis_gcc.h **** }
 278:../system/include/cmsis/cmsis_gcc.h **** 
 279:../system/include/cmsis/cmsis_gcc.h **** 
 280:../system/include/cmsis/cmsis_gcc.h **** /**
 281:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:../system/include/cmsis/cmsis_gcc.h ****   \return               Fault Mask register value
 284:../system/include/cmsis/cmsis_gcc.h ****  */
 285:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:../system/include/cmsis/cmsis_gcc.h **** {
 287:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 288:../system/include/cmsis/cmsis_gcc.h **** 
 289:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 291:../system/include/cmsis/cmsis_gcc.h **** }
 292:../system/include/cmsis/cmsis_gcc.h **** 
 293:../system/include/cmsis/cmsis_gcc.h **** 
 294:../system/include/cmsis/cmsis_gcc.h **** /**
 295:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:../system/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:../system/include/cmsis/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:../system/include/cmsis/cmsis_gcc.h ****  */
 299:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:../system/include/cmsis/cmsis_gcc.h **** {
 301:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:../system/include/cmsis/cmsis_gcc.h **** }
 303:../system/include/cmsis/cmsis_gcc.h **** 
 304:../system/include/cmsis/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:../system/include/cmsis/cmsis_gcc.h **** 
 306:../system/include/cmsis/cmsis_gcc.h **** 
 307:../system/include/cmsis/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:../system/include/cmsis/cmsis_gcc.h **** 
 309:../system/include/cmsis/cmsis_gcc.h **** /**
 310:../system/include/cmsis/cmsis_gcc.h ****   \brief   Get FPSCR
 311:../system/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:../system/include/cmsis/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:../system/include/cmsis/cmsis_gcc.h ****  */
 314:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:../system/include/cmsis/cmsis_gcc.h **** {
 316:../system/include/cmsis/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:../system/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 318:../system/include/cmsis/cmsis_gcc.h **** 
 319:../system/include/cmsis/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("");
 321:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("");
 323:../system/include/cmsis/cmsis_gcc.h ****   return(result);
 324:../system/include/cmsis/cmsis_gcc.h **** #else
 325:../system/include/cmsis/cmsis_gcc.h ****    return(0);
 326:../system/include/cmsis/cmsis_gcc.h **** #endif
 327:../system/include/cmsis/cmsis_gcc.h **** }
 328:../system/include/cmsis/cmsis_gcc.h **** 
 329:../system/include/cmsis/cmsis_gcc.h **** 
 330:../system/include/cmsis/cmsis_gcc.h **** /**
 331:../system/include/cmsis/cmsis_gcc.h ****   \brief   Set FPSCR
 332:../system/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:../system/include/cmsis/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:../system/include/cmsis/cmsis_gcc.h ****  */
 335:../system/include/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:../system/include/cmsis/cmsis_gcc.h **** {
 337:../system/include/cmsis/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:../system/include/cmsis/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("");
 340:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("");
 342:../system/include/cmsis/cmsis_gcc.h **** #endif
 343:../system/include/cmsis/cmsis_gcc.h **** }
 344:../system/include/cmsis/cmsis_gcc.h **** 
 345:../system/include/cmsis/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:../system/include/cmsis/cmsis_gcc.h **** 
 347:../system/include/cmsis/cmsis_gcc.h **** 
 348:../system/include/cmsis/cmsis_gcc.h **** 
 349:../system/include/cmsis/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:../system/include/cmsis/cmsis_gcc.h **** 
 351:../system/include/cmsis/cmsis_gcc.h **** 
 352:../system/include/cmsis/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:../system/include/cmsis/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:../system/include/cmsis/cmsis_gcc.h ****   Access to dedicated instructions
 355:../system/include/cmsis/cmsis_gcc.h ****   @{
 356:../system/include/cmsis/cmsis_gcc.h **** */
 357:../system/include/cmsis/cmsis_gcc.h **** 
 358:../system/include/cmsis/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:../system/include/cmsis/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:../system/include/cmsis/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:../system/include/cmsis/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:../system/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:../system/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:../system/include/cmsis/cmsis_gcc.h **** #else
 365:../system/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:../system/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:../system/include/cmsis/cmsis_gcc.h **** #endif
 368:../system/include/cmsis/cmsis_gcc.h **** 
 369:../system/include/cmsis/cmsis_gcc.h **** /**
 370:../system/include/cmsis/cmsis_gcc.h ****   \brief   No Operation
 371:../system/include/cmsis/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:../system/include/cmsis/cmsis_gcc.h ****  */
 373:../system/include/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:../system/include/cmsis/cmsis_gcc.h **** {
 375:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:../system/include/cmsis/cmsis_gcc.h **** }
 377:../system/include/cmsis/cmsis_gcc.h **** 
 378:../system/include/cmsis/cmsis_gcc.h **** 
 379:../system/include/cmsis/cmsis_gcc.h **** /**
 380:../system/include/cmsis/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:../system/include/cmsis/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:../system/include/cmsis/cmsis_gcc.h ****  */
 383:../system/include/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:../system/include/cmsis/cmsis_gcc.h **** {
 385:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:../system/include/cmsis/cmsis_gcc.h **** }
 387:../system/include/cmsis/cmsis_gcc.h **** 
 388:../system/include/cmsis/cmsis_gcc.h **** 
 389:../system/include/cmsis/cmsis_gcc.h **** /**
 390:../system/include/cmsis/cmsis_gcc.h ****   \brief   Wait For Event
 391:../system/include/cmsis/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:../system/include/cmsis/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:../system/include/cmsis/cmsis_gcc.h ****  */
 394:../system/include/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:../system/include/cmsis/cmsis_gcc.h **** {
 396:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:../system/include/cmsis/cmsis_gcc.h **** }
 398:../system/include/cmsis/cmsis_gcc.h **** 
 399:../system/include/cmsis/cmsis_gcc.h **** 
 400:../system/include/cmsis/cmsis_gcc.h **** /**
 401:../system/include/cmsis/cmsis_gcc.h ****   \brief   Send Event
 402:../system/include/cmsis/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:../system/include/cmsis/cmsis_gcc.h ****  */
 404:../system/include/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:../system/include/cmsis/cmsis_gcc.h **** {
 406:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:../system/include/cmsis/cmsis_gcc.h **** }
 408:../system/include/cmsis/cmsis_gcc.h **** 
 409:../system/include/cmsis/cmsis_gcc.h **** 
 410:../system/include/cmsis/cmsis_gcc.h **** /**
 411:../system/include/cmsis/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:../system/include/cmsis/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:../system/include/cmsis/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:../system/include/cmsis/cmsis_gcc.h ****            after the instruction has been completed.
 415:../system/include/cmsis/cmsis_gcc.h ****  */
 416:../system/include/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:../system/include/cmsis/cmsis_gcc.h **** {
 418:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:../system/include/cmsis/cmsis_gcc.h **** }
 420:../system/include/cmsis/cmsis_gcc.h **** 
 421:../system/include/cmsis/cmsis_gcc.h **** 
 422:../system/include/cmsis/cmsis_gcc.h **** /**
 423:../system/include/cmsis/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:../system/include/cmsis/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:../system/include/cmsis/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:../system/include/cmsis/cmsis_gcc.h ****  */
 427:../system/include/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:../system/include/cmsis/cmsis_gcc.h **** {
 429:../system/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 1191              		.loc 4 429 0
 1192              		.syntax unified
 1193              	@ 429 "../system/include/cmsis/cmsis_gcc.h" 1
 1194 079a BFF34F8F 		dsb 0xF
 1195              	@ 0 "" 2
 1196              		.thumb
 1197              		.syntax unified
 1198              	.LBE53:
 1199              	.LBE52:
1629:../system/include/cmsis/core_cm3.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
 1200              		.loc 2 1629 0
 1201 079e 3F49     		ldr	r1, .L124+152
 1202 07a0 CA68     		ldr	r2, [r1, #12]
 1203 07a2 02F4E062 		and	r2, r2, #1792
1628:../system/include/cmsis/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 1204              		.loc 2 1628 0
 1205 07a6 3E4B     		ldr	r3, .L124+156
 1206 07a8 1343     		orrs	r3, r3, r2
 1207 07aa CB60     		str	r3, [r1, #12]
 1208              	.LBB54:
 1209              	.LBB55:
 1210              		.loc 4 429 0
 1211              		.syntax unified
 1212              	@ 429 "../system/include/cmsis/cmsis_gcc.h" 1
 1213 07ac BFF34F8F 		dsb 0xF
 1214              	@ 0 "" 2
 1215              		.thumb
 1216              		.syntax unified
 1217              	.L43:
 1218              	.LBE55:
 1219              	.LBE54:
 1220              	.LBB56:
 1221              	.LBB57:
 375:../system/include/cmsis/cmsis_gcc.h **** }
 1222              		.loc 4 375 0
 1223              		.syntax unified
 1224              	@ 375 "../system/include/cmsis/cmsis_gcc.h" 1
 1225 07b0 00BF     		nop
 1226              	@ 0 "" 2
 1227              		.thumb
 1228              		.syntax unified
 1229 07b2 FDE7     		b	.L43
 1230              	.L46:
 1231              	.LBE57:
 1232              	.LBE56:
 1233              	.LBE51:
 1234              	.LBE50:
 861:../src/main.c ****    }
 862:../src/main.c **** 
 863:../src/main.c ****   // Infinite loop
 864:../src/main.c ****   while (1)
 865:../src/main.c ****     {
 866:../src/main.c **** 	  // incrementing current cpu ticks
 867:../src/main.c **** 	  main_current_cpu_idle_ticks++;
 868:../src/main.c **** 
 869:../src/main.c **** 	    if (rte_main_reboot_req == 1) {
 870:../src/main.c **** 	    	NVIC_SystemReset();
 871:../src/main.c **** 	    }
 872:../src/main.c **** 	    else {
 873:../src/main.c **** 	    	;
 874:../src/main.c **** 	    }
 875:../src/main.c **** 
 876:../src/main.c **** #if defined(PARATNC_HWREV_A) || defined(PARATNC_HWREV_B) || defined(PARATNC_HWREV_C)
 877:../src/main.c **** 	    // read the state of a button input
 878:../src/main.c **** 	  	if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
 879:../src/main.c **** 
 880:../src/main.c **** 	  		// if modem is not busy on transmitting something and the button is not
 881:../src/main.c **** 	  		// inhibited
 882:../src/main.c **** 	  		if (main_afsk.sending == false && button_inhibit == 0) {
 883:../src/main.c **** 
 884:../src/main.c **** 	  			// wait for radio channel to be released
 885:../src/main.c **** 	  			while(main_ax25.dcd == true);
 886:../src/main.c **** 
 887:../src/main.c **** 	  			if ((main_config_data_mode->wx & WX_ENABLED) == 0) {
 888:../src/main.c **** 
 889:../src/main.c **** 	  				beacon_send_own();
 890:../src/main.c **** 	  			}
 891:../src/main.c **** 	  			else {
 892:../src/main.c **** 
 893:../src/main.c **** 					srl_wait_for_tx_completion(main_kiss_srl_ctx_ptr);
 1235              		.loc 1 893 0
 1236 07b4 144B     		ldr	r3, .L124+4
 1237 07b6 1868     		ldr	r0, [r3]
 1238 07b8 FFF7FEFF 		bl	srl_wait_for_tx_completion
 1239              	.LVL118:
 894:../src/main.c **** 
 895:../src/main.c **** 					SendWXFrameToBuffer(rte_wx_average_windspeed, rte_wx_max_windspeed, rte_wx_average_winddirecti
 1240              		.loc 1 895 0
 1241 07bc 394B     		ldr	r3, .L124+160
 1242 07be 1A88     		ldrh	r2, [r3]
 1243 07c0 394B     		ldr	r3, .L124+164
 1244 07c2 1988     		ldrh	r1, [r3]
 1245 07c4 394B     		ldr	r3, .L124+168
 1246 07c6 1888     		ldrh	r0, [r3]
 1247 07c8 07AB     		add	r3, sp, #28
 1248 07ca 0493     		str	r3, [sp, #16]
 1249 07cc 4FF40073 		mov	r3, #512
 1250 07d0 0393     		str	r3, [sp, #12]
 1251 07d2 2B4B     		ldr	r3, .L124+124
 1252 07d4 5B69     		ldr	r3, [r3, #20]
 1253 07d6 0293     		str	r3, [sp, #8]
 1254 07d8 354B     		ldr	r3, .L124+172
 1255 07da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1256 07dc 0193     		str	r3, [sp, #4]
 1257 07de 354B     		ldr	r3, .L124+176
 1258 07e0 1B68     		ldr	r3, [r3]	@ float
 1259 07e2 0093     		str	r3, [sp]	@ float
 1260 07e4 344B     		ldr	r3, .L124+180
 1261 07e6 1B68     		ldr	r3, [r3]	@ float
 1262 07e8 FFF7FEFF 		bl	SendWXFrameToBuffer
 1263              	.LVL119:
 896:../src/main.c **** 
 897:../src/main.c **** 					if (main_kiss_enabled == 1) {
 1264              		.loc 1 897 0
 1265 07ec 334B     		ldr	r3, .L124+184
 1266 07ee 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 1267              	.LVL120:
 1268 07f0 012C     		cmp	r4, #1
 1269 07f2 40F09680 		bne	.L80
 898:../src/main.c **** 						srl_start_tx(main_kiss_srl_ctx_ptr, ln);
 1270              		.loc 1 898 0
 1271 07f6 BDF91C10 		ldrsh	r1, [sp, #28]
 1272 07fa 034B     		ldr	r3, .L124+4
 1273 07fc 1868     		ldr	r0, [r3]
 1274 07fe FFF7FEFF 		bl	srl_start_tx
 1275              	.LVL121:
 1276 0802 5EE0     		b	.L44
 1277              	.L125:
 1278              		.align	2
 1279              	.L124:
 1280 0804 00000000 		.word	main_target_kiss_baudrate
 1281 0808 00000000 		.word	main_kiss_srl_ctx_ptr
 1282 080c 00000000 		.word	srl_usart1_tx_buffer
 1283 0810 00000000 		.word	srl_usart1_rx_buffer
 1284 0814 00380140 		.word	1073821696
 1285 0818 00000000 		.word	main_target_wx_baudrate
 1286 081c 00000000 		.word	srl_usart2_tx_buffer
 1287 0820 00000000 		.word	srl_usart2_rx_buffer
 1288 0824 00440040 		.word	1073759232
 1289 0828 00000000 		.word	main_wx_srl_ctx_ptr
 1290 082c 00000000 		.word	.LANCHOR8
 1291 0830 00000000 		.word	main_wx_srl_ctx
 1292 0834 00000000 		.word	rte_rtu_pool_queue
 1293 0838 00000000 		.word	.LANCHOR9
 1294 083c 00000000 		.word	rte_wx_dallas_average
 1295 0840 00100140 		.word	1073811456
 1296 0844 00000000 		.word	.LANCHOR11
 1297 0848 00000000 		.word	rte_wx_umb_context
 1298 084c 00000000 		.word	.LANCHOR2
 1299 0850 00000000 		.word	rte_wx_ms5611_qf
 1300 0854 00000000 		.word	SensorCalData
 1301 0858 00000000 		.word	rte_wx_bme280_qf
 1302 085c 00000000 		.word	bme280_calibration_data
 1303 0860 00000000 		.word	.LANCHOR1
 1304 0864 00000000 		.word	main_own_aprs_msg
 1305 0868 00000000 		.word	.LANCHOR4
 1306 086c 00000000 		.word	main_string_longitude
 1307 0870 00000000 		.word	.LANCHOR3
 1308 0874 00000000 		.word	main_string_latitude
 1309 0878 00000000 		.word	.LC0
 1310 087c 00000000 		.word	main_own_aprs_msg_len
 1311 0880 00000000 		.word	main_kiss_srl_ctx
 1312 0884 00000000 		.word	main_own_path
 1313 0888 00000000 		.word	.LANCHOR12
 1314 088c 00000000 		.word	.LANCHOR13
 1315 0890 00000000 		.word	rte_pv_average
 1316 0894 00000000 		.word	rte_pv_struct
 1317 0898 00000000 		.word	rte_wx_umb
 1318 089c 00ED00E0 		.word	-536810240
 1319 08a0 0400FA05 		.word	100270084
 1320 08a4 00000000 		.word	rte_wx_average_winddirection
 1321 08a8 00000000 		.word	rte_wx_max_windspeed
 1322 08ac 00000000 		.word	rte_wx_average_windspeed
 1323 08b0 00000000 		.word	rte_wx_humidity
 1324 08b4 00000000 		.word	rte_wx_pressure_valid
 1325 08b8 00000000 		.word	rte_wx_temperature_average_external_valid
 1326 08bc 00000000 		.word	.LANCHOR6
 1327              	.LVL122:
 1328              	.L78:
 899:../src/main.c **** 					}
 900:../src/main.c **** 	  			}
 901:../src/main.c **** 	  		}
 902:../src/main.c **** 
 903:../src/main.c **** 	  		button_inhibit = 1;
 904:../src/main.c **** 	  	}
 905:../src/main.c **** 	  	else {
 906:../src/main.c **** 	  		button_inhibit = 0;
 1329              		.loc 1 906 0
 1330 08c0 0446     		mov	r4, r0
 1331              	.LVL123:
 1332              	.L44:
 907:../src/main.c **** 	  	}
 908:../src/main.c **** #endif
 909:../src/main.c **** 
 910:../src/main.c **** 
 911:../src/main.c **** 	  	// if new packet has been received from radio channel
 912:../src/main.c **** 		if(ax25_new_msg_rx_flag == 1) {
 1333              		.loc 1 912 0
 1334 08c2 A34B     		ldr	r3, .L126
 1335 08c4 93F90030 		ldrsb	r3, [r3]
 1336 08c8 012B     		cmp	r3, #1
 1337 08ca 2CD0     		beq	.L95
 1338              	.L47:
 913:../src/main.c **** 			memset(main_kiss_srl_ctx.srl_tx_buf_pointer, 0x00, main_kiss_srl_ctx.srl_tx_buf_ln);
 914:../src/main.c **** 
 915:../src/main.c **** 			if (main_kiss_enabled == 1) {
 916:../src/main.c **** 				// convert message to kiss format and send it to host
 917:../src/main.c **** 				srl_start_tx(main_kiss_srl_ctx_ptr, SendKISSToHost(ax25_rxed_frame.raw_data, (ax25_rxed_frame.r
 918:../src/main.c **** 			}
 919:../src/main.c **** 
 920:../src/main.c **** 			main_ax25.dcd = false;
 921:../src/main.c **** 
 922:../src/main.c **** #ifndef _MUTE_OWN
 923:../src/main.c **** 	#ifdef _DIGI
 924:../src/main.c **** 			//digi_check_with_viscous(&ax25_rxed_frame);
 925:../src/main.c **** 
 926:../src/main.c **** 			// check if this packet needs to be repeated (digipeated) and do it if it is necessary
 927:../src/main.c **** 			digi_process(&ax25_rxed_frame, main_config_data_basic, main_config_data_mode);
 928:../src/main.c **** 	#endif
 929:../src/main.c **** #endif
 930:../src/main.c **** 			ax25_new_msg_rx_flag = 0;
 931:../src/main.c **** 			rx10m++;
 932:../src/main.c **** 		}
 933:../src/main.c **** 
 934:../src/main.c **** 		// if Victron VE.direct client is enabled
 935:../src/main.c **** 		if (main_config_data_mode->victron == 1) {
 1339              		.loc 1 935 0
 1340 08cc A14B     		ldr	r3, .L126+4
 1341 08ce 1B68     		ldr	r3, [r3]
 1342 08d0 DA79     		ldrb	r2, [r3, #7]	@ zero_extendqisi2
 1343 08d2 012A     		cmp	r2, #1
 1344 08d4 4ED0     		beq	.L96
 936:../src/main.c **** 
 937:../src/main.c **** 			// if new KISS message has been received from the host
 938:../src/main.c **** 			if (main_kiss_srl_ctx_ptr->srl_rx_state == SRL_RX_DONE || main_kiss_srl_ctx_ptr->srl_rx_state ==
 939:../src/main.c **** 
 940:../src/main.c **** 				// cutting received string to Checksum, everything after will be skipped
 941:../src/main.c **** 				ve_direct_cut_to_checksum(srl_get_rx_buffer(main_kiss_srl_ctx_ptr), TX_BUFFER_1_LN, &buffer_len
 942:../src/main.c **** 
 943:../src/main.c **** 				// checking if this frame is ok
 944:../src/main.c **** 				ve_direct_validate_checksum(srl_get_rx_buffer(main_kiss_srl_ctx_ptr), buffer_len, &retval);
 945:../src/main.c **** 
 946:../src/main.c **** 				if (retval == 1) {
 947:../src/main.c **** 					// parsing data from input serial buffer to
 948:../src/main.c **** 					retval = ve_direct_parse_to_raw_struct(srl_get_rx_buffer(main_kiss_srl_ctx_ptr), buffer_len, &
 949:../src/main.c **** 
 950:../src/main.c **** 					if (retval == 0) {
 951:../src/main.c **** 						ve_direct_add_to_average(&rte_pv_struct, &rte_pv_average);
 952:../src/main.c **** 
 953:../src/main.c **** 						ve_direct_get_averages(&rte_pv_average, &rte_pv_battery_current, &rte_pv_battery_voltage, &rt
 954:../src/main.c **** 
 955:../src/main.c **** 						ve_direct_set_sys_voltage(&rte_pv_struct, &rte_pv_sys_voltage);
 956:../src/main.c **** 
 957:../src/main.c **** 						ve_direct_store_errors(&rte_pv_struct, &rte_pv_last_error);
 958:../src/main.c **** 
 959:../src/main.c **** 						rte_pv_messages_count++;
 960:../src/main.c **** 					}
 961:../src/main.c **** 				}
 962:../src/main.c **** 				else {
 963:../src/main.c **** 					rte_pv_corrupted_messages_count++;
 964:../src/main.c **** 				}
 965:../src/main.c **** 
 966:../src/main.c **** 				//memset(srl_get_rx_buffer(main_kiss_srl_ctx_ptr), 0x00, TX_BUFFER_1_LN);
 967:../src/main.c **** 
 968:../src/main.c **** 				srl_receive_data(main_kiss_srl_ctx_ptr, VE_DIRECT_MAX_FRAME_LN, 0, 0, 0, 0, 0);
 969:../src/main.c **** 			}
 970:../src/main.c **** 		}
 971:../src/main.c **** 		else if (main_config_data_mode->wx_umb == 1) {
 1345              		.loc 1 971 0
 1346 08d6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1347 08d8 012B     		cmp	r3, #1
 1348 08da 00F08181 		beq	.L97
 972:../src/main.c **** 			// if some UMB data have been received
 973:../src/main.c **** 			if (main_wx_srl_ctx_ptr->srl_rx_state == SRL_RX_DONE) {
 974:../src/main.c **** 				umb_pooling_handler(&rte_wx_umb_context, REASON_RECEIVE_IDLE, master_time, main_config_data_umb
 975:../src/main.c **** 			}
 976:../src/main.c **** 
 977:../src/main.c **** 			// if there were an error during receiving frame from host, restart rxing once again
 978:../src/main.c **** 			if (main_wx_srl_ctx_ptr->srl_rx_state == SRL_RX_ERROR) {
 979:../src/main.c **** 				umb_pooling_handler(&rte_wx_umb_context, REASON_RECEIVE_ERROR, master_time, main_config_data_um
 980:../src/main.c **** 			}
 981:../src/main.c **** 
 982:../src/main.c **** 			if (main_wx_srl_ctx_ptr->srl_tx_state == SRL_TX_IDLE) {
 983:../src/main.c **** 				umb_pooling_handler(&rte_wx_umb_context, REASON_TRANSMIT_IDLE, master_time, main_config_data_um
 984:../src/main.c **** 			}
 985:../src/main.c **** 		}
 986:../src/main.c **** 		else {
 987:../src/main.c **** 			// if new KISS message has been received from the host
 988:../src/main.c **** 			if (main_kiss_srl_ctx_ptr->srl_rx_state == SRL_RX_DONE && main_kiss_enabled == 1) {
 1349              		.loc 1 988 0
 1350 08de 9E4B     		ldr	r3, .L126+8
 1351 08e0 1868     		ldr	r0, [r3]
 1352 08e2 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1353 08e6 042B     		cmp	r3, #4
 1354 08e8 04D1     		bne	.L56
 1355              		.loc 1 988 0 is_stmt 0 discriminator 1
 1356 08ea 9C4B     		ldr	r3, .L126+12
 1357 08ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1358 08ee 012B     		cmp	r3, #1
 1359 08f0 00F0A481 		beq	.L98
 1360              	.L56:
 989:../src/main.c **** 				// parse i ncoming data and then transmit on radio freq
 990:../src/main.c **** 				short res = ParseReceivedKISS(srl_get_rx_buffer(main_kiss_srl_ctx_ptr), srl_get_num_bytes_rxed(
 991:../src/main.c **** 				if (res == 0)
 992:../src/main.c **** 					kiss10m++;	// increase kiss messages counter
 993:../src/main.c **** 
 994:../src/main.c **** 				// restart KISS receiving to be ready for next frame
 995:../src/main.c **** 				srl_receive_data(main_kiss_srl_ctx_ptr, 120, FEND, FEND, 0, 0, 0);
 996:../src/main.c **** 			}
 997:../src/main.c **** 
 998:../src/main.c **** 			// if there were an error during receiving frame from host, restart rxing once again
 999:../src/main.c **** 			if (main_kiss_srl_ctx_ptr->srl_rx_state == SRL_RX_ERROR && main_kiss_enabled == 1) {
 1361              		.loc 1 999 0 is_stmt 1
 1362 08f4 984B     		ldr	r3, .L126+8
 1363 08f6 1868     		ldr	r0, [r3]
 1364 08f8 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1365 08fc 052B     		cmp	r3, #5
 1366 08fe 42D1     		bne	.L50
 1367              		.loc 1 999 0 is_stmt 0 discriminator 1
 1368 0900 964B     		ldr	r3, .L126+12
 1369 0902 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1370 0904 012B     		cmp	r3, #1
 1371 0906 3ED1     		bne	.L50
1000:../src/main.c **** 				srl_receive_data(main_kiss_srl_ctx_ptr, 120, FEND, FEND, 0, 0, 0);
 1372              		.loc 1 1000 0 is_stmt 1
 1373 0908 0023     		movs	r3, #0
 1374 090a 0293     		str	r3, [sp, #8]
 1375 090c 0193     		str	r3, [sp, #4]
 1376 090e 0093     		str	r3, [sp]
 1377 0910 6FF03F03 		mvn	r3, #63
 1378 0914 1A46     		mov	r2, r3
 1379 0916 7821     		movs	r1, #120
 1380 0918 FFF7FEFF 		bl	srl_receive_data
 1381              	.LVL124:
 1382 091c 33E0     		b	.L50
 1383              	.L79:
 903:../src/main.c **** 	  	}
 1384              		.loc 1 903 0
 1385 091e 0124     		movs	r4, #1
 1386              	.LVL125:
 1387 0920 CFE7     		b	.L44
 1388              	.L80:
 1389 0922 0124     		movs	r4, #1
 1390 0924 CDE7     		b	.L44
 1391              	.LVL126:
 1392              	.L95:
 913:../src/main.c **** 
 1393              		.loc 1 913 0
 1394 0926 8E4B     		ldr	r3, .L126+16
 1395 0928 DA8B     		ldrh	r2, [r3, #30]
 1396 092a 0021     		movs	r1, #0
 1397 092c 5869     		ldr	r0, [r3, #20]
 1398 092e FFF7FEFF 		bl	memset
 1399              	.LVL127:
 915:../src/main.c **** 				// convert message to kiss format and send it to host
 1400              		.loc 1 915 0
 1401 0932 8A4B     		ldr	r3, .L126+12
 1402 0934 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1403 0936 012B     		cmp	r3, #1
 1404 0938 0AD0     		beq	.L99
 1405              	.L48:
 920:../src/main.c **** 
 1406              		.loc 1 920 0
 1407 093a 0023     		movs	r3, #0
 1408 093c 894A     		ldr	r2, .L126+20
 1409 093e 82F81432 		strb	r3, [r2, #532]
 930:../src/main.c **** 			rx10m++;
 1410              		.loc 1 930 0
 1411 0942 834A     		ldr	r2, .L126
 1412 0944 1370     		strb	r3, [r2]
 931:../src/main.c **** 		}
 1413              		.loc 1 931 0
 1414 0946 884A     		ldr	r2, .L126+24
 1415 0948 1388     		ldrh	r3, [r2]
 1416 094a 0133     		adds	r3, r3, #1
 1417 094c 1380     		strh	r3, [r2]	@ movhi
 1418 094e BDE7     		b	.L47
 1419              	.L99:
 917:../src/main.c **** 			}
 1420              		.loc 1 917 0
 1421 0950 814B     		ldr	r3, .L126+8
 1422 0952 1D68     		ldr	r5, [r3]
 1423 0954 8548     		ldr	r0, .L126+28
 1424 0956 B0F85212 		ldrh	r1, [r0, #594]
 1425 095a 814A     		ldr	r2, .L126+16
 1426 095c 0239     		subs	r1, r1, #2
 1427 095e D38B     		ldrh	r3, [r2, #30]
 1428 0960 5269     		ldr	r2, [r2, #20]
 1429 0962 89B2     		uxth	r1, r1
 1430 0964 5230     		adds	r0, r0, #82
 1431 0966 FFF7FEFF 		bl	SendKISSToHost
 1432              	.LVL128:
 1433 096a 01B2     		sxth	r1, r0
 1434 096c 2846     		mov	r0, r5
 1435 096e FFF7FEFF 		bl	srl_start_tx
 1436              	.LVL129:
 1437 0972 E2E7     		b	.L48
 1438              	.L96:
 938:../src/main.c **** 
 1439              		.loc 1 938 0
 1440 0974 784B     		ldr	r3, .L126+8
 1441 0976 1868     		ldr	r0, [r3]
 1442 0978 90F84430 		ldrb	r3, [r0, #68]	@ zero_extendqisi2
 1443 097c 043B     		subs	r3, r3, #4
 1444 097e DBB2     		uxtb	r3, r3
 1445 0980 012B     		cmp	r3, #1
 1446 0982 40F29980 		bls	.L100
 1447              	.L50:
1001:../src/main.c **** 			}
1002:../src/main.c **** 		}
1003:../src/main.c **** 
1004:../src/main.c **** 		// if Davis wx station is enabled and it is alive
1005:../src/main.c **** 		if (main_davis_serial_enabled == 1) {
 1448              		.loc 1 1005 0
 1449 0986 7A4B     		ldr	r3, .L126+32
 1450 0988 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1451 098a 012B     		cmp	r3, #1
 1452 098c 00F07581 		beq	.L101
 1453              	.L58:
1006:../src/main.c **** 
1007:../src/main.c **** 			// pool the Davis wx station driver for LOOP packet
1008:../src/main.c **** 			davis_loop_packet_pooler(&rte_wx_davis_loop_packet_avaliable);
1009:../src/main.c **** 
1010:../src/main.c **** 			davis_rxcheck_packet_pooler();
1011:../src/main.c **** 		}
1012:../src/main.c **** 
1013:../src/main.c **** 		// if modbus rtu master is enabled
1014:../src/main.c **** 		if (main_modbus_rtu_master_enabled == 1) {
 1454              		.loc 1 1014 0
 1455 0990 784B     		ldr	r3, .L126+36
 1456 0992 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1457 0994 012B     		cmp	r3, #1
 1458 0996 00F07681 		beq	.L102
 1459              	.L59:
1015:../src/main.c **** 			rtu_serial_pool();
1016:../src/main.c **** 		}
1017:../src/main.c **** 
1018:../src/main.c **** 		// get all meteo measuremenets each 65 seconds. some values may not be
1019:../src/main.c **** 		// downloaded from sensors if _METEO and/or _DALLAS_AS_TELEM aren't defined
1020:../src/main.c **** 		if (main_wx_sensors_pool_timer < 10) {
 1460              		.loc 1 1020 0
 1461 099a 774B     		ldr	r3, .L126+40
 1462 099c 1B68     		ldr	r3, [r3]
 1463 099e 092B     		cmp	r3, #9
 1464 09a0 1FDC     		bgt	.L60
1021:../src/main.c **** 
1022:../src/main.c **** 			if (main_modbus_rtu_master_enabled == 1) {
 1465              		.loc 1 1022 0
 1466 09a2 744B     		ldr	r3, .L126+36
 1467 09a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1468 09a6 012B     		cmp	r3, #1
 1469 09a8 00F07081 		beq	.L103
 1470              	.L61:
1023:../src/main.c **** 				rtu_serial_start();
1024:../src/main.c **** 			}
1025:../src/main.c **** 
1026:../src/main.c **** 			if ((main_config_data_mode->wx & WX_ENABLED) == 1) {
 1471              		.loc 1 1026 0
 1472 09ac 694B     		ldr	r3, .L126+4
 1473 09ae 1968     		ldr	r1, [r3]
 1474 09b0 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 1475 09b2 13F0010F 		tst	r3, #1
 1476 09b6 40F06C81 		bne	.L104
 1477              	.L62:
1027:../src/main.c **** 				wx_get_all_measurements(main_config_data_wx_sources, main_config_data_mode, main_config_data_um
1028:../src/main.c **** 			}
1029:../src/main.c **** 
1030:../src/main.c **** 
1031:../src/main.c **** 			if (main_config_data_mode->wx_umb == 1) {
 1478              		.loc 1 1031 0
 1479 09ba 664B     		ldr	r3, .L126+4
 1480 09bc 1B68     		ldr	r3, [r3]
 1481 09be 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1482 09c0 012B     		cmp	r3, #1
 1483 09c2 00F06F81 		beq	.L105
 1484              	.L63:
1032:../src/main.c **** 				//
1033:../src/main.c **** 				umb_0x26_status_request(&rte_wx_umb, &rte_wx_umb_context, main_config_data_umb);
1034:../src/main.c **** 			}
1035:../src/main.c **** 
1036:../src/main.c **** 			if (main_davis_serial_enabled == 1) {
 1485              		.loc 1 1036 0
 1486 09c6 6A4B     		ldr	r3, .L126+32
 1487 09c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1488 09ca 012B     		cmp	r3, #1
 1489 09cc 00F07181 		beq	.L106
 1490              	.L64:
1037:../src/main.c **** 				davis_trigger_rxcheck_packet();
1038:../src/main.c **** 			}
1039:../src/main.c **** 
1040:../src/main.c **** 			if (rte_main_trigger_modbus_status == 1 && main_modbus_rtu_master_enabled == 1) {
 1491              		.loc 1 1040 0
 1492 09d0 6A4B     		ldr	r3, .L126+44
 1493 09d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1494 09d4 012B     		cmp	r3, #1
 1495 09d6 00F06F81 		beq	.L107
 1496              	.L65:
1041:../src/main.c **** 				rtu_serial_get_status_string(&rte_rtu_pool_queue, main_wx_srl_ctx_ptr, main_own_aprs_msg, OWN_A
1042:../src/main.c **** 
1043:../src/main.c **** 			 	ax25_sendVia(&main_ax25, main_own_path, main_own_path_ln, main_own_aprs_msg, main_own_aprs_msg
1044:../src/main.c **** 
1045:../src/main.c **** 			 	afsk_txStart(&main_afsk);
1046:../src/main.c **** 
1047:../src/main.c **** 			 	rte_main_trigger_modbus_status = 0;
1048:../src/main.c **** 
1049:../src/main.c **** 
1050:../src/main.c **** 			}
1051:../src/main.c **** 
1052:../src/main.c **** 			main_wx_sensors_pool_timer = 65500;
 1497              		.loc 1 1052 0
 1498 09da 674B     		ldr	r3, .L126+40
 1499 09dc 4FF6DC72 		movw	r2, #65500
 1500 09e0 1A60     		str	r2, [r3]
 1501              	.L60:
1053:../src/main.c **** 		}
1054:../src/main.c **** 
1055:../src/main.c **** 		if (main_one_minute_pool_timer < 10) {
 1502              		.loc 1 1055 0
 1503 09e2 674B     		ldr	r3, .L126+48
 1504 09e4 1B68     		ldr	r3, [r3]
 1505 09e6 092B     		cmp	r3, #9
 1506 09e8 40F38581 		ble	.L108
 1507              	.L66:
1056:../src/main.c **** 
1057:../src/main.c **** 			#ifndef _MUTE_OWN
1058:../src/main.c **** 			packet_tx_handler(main_config_data_basic, main_config_data_mode);
1059:../src/main.c **** 			#endif
1060:../src/main.c **** 
1061:../src/main.c **** 			main_one_minute_pool_timer = 60000;
1062:../src/main.c **** 		}
1063:../src/main.c **** 
1064:../src/main.c **** 		if (main_one_second_pool_timer < 10) {
 1508              		.loc 1 1064 0
 1509 09ec 654B     		ldr	r3, .L126+52
 1510 09ee 1B68     		ldr	r3, [r3]
 1511 09f0 092B     		cmp	r3, #9
 1512 09f2 00F38E81 		bgt	.L67
1065:../src/main.c **** 
1066:../src/main.c **** 			//digi_pool_viscous();
1067:../src/main.c **** 
1068:../src/main.c **** 			if ((main_config_data_mode->wx & WX_ENABLED) == 1) {
 1513              		.loc 1 1068 0
 1514 09f6 574B     		ldr	r3, .L126+4
 1515 09f8 1B68     		ldr	r3, [r3]
 1516 09fa 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1517 09fc 13F0010F 		tst	r3, #1
 1518 0a00 40F08481 		bne	.L109
 1519              	.L68:
1069:../src/main.c **** 				analog_anemometer_direction_handler();
1070:../src/main.c **** 			}
1071:../src/main.c **** 
1072:../src/main.c **** 			main_one_second_pool_timer = 1000;
 1520              		.loc 1 1072 0
 1521 0a04 5F4B     		ldr	r3, .L126+52
 1522 0a06 4FF47A72 		mov	r2, #1000
 1523 0a0a 1A60     		str	r2, [r3]
 1524              	.L69:
1073:../src/main.c **** 		}
1074:../src/main.c **** 		else if (main_one_second_pool_timer < -10) {
1075:../src/main.c **** 
1076:../src/main.c **** 			if ((main_config_data_mode->wx & WX_ENABLED) == 1) {
1077:../src/main.c **** 				analog_anemometer_direction_reset();
1078:../src/main.c **** 			}
1079:../src/main.c **** 
1080:../src/main.c **** 			main_one_second_pool_timer = 1000;
1081:../src/main.c **** 		}
1082:../src/main.c **** 
1083:../src/main.c **** 		if (main_two_second_pool_timer < 10) {
 1525              		.loc 1 1083 0
 1526 0a0c 5E4B     		ldr	r3, .L126+56
 1527 0a0e 1B68     		ldr	r3, [r3]
 1528 0a10 092B     		cmp	r3, #9
 1529 0a12 40F39081 		ble	.L110
 1530              	.L71:
1084:../src/main.c **** 
1085:../src/main.c **** 			wx_check_force_i2c_reset();
1086:../src/main.c **** 
1087:../src/main.c **** 			wx_pwr_switch_periodic_handle();
1088:../src/main.c **** 
1089:../src/main.c **** 			#ifdef INTERNAL_WATCHDOG
1090:../src/main.c **** 			IWDG_ReloadCounter();
1091:../src/main.c **** 			#endif
1092:../src/main.c **** 
1093:../src/main.c **** 			main_two_second_pool_timer = 2000;
1094:../src/main.c **** 		}
1095:../src/main.c **** 
1096:../src/main.c **** 		if (main_ten_second_pool_timer < 10) {
 1531              		.loc 1 1096 0
 1532 0a16 5D4B     		ldr	r3, .L126+60
 1533 0a18 1B68     		ldr	r3, [r3]
 1534 0a1a 092B     		cmp	r3, #9
 1535 0a1c 23DC     		bgt	.L41
1097:../src/main.c **** 
1098:../src/main.c **** 			if (rte_main_trigger_wx_packet == 1) {
 1536              		.loc 1 1098 0
 1537 0a1e 5C4B     		ldr	r3, .L126+64
 1538 0a20 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1539 0a22 012B     		cmp	r3, #1
 1540 0a24 00F09081 		beq	.L111
 1541              	.L73:
1099:../src/main.c **** 
1100:../src/main.c **** 				packet_tx_send_wx_frame();
1101:../src/main.c **** 
1102:../src/main.c **** 				rte_main_trigger_wx_packet = 0;
1103:../src/main.c **** 			}
1104:../src/main.c **** 
1105:../src/main.c **** 			#ifdef STM32L471xx
1106:../src/main.c **** 			// inhibit any power save switching when modem transmits data
1107:../src/main.c **** 			if (!main_afsk.sending) {
1108:../src/main.c **** 				pwr_save_pooling_handler(main_config_data_mode, main_config_data_basic, packet_tx_get_minutes_t
1109:../src/main.c **** 			}
1110:../src/main.c **** 			#endif
1111:../src/main.c **** 
1112:../src/main.c **** 			if (main_config_data_mode->wx_umb == 1) {
 1542              		.loc 1 1112 0
 1543 0a28 4A4B     		ldr	r3, .L126+4
 1544 0a2a 1B68     		ldr	r3, [r3]
 1545 0a2c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1546 0a2e 012B     		cmp	r3, #1
 1547 0a30 00F09081 		beq	.L112
 1548              	.L74:
1113:../src/main.c **** 				umb_channel_pool(&rte_wx_umb, &rte_wx_umb_context, main_config_data_umb);
1114:../src/main.c **** 			}
1115:../src/main.c **** 
1116:../src/main.c **** 			if (main_config_data_mode->wx_umb == 1) {
 1549              		.loc 1 1116 0
 1550 0a34 474B     		ldr	r3, .L126+4
 1551 0a36 1B68     		ldr	r3, [r3]
 1552 0a38 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1553 0a3a 012B     		cmp	r3, #1
 1554 0a3c 00F09181 		beq	.L113
 1555              	.L75:
1117:../src/main.c **** 				rte_wx_umb_qf = umb_get_current_qf(&rte_wx_umb_context, master_time);
1118:../src/main.c **** 			}
1119:../src/main.c **** 
1120:../src/main.c **** 			wx_pool_anemometer(main_config_data_wx_sources, main_config_data_mode, main_config_data_umb, mai
 1556              		.loc 1 1120 0
 1557 0a40 544B     		ldr	r3, .L126+68
 1558 0a42 1B68     		ldr	r3, [r3]
 1559 0a44 544A     		ldr	r2, .L126+72
 1560 0a46 1268     		ldr	r2, [r2]
 1561 0a48 4249     		ldr	r1, .L126+4
 1562 0a4a 0968     		ldr	r1, [r1]
 1563 0a4c 5348     		ldr	r0, .L126+76
 1564 0a4e 0068     		ldr	r0, [r0]
 1565 0a50 FFF7FEFF 		bl	wx_pool_anemometer
 1566              	.LVL130:
1121:../src/main.c **** 
1122:../src/main.c **** 			if (main_davis_serial_enabled == 1) {
 1567              		.loc 1 1122 0
 1568 0a54 464B     		ldr	r3, .L126+32
 1569 0a56 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1570 0a58 012B     		cmp	r3, #1
 1571 0a5a 00F08A81 		beq	.L114
 1572              	.L76:
1123:../src/main.c **** 
1124:../src/main.c **** 				// if previous LOOP packet is ready for processing
1125:../src/main.c **** 				if (rte_wx_davis_loop_packet_avaliable == 1) {
1126:../src/main.c **** 					davis_parsers_loop(main_kiss_srl_ctx_ptr->srl_rx_buf_pointer, main_kiss_srl_ctx_ptr->srl_rx_bu
1127:../src/main.c **** 				}
1128:../src/main.c **** 
1129:../src/main.c **** 				// trigger consecutive LOOP packet
1130:../src/main.c **** 				davis_trigger_loop_packet();
1131:../src/main.c **** 			}
1132:../src/main.c **** 
1133:../src/main.c **** 			main_ten_second_pool_timer = 10000;
 1573              		.loc 1 1133 0
 1574 0a5e 4B4B     		ldr	r3, .L126+60
 1575 0a60 42F21072 		movw	r2, #10000
 1576 0a64 1A60     		str	r2, [r3]
 1577              	.LVL131:
 1578              	.L41:
 867:../src/main.c **** 
 1579              		.loc 1 867 0
 1580 0a66 4E4A     		ldr	r2, .L126+80
 1581 0a68 1368     		ldr	r3, [r2]
 1582 0a6a 0133     		adds	r3, r3, #1
 1583 0a6c 1360     		str	r3, [r2]
 869:../src/main.c **** 	    	NVIC_SystemReset();
 1584              		.loc 1 869 0
 1585 0a6e 4D4B     		ldr	r3, .L126+84
 1586 0a70 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1587 0a72 012B     		cmp	r3, #1
 1588 0a74 3FF491AE 		beq	.L115
 878:../src/main.c **** 
 1589              		.loc 1 878 0
 1590 0a78 0121     		movs	r1, #1
 1591 0a7a 4B48     		ldr	r0, .L126+88
 1592 0a7c FFF7FEFF 		bl	GPIO_ReadInputDataBit
 1593              	.LVL132:
 1594 0a80 0028     		cmp	r0, #0
 1595 0a82 3FF41DAF 		beq	.L78
 882:../src/main.c **** 
 1596              		.loc 1 882 0
 1597 0a86 494B     		ldr	r3, .L126+92
 1598 0a88 93F83034 		ldrb	r3, [r3, #1072]	@ zero_extendqisi2
 1599 0a8c 002B     		cmp	r3, #0
 1600 0a8e 7FF446AF 		bne	.L79
 882:../src/main.c **** 
 1601              		.loc 1 882 0 is_stmt 0 discriminator 1
 1602 0a92 002C     		cmp	r4, #0
 1603 0a94 7FF415AF 		bne	.L44
 1604              	.L45:
 885:../src/main.c **** 
 1605              		.loc 1 885 0 is_stmt 1 discriminator 1
 1606 0a98 324B     		ldr	r3, .L126+20
 1607 0a9a 93F81432 		ldrb	r3, [r3, #532]	@ zero_extendqisi2
 1608 0a9e 002B     		cmp	r3, #0
 1609 0aa0 FAD1     		bne	.L45
 887:../src/main.c **** 
 1610              		.loc 1 887 0
 1611 0aa2 2C4B     		ldr	r3, .L126+4
 1612 0aa4 1B68     		ldr	r3, [r3]
 1613 0aa6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1614 0aa8 13F0010F 		tst	r3, #1
 1615 0aac 7FF482AE 		bne	.L46
 889:../src/main.c **** 	  			}
 1616              		.loc 1 889 0
 1617 0ab0 FFF7FEFF 		bl	beacon_send_own
 1618              	.LVL133:
 903:../src/main.c **** 	  	}
 1619              		.loc 1 903 0
 1620 0ab4 0124     		movs	r4, #1
 1621              	.LVL134:
 1622 0ab6 04E7     		b	.L44
 1623              	.LVL135:
 1624              	.L100:
 941:../src/main.c **** 
 1625              		.loc 1 941 0
 1626 0ab8 FFF7FEFF 		bl	srl_get_rx_buffer
 1627              	.LVL136:
 1628 0abc 3C4E     		ldr	r6, .L126+96
 1629 0abe 3246     		mov	r2, r6
 1630 0ac0 4FF40071 		mov	r1, #512
 1631 0ac4 FFF7FEFF 		bl	ve_direct_cut_to_checksum
 1632              	.LVL137:
 944:../src/main.c **** 
 1633              		.loc 1 944 0
 1634 0ac8 234B     		ldr	r3, .L126+8
 1635 0aca 1868     		ldr	r0, [r3]
 1636 0acc FFF7FEFF 		bl	srl_get_rx_buffer
 1637              	.LVL138:
 1638 0ad0 384D     		ldr	r5, .L126+100
 1639 0ad2 2A46     		mov	r2, r5
 1640 0ad4 3188     		ldrh	r1, [r6]
 1641 0ad6 FFF7FEFF 		bl	ve_direct_validate_checksum
 1642              	.LVL139:
 946:../src/main.c **** 					// parsing data from input serial buffer to
 1643              		.loc 1 946 0
 1644 0ada 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 1645 0adc DBB2     		uxtb	r3, r3
 1646 0ade 012B     		cmp	r3, #1
 1647 0ae0 30D1     		bne	.L51
 948:../src/main.c **** 
 1648              		.loc 1 948 0
 1649 0ae2 1D4B     		ldr	r3, .L126+8
 1650 0ae4 1868     		ldr	r0, [r3]
 1651 0ae6 FFF7FEFF 		bl	srl_get_rx_buffer
 1652              	.LVL140:
 1653 0aea 334A     		ldr	r2, .L126+104
 1654 0aec 3188     		ldrh	r1, [r6]
 1655 0aee FFF7FEFF 		bl	ve_direct_parse_to_raw_struct
 1656              	.LVL141:
 1657 0af2 C0B2     		uxtb	r0, r0
 1658 0af4 2870     		strb	r0, [r5]
 950:../src/main.c **** 						ve_direct_add_to_average(&rte_pv_struct, &rte_pv_average);
 1659              		.loc 1 950 0
 1660 0af6 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 1661 0af8 CBB9     		cbnz	r3, .L52
 951:../src/main.c **** 
 1662              		.loc 1 951 0
 1663 0afa 304E     		ldr	r6, .L126+108
 1664 0afc 2E4D     		ldr	r5, .L126+104
 1665 0afe 3146     		mov	r1, r6
 1666 0b00 2846     		mov	r0, r5
 1667 0b02 FFF7FEFF 		bl	ve_direct_add_to_average
 1668              	.LVL142:
 953:../src/main.c **** 
 1669              		.loc 1 953 0
 1670 0b06 2E4B     		ldr	r3, .L126+112
 1671 0b08 0093     		str	r3, [sp]
 1672 0b0a 2E4B     		ldr	r3, .L126+116
 1673 0b0c 2E4A     		ldr	r2, .L126+120
 1674 0b0e 2F49     		ldr	r1, .L126+124
 1675 0b10 3046     		mov	r0, r6
 1676 0b12 FFF7FEFF 		bl	ve_direct_get_averages
 1677              	.LVL143:
 955:../src/main.c **** 
 1678              		.loc 1 955 0
 1679 0b16 2E49     		ldr	r1, .L126+128
 1680 0b18 2846     		mov	r0, r5
 1681 0b1a FFF7FEFF 		bl	ve_direct_set_sys_voltage
 1682              	.LVL144:
 957:../src/main.c **** 
 1683              		.loc 1 957 0
 1684 0b1e 2D49     		ldr	r1, .L126+132
 1685 0b20 2846     		mov	r0, r5
 1686 0b22 FFF7FEFF 		bl	ve_direct_store_errors
 1687              	.LVL145:
 959:../src/main.c **** 					}
 1688              		.loc 1 959 0
 1689 0b26 2C4A     		ldr	r2, .L126+136
 1690 0b28 1388     		ldrh	r3, [r2]
 1691 0b2a 0133     		adds	r3, r3, #1
 1692 0b2c 1380     		strh	r3, [r2]	@ movhi
 1693              	.L52:
 968:../src/main.c **** 			}
 1694              		.loc 1 968 0
 1695 0b2e 0022     		movs	r2, #0
 1696 0b30 0292     		str	r2, [sp, #8]
 1697 0b32 0192     		str	r2, [sp, #4]
 1698 0b34 0092     		str	r2, [sp]
 1699 0b36 1346     		mov	r3, r2
 1700 0b38 BA21     		movs	r1, #186
 1701 0b3a 0748     		ldr	r0, .L126+8
 1702 0b3c 0068     		ldr	r0, [r0]
 1703 0b3e FFF7FEFF 		bl	srl_receive_data
 1704              	.LVL146:
 1705 0b42 20E7     		b	.L50
 1706              	.L51:
 963:../src/main.c **** 				}
 1707              		.loc 1 963 0
 1708 0b44 254A     		ldr	r2, .L126+140
 1709 0b46 1388     		ldrh	r3, [r2]
 1710 0b48 0133     		adds	r3, r3, #1
 1711 0b4a 1380     		strh	r3, [r2]	@ movhi
 1712 0b4c EFE7     		b	.L52
 1713              	.L127:
 1714 0b4e 00BF     		.align	2
 1715              	.L126:
 1716 0b50 00000000 		.word	ax25_new_msg_rx_flag
 1717 0b54 00000000 		.word	.LANCHOR2
 1718 0b58 00000000 		.word	main_kiss_srl_ctx_ptr
 1719 0b5c 00000000 		.word	.LANCHOR6
 1720 0b60 00000000 		.word	main_kiss_srl_ctx
 1721 0b64 00000000 		.word	main_ax25
 1722 0b68 00000000 		.word	.LANCHOR15
 1723 0b6c 00000000 		.word	ax25_rxed_frame
 1724 0b70 00000000 		.word	.LANCHOR7
 1725 0b74 00000000 		.word	.LANCHOR9
 1726 0b78 00000000 		.word	.LANCHOR19
 1727 0b7c 00000000 		.word	rte_main_trigger_modbus_status
 1728 0b80 00000000 		.word	.LANCHOR20
 1729 0b84 00000000 		.word	.LANCHOR21
 1730 0b88 00000000 		.word	.LANCHOR22
 1731 0b8c 00000000 		.word	.LANCHOR23
 1732 0b90 00000000 		.word	rte_main_trigger_wx_packet
 1733 0b94 00000000 		.word	.LANCHOR8
 1734 0b98 00000000 		.word	.LANCHOR11
 1735 0b9c 00000000 		.word	.LANCHOR13
 1736 0ba0 00000000 		.word	.LANCHOR14
 1737 0ba4 00000000 		.word	rte_main_reboot_req
 1738 0ba8 00080140 		.word	1073809408
 1739 0bac 00000000 		.word	main_afsk
 1740 0bb0 00000000 		.word	.LANCHOR16
 1741 0bb4 00000000 		.word	.LANCHOR12
 1742 0bb8 00000000 		.word	rte_pv_struct
 1743 0bbc 00000000 		.word	rte_pv_average
 1744 0bc0 00000000 		.word	rte_pv_load_current
 1745 0bc4 00000000 		.word	rte_pv_cell_voltage
 1746 0bc8 00000000 		.word	rte_pv_battery_voltage
 1747 0bcc 00000000 		.word	rte_pv_battery_current
 1748 0bd0 00000000 		.word	rte_pv_sys_voltage
 1749 0bd4 00000000 		.word	rte_pv_last_error
 1750 0bd8 00000000 		.word	rte_pv_messages_count
 1751 0bdc 00000000 		.word	rte_pv_corrupted_messages_count
 1752              	.L97:
 973:../src/main.c **** 				umb_pooling_handler(&rte_wx_umb_context, REASON_RECEIVE_IDLE, master_time, main_config_data_umb
 1753              		.loc 1 973 0
 1754 0be0 6B4B     		ldr	r3, .L128
 1755 0be2 1B68     		ldr	r3, [r3]
 1756 0be4 93F84430 		ldrb	r3, [r3, #68]	@ zero_extendqisi2
 1757 0be8 042B     		cmp	r3, #4
 1758 0bea 15D0     		beq	.L116
 1759              	.L54:
 978:../src/main.c **** 				umb_pooling_handler(&rte_wx_umb_context, REASON_RECEIVE_ERROR, master_time, main_config_data_um
 1760              		.loc 1 978 0
 1761 0bec 684B     		ldr	r3, .L128
 1762 0bee 1B68     		ldr	r3, [r3]
 1763 0bf0 93F84430 		ldrb	r3, [r3, #68]	@ zero_extendqisi2
 1764 0bf4 052B     		cmp	r3, #5
 1765 0bf6 18D0     		beq	.L117
 1766              	.L55:
 982:../src/main.c **** 				umb_pooling_handler(&rte_wx_umb_context, REASON_TRANSMIT_IDLE, master_time, main_config_data_um
 1767              		.loc 1 982 0
 1768 0bf8 654B     		ldr	r3, .L128
 1769 0bfa 1B68     		ldr	r3, [r3]
 1770 0bfc 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 1771 0c00 012B     		cmp	r3, #1
 1772 0c02 7FF4C0AE 		bne	.L50
 983:../src/main.c **** 			}
 1773              		.loc 1 983 0
 1774 0c06 634B     		ldr	r3, .L128+4
 1775 0c08 1B68     		ldr	r3, [r3]
 1776 0c0a 634A     		ldr	r2, .L128+8
 1777 0c0c 1268     		ldr	r2, [r2]
 1778 0c0e 0021     		movs	r1, #0
 1779 0c10 6248     		ldr	r0, .L128+12
 1780 0c12 FFF7FEFF 		bl	umb_pooling_handler
 1781              	.LVL147:
 1782 0c16 B6E6     		b	.L50
 1783              	.L116:
 974:../src/main.c **** 			}
 1784              		.loc 1 974 0
 1785 0c18 5E4B     		ldr	r3, .L128+4
 1786 0c1a 1B68     		ldr	r3, [r3]
 1787 0c1c 5E4A     		ldr	r2, .L128+8
 1788 0c1e 1268     		ldr	r2, [r2]
 1789 0c20 0121     		movs	r1, #1
 1790 0c22 5E48     		ldr	r0, .L128+12
 1791 0c24 FFF7FEFF 		bl	umb_pooling_handler
 1792              	.LVL148:
 1793 0c28 E0E7     		b	.L54
 1794              	.L117:
 979:../src/main.c **** 			}
 1795              		.loc 1 979 0
 1796 0c2a 5A4B     		ldr	r3, .L128+4
 1797 0c2c 1B68     		ldr	r3, [r3]
 1798 0c2e 5A4A     		ldr	r2, .L128+8
 1799 0c30 1268     		ldr	r2, [r2]
 1800 0c32 0221     		movs	r1, #2
 1801 0c34 5948     		ldr	r0, .L128+12
 1802 0c36 FFF7FEFF 		bl	umb_pooling_handler
 1803              	.LVL149:
 1804 0c3a DDE7     		b	.L55
 1805              	.L98:
 1806              	.LBB58:
 990:../src/main.c **** 				if (res == 0)
 1807              		.loc 1 990 0
 1808 0c3c FFF7FEFF 		bl	srl_get_rx_buffer
 1809              	.LVL150:
 1810 0c40 0546     		mov	r5, r0
 1811 0c42 574B     		ldr	r3, .L128+16
 1812 0c44 1868     		ldr	r0, [r3]
 1813 0c46 FFF7FEFF 		bl	srl_get_num_bytes_rxed
 1814              	.LVL151:
 1815 0c4a 564B     		ldr	r3, .L128+20
 1816 0c4c 564A     		ldr	r2, .L128+24
 1817 0c4e 0146     		mov	r1, r0
 1818 0c50 2846     		mov	r0, r5
 1819 0c52 FFF7FEFF 		bl	ParseReceivedKISS
 1820              	.LVL152:
 991:../src/main.c **** 					kiss10m++;	// increase kiss messages counter
 1821              		.loc 1 991 0
 1822 0c56 18B9     		cbnz	r0, .L57
 992:../src/main.c **** 
 1823              		.loc 1 992 0
 1824 0c58 544A     		ldr	r2, .L128+28
 1825 0c5a 1388     		ldrh	r3, [r2]
 1826 0c5c 0133     		adds	r3, r3, #1
 1827 0c5e 1380     		strh	r3, [r2]	@ movhi
 1828              	.L57:
 995:../src/main.c **** 			}
 1829              		.loc 1 995 0
 1830 0c60 0023     		movs	r3, #0
 1831 0c62 0293     		str	r3, [sp, #8]
 1832 0c64 0193     		str	r3, [sp, #4]
 1833 0c66 0093     		str	r3, [sp]
 1834 0c68 6FF03F03 		mvn	r3, #63
 1835 0c6c 1A46     		mov	r2, r3
 1836 0c6e 7821     		movs	r1, #120
 1837 0c70 4B48     		ldr	r0, .L128+16
 1838              	.LVL153:
 1839 0c72 0068     		ldr	r0, [r0]
 1840 0c74 FFF7FEFF 		bl	srl_receive_data
 1841              	.LVL154:
 1842 0c78 3CE6     		b	.L56
 1843              	.L101:
 1844              	.LBE58:
1008:../src/main.c **** 
 1845              		.loc 1 1008 0
 1846 0c7a 4D48     		ldr	r0, .L128+32
 1847 0c7c FFF7FEFF 		bl	davis_loop_packet_pooler
 1848              	.LVL155:
1010:../src/main.c **** 		}
 1849              		.loc 1 1010 0
 1850 0c80 FFF7FEFF 		bl	davis_rxcheck_packet_pooler
 1851              	.LVL156:
 1852 0c84 84E6     		b	.L58
 1853              	.L102:
1015:../src/main.c **** 		}
 1854              		.loc 1 1015 0
 1855 0c86 FFF7FEFF 		bl	rtu_serial_pool
 1856              	.LVL157:
 1857 0c8a 86E6     		b	.L59
 1858              	.L103:
1023:../src/main.c **** 			}
 1859              		.loc 1 1023 0
 1860 0c8c FFF7FEFF 		bl	rtu_serial_start
 1861              	.LVL158:
 1862 0c90 8CE6     		b	.L61
 1863              	.L104:
1027:../src/main.c **** 			}
 1864              		.loc 1 1027 0
 1865 0c92 484B     		ldr	r3, .L128+36
 1866 0c94 1B68     		ldr	r3, [r3]
 1867 0c96 3F4A     		ldr	r2, .L128+4
 1868 0c98 1268     		ldr	r2, [r2]
 1869 0c9a 4748     		ldr	r0, .L128+40
 1870 0c9c 0068     		ldr	r0, [r0]
 1871 0c9e FFF7FEFF 		bl	wx_get_all_measurements
 1872              	.LVL159:
 1873 0ca2 8AE6     		b	.L62
 1874              	.L105:
1033:../src/main.c **** 			}
 1875              		.loc 1 1033 0
 1876 0ca4 3B4B     		ldr	r3, .L128+4
 1877 0ca6 1A68     		ldr	r2, [r3]
 1878 0ca8 3C49     		ldr	r1, .L128+12
 1879 0caa 4448     		ldr	r0, .L128+44
 1880 0cac FFF7FEFF 		bl	umb_0x26_status_request
 1881              	.LVL160:
 1882 0cb0 89E6     		b	.L63
 1883              	.L106:
1037:../src/main.c **** 			}
 1884              		.loc 1 1037 0
 1885 0cb2 FFF7FEFF 		bl	davis_trigger_rxcheck_packet
 1886              	.LVL161:
 1887 0cb6 8BE6     		b	.L64
 1888              	.L107:
1040:../src/main.c **** 				rtu_serial_get_status_string(&rte_rtu_pool_queue, main_wx_srl_ctx_ptr, main_own_aprs_msg, OWN_A
 1889              		.loc 1 1040 0 discriminator 1
 1890 0cb8 414B     		ldr	r3, .L128+48
 1891 0cba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1892 0cbc 012B     		cmp	r3, #1
 1893 0cbe 7FF48CAE 		bne	.L65
1041:../src/main.c **** 
 1894              		.loc 1 1041 0
 1895 0cc2 404D     		ldr	r5, .L128+52
 1896 0cc4 404E     		ldr	r6, .L128+56
 1897 0cc6 0096     		str	r6, [sp]
 1898 0cc8 A023     		movs	r3, #160
 1899 0cca 2A46     		mov	r2, r5
 1900 0ccc 3049     		ldr	r1, .L128
 1901 0cce 0968     		ldr	r1, [r1]
 1902 0cd0 3E48     		ldr	r0, .L128+60
 1903 0cd2 FFF7FEFF 		bl	rtu_serial_get_status_string
 1904              	.LVL162:
1043:../src/main.c **** 
 1905              		.loc 1 1043 0
 1906 0cd6 3E4B     		ldr	r3, .L128+64
 1907 0cd8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1908 0cda 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 1909 0cdc 0093     		str	r3, [sp]
 1910 0cde 2B46     		mov	r3, r5
 1911 0ce0 3C49     		ldr	r1, .L128+68
 1912 0ce2 3148     		ldr	r0, .L128+24
 1913 0ce4 FFF7FEFF 		bl	ax25_sendVia
 1914              	.LVL163:
1045:../src/main.c **** 
 1915              		.loc 1 1045 0
 1916 0ce8 2E48     		ldr	r0, .L128+20
 1917 0cea FFF7FEFF 		bl	afsk_txStart
 1918              	.LVL164:
1047:../src/main.c **** 
 1919              		.loc 1 1047 0
 1920 0cee 3A4B     		ldr	r3, .L128+72
 1921 0cf0 0022     		movs	r2, #0
 1922 0cf2 1A70     		strb	r2, [r3]
 1923 0cf4 71E6     		b	.L65
 1924              	.L108:
1058:../src/main.c **** 			#endif
 1925              		.loc 1 1058 0
 1926 0cf6 394B     		ldr	r3, .L128+76
 1927 0cf8 1968     		ldr	r1, [r3]
 1928 0cfa 394B     		ldr	r3, .L128+80
 1929 0cfc 1868     		ldr	r0, [r3]
 1930 0cfe FFF7FEFF 		bl	packet_tx_handler
 1931              	.LVL165:
1061:../src/main.c **** 		}
 1932              		.loc 1 1061 0
 1933 0d02 384B     		ldr	r3, .L128+84
 1934 0d04 4EF66022 		movw	r2, #60000
 1935 0d08 1A60     		str	r2, [r3]
 1936 0d0a 6FE6     		b	.L66
 1937              	.L109:
1069:../src/main.c **** 			}
 1938              		.loc 1 1069 0
 1939 0d0c FFF7FEFF 		bl	analog_anemometer_direction_handler
 1940              	.LVL166:
 1941 0d10 78E6     		b	.L68
 1942              	.L67:
1074:../src/main.c **** 
 1943              		.loc 1 1074 0
 1944 0d12 13F10A0F 		cmn	r3, #10
 1945 0d16 BFF679AE 		bge	.L69
1076:../src/main.c **** 				analog_anemometer_direction_reset();
 1946              		.loc 1 1076 0
 1947 0d1a 304B     		ldr	r3, .L128+76
 1948 0d1c 1B68     		ldr	r3, [r3]
 1949 0d1e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1950 0d20 13F0010F 		tst	r3, #1
 1951 0d24 04D1     		bne	.L118
 1952              	.L70:
1080:../src/main.c **** 		}
 1953              		.loc 1 1080 0
 1954 0d26 304B     		ldr	r3, .L128+88
 1955 0d28 4FF47A72 		mov	r2, #1000
 1956 0d2c 1A60     		str	r2, [r3]
 1957 0d2e 6DE6     		b	.L69
 1958              	.L118:
1077:../src/main.c **** 			}
 1959              		.loc 1 1077 0
 1960 0d30 FFF7FEFF 		bl	analog_anemometer_direction_reset
 1961              	.LVL167:
 1962 0d34 F7E7     		b	.L70
 1963              	.L110:
1085:../src/main.c **** 
 1964              		.loc 1 1085 0
 1965 0d36 FFF7FEFF 		bl	wx_check_force_i2c_reset
 1966              	.LVL168:
1087:../src/main.c **** 
 1967              		.loc 1 1087 0
 1968 0d3a FFF7FEFF 		bl	wx_pwr_switch_periodic_handle
 1969              	.LVL169:
1093:../src/main.c **** 		}
 1970              		.loc 1 1093 0
 1971 0d3e 2B4B     		ldr	r3, .L128+92
 1972 0d40 4FF4FA62 		mov	r2, #2000
 1973 0d44 1A60     		str	r2, [r3]
 1974 0d46 66E6     		b	.L71
 1975              	.L111:
1100:../src/main.c **** 
 1976              		.loc 1 1100 0
 1977 0d48 FFF7FEFF 		bl	packet_tx_send_wx_frame
 1978              	.LVL170:
1102:../src/main.c **** 			}
 1979              		.loc 1 1102 0
 1980 0d4c 284B     		ldr	r3, .L128+96
 1981 0d4e 0022     		movs	r2, #0
 1982 0d50 1A70     		strb	r2, [r3]
 1983 0d52 69E6     		b	.L73
 1984              	.L112:
1113:../src/main.c **** 			}
 1985              		.loc 1 1113 0
 1986 0d54 0F4B     		ldr	r3, .L128+4
 1987 0d56 1A68     		ldr	r2, [r3]
 1988 0d58 1049     		ldr	r1, .L128+12
 1989 0d5a 1848     		ldr	r0, .L128+44
 1990 0d5c FFF7FEFF 		bl	umb_channel_pool
 1991              	.LVL171:
 1992 0d60 68E6     		b	.L74
 1993              	.L113:
1117:../src/main.c **** 			}
 1994              		.loc 1 1117 0
 1995 0d62 0D4B     		ldr	r3, .L128+8
 1996 0d64 1968     		ldr	r1, [r3]
 1997 0d66 0D48     		ldr	r0, .L128+12
 1998 0d68 FFF7FEFF 		bl	umb_get_current_qf
 1999              	.LVL172:
 2000 0d6c 214B     		ldr	r3, .L128+100
 2001 0d6e 1870     		strb	r0, [r3]
 2002 0d70 66E6     		b	.L75
 2003              	.L114:
1125:../src/main.c **** 					davis_parsers_loop(main_kiss_srl_ctx_ptr->srl_rx_buf_pointer, main_kiss_srl_ctx_ptr->srl_rx_bu
 2004              		.loc 1 1125 0
 2005 0d72 0F4B     		ldr	r3, .L128+32
 2006 0d74 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2007 0d76 012B     		cmp	r3, #1
 2008 0d78 02D0     		beq	.L119
 2009              	.L77:
1130:../src/main.c **** 			}
 2010              		.loc 1 1130 0
 2011 0d7a FFF7FEFF 		bl	davis_trigger_loop_packet
 2012              	.LVL173:
 2013 0d7e 6EE6     		b	.L76
 2014              	.L119:
1126:../src/main.c **** 				}
 2015              		.loc 1 1126 0
 2016 0d80 074B     		ldr	r3, .L128+16
 2017 0d82 1B68     		ldr	r3, [r3]
 2018 0d84 1C4A     		ldr	r2, .L128+104
 2019 0d86 998B     		ldrh	r1, [r3, #28]
 2020 0d88 9869     		ldr	r0, [r3, #24]
 2021 0d8a FFF7FEFF 		bl	davis_parsers_loop
 2022              	.LVL174:
 2023 0d8e F4E7     		b	.L77
 2024              	.L129:
 2025              		.align	2
 2026              	.L128:
 2027 0d90 00000000 		.word	main_wx_srl_ctx_ptr
 2028 0d94 00000000 		.word	.LANCHOR11
 2029 0d98 00000000 		.word	.LANCHOR17
 2030 0d9c 00000000 		.word	rte_wx_umb_context
 2031 0da0 00000000 		.word	main_kiss_srl_ctx_ptr
 2032 0da4 00000000 		.word	main_afsk
 2033 0da8 00000000 		.word	main_ax25
 2034 0dac 00000000 		.word	.LANCHOR18
 2035 0db0 00000000 		.word	rte_wx_davis_loop_packet_avaliable
 2036 0db4 00000000 		.word	.LANCHOR8
 2037 0db8 00000000 		.word	.LANCHOR13
 2038 0dbc 00000000 		.word	rte_wx_umb
 2039 0dc0 00000000 		.word	.LANCHOR9
 2040 0dc4 00000000 		.word	main_own_aprs_msg
 2041 0dc8 00000000 		.word	main_own_aprs_msg_len
 2042 0dcc 00000000 		.word	rte_rtu_pool_queue
 2043 0dd0 00000000 		.word	.LANCHOR10
 2044 0dd4 00000000 		.word	main_own_path
 2045 0dd8 00000000 		.word	rte_main_trigger_modbus_status
 2046 0ddc 00000000 		.word	.LANCHOR2
 2047 0de0 00000000 		.word	.LANCHOR1
 2048 0de4 00000000 		.word	.LANCHOR20
 2049 0de8 00000000 		.word	.LANCHOR21
 2050 0dec 00000000 		.word	.LANCHOR22
 2051 0df0 00000000 		.word	rte_main_trigger_wx_packet
 2052 0df4 00000000 		.word	rte_wx_umb_qf
 2053 0df8 00000000 		.word	rte_wx_davis_loop_content
 2054              		.cfi_endproc
 2055              	.LFE113:
 2057              		.section	.text.main_get_adc_sample,"ax",%progbits
 2058              		.align	1
 2059              		.global	main_get_adc_sample
 2060              		.syntax unified
 2061              		.thumb
 2062              		.thumb_func
 2063              		.fpu softvfp
 2065              	main_get_adc_sample:
 2066              	.LFB114:
1134:../src/main.c **** 		}
1135:../src/main.c **** 
1136:../src/main.c **** 
1137:../src/main.c ****     }
1138:../src/main.c ****   // Infinite loop, never return.
1139:../src/main.c **** }
1140:../src/main.c **** 
1141:../src/main.c **** uint16_t main_get_adc_sample(void) {
 2067              		.loc 1 1141 0
 2068              		.cfi_startproc
 2069              		@ args = 0, pretend = 0, frame = 0
 2070              		@ frame_needed = 0, uses_anonymous_args = 0
 2071              		@ link register save eliminated.
1142:../src/main.c **** 	return (uint16_t) ADC1->DR;
 2072              		.loc 1 1142 0
 2073 0000 014B     		ldr	r3, .L131
 2074 0002 D86C     		ldr	r0, [r3, #76]
1143:../src/main.c **** }
 2075              		.loc 1 1143 0
 2076 0004 80B2     		uxth	r0, r0
 2077 0006 7047     		bx	lr
 2078              	.L132:
 2079              		.align	2
 2080              	.L131:
 2081 0008 00240140 		.word	1073816576
 2082              		.cfi_endproc
 2083              	.LFE114:
 2085              		.section	.text.main_service_cpu_load_ticks,"ax",%progbits
 2086              		.align	1
 2087              		.global	main_service_cpu_load_ticks
 2088              		.syntax unified
 2089              		.thumb
 2090              		.thumb_func
 2091              		.fpu softvfp
 2093              	main_service_cpu_load_ticks:
 2094              	.LFB115:
1144:../src/main.c **** 
1145:../src/main.c **** void main_service_cpu_load_ticks(void) {
 2095              		.loc 1 1145 0
 2096              		.cfi_startproc
 2097              		@ args = 0, pretend = 0, frame = 0
 2098              		@ frame_needed = 0, uses_anonymous_args = 0
 2099              		@ link register save eliminated.
 2100              	.LVL175:
1146:../src/main.c **** 
1147:../src/main.c **** 	uint32_t cpu_ticks_load = 0;
1148:../src/main.c **** 
1149:../src/main.c **** 	// the biggest this result will be the biggest load the CPU is handling
1150:../src/main.c **** 	cpu_ticks_load = main_idle_cpu_ticks - main_current_cpu_idle_ticks;
 2101              		.loc 1 1150 0
 2102 0000 074B     		ldr	r3, .L134
 2103 0002 1868     		ldr	r0, [r3]
 2104 0004 0749     		ldr	r1, .L134+4
 2105 0006 0B68     		ldr	r3, [r1]
 2106 0008 C21A     		subs	r2, r0, r3
 2107              	.LVL176:
1151:../src/main.c **** 
1152:../src/main.c **** 	// calculate the cpu load
1153:../src/main.c **** 	main_cpu_load = (int8_t) ((cpu_ticks_load * 100) / main_idle_cpu_ticks);
 2108              		.loc 1 1153 0
 2109 000a 6423     		movs	r3, #100
 2110 000c 03FB02F3 		mul	r3, r3, r2
 2111 0010 B3FBF0F3 		udiv	r3, r3, r0
 2112 0014 044A     		ldr	r2, .L134+8
 2113              	.LVL177:
 2114 0016 1370     		strb	r3, [r2]
1154:../src/main.c **** 
1155:../src/main.c **** 	// reset the tick counter back to zero;
1156:../src/main.c **** 	main_current_cpu_idle_ticks = 0;
 2115              		.loc 1 1156 0
 2116 0018 0023     		movs	r3, #0
 2117 001a 0B60     		str	r3, [r1]
 2118              	.LVL178:
1157:../src/main.c **** }
 2119              		.loc 1 1157 0
 2120 001c 7047     		bx	lr
 2121              	.L135:
 2122 001e 00BF     		.align	2
 2123              	.L134:
 2124 0020 00000000 		.word	.LANCHOR5
 2125 0024 00000000 		.word	.LANCHOR14
 2126 0028 00000000 		.word	.LANCHOR24
 2127              		.cfi_endproc
 2128              	.LFE115:
 2130              		.global	kiss10m
 2131              		.global	digidrop10m
 2132              		.global	digi10m
 2133              		.global	tx10m
 2134              		.global	rx10m
 2135              		.comm	after_tx_lock,1,1
 2136              		.global	main_crc_result
 2137              		.global	main_umb_retval
 2138              		.global	buffer_len
 2139              		.global	retval
 2140              		.global	main_symbol_s
 2141              		.global	main_symbol_f
 2142              		.comm	main_string_longitude,9,4
 2143              		.comm	main_string_latitude,9,4
 2144              		.comm	main_own_aprs_msg,160,4
 2145              		.comm	main_own_aprs_msg_len,1,1
 2146              		.global	main_own_path_ln
 2147              		.comm	main_own_path,21,4
 2148              		.comm	main_afsk,1092,4
 2149              		.comm	main_ax25,536,4
 2150              		.global	main_modbus_rtu_master_enabled
 2151              		.global	main_davis_serial_enabled
 2152              		.global	main_kiss_enabled
 2153              		.comm	main_target_wx_baudrate,4,4
 2154              		.comm	main_target_kiss_baudrate,4,4
 2155              		.comm	main_wx_srl_ctx_ptr,4,4
 2156              		.comm	main_kiss_srl_ctx_ptr,4,4
 2157              		.comm	main_wx_srl_ctx,88,4
 2158              		.comm	main_kiss_srl_ctx,88,4
 2159              		.global	main_ten_second_pool_timer
 2160              		.global	main_two_second_pool_timer
 2161              		.global	main_one_second_pool_timer
 2162              		.global	main_one_minute_pool_timer
 2163              		.global	main_wx_sensors_pool_timer
 2164              		.global	main_cpu_load
 2165              		.global	main_current_cpu_idle_ticks
 2166              		.global	main_idle_cpu_ticks
 2167              		.global	master_time
 2168              		.global	main_config_data_rtu
 2169              		.global	main_config_data_umb
 2170              		.global	main_config_data_wx_sources
 2171              		.global	main_config_data_basic
 2172              		.global	main_config_data_mode
 2173              		.section	.bss.buffer_len,"aw",%nobits
 2174              		.align	1
 2175              		.set	.LANCHOR16,. + 0
 2178              	buffer_len:
 2179 0000 0000     		.space	2
 2180              		.section	.bss.digi10m,"aw",%nobits
 2181              		.align	1
 2184              	digi10m:
 2185 0000 0000     		.space	2
 2186              		.section	.bss.digidrop10m,"aw",%nobits
 2187              		.align	1
 2190              	digidrop10m:
 2191 0000 0000     		.space	2
 2192              		.section	.bss.kiss10m,"aw",%nobits
 2193              		.align	1
 2194              		.set	.LANCHOR18,. + 0
 2197              	kiss10m:
 2198 0000 0000     		.space	2
 2199              		.section	.bss.main_config_data_basic,"aw",%nobits
 2200              		.align	2
 2201              		.set	.LANCHOR1,. + 0
 2204              	main_config_data_basic:
 2205 0000 00000000 		.space	4
 2206              		.section	.bss.main_config_data_mode,"aw",%nobits
 2207              		.align	2
 2208              		.set	.LANCHOR2,. + 0
 2211              	main_config_data_mode:
 2212 0000 00000000 		.space	4
 2213              		.section	.bss.main_config_data_rtu,"aw",%nobits
 2214              		.align	2
 2215              		.set	.LANCHOR8,. + 0
 2218              	main_config_data_rtu:
 2219 0000 00000000 		.space	4
 2220              		.section	.bss.main_config_data_umb,"aw",%nobits
 2221              		.align	2
 2222              		.set	.LANCHOR11,. + 0
 2225              	main_config_data_umb:
 2226 0000 00000000 		.space	4
 2227              		.section	.bss.main_config_data_wx_sources,"aw",%nobits
 2228              		.align	2
 2229              		.set	.LANCHOR13,. + 0
 2232              	main_config_data_wx_sources:
 2233 0000 00000000 		.space	4
 2234              		.section	.bss.main_cpu_load,"aw",%nobits
 2235              		.set	.LANCHOR24,. + 0
 2238              	main_cpu_load:
 2239 0000 00       		.space	1
 2240              		.section	.bss.main_crc_result,"aw",%nobits
 2241              		.align	2
 2242              		.set	.LANCHOR0,. + 0
 2245              	main_crc_result:
 2246 0000 00000000 		.space	4
 2247              		.section	.bss.main_current_cpu_idle_ticks,"aw",%nobits
 2248              		.align	2
 2249              		.set	.LANCHOR14,. + 0
 2252              	main_current_cpu_idle_ticks:
 2253 0000 00000000 		.space	4
 2254              		.section	.bss.main_davis_serial_enabled,"aw",%nobits
 2255              		.set	.LANCHOR7,. + 0
 2258              	main_davis_serial_enabled:
 2259 0000 00       		.space	1
 2260              		.section	.bss.main_idle_cpu_ticks,"aw",%nobits
 2261              		.align	2
 2262              		.set	.LANCHOR5,. + 0
 2265              	main_idle_cpu_ticks:
 2266 0000 00000000 		.space	4
 2267              		.section	.bss.main_modbus_rtu_master_enabled,"aw",%nobits
 2268              		.set	.LANCHOR9,. + 0
 2271              	main_modbus_rtu_master_enabled:
 2272 0000 00       		.space	1
 2273              		.section	.bss.main_own_path_ln,"aw",%nobits
 2274              		.set	.LANCHOR10,. + 0
 2277              	main_own_path_ln:
 2278 0000 00       		.space	1
 2279              		.section	.bss.master_time,"aw",%nobits
 2280              		.align	2
 2281              		.set	.LANCHOR17,. + 0
 2284              	master_time:
 2285 0000 00000000 		.space	4
 2286              		.section	.bss.rx10m,"aw",%nobits
 2287              		.align	1
 2288              		.set	.LANCHOR15,. + 0
 2291              	rx10m:
 2292 0000 0000     		.space	2
 2293              		.section	.bss.tx10m,"aw",%nobits
 2294              		.align	1
 2297              	tx10m:
 2298 0000 0000     		.space	2
 2299              		.section	.data.main_kiss_enabled,"aw",%progbits
 2300              		.set	.LANCHOR6,. + 0
 2303              	main_kiss_enabled:
 2304 0000 01       		.byte	1
 2305              		.section	.data.main_one_minute_pool_timer,"aw",%progbits
 2306              		.align	2
 2307              		.set	.LANCHOR20,. + 0
 2310              	main_one_minute_pool_timer:
 2311 0000 C8AF0000 		.word	45000
 2312              		.section	.data.main_one_second_pool_timer,"aw",%progbits
 2313              		.align	2
 2314              		.set	.LANCHOR21,. + 0
 2317              	main_one_second_pool_timer:
 2318 0000 E8030000 		.word	1000
 2319              		.section	.data.main_symbol_f,"aw",%progbits
 2320              		.set	.LANCHOR3,. + 0
 2323              	main_symbol_f:
 2324 0000 2F       		.byte	47
 2325              		.section	.data.main_symbol_s,"aw",%progbits
 2326              		.set	.LANCHOR4,. + 0
 2329              	main_symbol_s:
 2330 0000 23       		.byte	35
 2331              		.section	.data.main_ten_second_pool_timer,"aw",%progbits
 2332              		.align	2
 2333              		.set	.LANCHOR23,. + 0
 2336              	main_ten_second_pool_timer:
 2337 0000 10270000 		.word	10000
 2338              		.section	.data.main_two_second_pool_timer,"aw",%progbits
 2339              		.align	2
 2340              		.set	.LANCHOR22,. + 0
 2343              	main_two_second_pool_timer:
 2344 0000 D0070000 		.word	2000
 2345              		.section	.data.main_umb_retval,"aw",%progbits
 2348              	main_umb_retval:
 2349 0000 7F       		.byte	127
 2350              		.section	.data.main_wx_sensors_pool_timer,"aw",%progbits
 2351              		.align	2
 2352              		.set	.LANCHOR19,. + 0
 2355              	main_wx_sensors_pool_timer:
 2356 0000 DCFF0000 		.word	65500
 2357              		.section	.data.retval,"aw",%progbits
 2358              		.set	.LANCHOR12,. + 0
 2361              	retval:
 2362 0000 64       		.byte	100
 2363              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 2364              		.align	2
 2365              	.LC0:
 2366 0000 3D257325 		.ascii	"=%s%c%c%s%c%c %s\000"
 2366      63256325 
 2366      73256325 
 2366      63202573 
 2366      00
 2367              		.text
 2368              	.Letext0:
 2369              		.file 5 "../system/include/cmsis/stm32f10x.h"
 2370              		.file 6 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 2371              		.file 7 "../system/include/cmsis/system_stm32f10x.h"
 2372              		.file 8 "../system/include/aprs/cfifo.h"
 2373              		.file 9 "../system/include/aprs/afsk.h"
 2374              		.file 10 "../system/include/aprs/ax25.h"
 2375              		.file 11 "../system/include/drivers/serial.h"
 2376              		.file 12 "../include/config_data.h"
 2377              		.file 13 "../include/main.h"
 2378              		.file 14 "../include/delay.h"
 2379              		.file 15 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 2380              		.file 16 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 2381              		.file 17 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/st
 2382              		.file 18 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 2383              		.file 19 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h"
 2384              		.file 20 "../include/config_data_externs.h"
 2385              		.file 21 "../include/configuration_handler.h"
 2386              		.file 22 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/unistd.h"
 2387              		.file 23 "../system/include/./drivers/dallas.h"
 2388              		.file 24 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/math.h"
 2389              		.file 25 "../system/include/./drivers/ms5611.h"
 2390              		.file 26 "../system/include/./umb_master/umb_qf_t.h"
 2391              		.file 27 "../system/include/./ve_direct_protocol/raw_struct.h"
 2392              		.file 28 "../system/include/./ve_direct_protocol/average_struct.h"
 2393              		.file 29 "../system/include/drivers/analog_anemometer.h"
 2394              		.file 30 "../system/include/davis_vantage/davis_qf_t.h"
 2395              		.file 31 "../system/include/davis_vantage/davis_loop_t.h"
 2396              		.file 32 "../system/include/umb_master/umb_frame_t.h"
 2397              		.file 33 "../system/include/umb_master/umb_retval_t.h"
 2398              		.file 34 "../system/include/umb_master/umb_state_t.h"
 2399              		.file 35 "../system/include/umb_master/umb_context_t.h"
 2400              		.file 36 "../system/include/umb_master/umb_call_reason.h"
 2401              		.file 37 "../system/include/drivers/bme280.h"
 2402              		.file 38 "../include/rte_wx.h"
 2403              		.file 39 "../include/rte_pv.h"
 2404              		.file 40 "../include/rte_main.h"
 2405              		.file 41 "../system/include/modbus_rtu/rtu_register_data_t.h"
 2406              		.file 42 "../system/include/modbus_rtu/rtu_exception_t.h"
 2407              		.file 43 "../system/include/modbus_rtu/rtu_pool_queue_t.h"
 2408              		.file 44 "../include/rte_rtu.h"
 2409              		.file 45 "../include/wx_handler.h"
 2410              		.file 46 "../system/include/drivers/i2c.h"
 2411              		.file 47 "../src/../system/include/modbus_rtu/rtu_serial_io.h"
 2412              		.file 48 "../src/../system/include/davis_vantage/davis.h"
 2413              		.file 49 "../include/KissCommunication.h"
 2414              		.file 50 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/string.h"
 2415              		.file 51 "../system/include/stm32f1-stdperiph/misc.h"
 2416              		.file 52 "../include/packet_tx_handler.h"
 2417              		.file 53 "../include/float_to_string.h"
 2418              		.file 54 "../include/io.h"
 2419              		.file 55 "../include/pwr_switch.h"
 2420              		.file 56 "../system/include/drivers/f1/gpio_conf_stm32f1x.h"
 2421              		.file 57 "../system/include/stm32f1-stdperiph/stm32f10x_gpio.h"
 2422              		.file 58 "../include/PathConfig.h"
 2423              		.file 59 "../system/include/aprs/dac.h"
 2424              		.file 60 "../system/include/aprs/digi.h"
 2425              		.file 61 "../include/it_handlers.h"
 2426              		.file 62 "../system/include/aprs/afsk_pr.h"
 2427              		.file 63 "../include/TimerConfig.h"
 2428              		.file 64 "../system/include/umb_master/umb_master.h"
 2429              		.file 65 "/usr/local/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdio.h"
 2430              		.file 66 "../system/include/ve_direct_protocol/parser.h"
 2431              		.file 67 "../system/include/umb_master/umb_0x26_status.h"
 2432              		.file 68 "../system/include/aprs/beacon.h"
 2433              		.file 69 "../system/include/aprs/wx.h"
 2434              		.file 70 "../system/include/umb_master/umb_channel_pool.h"
 2435              		.file 71 "../src/../system/include/davis_vantage/davis_parsers.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccVeSao3.s:16     .text.message_callback:0000000000000000 $t
     /tmp/ccVeSao3.s:22     .text.message_callback:0000000000000000 message_callback
     /tmp/ccVeSao3.s:37     .text.main:0000000000000000 $t
     /tmp/ccVeSao3.s:44     .text.main:0000000000000000 main
     /tmp/ccVeSao3.s:408    .text.main:0000000000000230 $d
     /tmp/ccVeSao3.s:418    .text.main:000000000000023c $d
                            *COM*:00000000000000a0 main_own_aprs_msg
                            *COM*:0000000000000009 main_string_latitude
                            *COM*:0000000000000009 main_string_longitude
     /tmp/ccVeSao3.s:437    .text.main:0000000000000280 $t
     /tmp/ccVeSao3.s:876    .text.main:0000000000000544 $d
                            *COM*:0000000000000004 main_kiss_srl_ctx_ptr
                            *COM*:0000000000000058 main_kiss_srl_ctx
                            *COM*:0000000000000004 main_wx_srl_ctx_ptr
                            *COM*:0000000000000058 main_wx_srl_ctx
                            *COM*:0000000000000004 main_target_kiss_baudrate
                            *COM*:0000000000000004 main_target_wx_baudrate
                            *COM*:0000000000000015 main_own_path
                            *COM*:0000000000000444 main_afsk
                            *COM*:0000000000000218 main_ax25
     /tmp/ccVeSao3.s:906    .text.main:00000000000005b4 $t
     /tmp/ccVeSao3.s:1280   .text.main:0000000000000804 $d
                            *COM*:0000000000000001 main_own_aprs_msg_len
     /tmp/ccVeSao3.s:1330   .text.main:00000000000008c0 $t
     /tmp/ccVeSao3.s:1716   .text.main:0000000000000b50 $d
     /tmp/ccVeSao3.s:1754   .text.main:0000000000000be0 $t
     /tmp/ccVeSao3.s:2027   .text.main:0000000000000d90 $d
     /tmp/ccVeSao3.s:2058   .text.main_get_adc_sample:0000000000000000 $t
     /tmp/ccVeSao3.s:2065   .text.main_get_adc_sample:0000000000000000 main_get_adc_sample
     /tmp/ccVeSao3.s:2081   .text.main_get_adc_sample:0000000000000008 $d
     /tmp/ccVeSao3.s:2086   .text.main_service_cpu_load_ticks:0000000000000000 $t
     /tmp/ccVeSao3.s:2093   .text.main_service_cpu_load_ticks:0000000000000000 main_service_cpu_load_ticks
     /tmp/ccVeSao3.s:2124   .text.main_service_cpu_load_ticks:0000000000000020 $d
     /tmp/ccVeSao3.s:2197   .bss.kiss10m:0000000000000000 kiss10m
     /tmp/ccVeSao3.s:2190   .bss.digidrop10m:0000000000000000 digidrop10m
     /tmp/ccVeSao3.s:2184   .bss.digi10m:0000000000000000 digi10m
     /tmp/ccVeSao3.s:2297   .bss.tx10m:0000000000000000 tx10m
     /tmp/ccVeSao3.s:2291   .bss.rx10m:0000000000000000 rx10m
                            *COM*:0000000000000001 after_tx_lock
     /tmp/ccVeSao3.s:2245   .bss.main_crc_result:0000000000000000 main_crc_result
     /tmp/ccVeSao3.s:2348   .data.main_umb_retval:0000000000000000 main_umb_retval
     /tmp/ccVeSao3.s:2178   .bss.buffer_len:0000000000000000 buffer_len
     /tmp/ccVeSao3.s:2361   .data.retval:0000000000000000 retval
     /tmp/ccVeSao3.s:2329   .data.main_symbol_s:0000000000000000 main_symbol_s
     /tmp/ccVeSao3.s:2323   .data.main_symbol_f:0000000000000000 main_symbol_f
     /tmp/ccVeSao3.s:2277   .bss.main_own_path_ln:0000000000000000 main_own_path_ln
     /tmp/ccVeSao3.s:2271   .bss.main_modbus_rtu_master_enabled:0000000000000000 main_modbus_rtu_master_enabled
     /tmp/ccVeSao3.s:2258   .bss.main_davis_serial_enabled:0000000000000000 main_davis_serial_enabled
     /tmp/ccVeSao3.s:2303   .data.main_kiss_enabled:0000000000000000 main_kiss_enabled
     /tmp/ccVeSao3.s:2336   .data.main_ten_second_pool_timer:0000000000000000 main_ten_second_pool_timer
     /tmp/ccVeSao3.s:2343   .data.main_two_second_pool_timer:0000000000000000 main_two_second_pool_timer
     /tmp/ccVeSao3.s:2317   .data.main_one_second_pool_timer:0000000000000000 main_one_second_pool_timer
     /tmp/ccVeSao3.s:2310   .data.main_one_minute_pool_timer:0000000000000000 main_one_minute_pool_timer
     /tmp/ccVeSao3.s:2355   .data.main_wx_sensors_pool_timer:0000000000000000 main_wx_sensors_pool_timer
     /tmp/ccVeSao3.s:2238   .bss.main_cpu_load:0000000000000000 main_cpu_load
     /tmp/ccVeSao3.s:2252   .bss.main_current_cpu_idle_ticks:0000000000000000 main_current_cpu_idle_ticks
     /tmp/ccVeSao3.s:2265   .bss.main_idle_cpu_ticks:0000000000000000 main_idle_cpu_ticks
     /tmp/ccVeSao3.s:2284   .bss.master_time:0000000000000000 master_time
     /tmp/ccVeSao3.s:2218   .bss.main_config_data_rtu:0000000000000000 main_config_data_rtu
     /tmp/ccVeSao3.s:2225   .bss.main_config_data_umb:0000000000000000 main_config_data_umb
     /tmp/ccVeSao3.s:2232   .bss.main_config_data_wx_sources:0000000000000000 main_config_data_wx_sources
     /tmp/ccVeSao3.s:2204   .bss.main_config_data_basic:0000000000000000 main_config_data_basic
     /tmp/ccVeSao3.s:2211   .bss.main_config_data_mode:0000000000000000 main_config_data_mode
     /tmp/ccVeSao3.s:2174   .bss.buffer_len:0000000000000000 $d
     /tmp/ccVeSao3.s:2181   .bss.digi10m:0000000000000000 $d
     /tmp/ccVeSao3.s:2187   .bss.digidrop10m:0000000000000000 $d
     /tmp/ccVeSao3.s:2193   .bss.kiss10m:0000000000000000 $d
     /tmp/ccVeSao3.s:2200   .bss.main_config_data_basic:0000000000000000 $d
     /tmp/ccVeSao3.s:2207   .bss.main_config_data_mode:0000000000000000 $d
     /tmp/ccVeSao3.s:2214   .bss.main_config_data_rtu:0000000000000000 $d
     /tmp/ccVeSao3.s:2221   .bss.main_config_data_umb:0000000000000000 $d
     /tmp/ccVeSao3.s:2228   .bss.main_config_data_wx_sources:0000000000000000 $d
     /tmp/ccVeSao3.s:2239   .bss.main_cpu_load:0000000000000000 $d
     /tmp/ccVeSao3.s:2241   .bss.main_crc_result:0000000000000000 $d
     /tmp/ccVeSao3.s:2248   .bss.main_current_cpu_idle_ticks:0000000000000000 $d
     /tmp/ccVeSao3.s:2259   .bss.main_davis_serial_enabled:0000000000000000 $d
     /tmp/ccVeSao3.s:2261   .bss.main_idle_cpu_ticks:0000000000000000 $d
     /tmp/ccVeSao3.s:2272   .bss.main_modbus_rtu_master_enabled:0000000000000000 $d
     /tmp/ccVeSao3.s:2278   .bss.main_own_path_ln:0000000000000000 $d
     /tmp/ccVeSao3.s:2280   .bss.master_time:0000000000000000 $d
     /tmp/ccVeSao3.s:2287   .bss.rx10m:0000000000000000 $d
     /tmp/ccVeSao3.s:2294   .bss.tx10m:0000000000000000 $d
     /tmp/ccVeSao3.s:2306   .data.main_one_minute_pool_timer:0000000000000000 $d
     /tmp/ccVeSao3.s:2313   .data.main_one_second_pool_timer:0000000000000000 $d
     /tmp/ccVeSao3.s:2332   .data.main_ten_second_pool_timer:0000000000000000 $d
     /tmp/ccVeSao3.s:2339   .data.main_two_second_pool_timer:0000000000000000 $d
     /tmp/ccVeSao3.s:2351   .data.main_wx_sensors_pool_timer:0000000000000000 $d
     /tmp/ccVeSao3.s:2364   .rodata.main.str1.4:0000000000000000 $d
                           .group:0000000000000000 wm4.0.879aed89c359f5856fe69c61b3590d34
                           .group:0000000000000000 wm4.stm32f10x.h.51.c58ea26c5150470d52680f0bbaa7049c
                           .group:0000000000000000 wm4.stdintgcc.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:0000000000000000 wm4.core_cm3.h.82.57a0f9dd004efa579f86574376281d2f
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.67d2dcde6a14ff518eedc1d545d89a76
                           .group:0000000000000000 wm4.core_cm3.h.183.ecfd9c316d6f10b73648f6e579b02c8b
                           .group:0000000000000000 wm4.stm32f10x.h.522.a925aafc848b1f088438cf0e9b167b78
                           .group:0000000000000000 wm4.stm32f10x_adc.h.89.9f2b285fa0070185d48a05b61a05798c
                           .group:0000000000000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:0000000000000000 wm4.stm32f10x_can.h.25.e5e43f6bbc8fc7c8aa30ef2bc5610ced
                           .group:0000000000000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:0000000000000000 wm4.stm32f10x_dac.h.25.d946244edf026333094657d55ea894b8
                           .group:0000000000000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:0000000000000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:0000000000000000 wm4.stm32f10x_exti.h.25.f52c69aad7d1994be5b2c4e2b8f4c595
                           .group:0000000000000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:0000000000000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:0000000000000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:0000000000000000 wm4.stm32f10x_i2c.h.25.b124ac2c620f8ebddd92b6d95ca62176
                           .group:0000000000000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:0000000000000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:0000000000000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:0000000000000000 wm4.stm32f10x_sdio.h.25.fb0db079f5c1412c40f359319f7c40b0
                           .group:0000000000000000 wm4.stm32f10x_spi.h.25.3f6dfa4abe177efb3c6f5a717c06b323
                           .group:0000000000000000 wm4.stm32f10x_tim.h.25.f709106ba77b314e6b070693f89f3c56
                           .group:0000000000000000 wm4.stm32f10x_usart.h.25.2e65e396239d0cc41fd0bf6faa2a32cb
                           .group:0000000000000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:0000000000000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:0000000000000000 wm4.stm32f10x.h.8317.9a8e476d96d33bb2df9a9ad0775bd4a7
                           .group:0000000000000000 wm4.stm32f10x_rcc.h.67.b2ac3f177eed824c6a7f550d9877061e
                           .group:0000000000000000 wm4.gpio_conf_stm32f1x.h.2.27cf130122f64ee972f9a45626090ff6
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.macros.h.2.7a7a5ac48d4160b7481c806e80b68442
                           .group:0000000000000000 wm4.config.h.2.f5e96167cb26b0ce97c5e7513a95bc8b
                           .group:0000000000000000 wm4.afsk.h.17.cf8f922069680e152e1eddb76cd4cc82
                           .group:0000000000000000 wm4.ax25.h.18.077e42a4af9016476e34900472a8fe18
                           .group:0000000000000000 wm4.serial.h.2.a574250aaf0d4f0a93b2db72031afff6
                           .group:0000000000000000 wm4.config_data.h.9.cbb5077079a900a357fa92ca07074f04
                           .group:0000000000000000 wm4.main.h.8.55d65ee492038dbe94ebf355bcb87510
                           .group:0000000000000000 wm4.LedConfig.h.9.4d8a7e6bb86dda658c789f8aaf01aaee
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.newlib.h.18.5e5ca3429233af402d406a202f1fc1ac
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:0000000000000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:0000000000000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
                           .group:0000000000000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
                           .group:0000000000000000 wm4.stddef.h.39.ec95e8feac892e292b69dc7ae75b0d64
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:0000000000000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:0000000000000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:0000000000000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:0000000000000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:0000000000000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:0000000000000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:0000000000000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:0000000000000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:0000000000000000 wm4.station_config.h.9.39d8e1c3ae8d42c39bc1698d9fb88942
                           .group:0000000000000000 wm4.unistd.h.2.39165d5b7784d1815ef4b0c4be6df560
                           .group:0000000000000000 wm4.unistd.h.170.da6e816043042c61475c2b1f58468b37
                           .group:0000000000000000 wm4.antilib_adc.h.10.beb33c5f49564637478b9d419893c0dd
                           .group:0000000000000000 wm4.digi.h.14.769ea2ae98162dd36806ccf4982c3c8a
                           .group:0000000000000000 wm4.dallas.h.9.67a8cfc0b128d7b4f1ab07251516b59e
                           .group:0000000000000000 wm4.math.h.13.adb102f7bd7860b1f241e149d6914a1e
                           .group:0000000000000000 wm4.ms5611.h.13.84fbf6afa85557f675e3d85f1be6067c
                           .group:0000000000000000 wm4.average_struct.h.9.41820d0d7dc25dca8a9005c6d1a8bb5f
                           .group:0000000000000000 wm4.telemetry.h.21.a87436b8ee86f5e60170454e063be1e3
                           .group:0000000000000000 wm4.parser.h.9.2d68c8669e0bffa77926bbb9bf5a2aba
                           .group:0000000000000000 wm4.analog_anemometer.h.9.8c21570f6fc3dcd7763ba4d0d5168e3c
                           .group:0000000000000000 wm4.umb_frame_t.h.9.05796095a57acd1575f07118cb6ab058
                           .group:0000000000000000 wm4.umb_defines.h.9.77e79b84cd2dd9a74204aaeb1ca9d6be
                           .group:0000000000000000 wm4.bme280.h.9.aefe05f9329372f30337537cea488dce
                           .group:0000000000000000 wm4.rte_wx.h.30.cb80bd87f9fae81b43459954f1781e96
                           .group:0000000000000000 wm4.rtu_configuration.h.9.225559723a46d58da796e0ac6cb0b2ac
                           .group:0000000000000000 wm4.wx_handler.h.9.c93580273a56e0f9036dfe7a28400494
                           .group:0000000000000000 wm4.davis_retval_def.h.9.025968613fbef7aa10339676702cdb4e
                           .group:0000000000000000 wm4.davis.h.18.aa92228551d9a3484fe55d6024d1b87b
                           .group:0000000000000000 wm4.davis_parsers.h.15.1cf20b7725fbc6387ea18eb1ec35046c
                           .group:0000000000000000 wm4.KissCommunication.h.17.f1e76db053f07badac1040f3bea74fb3

UNDEFINED SYMBOLS
memset
NVIC_PriorityGroupConfig
SysTick_CLKSourceConfig
rte_wx_init
rte_rtu_init
configuration_handler_check_crc
configuration_get_register
configuration_handler_restore_default_first
configuration_set_bits_register
configuration_handler_restore_default_second
configuration_clear_bits_register
configuration_handler_load_configuration
packet_tx_configure
float_to_string
SystemCoreClock
rte_main_hard_faults
rte_main_boot_cycles
rte_main_reboot_req
config_data_pgm_cntr_first
config_data_pgm_cntr_second
delay_set
io_oc_init
wx_pwr_switch_init
wx_pwr_switch_periodic_handle
delay_fixed_with_count
Configure_GPIO
GPIO_ResetBits
srl_init
ConfigPath
i2cConfigure
led_init
AFSK_Init
ax25_init
DA_Init
io_ext_watchdog_config
digi_init
it_handlers_set_priorities
ADCStartConfig
DACStartConfig
srl_receive_data
io_oc_output_low
TimerConfig
io_ext_watchdog_service
srl_switch_timeout
davis_init
davis_wake_up
davis_control_backlight
delay_fixed
davis_trigger_rxcheck_packet
srl_usart1_tx_buffer
srl_usart1_rx_buffer
srl_usart2_tx_buffer
srl_usart2_rx_buffer
rte_wx_davis_station_avaliable
rtu_serial_init
srl_switch_tx_delay
rtu_serial_start
dallas_init
umb_master_init
analog_anemometer_init
ms5611_reset
ms5611_read_calibration
ms5611_trigger_measure
bme280_reset
bme280_setup
bme280_read_calibration
sprintf
ax25_sendVia_toBuffer
srl_start_tx
wx_get_all_measurements
ve_direct_parser_init
umb_0x26_status_request
beacon_send_own
srl_wait_for_tx_completion
SendWXFrameToBuffer
rte_rtu_pool_queue
rte_wx_dallas_average
rte_wx_umb_context
rte_wx_ms5611_qf
SensorCalData
rte_wx_bme280_qf
bme280_calibration_data
rte_pv_average
rte_pv_struct
rte_wx_umb
rte_wx_average_winddirection
rte_wx_max_windspeed
rte_wx_average_windspeed
rte_wx_humidity
rte_wx_pressure_valid
rte_wx_temperature_average_external_valid
SendKISSToHost
wx_pool_anemometer
GPIO_ReadInputDataBit
srl_get_rx_buffer
ve_direct_cut_to_checksum
ve_direct_validate_checksum
ve_direct_parse_to_raw_struct
ve_direct_add_to_average
ve_direct_get_averages
ve_direct_set_sys_voltage
ve_direct_store_errors
ax25_new_msg_rx_flag
ax25_rxed_frame
rte_main_trigger_modbus_status
rte_main_trigger_wx_packet
rte_pv_load_current
rte_pv_cell_voltage
rte_pv_battery_voltage
rte_pv_battery_current
rte_pv_sys_voltage
rte_pv_last_error
rte_pv_messages_count
rte_pv_corrupted_messages_count
umb_pooling_handler
srl_get_num_bytes_rxed
ParseReceivedKISS
davis_loop_packet_pooler
davis_rxcheck_packet_pooler
rtu_serial_pool
rtu_serial_get_status_string
ax25_sendVia
afsk_txStart
packet_tx_handler
analog_anemometer_direction_handler
analog_anemometer_direction_reset
wx_check_force_i2c_reset
packet_tx_send_wx_frame
umb_channel_pool
umb_get_current_qf
davis_trigger_loop_packet
davis_parsers_loop
rte_wx_davis_loop_packet_avaliable
rte_wx_umb_qf
rte_wx_davis_loop_content
